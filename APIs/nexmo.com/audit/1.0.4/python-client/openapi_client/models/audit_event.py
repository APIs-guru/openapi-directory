# coding: utf-8

"""
    Audit API

    The Vonage Audit API allows you to view details of changes to your account. More information is available at <https://developer.nexmo.com/audit/overview>. _Please note that the Audit API is currently in Beta_ 

    The version of the OpenAPI document: 1.0.4
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audit_event_context import AuditEventContext
from openapi_client.models.event_link import EventLink
from openapi_client.models.event_types import EventTypes
from typing import Optional, Set
from typing_extensions import Self

class AuditEvent(BaseModel):
    """
    AuditEvent
    """ # noqa: E501
    links: Optional[EventLink] = Field(default=None, alias="_links")
    account_id: Optional[StrictStr] = Field(default=None, description="The NEXMO_API_KEY of the Vonage API account that the audit event is associated with.")
    context: Optional[AuditEventContext] = None
    created_at: Optional[date] = Field(default=None, description="When the audit event was created.")
    event_type: Optional[EventTypes] = None
    event_type_description: Optional[StrictStr] = Field(default=None, description="A description of the event type")
    id: Optional[StrictStr] = Field(default=None, description="UUID of the audit event")
    source: Optional[StrictStr] = Field(default=None, description="The source of the event. CD: Customer Dashboard DEVAPI: via Developer API ")
    source_country: Optional[StrictStr] = Field(default=None, description="ISO 3166-1 Alpha-2 country code recorded for the event.")
    source_description: Optional[StrictStr] = Field(default=None, description="Description of the audit event source.")
    source_ip: Optional[StrictStr] = Field(default=None, description="The IP address used to make the account change.")
    user_email: Optional[StrictStr] = Field(default=None, description="Email of the user whose account the audit event is associated with.")
    user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user that the audit event is associated with.")
    __properties: ClassVar[List[str]] = ["_links", "account_id", "context", "created_at", "event_type", "event_type_description", "id", "source", "source_country", "source_description", "source_ip", "user_email", "user_id"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CD', 'DEVAPI']):
            raise ValueError("must be one of enum values ('CD', 'DEVAPI')")
        return value

    @field_validator('source_description')
    def source_description_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Customer Dashboard', 'Developer API']):
            raise ValueError("must be one of enum values ('Customer Dashboard', 'Developer API')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": EventLink.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "account_id": obj.get("account_id"),
            "context": AuditEventContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "created_at": obj.get("created_at"),
            "event_type": obj.get("event_type"),
            "event_type_description": obj.get("event_type_description"),
            "id": obj.get("id"),
            "source": obj.get("source"),
            "source_country": obj.get("source_country"),
            "source_description": obj.get("source_description"),
            "source_ip": obj.get("source_ip"),
            "user_email": obj.get("user_email"),
            "user_id": obj.get("user_id")
        })
        return _obj



# coding: utf-8

"""
    Conversation API

    The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.

    The version of the OpenAPI document: 1.0.1
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_members200_response_embedded import GetMembers200ResponseEmbedded
from openapi_client.models.get_members200_response_links import GetMembers200ResponseLinks
from typing import Optional, Set
from typing_extensions import Self

class GetMembers200Response(BaseModel):
    """
    GetMembers200Response
    """ # noqa: E501
    embedded: Optional[GetMembers200ResponseEmbedded] = Field(default=None, alias="_embedded")
    links: Optional[GetMembers200ResponseLinks] = Field(default=None, alias="_links")
    page_size: Optional[StrictInt] = Field(default=None, description="The number of results returned on this page")
    __properties: ClassVar[List[str]] = ["_embedded", "_links", "page_size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMembers200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embedded
        if self.embedded:
            _dict['_embedded'] = self.embedded.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMembers200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_embedded": GetMembers200ResponseEmbedded.from_dict(obj["_embedded"]) if obj.get("_embedded") is not None else None,
            "_links": GetMembers200ResponseLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "page_size": obj.get("page_size")
        })
        return _obj



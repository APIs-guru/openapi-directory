# coding: utf-8

"""
    Conversation API

    The Conversation API enables you to build conversation features where communication can take place across multiple mediums including IP Messaging, PSTN Voice, SMS and WebRTC Audio and Video. The context of the conversations is maintained though each communication event taking place within a conversation, no matter the medium.

    The version of the OpenAPI document: 1.0.1
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_client.models.custom_event import CustomEvent
from openapi_client.models.member_invited_event import MemberInvitedEvent
from openapi_client.models.member_left_event import MemberLeftEvent
from openapi_client.models.text_event import TextEvent
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

ALLEVENTS_ANY_OF_SCHEMAS = ["CustomEvent", "MemberInvitedEvent", "MemberLeftEvent", "TextEvent"]

class AllEvents(BaseModel):
    """
    AllEvents
    """

    # data type: TextEvent
    anyof_schema_1_validator: Optional[TextEvent] = None
    # data type: CustomEvent
    anyof_schema_2_validator: Optional[CustomEvent] = None
    # data type: MemberInvitedEvent
    anyof_schema_3_validator: Optional[MemberInvitedEvent] = None
    # data type: MemberLeftEvent
    anyof_schema_4_validator: Optional[MemberLeftEvent] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "CustomEvent", "MemberInvitedEvent", "MemberLeftEvent", "TextEvent" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = AllEvents.model_construct()
        error_messages = []
        # validate data type: TextEvent
        if not isinstance(v, TextEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextEvent`")
        else:
            return v

        # validate data type: CustomEvent
        if not isinstance(v, CustomEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CustomEvent`")
        else:
            return v

        # validate data type: MemberInvitedEvent
        if not isinstance(v, MemberInvitedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MemberInvitedEvent`")
        else:
            return v

        # validate data type: MemberLeftEvent
        if not isinstance(v, MemberLeftEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MemberLeftEvent`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in AllEvents with anyOf schemas: CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[TextEvent] = None
        try:
            instance.actual_instance = TextEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[CustomEvent] = None
        try:
            instance.actual_instance = CustomEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[MemberInvitedEvent] = None
        try:
            instance.actual_instance = MemberInvitedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[MemberLeftEvent] = None
        try:
            instance.actual_instance = MemberLeftEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AllEvents with anyOf schemas: CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CustomEvent, MemberInvitedEvent, MemberLeftEvent, TextEvent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



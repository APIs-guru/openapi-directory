# coding: utf-8

"""
    Reports API

    The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 

    The version of the OpenAPI document: 2.2.2
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.direction import Direction
from openapi_client.models.links import Links
from openapi_client.models.product_messages import ProductMessages
from openapi_client.models.request_status import RequestStatus
from typing import Optional, Set
from typing_extensions import Self

class MessagesResponseGetReport(BaseModel):
    """
    Messages
    """ # noqa: E501
    links: Optional[Links] = Field(default=None, alias="_links")
    account_id: StrictStr = Field(description="The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.")
    callback_url: Optional[StrictStr] = Field(default=None, description="URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).")
    date_end: Optional[date] = Field(default=None, description="ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. ")
    date_start: Optional[date] = Field(default=None, description="ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. ")
    include_subaccounts: Optional[StrictBool] = Field(default=False, description="Whether to include subaccounts or not.")
    items_count: Optional[StrictInt] = Field(default=None, description="The number of rows in the resulting file (when report has been completed).")
    product: ProductMessages
    receive_time: Optional[date] = Field(default=None, description="Time at which the report request was received by the service.")
    request_id: Optional[StrictStr] = Field(default=None, description="UUID of the request.")
    request_status: Optional[RequestStatus] = None
    start_time: Optional[date] = Field(default=None, description="Time at which the report processing of the report has started.")
    direction: Direction
    var_from: Optional[StrictStr] = Field(default=None, description="Request from this number.", alias="from")
    id: Optional[StrictStr] = Field(default=None, description="Search only messages with the specified uuid.")
    include_message: Optional[StrictBool] = Field(default=False, description="Include the text of messages in the report.")
    to: Optional[StrictStr] = Field(default=None, description="Request to this number.")
    __properties: ClassVar[List[str]] = ["_links", "account_id", "callback_url", "date_end", "date_start", "include_subaccounts", "items_count", "product", "receive_time", "request_id", "request_status", "start_time", "direction", "from", "id", "include_message", "to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagesResponseGetReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagesResponseGetReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": Links.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "account_id": obj.get("account_id"),
            "callback_url": obj.get("callback_url"),
            "date_end": obj.get("date_end"),
            "date_start": obj.get("date_start"),
            "include_subaccounts": obj.get("include_subaccounts") if obj.get("include_subaccounts") is not None else False,
            "items_count": obj.get("items_count"),
            "product": obj.get("product"),
            "receive_time": obj.get("receive_time"),
            "request_id": obj.get("request_id"),
            "request_status": obj.get("request_status"),
            "start_time": obj.get("start_time"),
            "direction": obj.get("direction"),
            "from": obj.get("from"),
            "id": obj.get("id"),
            "include_message": obj.get("include_message") if obj.get("include_message") is not None else False,
            "to": obj.get("to")
        })
        return _obj



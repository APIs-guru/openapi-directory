# coding: utf-8

"""
    Reports API

    The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 

    The version of the OpenAPI document: 2.2.2
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.get_records422_response_one_of import GetRecords422ResponseOneOf
from openapi_client.models.get_records422_response_one_of1 import GetRecords422ResponseOneOf1
from openapi_client.models.get_records422_response_one_of2 import GetRecords422ResponseOneOf2
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

GETRECORDS422RESPONSE_ONE_OF_SCHEMAS = ["GetRecords422ResponseOneOf", "GetRecords422ResponseOneOf1", "GetRecords422ResponseOneOf2"]

class GetRecords422Response(BaseModel):
    """
    GetRecords422Response
    """
    # data type: GetRecords422ResponseOneOf
    oneof_schema_1_validator: Optional[GetRecords422ResponseOneOf] = None
    # data type: GetRecords422ResponseOneOf1
    oneof_schema_2_validator: Optional[GetRecords422ResponseOneOf1] = None
    # data type: GetRecords422ResponseOneOf2
    oneof_schema_3_validator: Optional[GetRecords422ResponseOneOf2] = None
    actual_instance: Optional[Union[GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2]] = None
    one_of_schemas: Set[str] = { "GetRecords422ResponseOneOf", "GetRecords422ResponseOneOf1", "GetRecords422ResponseOneOf2" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetRecords422Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetRecords422ResponseOneOf
        if not isinstance(v, GetRecords422ResponseOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetRecords422ResponseOneOf`")
        else:
            match += 1
        # validate data type: GetRecords422ResponseOneOf1
        if not isinstance(v, GetRecords422ResponseOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetRecords422ResponseOneOf1`")
        else:
            match += 1
        # validate data type: GetRecords422ResponseOneOf2
        if not isinstance(v, GetRecords422ResponseOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetRecords422ResponseOneOf2`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetRecords422Response with oneOf schemas: GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetRecords422Response with oneOf schemas: GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetRecords422ResponseOneOf
        try:
            instance.actual_instance = GetRecords422ResponseOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetRecords422ResponseOneOf1
        try:
            instance.actual_instance = GetRecords422ResponseOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetRecords422ResponseOneOf2
        try:
            instance.actual_instance = GetRecords422ResponseOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetRecords422Response with oneOf schemas: GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetRecords422Response with oneOf schemas: GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetRecords422ResponseOneOf, GetRecords422ResponseOneOf1, GetRecords422ResponseOneOf2]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Reports API

    The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 

    The version of the OpenAPI document: 2.2.2
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_client.models.csv_asr import CsvAsr
from openapi_client.models.csv_in_app_voice import CsvInAppVoice
from openapi_client.models.csv_messages_inbound import CsvMessagesInbound
from openapi_client.models.csv_messages_outbound import CsvMessagesOutbound
from openapi_client.models.csv_ni import CsvNi
from openapi_client.models.csv_sms_inbound import CsvSmsInbound
from openapi_client.models.csv_sms_outbound import CsvSmsOutbound
from openapi_client.models.csv_verify import CsvVerify
from openapi_client.models.csv_voice import CsvVoice
from openapi_client.models.csv_websockets import CsvWebsockets
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

DOWNLOADREPORT200RESPONSEREPORTINNER_ANY_OF_SCHEMAS = ["CsvAsr", "CsvInAppVoice", "CsvMessagesInbound", "CsvMessagesOutbound", "CsvNi", "CsvSmsInbound", "CsvSmsOutbound", "CsvVerify", "CsvVoice", "CsvWebsockets"]

class DownloadReport200ResponseReportInner(BaseModel):
    """
    DownloadReport200ResponseReportInner
    """

    # data type: CsvSmsOutbound
    anyof_schema_1_validator: Optional[CsvSmsOutbound] = None
    # data type: CsvSmsInbound
    anyof_schema_2_validator: Optional[CsvSmsInbound] = None
    # data type: CsvVoice
    anyof_schema_3_validator: Optional[CsvVoice] = None
    # data type: CsvInAppVoice
    anyof_schema_4_validator: Optional[CsvInAppVoice] = None
    # data type: CsvWebsockets
    anyof_schema_5_validator: Optional[CsvWebsockets] = None
    # data type: CsvVerify
    anyof_schema_6_validator: Optional[CsvVerify] = None
    # data type: CsvNi
    anyof_schema_7_validator: Optional[CsvNi] = None
    # data type: CsvMessagesOutbound
    anyof_schema_8_validator: Optional[CsvMessagesOutbound] = None
    # data type: CsvMessagesInbound
    anyof_schema_9_validator: Optional[CsvMessagesInbound] = None
    # data type: CsvAsr
    anyof_schema_10_validator: Optional[CsvAsr] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[CsvAsr, CsvInAppVoice, CsvMessagesInbound, CsvMessagesOutbound, CsvNi, CsvSmsInbound, CsvSmsOutbound, CsvVerify, CsvVoice, CsvWebsockets]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "CsvAsr", "CsvInAppVoice", "CsvMessagesInbound", "CsvMessagesOutbound", "CsvNi", "CsvSmsInbound", "CsvSmsOutbound", "CsvVerify", "CsvVoice", "CsvWebsockets" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = DownloadReport200ResponseReportInner.model_construct()
        error_messages = []
        # validate data type: CsvSmsOutbound
        if not isinstance(v, CsvSmsOutbound):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvSmsOutbound`")
        else:
            return v

        # validate data type: CsvSmsInbound
        if not isinstance(v, CsvSmsInbound):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvSmsInbound`")
        else:
            return v

        # validate data type: CsvVoice
        if not isinstance(v, CsvVoice):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvVoice`")
        else:
            return v

        # validate data type: CsvInAppVoice
        if not isinstance(v, CsvInAppVoice):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvInAppVoice`")
        else:
            return v

        # validate data type: CsvWebsockets
        if not isinstance(v, CsvWebsockets):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvWebsockets`")
        else:
            return v

        # validate data type: CsvVerify
        if not isinstance(v, CsvVerify):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvVerify`")
        else:
            return v

        # validate data type: CsvNi
        if not isinstance(v, CsvNi):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvNi`")
        else:
            return v

        # validate data type: CsvMessagesOutbound
        if not isinstance(v, CsvMessagesOutbound):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvMessagesOutbound`")
        else:
            return v

        # validate data type: CsvMessagesInbound
        if not isinstance(v, CsvMessagesInbound):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvMessagesInbound`")
        else:
            return v

        # validate data type: CsvAsr
        if not isinstance(v, CsvAsr):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CsvAsr`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in DownloadReport200ResponseReportInner with anyOf schemas: CsvAsr, CsvInAppVoice, CsvMessagesInbound, CsvMessagesOutbound, CsvNi, CsvSmsInbound, CsvSmsOutbound, CsvVerify, CsvVoice, CsvWebsockets. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[CsvSmsOutbound] = None
        try:
            instance.actual_instance = CsvSmsOutbound.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[CsvSmsInbound] = None
        try:
            instance.actual_instance = CsvSmsInbound.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[CsvVoice] = None
        try:
            instance.actual_instance = CsvVoice.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[CsvInAppVoice] = None
        try:
            instance.actual_instance = CsvInAppVoice.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[CsvWebsockets] = None
        try:
            instance.actual_instance = CsvWebsockets.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[CsvVerify] = None
        try:
            instance.actual_instance = CsvVerify.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[CsvNi] = None
        try:
            instance.actual_instance = CsvNi.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[CsvMessagesOutbound] = None
        try:
            instance.actual_instance = CsvMessagesOutbound.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[CsvMessagesInbound] = None
        try:
            instance.actual_instance = CsvMessagesInbound.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[CsvAsr] = None
        try:
            instance.actual_instance = CsvAsr.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DownloadReport200ResponseReportInner with anyOf schemas: CsvAsr, CsvInAppVoice, CsvMessagesInbound, CsvMessagesOutbound, CsvNi, CsvSmsInbound, CsvSmsOutbound, CsvVerify, CsvVoice, CsvWebsockets. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CsvAsr, CsvInAppVoice, CsvMessagesInbound, CsvMessagesOutbound, CsvNi, CsvSmsInbound, CsvSmsOutbound, CsvVerify, CsvVoice, CsvWebsockets]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



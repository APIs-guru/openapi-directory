# coding: utf-8

"""
    Reports API

    The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 

    The version of the OpenAPI document: 2.2.2
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.asr import ASR
from openapi_client.models.conversations import CONVERSATIONS
from openapi_client.models.inappvoice import INAPPVOICE
from openapi_client.models.messages import MESSAGES
from openapi_client.models.numberinsight import NUMBERINSIGHT
from openapi_client.models.sms import SMS
from openapi_client.models.verifyapi import VERIFYAPI
from openapi_client.models.voicecall import VOICECALL
from openapi_client.models.websocketcall import WEBSOCKETCALL
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATEASYNCREPORTREQUEST_ONE_OF_SCHEMAS = ["ASR", "CONVERSATIONS", "INAPPVOICE", "MESSAGES", "NUMBERINSIGHT", "SMS", "VERIFYAPI", "VOICECALL", "WEBSOCKETCALL"]

class CreateAsyncReportRequest(BaseModel):
    """
    CreateAsyncReportRequest
    """
    # data type: SMS
    oneof_schema_1_validator: Optional[SMS] = None
    # data type: VOICECALL
    oneof_schema_2_validator: Optional[VOICECALL] = None
    # data type: INAPPVOICE
    oneof_schema_3_validator: Optional[INAPPVOICE] = None
    # data type: WEBSOCKETCALL
    oneof_schema_4_validator: Optional[WEBSOCKETCALL] = None
    # data type: VERIFYAPI
    oneof_schema_5_validator: Optional[VERIFYAPI] = None
    # data type: NUMBERINSIGHT
    oneof_schema_6_validator: Optional[NUMBERINSIGHT] = None
    # data type: MESSAGES
    oneof_schema_7_validator: Optional[MESSAGES] = None
    # data type: CONVERSATIONS
    oneof_schema_8_validator: Optional[CONVERSATIONS] = None
    # data type: ASR
    oneof_schema_9_validator: Optional[ASR] = None
    actual_instance: Optional[Union[ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL]] = None
    one_of_schemas: Set[str] = { "ASR", "CONVERSATIONS", "INAPPVOICE", "MESSAGES", "NUMBERINSIGHT", "SMS", "VERIFYAPI", "VOICECALL", "WEBSOCKETCALL" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateAsyncReportRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: SMS
        if not isinstance(v, SMS):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SMS`")
        else:
            match += 1
        # validate data type: VOICECALL
        if not isinstance(v, VOICECALL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VOICECALL`")
        else:
            match += 1
        # validate data type: INAPPVOICE
        if not isinstance(v, INAPPVOICE):
            error_messages.append(f"Error! Input type `{type(v)}` is not `INAPPVOICE`")
        else:
            match += 1
        # validate data type: WEBSOCKETCALL
        if not isinstance(v, WEBSOCKETCALL):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WEBSOCKETCALL`")
        else:
            match += 1
        # validate data type: VERIFYAPI
        if not isinstance(v, VERIFYAPI):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VERIFYAPI`")
        else:
            match += 1
        # validate data type: NUMBERINSIGHT
        if not isinstance(v, NUMBERINSIGHT):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NUMBERINSIGHT`")
        else:
            match += 1
        # validate data type: MESSAGES
        if not isinstance(v, MESSAGES):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MESSAGES`")
        else:
            match += 1
        # validate data type: CONVERSATIONS
        if not isinstance(v, CONVERSATIONS):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CONVERSATIONS`")
        else:
            match += 1
        # validate data type: ASR
        if not isinstance(v, ASR):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ASR`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateAsyncReportRequest with oneOf schemas: ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateAsyncReportRequest with oneOf schemas: ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SMS
        try:
            instance.actual_instance = SMS.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VOICECALL
        try:
            instance.actual_instance = VOICECALL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into INAPPVOICE
        try:
            instance.actual_instance = INAPPVOICE.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WEBSOCKETCALL
        try:
            instance.actual_instance = WEBSOCKETCALL.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VERIFYAPI
        try:
            instance.actual_instance = VERIFYAPI.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NUMBERINSIGHT
        try:
            instance.actual_instance = NUMBERINSIGHT.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MESSAGES
        try:
            instance.actual_instance = MESSAGES.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CONVERSATIONS
        try:
            instance.actual_instance = CONVERSATIONS.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ASR
        try:
            instance.actual_instance = ASR.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateAsyncReportRequest with oneOf schemas: ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateAsyncReportRequest with oneOf schemas: ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Reports API

    The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 

    The version of the OpenAPI document: 2.2.2
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CsvNi(BaseModel):
    """
    Number Insight
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.")
    country: Optional[StrictStr] = Field(default=None, description="Country of the looked up number.")
    country_name: Optional[StrictStr] = Field(default=None, description="Country name of the looked up number.")
    currency: Optional[StrictStr] = Field(default=None, description="Currency of the price of the request.")
    date_received: Optional[date] = Field(default=None, description="Date of the request.")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the owner of the looked up number.")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the owner of the looked up number.")
    network: Optional[StrictStr] = Field(default=None, description="Network of the looked up number.")
    network_name: Optional[StrictStr] = Field(default=None, description="Network name of the looked up number.")
    network_type: Optional[StrictStr] = Field(default=None, description="Network type of the looked up number.")
    number: Optional[StrictStr] = Field(default=None, description="Number looked up for this request.")
    ported: Optional[StrictStr] = Field(default=None, description="Is the looked up number ported.")
    product_type: Optional[StrictStr] = Field(default=None, description="Type of Number Insight request.")
    reachable: Optional[StrictStr] = Field(default=None, description="Is the looked up number reachable.")
    request_id: Optional[StrictStr] = Field(default=None, description="UUID of the request.")
    response_code: Optional[StrictStr] = Field(default=None, description="Response code of the Number Insight request.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the Number Insight request.")
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total price of the request.")
    valid: Optional[StrictStr] = Field(default=None, description="Is the looked up number valid.")
    __properties: ClassVar[List[str]] = ["account_id", "country", "country_name", "currency", "date_received", "first_name", "last_name", "network", "network_name", "network_type", "number", "ported", "product_type", "reachable", "request_id", "response_code", "status", "total_price", "valid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CsvNi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CsvNi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "country": obj.get("country"),
            "country_name": obj.get("country_name"),
            "currency": obj.get("currency"),
            "date_received": obj.get("date_received"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "network": obj.get("network"),
            "network_name": obj.get("network_name"),
            "network_type": obj.get("network_type"),
            "number": obj.get("number"),
            "ported": obj.get("ported"),
            "product_type": obj.get("product_type"),
            "reachable": obj.get("reachable"),
            "request_id": obj.get("request_id"),
            "response_code": obj.get("response_code"),
            "status": obj.get("status"),
            "total_price": obj.get("total_price"),
            "valid": obj.get("valid")
        })
        return _obj



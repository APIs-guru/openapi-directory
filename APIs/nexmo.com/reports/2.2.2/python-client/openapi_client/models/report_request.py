# coding: utf-8

"""
    Reports API

    The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 

    The version of the OpenAPI document: 2.2.2
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.asr import ASR
    from openapi_client.models.conversations import CONVERSATIONS
    from openapi_client.models.in_app_voice import INAPPVOICE
    from openapi_client.models.messages import MESSAGES
    from openapi_client.models.number_insight import NUMBERINSIGHT
    from openapi_client.models.sms import SMS
    from openapi_client.models.verify_api import VERIFYAPI
    from openapi_client.models.voice_call import VOICECALL
    from openapi_client.models.websocket_call import WEBSOCKETCALL

class ReportRequest(BaseModel):
    """
    ReportRequest
    """ # noqa: E501
    account_id: StrictStr = Field(description="The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.")
    callback_url: Optional[StrictStr] = Field(default=None, description="URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).")
    date_end: Optional[date] = Field(default=None, description="ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. <br>If unspecified, defaults to the current time. ")
    date_start: Optional[date] = Field(default=None, description="ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.<br>If unspecified, defaults  to seven days ago. ")
    include_subaccounts: Optional[StrictBool] = Field(default=False, description="Whether to include subaccounts or not.")
    product: Product
    __properties: ClassVar[List[str]] = ["account_id", "callback_url", "date_end", "date_start", "include_subaccounts", "product"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'product'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'ASR': 'ASR','CONVERSATIONS': 'CONVERSATIONS','IN-APP-VOICE': 'INAPPVOICE','MESSAGES': 'MESSAGES','NUMBER-INSIGHT': 'NUMBERINSIGHT','SMS': 'SMS','VERIFY-API': 'VERIFYAPI','VOICE-CALL': 'VOICECALL','WEBSOCKET-CALL': 'WEBSOCKETCALL'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL]]:
        """Create an instance of ReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[ASR, CONVERSATIONS, INAPPVOICE, MESSAGES, NUMBERINSIGHT, SMS, VERIFYAPI, VOICECALL, WEBSOCKETCALL]]:
        """Create an instance of ReportRequest from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'ASR':
            return import_module("openapi_client.models.asr").ASR.from_dict(obj)
        if object_type ==  'CONVERSATIONS':
            return import_module("openapi_client.models.conversations").CONVERSATIONS.from_dict(obj)
        if object_type ==  'INAPPVOICE':
            return import_module("openapi_client.models.in_app_voice").INAPPVOICE.from_dict(obj)
        if object_type ==  'MESSAGES':
            return import_module("openapi_client.models.messages").MESSAGES.from_dict(obj)
        if object_type ==  'NUMBERINSIGHT':
            return import_module("openapi_client.models.number_insight").NUMBERINSIGHT.from_dict(obj)
        if object_type ==  'SMS':
            return import_module("openapi_client.models.sms").SMS.from_dict(obj)
        if object_type ==  'VERIFYAPI':
            return import_module("openapi_client.models.verify_api").VERIFYAPI.from_dict(obj)
        if object_type ==  'VOICECALL':
            return import_module("openapi_client.models.voice_call").VOICECALL.from_dict(obj)
        if object_type ==  'WEBSOCKETCALL':
            return import_module("openapi_client.models.websocket_call").WEBSOCKETCALL.from_dict(obj)

        raise ValueError("ReportRequest failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



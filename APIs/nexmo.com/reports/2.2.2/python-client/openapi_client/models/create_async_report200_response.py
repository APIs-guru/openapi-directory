# coding: utf-8

"""
    Reports API

    The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.  Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).  Only synchronous version supports retrival of data records by message/record ID.  Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records. 

    The version of the OpenAPI document: 2.2.2
    Contact: devrel@vonage.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.asr_response_create_report import AsrResponseCreateReport
from openapi_client.models.conversations_response_create_report import ConversationsResponseCreateReport
from openapi_client.models.in_app_voice_response_create_report import InAppVoiceResponseCreateReport
from openapi_client.models.messages_response_create_report import MessagesResponseCreateReport
from openapi_client.models.number_insight_response_create_report import NumberInsightResponseCreateReport
from openapi_client.models.sms_response_create_report import SmsResponseCreateReport
from openapi_client.models.verify_api_response_create_report import VerifyApiResponseCreateReport
from openapi_client.models.voice_call_response_create_report import VoiceCallResponseCreateReport
from openapi_client.models.websocket_call_response_create_report import WebsocketCallResponseCreateReport
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATEASYNCREPORT200RESPONSE_ONE_OF_SCHEMAS = ["AsrResponseCreateReport", "ConversationsResponseCreateReport", "InAppVoiceResponseCreateReport", "MessagesResponseCreateReport", "NumberInsightResponseCreateReport", "SmsResponseCreateReport", "VerifyApiResponseCreateReport", "VoiceCallResponseCreateReport", "WebsocketCallResponseCreateReport"]

class CreateAsyncReport200Response(BaseModel):
    """
    CreateAsyncReport200Response
    """
    # data type: SmsResponseCreateReport
    oneof_schema_1_validator: Optional[SmsResponseCreateReport] = None
    # data type: VoiceCallResponseCreateReport
    oneof_schema_2_validator: Optional[VoiceCallResponseCreateReport] = None
    # data type: InAppVoiceResponseCreateReport
    oneof_schema_3_validator: Optional[InAppVoiceResponseCreateReport] = None
    # data type: WebsocketCallResponseCreateReport
    oneof_schema_4_validator: Optional[WebsocketCallResponseCreateReport] = None
    # data type: VerifyApiResponseCreateReport
    oneof_schema_5_validator: Optional[VerifyApiResponseCreateReport] = None
    # data type: NumberInsightResponseCreateReport
    oneof_schema_6_validator: Optional[NumberInsightResponseCreateReport] = None
    # data type: MessagesResponseCreateReport
    oneof_schema_7_validator: Optional[MessagesResponseCreateReport] = None
    # data type: ConversationsResponseCreateReport
    oneof_schema_8_validator: Optional[ConversationsResponseCreateReport] = None
    # data type: AsrResponseCreateReport
    oneof_schema_9_validator: Optional[AsrResponseCreateReport] = None
    actual_instance: Optional[Union[AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport]] = None
    one_of_schemas: Set[str] = { "AsrResponseCreateReport", "ConversationsResponseCreateReport", "InAppVoiceResponseCreateReport", "MessagesResponseCreateReport", "NumberInsightResponseCreateReport", "SmsResponseCreateReport", "VerifyApiResponseCreateReport", "VoiceCallResponseCreateReport", "WebsocketCallResponseCreateReport" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateAsyncReport200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: SmsResponseCreateReport
        if not isinstance(v, SmsResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SmsResponseCreateReport`")
        else:
            match += 1
        # validate data type: VoiceCallResponseCreateReport
        if not isinstance(v, VoiceCallResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoiceCallResponseCreateReport`")
        else:
            match += 1
        # validate data type: InAppVoiceResponseCreateReport
        if not isinstance(v, InAppVoiceResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InAppVoiceResponseCreateReport`")
        else:
            match += 1
        # validate data type: WebsocketCallResponseCreateReport
        if not isinstance(v, WebsocketCallResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebsocketCallResponseCreateReport`")
        else:
            match += 1
        # validate data type: VerifyApiResponseCreateReport
        if not isinstance(v, VerifyApiResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VerifyApiResponseCreateReport`")
        else:
            match += 1
        # validate data type: NumberInsightResponseCreateReport
        if not isinstance(v, NumberInsightResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumberInsightResponseCreateReport`")
        else:
            match += 1
        # validate data type: MessagesResponseCreateReport
        if not isinstance(v, MessagesResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MessagesResponseCreateReport`")
        else:
            match += 1
        # validate data type: ConversationsResponseCreateReport
        if not isinstance(v, ConversationsResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ConversationsResponseCreateReport`")
        else:
            match += 1
        # validate data type: AsrResponseCreateReport
        if not isinstance(v, AsrResponseCreateReport):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AsrResponseCreateReport`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateAsyncReport200Response with oneOf schemas: AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateAsyncReport200Response with oneOf schemas: AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SmsResponseCreateReport
        try:
            instance.actual_instance = SmsResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoiceCallResponseCreateReport
        try:
            instance.actual_instance = VoiceCallResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InAppVoiceResponseCreateReport
        try:
            instance.actual_instance = InAppVoiceResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebsocketCallResponseCreateReport
        try:
            instance.actual_instance = WebsocketCallResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VerifyApiResponseCreateReport
        try:
            instance.actual_instance = VerifyApiResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NumberInsightResponseCreateReport
        try:
            instance.actual_instance = NumberInsightResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MessagesResponseCreateReport
        try:
            instance.actual_instance = MessagesResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ConversationsResponseCreateReport
        try:
            instance.actual_instance = ConversationsResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AsrResponseCreateReport
        try:
            instance.actual_instance = AsrResponseCreateReport.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateAsyncReport200Response with oneOf schemas: AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateAsyncReport200Response with oneOf schemas: AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AsrResponseCreateReport, ConversationsResponseCreateReport, InAppVoiceResponseCreateReport, MessagesResponseCreateReport, NumberInsightResponseCreateReport, SmsResponseCreateReport, VerifyApiResponseCreateReport, VoiceCallResponseCreateReport, WebsocketCallResponseCreateReport]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



# coding: utf-8

"""
    Voodoo Manufacturing 3D Print API

    Welcome to the Voodoo Manufacturing API docs!  Your Voodoo Manufacturing API key must be included with each request to the API. The API will look for the key in the \"api_key\" header of the request. <a href=\"https://voodoomfg.com/3d-print-api#get-access\" target=\"_blank\">You can request a key here.</a>  This API provides a programmatic interface for submitting printing orders to Voodoo Manufacturing. The general process for creating an order is as follows:   - Get a list of the available materials with the /materials endpoint   - Upload models to the API with the /models endpoint   - Get quotes for shipping methods with the /order/shipping endpoint   - Get a quote for an order with the /order/create endpoint   - Confirm the order with the /order/confirm endpoint  Uploaded models and orders can be retrieved either in bulk or by id at the /model and /order endpoints, respectively.  In some cases, you may wish to get a quote for a specific model without the context of an order. In this case, you may use the /model/quote (if you've already uploaded the model to the API) or the /model/quote_attrs (lets you quote based on calculated model attributes) endpoints. 

    The version of the OpenAPI document: 2.0.0
    Contact: support@voodoomfg.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_print import OrderPrint
from openapi_client.models.shipping_address import ShippingAddress
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    An order contains all of the relevant information about a confirmed order.
    """ # noqa: E501
    customer_contact_email: Optional[StrictStr] = Field(default=None, description="Customer's email address.")
    customer_name: Optional[StrictStr] = Field(default=None, description="Customer's name.")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for this order. Reference should be displayed and used for lookups instead of this field.")
    notes: Optional[StrictStr] = Field(default=None, description="The notes field that was submitted with this order.")
    prints: Optional[List[OrderPrint]] = None
    reference: Optional[StrictStr] = Field(default=None, description="Unique identifier for this order. Used to retrieve info for a specific order from /order/{order_id}.")
    ship_by: Optional[StrictStr] = Field(default=None, description="Planned ship date for this order.")
    shipping_address: Optional[ShippingAddress] = None
    __properties: ClassVar[List[str]] = ["customer_contact_email", "customer_name", "id", "notes", "prints", "reference", "ship_by", "shipping_address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prints (list)
        _items = []
        if self.prints:
            for _item_prints in self.prints:
                if _item_prints:
                    _items.append(_item_prints.to_dict())
            _dict['prints'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_contact_email": obj.get("customer_contact_email"),
            "customer_name": obj.get("customer_name"),
            "id": obj.get("id"),
            "notes": obj.get("notes"),
            "prints": [OrderPrint.from_dict(_item) for _item in obj["prints"]] if obj.get("prints") is not None else None,
            "reference": obj.get("reference"),
            "ship_by": obj.get("ship_by"),
            "shipping_address": ShippingAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None
        })
        return _obj



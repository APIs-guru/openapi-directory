# coding: utf-8

"""
    Arespass

    Analyzes a password and calculates its entropy.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ec import Ec

class TestEc(unittest.TestCase):
    """Ec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Ec:
        """Test Ec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Ec`
        """
        model = Ec()
        if include_optional:
            return Ec(
                alphabet_sequence = [
                    openapi_client.models.ec_alphabet_sequence_inner.ec_alphabetSequence_inner(
                        char = '', 
                        l33tchar = '', 
                        penalty = 1.337, )
                    ],
                api_version = '',
                detected_keyboard = '',
                efficiency = 1.337,
                entropy = 1.337,
                entropy_distribution = [
                    openapi_client.models.ec_entropy_distribution_inner.ec_entropyDistribution_inner(
                        char = '', 
                        l33tchar = '', 
                        percentage = 1.337, )
                    ],
                ideal_entropy = 1.337,
                keyboard_sequence = [
                    openapi_client.models.ec_keyboard_sequence_inner.ec_keyboardSequence_inner(
                        char = '', 
                        l33tchar = '', 
                        penalty = 1.337, )
                    ],
                l33t_password = '',
                non_uniform_entropy_distribution_penalty = 1.337,
                number_sequence = [
                    openapi_client.models.ec_number_sequence_inner.ec_numberSequence_inner(
                        char = '', 
                        l33tchar = '', 
                        penalty = 1.337, )
                    ],
                password = '',
                password_length = 56,
                penalty = 1.337,
                repeated_chars = [
                    openapi_client.models.ec_repeated_chars_inner.ec_repeatedChars_inner(
                        char = '', 
                        l33tchar = '', 
                        penalty = 1.337, )
                    ],
                request_id = '',
                request_timestamp = 1.337,
                summary = [
                    ''
                    ],
                total = [
                    openapi_client.models.ec_total_inner.ec_total_inner(
                        char = '', 
                        l33tchar = '', 
                        penalty = 1.337, )
                    ],
                words = [
                    openapi_client.models.ec_words_inner.ec_words_inner(
                        char = '', 
                        l33tchar = '', 
                        penalty = 1.337, )
                    ]
            )
        else:
            return Ec(
        )
        """

    def testEc(self):
        """Test Ec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Arespass

    Analyzes a password and calculates its entropy.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.ec_alphabet_sequence_inner import EcAlphabetSequenceInner
from openapi_client.models.ec_entropy_distribution_inner import EcEntropyDistributionInner
from openapi_client.models.ec_keyboard_sequence_inner import EcKeyboardSequenceInner
from openapi_client.models.ec_number_sequence_inner import EcNumberSequenceInner
from openapi_client.models.ec_repeated_chars_inner import EcRepeatedCharsInner
from openapi_client.models.ec_total_inner import EcTotalInner
from openapi_client.models.ec_words_inner import EcWordsInner
from typing import Optional, Set
from typing_extensions import Self

class Ec(BaseModel):
    """
    Ec
    """ # noqa: E501
    alphabet_sequence: Optional[List[EcAlphabetSequenceInner]] = Field(default=None, description="**The penalty applied to each character that has been found to be part of an alphabet sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. ", alias="alphabetSequence")
    api_version: Optional[StrictStr] = Field(default=None, description="**This API version number.** ", alias="apiVersion")
    detected_keyboard: Optional[StrictStr] = Field(default=None, description="**The detected keyboard, QWERTY or Dvorak.** ", alias="detectedKeyboard")
    efficiency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**The ratio entropy / idealEntropy.**  It is a float number in the range [0, 1]. ")
    entropy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**The entropy calculated for the input password.**  It is measured in bits. ")
    entropy_distribution: Optional[List[EcEntropyDistributionInner]] = Field(default=None, description="**The distribution of the calculated entropy among the password characters.** ", alias="entropyDistribution")
    ideal_entropy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**The Shannon entropy.**  The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.  It is measured in bits. ", alias="idealEntropy")
    keyboard_sequence: Optional[List[EcKeyboardSequenceInner]] = Field(default=None, description="**The penalty applied to each character that has been found to be part of a keyboard sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. ", alias="keyboardSequence")
    l33t_password: Optional[StrictStr] = Field(default=None, description="The analyzed password after the l33t substitution.", alias="l33tPassword")
    non_uniform_entropy_distribution_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**The penalty applied to the whole password because of irregular entropy distribution.**  This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. ", alias="nonUniformEntropyDistributionPenalty")
    number_sequence: Optional[List[EcNumberSequenceInner]] = Field(default=None, description="**The penalty applied to each character that has been found to be part of a number sequence.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. ", alias="numberSequence")
    password: Optional[StrictStr] = Field(default=None, description="The analyzed password.")
    password_length: Optional[StrictInt] = Field(default=None, description="The number of characters the password has.", alias="passwordLength")
    penalty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.  Its value is equal to the value of the input parameter *penalty*. ")
    repeated_chars: Optional[List[EcRepeatedCharsInner]] = Field(default=None, description="**The penalty applied to each character that are repeated**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.           ", alias="repeatedChars")
    request_id: Optional[StrictStr] = Field(default=None, description="**The identifier of the request that corresponds to this response.** ", alias="requestId")
    request_timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**The timestamp for this response.**  Milliseconds from the epoch of 1970-01-01T00:00:00Z. ", alias="requestTimestamp")
    summary: Optional[List[StrictStr]] = None
    total: Optional[List[EcTotalInner]] = Field(default=None, description="**The total penalty applied to each character.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. ")
    words: Optional[List[EcWordsInner]] = Field(default=None, description="**The penalty applied to each character that has been found to be part of a word.**  The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1. ")
    __properties: ClassVar[List[str]] = ["alphabetSequence", "apiVersion", "detectedKeyboard", "efficiency", "entropy", "entropyDistribution", "idealEntropy", "keyboardSequence", "l33tPassword", "nonUniformEntropyDistributionPenalty", "numberSequence", "password", "passwordLength", "penalty", "repeatedChars", "requestId", "requestTimestamp", "summary", "total", "words"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alphabet_sequence (list)
        _items = []
        if self.alphabet_sequence:
            for _item_alphabet_sequence in self.alphabet_sequence:
                if _item_alphabet_sequence:
                    _items.append(_item_alphabet_sequence.to_dict())
            _dict['alphabetSequence'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entropy_distribution (list)
        _items = []
        if self.entropy_distribution:
            for _item_entropy_distribution in self.entropy_distribution:
                if _item_entropy_distribution:
                    _items.append(_item_entropy_distribution.to_dict())
            _dict['entropyDistribution'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in keyboard_sequence (list)
        _items = []
        if self.keyboard_sequence:
            for _item_keyboard_sequence in self.keyboard_sequence:
                if _item_keyboard_sequence:
                    _items.append(_item_keyboard_sequence.to_dict())
            _dict['keyboardSequence'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in number_sequence (list)
        _items = []
        if self.number_sequence:
            for _item_number_sequence in self.number_sequence:
                if _item_number_sequence:
                    _items.append(_item_number_sequence.to_dict())
            _dict['numberSequence'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in repeated_chars (list)
        _items = []
        if self.repeated_chars:
            for _item_repeated_chars in self.repeated_chars:
                if _item_repeated_chars:
                    _items.append(_item_repeated_chars.to_dict())
            _dict['repeatedChars'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in total (list)
        _items = []
        if self.total:
            for _item_total in self.total:
                if _item_total:
                    _items.append(_item_total.to_dict())
            _dict['total'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in words (list)
        _items = []
        if self.words:
            for _item_words in self.words:
                if _item_words:
                    _items.append(_item_words.to_dict())
            _dict['words'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alphabetSequence": [EcAlphabetSequenceInner.from_dict(_item) for _item in obj["alphabetSequence"]] if obj.get("alphabetSequence") is not None else None,
            "apiVersion": obj.get("apiVersion"),
            "detectedKeyboard": obj.get("detectedKeyboard"),
            "efficiency": obj.get("efficiency"),
            "entropy": obj.get("entropy"),
            "entropyDistribution": [EcEntropyDistributionInner.from_dict(_item) for _item in obj["entropyDistribution"]] if obj.get("entropyDistribution") is not None else None,
            "idealEntropy": obj.get("idealEntropy"),
            "keyboardSequence": [EcKeyboardSequenceInner.from_dict(_item) for _item in obj["keyboardSequence"]] if obj.get("keyboardSequence") is not None else None,
            "l33tPassword": obj.get("l33tPassword"),
            "nonUniformEntropyDistributionPenalty": obj.get("nonUniformEntropyDistributionPenalty"),
            "numberSequence": [EcNumberSequenceInner.from_dict(_item) for _item in obj["numberSequence"]] if obj.get("numberSequence") is not None else None,
            "password": obj.get("password"),
            "passwordLength": obj.get("passwordLength"),
            "penalty": obj.get("penalty"),
            "repeatedChars": [EcRepeatedCharsInner.from_dict(_item) for _item in obj["repeatedChars"]] if obj.get("repeatedChars") is not None else None,
            "requestId": obj.get("requestId"),
            "requestTimestamp": obj.get("requestTimestamp"),
            "summary": obj.get("summary"),
            "total": [EcTotalInner.from_dict(_item) for _item in obj["total"]] if obj.get("total") is not None else None,
            "words": [EcWordsInner.from_dict(_item) for _item in obj["words"]] if obj.get("words") is not None else None
        })
        return _obj



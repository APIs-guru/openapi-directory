# coding: utf-8

"""
    Go-UPC Barcode-Lookup API

    Find information on products from around the globe. The API supports UPC, EAN, and ISBN barcode numbers, and info returned includes product name, description, brand, image URL, and more.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_product_info200_response_product import GetProductInfo200ResponseProduct
from typing import Optional, Set
from typing_extensions import Self

class GetProductInfo200Response(BaseModel):
    """
    GetProductInfo200Response
    """ # noqa: E501
    barcode_url: Optional[StrictStr] = Field(default=None, description="The URL to the scannable barcode image.", alias="barcodeUrl")
    code_type: Optional[StrictStr] = Field(default=None, description="The type of product code (UPC/EAN/ISBN).", alias="codeType")
    product: Optional[GetProductInfo200ResponseProduct] = None
    __properties: ClassVar[List[str]] = ["barcodeUrl", "codeType", "product"]

    @field_validator('code_type')
    def code_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPC', 'EAN', 'ISBN']):
            raise ValueError("must be one of enum values ('UPC', 'EAN', 'ISBN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetProductInfo200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetProductInfo200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "barcodeUrl": obj.get("barcodeUrl"),
            "codeType": obj.get("codeType"),
            "product": GetProductInfo200ResponseProduct.from_dict(obj["product"]) if obj.get("product") is not None else None
        })
        return _obj



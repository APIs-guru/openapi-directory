# coding: utf-8

"""
    Canada Holidays API

    This API lists all 31 public holidays for all 13 provinces and territories in Canada, including federal holidays.

    The version of the OpenAPI document: 1.8.0
    Contact: paul@pcraig3.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Province(BaseModel):
    """
    A Canadian province or territory 
    """ # noqa: E501
    id: StrictStr = Field(description="Canadian province abbreviations")
    name_en: StrictStr = Field(description="English name", alias="nameEn")
    name_fr: StrictStr = Field(description="French name", alias="nameFr")
    next_holiday: Optional[Holiday] = Field(default=None, alias="nextHoliday")
    optional: Optional[StrictInt] = Field(default=None, description="Whether this province optionally observes a given holiday.")
    provinces: Optional[List[Holiday]] = None
    source_en: StrictStr = Field(description="Name of reference page with public holidays for this region", alias="sourceEn")
    source_link: Annotated[str, Field(strict=True)] = Field(description="URL to public holidays reference for this region", alias="sourceLink")
    __properties: ClassVar[List[str]] = ["id", "nameEn", "nameFr", "nextHoliday", "optional", "provinces", "sourceEn", "sourceLink"]

    @field_validator('id')
    def id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'NT', 'NU', 'true', 'PE', 'QC', 'SK', 'YT']):
            raise ValueError("must be one of enum values ('AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'NT', 'NU', 'true', 'PE', 'QC', 'SK', 'YT')")
        return value

    @field_validator('optional')
    def optional_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1]):
            raise ValueError("must be one of enum values (1)")
        return value

    @field_validator('source_link')
    def source_link_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"https+", value):
            raise ValueError(r"must validate the regular expression /https+/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Province from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of next_holiday
        if self.next_holiday:
            _dict['nextHoliday'] = self.next_holiday.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in provinces (list)
        _items = []
        if self.provinces:
            for _item_provinces in self.provinces:
                if _item_provinces:
                    _items.append(_item_provinces.to_dict())
            _dict['provinces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Province from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "nameEn": obj.get("nameEn"),
            "nameFr": obj.get("nameFr"),
            "nextHoliday": Holiday.from_dict(obj["nextHoliday"]) if obj.get("nextHoliday") is not None else None,
            "optional": obj.get("optional"),
            "provinces": [Holiday.from_dict(_item) for _item in obj["provinces"]] if obj.get("provinces") is not None else None,
            "sourceEn": obj.get("sourceEn"),
            "sourceLink": obj.get("sourceLink")
        })
        return _obj

from openapi_client.models.holiday import Holiday
# TODO: Rewrite to not use raise_errors
Province.model_rebuild(raise_errors=False)


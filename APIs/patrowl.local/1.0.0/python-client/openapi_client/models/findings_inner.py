# coding: utf-8

"""
    Swagger API-REST for Patrowl Engines

    This is the API documentation for Patrowl Engines usage.

    The version of the OpenAPI document: 1.0.0
    Contact: getsupport@patrowl.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.findings_inner_meta_risk import FindingsInnerMetaRisk
from openapi_client.models.findings_inner_meta_vuln_refs import FindingsInnerMetaVulnRefs
from typing import Optional, Set
from typing_extensions import Self

class FindingsInner(BaseModel):
    """
    FindingsInner
    """ # noqa: E501
    confidence: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    issue_id: Optional[StrictInt] = None
    meta_links: Optional[List[StrictStr]] = None
    meta_risk: Optional[FindingsInnerMetaRisk] = None
    meta_tags: Optional[List[StrictStr]] = None
    meta_vuln_refs: Optional[FindingsInnerMetaVulnRefs] = None
    raw: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    solution: Optional[StrictStr] = None
    target_addrs: Optional[List[StrictStr]] = None
    target_proto: Optional[List[StrictStr]] = None
    timestamp: Optional[datetime] = None
    title: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["confidence", "description", "issue_id", "meta_links", "meta_risk", "meta_tags", "meta_vuln_refs", "raw", "severity", "solution", "target_addrs", "target_proto", "timestamp", "title", "type"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['info', 'low', 'medium', 'high']):
            raise ValueError("must be one of enum values ('info', 'low', 'medium', 'high')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindingsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta_risk
        if self.meta_risk:
            _dict['meta_risk'] = self.meta_risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meta_vuln_refs
        if self.meta_vuln_refs:
            _dict['meta_vuln_refs'] = self.meta_vuln_refs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindingsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "description": obj.get("description"),
            "issue_id": obj.get("issue_id"),
            "meta_links": obj.get("meta_links"),
            "meta_risk": FindingsInnerMetaRisk.from_dict(obj["meta_risk"]) if obj.get("meta_risk") is not None else None,
            "meta_tags": obj.get("meta_tags"),
            "meta_vuln_refs": FindingsInnerMetaVulnRefs.from_dict(obj["meta_vuln_refs"]) if obj.get("meta_vuln_refs") is not None else None,
            "raw": obj.get("raw"),
            "severity": obj.get("severity"),
            "solution": obj.get("solution"),
            "target_addrs": obj.get("target_addrs"),
            "target_proto": obj.get("target_proto"),
            "timestamp": obj.get("timestamp"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



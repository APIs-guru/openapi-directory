# coding: utf-8

"""
    1,000,000+ Recipe and Grocery List API (v2)

    #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).

    The version of the OpenAPI document: partner
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.grocery_list_api import GroceryListApi


class TestGroceryListApi(unittest.TestCase):
    """GroceryListApi unit test stubs"""

    def setUp(self) -> None:
        self.api = GroceryListApi()

    def tearDown(self) -> None:
        pass

    def test_grocery_list_add_recipe(self) -> None:
        """Test case for grocery_list_add_recipe

        Add a Recipe to the grocery list.  In the request data, pass in recipeId, scale (scale=1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that              the lines in the recipe should be marked in a \"pending\" (unconfirmed by user) state.
        """
        pass

    def test_grocery_list_delete(self) -> None:
        """Test case for grocery_list_delete

        Delete all the items on a grocery list; faster operation than a sync with deleted items.
        """
        pass

    def test_grocery_list_delete_item_by_guid(self) -> None:
        """Test case for grocery_list_delete_item_by_guid

        /grocerylist/item/{guid}  DELETE will delete this item assuming you own it.
        """
        pass

    def test_grocery_list_department(self) -> None:
        """Test case for grocery_list_department

        Departmentalize a list of strings -- used for ad-hoc grocery list item addition
        """
        pass

    def test_grocery_list_get(self) -> None:
        """Test case for grocery_list_get

        Get the user's grocery list.  User is determined by Basic Authentication.
        """
        pass

    def test_grocery_list_grocery_list_item_guid(self) -> None:
        """Test case for grocery_list_grocery_list_item_guid

        Update a grocery item by GUID
        """
        pass

    def test_grocery_list_grocery_list_remove_marked_items(self) -> None:
        """Test case for grocery_list_grocery_list_remove_marked_items

        Clears the checked lines.
        """
        pass

    def test_grocery_list_post(self) -> None:
        """Test case for grocery_list_post

        Add a single line item to the grocery list
        """
        pass

    def test_grocery_list_post_grocery_list_sync(self) -> None:
        """Test case for grocery_list_post_grocery_list_sync

        Synchronize the grocery list.  Call this with a POST to /grocerylist/sync
        """
        pass

    def test_grocerylist_item_post(self) -> None:
        """Test case for grocerylist_item_post

        Add a single line item to the grocery list
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    1,000,000+ Recipe and Grocery List API (v2)

    #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).

    The version of the OpenAPI document: partner
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.recipe_api import RecipeApi


class TestRecipeApi(unittest.TestCase):
    """RecipeApi unit test stubs"""

    def setUp(self) -> None:
        self.api = RecipeApi()

    def tearDown(self) -> None:
        pass

    def test_recipe_auto_complete(self) -> None:
        """Test case for recipe_auto_complete

        Given a query, return recipe titles starting with query. Query must be at least 3 chars in length.
        """
        pass

    def test_recipe_auto_complete_all_recipes(self) -> None:
        """Test case for recipe_auto_complete_all_recipes

        Automatics the complete all recipes.
        """
        pass

    def test_recipe_auto_complete_my_recipes(self) -> None:
        """Test case for recipe_auto_complete_my_recipes

        Automatics the complete my recipes.
        """
        pass

    def test_recipe_categories(self) -> None:
        """Test case for recipe_categories

        Get a list of recipe categories (the ID field can be used for include_cat in search parameters)
        """
        pass

    def test_recipe_delete(self) -> None:
        """Test case for recipe_delete

        Delete a Recipe (you must be authenticated as an owner of the recipe)
        """
        pass

    def test_recipe_feedback(self) -> None:
        """Test case for recipe_feedback

        Feedback on a Recipe -- for internal BigOven editors
        """
        pass

    def test_recipe_get(self) -> None:
        """Test case for recipe_get

        Return full Recipe detail. Returns 403 if the recipe is owned by someone else.
        """
        pass

    def test_recipe_get_active_recipe(self) -> None:
        """Test case for recipe_get_active_recipe

        Returns last active recipe for the user
        """
        pass

    def test_recipe_get_random_recipe(self) -> None:
        """Test case for recipe_get_random_recipe

        Get a random, home-page-quality Recipe.
        """
        pass

    def test_recipe_get_recipe_with_steps(self) -> None:
        """Test case for recipe_get_recipe_with_steps

        Return full Recipe detail with steps. Returns 403 if the recipe is owned by someone else.
        """
        pass

    def test_recipe_get_step(self) -> None:
        """Test case for recipe_get_step

        Gets recipe single step as text
        """
        pass

    def test_recipe_get_step_number(self) -> None:
        """Test case for recipe_get_step_number

        Returns stored step number and number of steps in recipe
        """
        pass

    def test_recipe_get_steps(self) -> None:
        """Test case for recipe_get_steps

        Stores recipe step number and returns saved step data
        """
        pass

    def test_recipe_get_v2(self) -> None:
        """Test case for recipe_get_v2

        Same as GET recipe but also includes the recipe videos (if any)
        """
        pass

    def test_recipe_post(self) -> None:
        """Test case for recipe_post

        Add a new recipe
        """
        pass

    def test_recipe_put(self) -> None:
        """Test case for recipe_put

        Update a recipe
        """
        pass

    def test_recipe_raves(self) -> None:
        """Test case for recipe_raves

        Get the recipe/comment tuples for those recipes with 4 or 5 star ratings
        """
        pass

    def test_recipe_recent_views(self) -> None:
        """Test case for recipe_recent_views

        Get a list of recipes that the authenticated user has most recently viewed
        """
        pass

    def test_recipe_recipe_search(self) -> None:
        """Test case for recipe_recipe_search

        Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you'd like to limit by course, set the parameter \"include_primarycat\" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \"include_ing\" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \"exclude_ing\" to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25              If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).              Or, you can set username=theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter=added,try,favorites,myrecipes\\r\\n\\r\\n              folder=FolderNameCaseSensitive              coll=ID of Collection
        """
        pass

    def test_recipe_recipe_search_random(self) -> None:
        """Test case for recipe_recipe_search_random

        Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.              Use any_kw to search across the entire recipe.              If you'd like to limit by course, set the parameter \"include_primarycat\" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).              If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.              If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.              To explicitly include an ingredient in your search, set the parameter \"include_ing\" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips              To explicitly exclude an ingredient in your search, set the parameter \"exclude_ing\" to a CSV of up to three ingredients.              All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).              So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25              If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).              Or, you can set username=theirusername              vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps              cuisine              photos              filter=added,try,favorites,myrecipes\\r\\n\\r\\n              folder=FolderNameCaseSensitive              coll=ID of Collection
        """
        pass

    def test_recipe_related(self) -> None:
        """Test case for recipe_related

        Get recipes related to the given recipeId
        """
        pass

    def test_recipe_scan(self) -> None:
        """Test case for recipe_scan

        POST an image as a new RecipeScan request                  1)  Fetch the filename -- DONE                  2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE                  3)  Create 120 thumbnail size  in pics/scan/120 -- DONE                  4)  Insert the CloudTasks record                  5)  Create the HIT                  6)  Update the CloudTasks record with the HIT ID                  7)  Email the requesing user                  8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail
        """
        pass

    def test_recipe_zap_recipe(self) -> None:
        """Test case for recipe_zap_recipe

        Zaps the recipe.
        """
        pass


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    1,000,000+ Recipe and Grocery List API (v2)

    #Documentation    This is the documentation for the partner endpoint of the BigOven Recipe and Grocery List API.    The update brings with it Swagger-based documentation. [Swagger](http://swagger.io) is an emerging standard for describing REST-based APIs, and with this Swagger-compliant endpoint (above), you can make ready-to-go interface libraries for your code via [swagger-codegen](https://github.com/swagger-api/swagger-codegen). For instance, it's easy to generate libraries for Node.js, Java, Ruby, ASP.NET MVC, jQuery, php and more!    You can also try out the endpoint calls with your own api_key right here on this page. Be sure to enter your api_key above to use the \"Try it out!\" buttons on this page.    ##Start Here    Developers new to the BigOven API should start with this version, not with the legacy API. We'll be making improvements to this API over time, and doing only bug fixes on the v1 API.        To pretend you're a BigOven user (for instance, to get your recently viewed recipes or your grocery list), you need to pass in Basic Authentication information in the header, just as with the v1 API. We do now require that you make all calls via https. You need to pass your api_key in with every call, though this can now be done on the header (send a request header \"X-BigOven-API-Key\" set to your api_key value, e.g., Request[\"X-BigOven-API-Key\"]=\"your-key-here\".)    ##Migration Notes    For existing partners, we encourage you to [migrate](https://api2.bigoven.com), and while at this writing we have no hard-and-fast termination date for the v1 API, we strongly prefer that you migrate by January 1, 2017. While the changes aren't overly complex, there are several breaking changes, including refactoring of recipe search and results and removal of support for XML. This is not a simply plug-and-play replacement to the v1 API. With respect to an exclusive focus on JSON, the world has spoken, and it prefers JSON for REST-based API's. We've taken numerous steps to refactor the API to make it more REST-compliant. Note that this v2 API will be the preferred API from this point onward, so we encourage developers to migrate to this new format. We have put together some [migration notes](/web/documentation/migration-to-v2) that we encourage you to read carefully.    ##Photos    See our [photos documentation](https://api2.bigoven.com/web/documentation/recipe-images).     For more information on usage of this API, including features, pricing, rate limits, terms and conditions, please visit the [BigOven API website](https://api2.bigoven.com).

    The version of the OpenAPI document: partner
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.big_oven_model_api_ingredient import BigOvenModelAPIIngredient
from openapi_client.models.big_oven_model_api_nutrition_info import BigOvenModelAPINutritionInfo
from openapi_client.models.big_oven_model_api_user_info import BigOvenModelAPIUserInfo
from openapi_client.models.big_oven_model_instruction_step import BigOvenModelInstructionStep
from typing import Optional, Set
from typing_extensions import Self

class BigOvenModelAPI2Recipe(BaseModel):
    """
    BigOvenModelAPI2Recipe
    """ # noqa: E501
    active_minutes: Optional[StrictInt] = Field(default=None, alias="ActiveMinutes")
    ad_tags: Optional[StrictStr] = Field(default=None, alias="AdTags")
    admin_boost: Optional[StrictInt] = Field(default=None, alias="AdminBoost")
    all_categories_text: Optional[StrictStr] = Field(default=None, alias="AllCategoriesText")
    bookmark_image_url: Optional[StrictStr] = Field(default=None, alias="BookmarkImageURL")
    bookmark_site_logo: Optional[StrictStr] = Field(default=None, alias="BookmarkSiteLogo")
    bookmark_url: Optional[StrictStr] = Field(default=None, alias="BookmarkURL")
    category: Optional[StrictStr] = Field(default=None, alias="Category")
    collection: Optional[StrictStr] = Field(default=None, alias="Collection")
    collection_id: Optional[StrictInt] = Field(default=None, alias="CollectionID")
    creation_date: Optional[datetime] = Field(default=None, alias="CreationDate")
    cuisine: Optional[StrictStr] = Field(default=None, alias="Cuisine")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    favorite_count: Optional[StrictInt] = Field(default=None, alias="FavoriteCount")
    image_squares: Optional[List[StrictInt]] = Field(default=None, alias="ImageSquares")
    image_url: Optional[StrictStr] = Field(default=None, alias="ImageURL")
    ingredients: Optional[List[BigOvenModelAPIIngredient]] = Field(default=None, alias="Ingredients")
    ingredients_text_block: Optional[StrictStr] = Field(default=None, alias="IngredientsTextBlock")
    instructions: Optional[StrictStr] = Field(default=None, alias="Instructions")
    is_bookmark: Optional[StrictBool] = Field(default=None, alias="IsBookmark")
    is_private: Optional[StrictBool] = Field(default=None, alias="IsPrivate")
    is_recipe_scan: Optional[StrictBool] = Field(default=None, alias="IsRecipeScan")
    is_sponsored: Optional[StrictBool] = Field(default=None, alias="IsSponsored")
    last_modified: Optional[datetime] = Field(default=None, alias="LastModified")
    max_image_square: Optional[StrictInt] = Field(default=None, alias="MaxImageSquare")
    medal_count: Optional[StrictInt] = Field(default=None, alias="MedalCount")
    menu_count: Optional[StrictInt] = Field(default=None, alias="MenuCount")
    microcategory: Optional[StrictStr] = Field(default=None, alias="Microcategory")
    notes_count: Optional[StrictInt] = Field(default=None, alias="NotesCount")
    nutrition_info: Optional[BigOvenModelAPINutritionInfo] = Field(default=None, alias="NutritionInfo")
    photo_url: Optional[StrictStr] = Field(default=None, alias="PhotoUrl")
    poster: Optional[BigOvenModelAPIUserInfo] = Field(default=None, alias="Poster")
    primary_ingredient: Optional[StrictStr] = Field(default=None, alias="PrimaryIngredient")
    recipe_id: Optional[StrictInt] = Field(default=None, alias="RecipeID")
    review_count: Optional[StrictInt] = Field(default=None, alias="ReviewCount")
    star_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="StarRating")
    steps: Optional[List[BigOvenModelInstructionStep]] = Field(default=None, alias="Steps")
    subcategory: Optional[StrictStr] = Field(default=None, alias="Subcategory")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    total_minutes: Optional[StrictInt] = Field(default=None, alias="TotalMinutes")
    variant_of_recipe_id: Optional[StrictInt] = Field(default=None, alias="VariantOfRecipeID")
    verified_by_class: Optional[StrictStr] = Field(default=None, alias="VerifiedByClass")
    verified_date_time: Optional[datetime] = Field(default=None, alias="VerifiedDateTime")
    web_url: Optional[StrictStr] = Field(default=None, alias="WebURL")
    yield_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="YieldNumber")
    yield_unit: Optional[StrictStr] = Field(default=None, alias="YieldUnit")
    __properties: ClassVar[List[str]] = ["ActiveMinutes", "AdTags", "AdminBoost", "AllCategoriesText", "BookmarkImageURL", "BookmarkSiteLogo", "BookmarkURL", "Category", "Collection", "CollectionID", "CreationDate", "Cuisine", "Description", "FavoriteCount", "ImageSquares", "ImageURL", "Ingredients", "IngredientsTextBlock", "Instructions", "IsBookmark", "IsPrivate", "IsRecipeScan", "IsSponsored", "LastModified", "MaxImageSquare", "MedalCount", "MenuCount", "Microcategory", "NotesCount", "NutritionInfo", "PhotoUrl", "Poster", "PrimaryIngredient", "RecipeID", "ReviewCount", "StarRating", "Steps", "Subcategory", "Title", "TotalMinutes", "VariantOfRecipeID", "VerifiedByClass", "VerifiedDateTime", "WebURL", "YieldNumber", "YieldUnit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BigOvenModelAPI2Recipe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ingredients (list)
        _items = []
        if self.ingredients:
            for _item_ingredients in self.ingredients:
                if _item_ingredients:
                    _items.append(_item_ingredients.to_dict())
            _dict['Ingredients'] = _items
        # override the default output from pydantic by calling `to_dict()` of nutrition_info
        if self.nutrition_info:
            _dict['NutritionInfo'] = self.nutrition_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of poster
        if self.poster:
            _dict['Poster'] = self.poster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['Steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BigOvenModelAPI2Recipe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActiveMinutes": obj.get("ActiveMinutes"),
            "AdTags": obj.get("AdTags"),
            "AdminBoost": obj.get("AdminBoost"),
            "AllCategoriesText": obj.get("AllCategoriesText"),
            "BookmarkImageURL": obj.get("BookmarkImageURL"),
            "BookmarkSiteLogo": obj.get("BookmarkSiteLogo"),
            "BookmarkURL": obj.get("BookmarkURL"),
            "Category": obj.get("Category"),
            "Collection": obj.get("Collection"),
            "CollectionID": obj.get("CollectionID"),
            "CreationDate": obj.get("CreationDate"),
            "Cuisine": obj.get("Cuisine"),
            "Description": obj.get("Description"),
            "FavoriteCount": obj.get("FavoriteCount"),
            "ImageSquares": obj.get("ImageSquares"),
            "ImageURL": obj.get("ImageURL"),
            "Ingredients": [BigOvenModelAPIIngredient.from_dict(_item) for _item in obj["Ingredients"]] if obj.get("Ingredients") is not None else None,
            "IngredientsTextBlock": obj.get("IngredientsTextBlock"),
            "Instructions": obj.get("Instructions"),
            "IsBookmark": obj.get("IsBookmark"),
            "IsPrivate": obj.get("IsPrivate"),
            "IsRecipeScan": obj.get("IsRecipeScan"),
            "IsSponsored": obj.get("IsSponsored"),
            "LastModified": obj.get("LastModified"),
            "MaxImageSquare": obj.get("MaxImageSquare"),
            "MedalCount": obj.get("MedalCount"),
            "MenuCount": obj.get("MenuCount"),
            "Microcategory": obj.get("Microcategory"),
            "NotesCount": obj.get("NotesCount"),
            "NutritionInfo": BigOvenModelAPINutritionInfo.from_dict(obj["NutritionInfo"]) if obj.get("NutritionInfo") is not None else None,
            "PhotoUrl": obj.get("PhotoUrl"),
            "Poster": BigOvenModelAPIUserInfo.from_dict(obj["Poster"]) if obj.get("Poster") is not None else None,
            "PrimaryIngredient": obj.get("PrimaryIngredient"),
            "RecipeID": obj.get("RecipeID"),
            "ReviewCount": obj.get("ReviewCount"),
            "StarRating": obj.get("StarRating"),
            "Steps": [BigOvenModelInstructionStep.from_dict(_item) for _item in obj["Steps"]] if obj.get("Steps") is not None else None,
            "Subcategory": obj.get("Subcategory"),
            "Title": obj.get("Title"),
            "TotalMinutes": obj.get("TotalMinutes"),
            "VariantOfRecipeID": obj.get("VariantOfRecipeID"),
            "VerifiedByClass": obj.get("VerifiedByClass"),
            "VerifiedDateTime": obj.get("VerifiedDateTime"),
            "WebURL": obj.get("WebURL"),
            "YieldNumber": obj.get("YieldNumber"),
            "YieldUnit": obj.get("YieldUnit")
        })
        return _obj



# coding: utf-8

"""
    shinobiapi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.external_ids import ExternalIDs
from typing import Optional, Set
from typing_extensions import Self

class TVInformation(BaseModel):
    """
    TVInformation
    """ # noqa: E501
    episode_count: Optional[StrictStr] = Field(default=None, alias="EpisodeCount")
    episode_runtime: Optional[StrictStr] = Field(default=None, alias="EpisodeRuntime")
    externals: Optional[List[ExternalIDs]] = Field(default=None, alias="Externals")
    id: Optional[StrictStr] = Field(default=None, alias="ID")
    release_year: Optional[StrictStr] = Field(default=None, alias="ReleaseYear")
    seasons: Optional[StrictStr] = Field(default=None, alias="Seasons")
    show_image: Optional[StrictStr] = Field(default=None, alias="ShowImage")
    show_status: Optional[StrictStr] = Field(default=None, alias="ShowStatus")
    synopsis: Optional[StrictStr] = Field(default=None, alias="Synopsis")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    __properties: ClassVar[List[str]] = ["EpisodeCount", "EpisodeRuntime", "Externals", "ID", "ReleaseYear", "Seasons", "ShowImage", "ShowStatus", "Synopsis", "Title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TVInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in externals (list)
        _items = []
        if self.externals:
            for _item_externals in self.externals:
                if _item_externals:
                    _items.append(_item_externals.to_dict())
            _dict['Externals'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TVInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EpisodeCount": obj.get("EpisodeCount"),
            "EpisodeRuntime": obj.get("EpisodeRuntime"),
            "Externals": [ExternalIDs.from_dict(_item) for _item in obj["Externals"]] if obj.get("Externals") is not None else None,
            "ID": obj.get("ID"),
            "ReleaseYear": obj.get("ReleaseYear"),
            "Seasons": obj.get("Seasons"),
            "ShowImage": obj.get("ShowImage"),
            "ShowStatus": obj.get("ShowStatus"),
            "Synopsis": obj.get("Synopsis"),
            "Title": obj.get("Title")
        })
        return _obj



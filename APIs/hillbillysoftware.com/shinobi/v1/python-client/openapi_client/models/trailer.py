# coding: utf-8

"""
    shinobiapi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Trailer(BaseModel):
    """
    Trailer
    """ # noqa: E501
    episode: Optional[StrictStr] = Field(default=None, alias="Episode")
    key: Optional[StrictStr] = Field(default=None, description="Key for trailer, usually end part of uri for youtube links", alias="Key")
    media_type: Optional[StrictStr] = Field(default=None, description="Returns Media Type, either C (Channel) T (Television) or M (Movie)", alias="MediaType")
    season: Optional[StrictStr] = Field(default=None, alias="Season")
    site: Optional[StrictStr] = Field(default=None, alias="Site")
    trailer_name: Optional[StrictStr] = Field(default=None, alias="TrailerName")
    trailer_size: Optional[StrictStr] = Field(default=None, alias="TrailerSize")
    trailer_type: Optional[StrictStr] = Field(default=None, description="Returns Trailer type (trailer, teaser, channel, episode,credits, clip etc)", alias="TrailerType")
    you_tube_embedded_code: Optional[StrictStr] = Field(default=None, alias="YouTubeEmbeddedCode")
    you_tube_url: Optional[StrictStr] = Field(default=None, alias="YouTubeURL")
    __properties: ClassVar[List[str]] = ["Episode", "Key", "MediaType", "Season", "Site", "TrailerName", "TrailerSize", "TrailerType", "YouTubeEmbeddedCode", "YouTubeURL"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trailer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trailer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Episode": obj.get("Episode"),
            "Key": obj.get("Key"),
            "MediaType": obj.get("MediaType"),
            "Season": obj.get("Season"),
            "Site": obj.get("Site"),
            "TrailerName": obj.get("TrailerName"),
            "TrailerSize": obj.get("TrailerSize"),
            "TrailerType": obj.get("TrailerType"),
            "YouTubeEmbeddedCode": obj.get("YouTubeEmbeddedCode"),
            "YouTubeURL": obj.get("YouTubeURL")
        })
        return _obj



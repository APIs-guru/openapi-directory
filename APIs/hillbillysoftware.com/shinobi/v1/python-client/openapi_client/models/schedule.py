# coding: utf-8

"""
    shinobiapi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Schedule(BaseModel):
    """
    Schedule
    """ # noqa: E501
    air_date: Optional[StrictStr] = Field(default=None, alias="AirDate")
    air_time: Optional[StrictStr] = Field(default=None, alias="AirTime")
    country: Optional[StrictStr] = Field(default=None, alias="Country")
    days_on: Optional[StrictStr] = Field(default=None, alias="DaysOn")
    episode: Optional[StrictStr] = Field(default=None, alias="Episode")
    id: Optional[StrictStr] = Field(default=None, alias="ID")
    image: Optional[StrictStr] = Field(default=None, alias="Image")
    network: Optional[StrictStr] = Field(default=None, alias="Network")
    premiere_date: Optional[StrictStr] = Field(default=None, alias="PremiereDate")
    runtime: Optional[StrictStr] = Field(default=None, alias="Runtime")
    season: Optional[StrictStr] = Field(default=None, alias="Season")
    show_name: Optional[StrictStr] = Field(default=None, alias="ShowName")
    summary: Optional[StrictStr] = Field(default=None, alias="Summary")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    __properties: ClassVar[List[str]] = ["AirDate", "AirTime", "Country", "DaysOn", "Episode", "ID", "Image", "Network", "PremiereDate", "Runtime", "Season", "ShowName", "Summary", "Title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AirDate": obj.get("AirDate"),
            "AirTime": obj.get("AirTime"),
            "Country": obj.get("Country"),
            "DaysOn": obj.get("DaysOn"),
            "Episode": obj.get("Episode"),
            "ID": obj.get("ID"),
            "Image": obj.get("Image"),
            "Network": obj.get("Network"),
            "PremiereDate": obj.get("PremiereDate"),
            "Runtime": obj.get("Runtime"),
            "Season": obj.get("Season"),
            "ShowName": obj.get("ShowName"),
            "Summary": obj.get("Summary"),
            "Title": obj.get("Title")
        })
        return _obj



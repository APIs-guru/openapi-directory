# coding: utf-8

"""
    shinobiapi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.band_albums import BandAlbums
from openapi_client.models.music_video import MusicVideo
from typing import Optional, Set
from typing_extensions import Self

class BandInfoExtended(BaseModel):
    """
    BandInfoExtended
    """ # noqa: E501
    albums: Optional[List[BandAlbums]] = Field(default=None, alias="Albums")
    artist_id: Optional[StrictStr] = Field(default=None, alias="ArtistID")
    banner: Optional[StrictStr] = Field(default=None, alias="Banner")
    biography: Optional[StrictStr] = Field(default=None, alias="Biography")
    disbanded_year: Optional[StrictStr] = Field(default=None, alias="DisbandedYear")
    formation_year: Optional[StrictStr] = Field(default=None, alias="FormationYear")
    genre: Optional[StrictStr] = Field(default=None, alias="Genre")
    logo: Optional[StrictStr] = Field(default=None, alias="Logo")
    members: Optional[StrictStr] = Field(default=None, alias="Members")
    music_brainz_id: Optional[StrictStr] = Field(default=None, alias="MusicBrainzID")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    social_media: Optional[StrictStr] = Field(default=None, alias="SocialMedia")
    videos: Optional[List[MusicVideo]] = Field(default=None, alias="Videos")
    web_site: Optional[StrictStr] = Field(default=None, alias="WebSite")
    __properties: ClassVar[List[str]] = ["Albums", "ArtistID", "Banner", "Biography", "DisbandedYear", "FormationYear", "Genre", "Logo", "Members", "MusicBrainzID", "Name", "SocialMedia", "Videos", "WebSite"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BandInfoExtended from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in albums (list)
        _items = []
        if self.albums:
            for _item_albums in self.albums:
                if _item_albums:
                    _items.append(_item_albums.to_dict())
            _dict['Albums'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item_videos in self.videos:
                if _item_videos:
                    _items.append(_item_videos.to_dict())
            _dict['Videos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BandInfoExtended from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Albums": [BandAlbums.from_dict(_item) for _item in obj["Albums"]] if obj.get("Albums") is not None else None,
            "ArtistID": obj.get("ArtistID"),
            "Banner": obj.get("Banner"),
            "Biography": obj.get("Biography"),
            "DisbandedYear": obj.get("DisbandedYear"),
            "FormationYear": obj.get("FormationYear"),
            "Genre": obj.get("Genre"),
            "Logo": obj.get("Logo"),
            "Members": obj.get("Members"),
            "MusicBrainzID": obj.get("MusicBrainzID"),
            "Name": obj.get("Name"),
            "SocialMedia": obj.get("SocialMedia"),
            "Videos": [MusicVideo.from_dict(_item) for _item in obj["Videos"]] if obj.get("Videos") is not None else None,
            "WebSite": obj.get("WebSite")
        })
        return _obj



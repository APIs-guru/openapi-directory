# coding: utf-8

"""
    Weatherbit - Interactive Swagger UI Documentation

    This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WeatherAlertGroup(BaseModel):
    """
    WeatherAlertGroup
    """ # noqa: E501
    alerts: Optional[List[StrictStr]] = None
    description: Optional[StrictStr] = Field(default=None, description="Full description of weather alert")
    effective_local: Optional[StrictStr] = Field(default=None, description="Issued time local")
    effective_utc: Optional[StrictStr] = Field(default=None, description="Issued time UTC")
    expires_local: Optional[StrictStr] = Field(default=None, description="Expiration time local")
    expires_utc: Optional[StrictStr] = Field(default=None, description="Expiration time UTC")
    severity: Optional[StrictStr] = Field(default=None, description="Severity of weather. (Advisory | Watch | Warning)")
    title: Optional[StrictStr] = Field(default=None, description="Brief description of weather alert")
    uri: Optional[StrictStr] = Field(default=None, description="URI to weather alert")
    __properties: ClassVar[List[str]] = ["alerts", "description", "effective_local", "effective_utc", "expires_local", "expires_utc", "severity", "title", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WeatherAlertGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WeatherAlertGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alerts": obj.get("alerts"),
            "description": obj.get("description"),
            "effective_local": obj.get("effective_local"),
            "effective_utc": obj.get("effective_utc"),
            "expires_local": obj.get("expires_local"),
            "expires_utc": obj.get("expires_utc"),
            "severity": obj.get("severity"),
            "title": obj.get("title"),
            "uri": obj.get("uri")
        })
        return _obj



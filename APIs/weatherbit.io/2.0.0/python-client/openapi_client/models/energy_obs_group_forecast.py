# coding: utf-8

"""
    Weatherbit - Interactive Swagger UI Documentation

    This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.energy_obs_series import EnergyObsSeries
from typing import Optional, Set
from typing_extensions import Self

class EnergyObsGroupForecast(BaseModel):
    """
    EnergyObsGroupForecast
    """ # noqa: E501
    city_name: Optional[StrictStr] = Field(default=None, description="City name (closest)")
    country_code: Optional[StrictStr] = Field(default=None, description="Country abbreviation")
    data: Optional[List[EnergyObsSeries]] = None
    lat: Optional[StrictStr] = Field(default=None, description="Latitude")
    lon: Optional[StrictStr] = Field(default=None, description="Longitude")
    state_code: Optional[StrictStr] = Field(default=None, description="State abbreviation")
    threshold_units: Optional[StrictStr] = Field(default=None, description="Degree day threshold units")
    threshold_value: Optional[StrictStr] = Field(default=None, description="Degree day threshold")
    timezone: Optional[StrictStr] = Field(default=None, description="Local IANA time zone")
    __properties: ClassVar[List[str]] = ["city_name", "country_code", "data", "lat", "lon", "state_code", "threshold_units", "threshold_value", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnergyObsGroupForecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnergyObsGroupForecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city_name": obj.get("city_name"),
            "country_code": obj.get("country_code"),
            "data": [EnergyObsSeries.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "state_code": obj.get("state_code"),
            "threshold_units": obj.get("threshold_units"),
            "threshold_value": obj.get("threshold_value"),
            "timezone": obj.get("timezone")
        })
        return _obj



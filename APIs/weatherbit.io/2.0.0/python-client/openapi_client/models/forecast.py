# coding: utf-8

"""
    Weatherbit - Interactive Swagger UI Documentation

    This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.forecast_weather import ForecastWeather
from typing import Optional, Set
from typing_extensions import Self

class Forecast(BaseModel):
    """
    Forecast
    """ # noqa: E501
    app_max_temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Apparent Maximum daily Temperature - default (C)")
    app_min_temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Apparent Minimum daily Temperature - default (C)")
    clouds: Optional[StrictInt] = Field(default=None, description="Cloud cover as a percentage (%)")
    datetime: Optional[StrictStr] = Field(default=None, description="Date in format \"YYYY-MM-DD:HH\". All datetime is in (UTC)")
    dewpt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dewpoint (Average) - default (C)")
    max_dhi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Deprecated] Max direct component of solar insolation (W/m^2)")
    max_temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum daily Temperature - default (C)")
    min_temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum daily Temperature - default (C)")
    moon_phase: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Moon phase")
    moonrise_ts: Optional[StrictInt] = Field(default=None, description="Moonrise unix timestamp")
    moonset_ts: Optional[StrictInt] = Field(default=None, description="Moonset unix timestamp")
    pod: Optional[StrictStr] = Field(default=None, description="Part of the day (d = day, n = night)")
    pop: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Chance of Precipitation as a percentage (%)")
    precip: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Accumulated precipitation since last forecast point - default (mm)")
    pres: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pressure (mb)")
    rh: Optional[StrictInt] = Field(default=None, description="Relative Humidity as a percentage (%)")
    slp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mean Sea level pressure (mb)")
    snow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Accumulated snowfall since last forecast point - default (mm)")
    snow_depth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Snow Depth - default (mm)")
    sunrise_ts: Optional[StrictInt] = Field(default=None, description="Sunrise unix timestamp")
    sunset_ts: Optional[StrictInt] = Field(default=None, description="Sunset unix timestamp")
    temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Temperature (Average) - default (C)")
    timestamp_local: Optional[StrictStr] = Field(default=None, description="Timestamp in local time")
    timestamp_utc: Optional[StrictStr] = Field(default=None, description="Timestamp UTC")
    ts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unix Timestamp")
    uv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="UV Index")
    vis: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average Visibility default (KM)")
    weather: Optional[ForecastWeather] = None
    wind_cdir: Optional[StrictStr] = Field(default=None, description="Cardinal wind direction")
    wind_cdir_full: Optional[StrictStr] = Field(default=None, description="Cardinal wind direction (text)")
    wind_dir: Optional[StrictInt] = Field(default=None, description="Wind direction")
    wind_spd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Wind Speed (default m/s)")
    __properties: ClassVar[List[str]] = ["app_max_temp", "app_min_temp", "clouds", "datetime", "dewpt", "max_dhi", "max_temp", "min_temp", "moon_phase", "moonrise_ts", "moonset_ts", "pod", "pop", "precip", "pres", "rh", "slp", "snow", "snow_depth", "sunrise_ts", "sunset_ts", "temp", "timestamp_local", "timestamp_utc", "ts", "uv", "vis", "weather", "wind_cdir", "wind_cdir_full", "wind_dir", "wind_spd"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Forecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of weather
        if self.weather:
            _dict['weather'] = self.weather.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Forecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_max_temp": obj.get("app_max_temp"),
            "app_min_temp": obj.get("app_min_temp"),
            "clouds": obj.get("clouds"),
            "datetime": obj.get("datetime"),
            "dewpt": obj.get("dewpt"),
            "max_dhi": obj.get("max_dhi"),
            "max_temp": obj.get("max_temp"),
            "min_temp": obj.get("min_temp"),
            "moon_phase": obj.get("moon_phase"),
            "moonrise_ts": obj.get("moonrise_ts"),
            "moonset_ts": obj.get("moonset_ts"),
            "pod": obj.get("pod"),
            "pop": obj.get("pop"),
            "precip": obj.get("precip"),
            "pres": obj.get("pres"),
            "rh": obj.get("rh"),
            "slp": obj.get("slp"),
            "snow": obj.get("snow"),
            "snow_depth": obj.get("snow_depth"),
            "sunrise_ts": obj.get("sunrise_ts"),
            "sunset_ts": obj.get("sunset_ts"),
            "temp": obj.get("temp"),
            "timestamp_local": obj.get("timestamp_local"),
            "timestamp_utc": obj.get("timestamp_utc"),
            "ts": obj.get("ts"),
            "uv": obj.get("uv"),
            "vis": obj.get("vis"),
            "weather": ForecastWeather.from_dict(obj["weather"]) if obj.get("weather") is not None else None,
            "wind_cdir": obj.get("wind_cdir"),
            "wind_cdir_full": obj.get("wind_cdir_full"),
            "wind_dir": obj.get("wind_dir"),
            "wind_spd": obj.get("wind_spd")
        })
        return _obj



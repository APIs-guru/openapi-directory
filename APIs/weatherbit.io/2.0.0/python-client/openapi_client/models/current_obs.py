# coding: utf-8

"""
    Weatherbit - Interactive Swagger UI Documentation

    This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.current_obs_weather import CurrentObsWeather
from typing import Optional, Set
from typing_extensions import Self

class CurrentObs(BaseModel):
    """
    CurrentObs
    """ # noqa: E501
    app_temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Apparent temperature - Default (C)")
    aqi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Air quality index (US EPA standard 0 to +500)")
    city_name: Optional[StrictStr] = Field(default=None, description="City name (closest)")
    clouds: Optional[StrictInt] = Field(default=None, description="Cloud cover (%)")
    country_code: Optional[StrictStr] = Field(default=None, description="Country abbreviation")
    datetime: Optional[StrictStr] = Field(default=None, description="Cycle Hour (UTC) of observation")
    dewpt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dew point temperature - default (C)")
    dhi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Diffuse horizontal irradiance (W/m^2)")
    dni: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Direct normal irradiance (W/m^2)")
    elev_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current solar elevation angle (Degrees)")
    ghi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Global horizontal irradiance (W/m^2)")
    gust: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Wind gust speed - Default (m/s)")
    hour_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current solar hour angle (Degrees)")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude")
    lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude")
    ob_time: Optional[StrictStr] = Field(default=None, description="Full time (UTC) of observation (YYYY-MM-DD HH:MM)")
    pod: Optional[StrictStr] = Field(default=None, description="Part of the day (d = day, n = night)")
    precip: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Precipitation in last hour - Default (mm)")
    pres: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pressure (mb)")
    rh: Optional[StrictInt] = Field(default=None, description="Relative humidity (%)")
    slp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mean sea level pressure in millibars (mb)")
    snow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Snowfall in last hour - Default (mm)")
    solar_rad: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated solar radiation (W/m^2)")
    sources: Optional[List[StrictStr]] = Field(default=None, description="List of data sources used in response")
    state_code: Optional[StrictStr] = Field(default=None, description="State abbreviation")
    station: Optional[StrictStr] = Field(default=None, description="Source Station ID")
    sunrise: Optional[StrictStr] = Field(default=None, description="Time (UTC) of Sunrise (HH:MM)")
    sunset: Optional[StrictStr] = Field(default=None, description="Time (UTC) of Sunset (HH:MM)")
    temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Temperature - Default (C)")
    timezone: Optional[StrictStr] = Field(default=None, description="Local IANA time zone")
    ts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unix Timestamp")
    uv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="UV Index")
    vis: Optional[StrictInt] = Field(default=None, description="Visibility - default (M)")
    weather: Optional[CurrentObsWeather] = None
    wind_cdir: Optional[StrictStr] = Field(default=None, description="Cardinal wind direction")
    wind_cdir_full: Optional[StrictStr] = Field(default=None, description="Cardinal wind direction (text)")
    wind_dir: Optional[StrictInt] = Field(default=None, description="Wind direction (degrees)")
    wind_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Wind speed - Default (m/s)")
    __properties: ClassVar[List[str]] = ["app_temp", "aqi", "city_name", "clouds", "country_code", "datetime", "dewpt", "dhi", "dni", "elev_angle", "ghi", "gust", "hour_angle", "lat", "lon", "ob_time", "pod", "precip", "pres", "rh", "slp", "snow", "solar_rad", "sources", "state_code", "station", "sunrise", "sunset", "temp", "timezone", "ts", "uv", "vis", "weather", "wind_cdir", "wind_cdir_full", "wind_dir", "wind_speed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CurrentObs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of weather
        if self.weather:
            _dict['weather'] = self.weather.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CurrentObs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_temp": obj.get("app_temp"),
            "aqi": obj.get("aqi"),
            "city_name": obj.get("city_name"),
            "clouds": obj.get("clouds"),
            "country_code": obj.get("country_code"),
            "datetime": obj.get("datetime"),
            "dewpt": obj.get("dewpt"),
            "dhi": obj.get("dhi"),
            "dni": obj.get("dni"),
            "elev_angle": obj.get("elev_angle"),
            "ghi": obj.get("ghi"),
            "gust": obj.get("gust"),
            "hour_angle": obj.get("hour_angle"),
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "ob_time": obj.get("ob_time"),
            "pod": obj.get("pod"),
            "precip": obj.get("precip"),
            "pres": obj.get("pres"),
            "rh": obj.get("rh"),
            "slp": obj.get("slp"),
            "snow": obj.get("snow"),
            "solar_rad": obj.get("solar_rad"),
            "sources": obj.get("sources"),
            "state_code": obj.get("state_code"),
            "station": obj.get("station"),
            "sunrise": obj.get("sunrise"),
            "sunset": obj.get("sunset"),
            "temp": obj.get("temp"),
            "timezone": obj.get("timezone"),
            "ts": obj.get("ts"),
            "uv": obj.get("uv"),
            "vis": obj.get("vis"),
            "weather": CurrentObsWeather.from_dict(obj["weather"]) if obj.get("weather") is not None else None,
            "wind_cdir": obj.get("wind_cdir"),
            "wind_cdir_full": obj.get("wind_cdir_full"),
            "wind_dir": obj.get("wind_dir"),
            "wind_speed": obj.get("wind_speed")
        })
        return _obj



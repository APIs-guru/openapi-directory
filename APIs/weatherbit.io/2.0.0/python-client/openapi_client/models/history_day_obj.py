# coding: utf-8

"""
    Weatherbit - Interactive Swagger UI Documentation

    This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HistoryDayObj(BaseModel):
    """
    HistoryDayObj
    """ # noqa: E501
    datetime: Optional[StrictStr] = Field(default=None, description="Date in format \"YYYY-MM-DD\". All datetime is in (UTC)")
    dewpt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average dewpoint - Default (C)")
    dhi: Optional[StrictInt] = Field(default=None, description="Average hourly diffuse horizontal solar irradiance (W/m^2)")
    dni: Optional[StrictInt] = Field(default=None, description="Average direct normal solar irradiance (W/m^2)")
    ghi: Optional[StrictInt] = Field(default=None, description="Average hourly global horizontal solar irradiance (W/m^2)")
    max_temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max temperature - Default (C)")
    max_temp_ts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time of max memperature - Unix Timestamp")
    max_uv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max UV Index (1-11+)")
    max_wind_dir: Optional[StrictInt] = Field(default=None, description="Direction of wind at time of max 2min wind (degrees)")
    max_wind_spd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max 2min Wind Speed - default (m/s)")
    max_wind_spd_ts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time of max 2min wind - unix timestamp")
    min_temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Min temperature - Default (C)")
    min_temp_ts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time of max temperature - unix timestamp")
    precip: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Liquid equivalent precipitation - default (mm)")
    precip_gpm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Satellite estimated liquid equivalent precipitation - default (mm)")
    pres: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average pressure (mb)")
    revision_status: Optional[StrictStr] = Field(default=None, description="Data revision status (interim or final)")
    rh: Optional[StrictInt] = Field(default=None, description="Average relative humidity as a percentage (%)")
    slp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average sea level pressure (mb)")
    snow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Snowfall - default (mm)")
    snow_depth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Snow Depth - default (mm)")
    t_dhi: Optional[StrictInt] = Field(default=None, description="Total diffuse horizontal solar irradiance (W/m^2)")
    t_dni: Optional[StrictInt] = Field(default=None, description="Total direct normal solar irradiance (W/m^2)")
    t_ghi: Optional[StrictInt] = Field(default=None, description="Total global horizontal solar irradiance (W/m^2)")
    temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average temperature - Default (C)")
    ts: Optional[StrictInt] = Field(default=None, description="Unix timestamp of datetime (Midnight UTC)")
    wind_dir: Optional[StrictInt] = Field(default=None, description="Average wind direction (degrees)")
    wind_gust_spd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Wind gust speed - default (m/s)")
    wind_spd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average wind speed - default (m/s)")
    __properties: ClassVar[List[str]] = ["datetime", "dewpt", "dhi", "dni", "ghi", "max_temp", "max_temp_ts", "max_uv", "max_wind_dir", "max_wind_spd", "max_wind_spd_ts", "min_temp", "min_temp_ts", "precip", "precip_gpm", "pres", "revision_status", "rh", "slp", "snow", "snow_depth", "t_dhi", "t_dni", "t_ghi", "temp", "ts", "wind_dir", "wind_gust_spd", "wind_spd"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistoryDayObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistoryDayObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datetime": obj.get("datetime"),
            "dewpt": obj.get("dewpt"),
            "dhi": obj.get("dhi"),
            "dni": obj.get("dni"),
            "ghi": obj.get("ghi"),
            "max_temp": obj.get("max_temp"),
            "max_temp_ts": obj.get("max_temp_ts"),
            "max_uv": obj.get("max_uv"),
            "max_wind_dir": obj.get("max_wind_dir"),
            "max_wind_spd": obj.get("max_wind_spd"),
            "max_wind_spd_ts": obj.get("max_wind_spd_ts"),
            "min_temp": obj.get("min_temp"),
            "min_temp_ts": obj.get("min_temp_ts"),
            "precip": obj.get("precip"),
            "precip_gpm": obj.get("precip_gpm"),
            "pres": obj.get("pres"),
            "revision_status": obj.get("revision_status"),
            "rh": obj.get("rh"),
            "slp": obj.get("slp"),
            "snow": obj.get("snow"),
            "snow_depth": obj.get("snow_depth"),
            "t_dhi": obj.get("t_dhi"),
            "t_dni": obj.get("t_dni"),
            "t_ghi": obj.get("t_ghi"),
            "temp": obj.get("temp"),
            "ts": obj.get("ts"),
            "wind_dir": obj.get("wind_dir"),
            "wind_gust_spd": obj.get("wind_gust_spd"),
            "wind_spd": obj.get("wind_spd")
        })
        return _obj



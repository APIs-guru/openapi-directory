# coding: utf-8

"""
    Weatherbit - Interactive Swagger UI Documentation

    This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GeoIPObj(BaseModel):
    """
    GeoIPObj
    """ # noqa: E501
    area_code: Optional[StrictStr] = Field(default=None, description="Area Code")
    charset: Optional[StrictStr] = Field(default=None, description="Character encoding")
    city: Optional[StrictStr] = Field(default=None, description="City Name")
    continent_code: Optional[StrictStr] = Field(default=None, description="Country Abbreviation")
    country_code: Optional[StrictStr] = Field(default=None, description="Country Code (Short)")
    country_code3: Optional[StrictStr] = Field(default=None, description="Country Code (Long)")
    dma_code: Optional[StrictStr] = Field(default=None, description="Longitude")
    ip: Optional[StrictStr] = Field(default=None, description="IP Address")
    latitude: Optional[StrictStr] = Field(default=None, description="State Abbreviation")
    longitude: Optional[StrictStr] = Field(default=None, description="City Name")
    metro_code: Optional[StrictStr] = Field(default=None, description="Longitude")
    offset: Optional[StrictStr] = Field(default=None, description="UTC Offset (deprecated)")
    organization: Optional[StrictStr] = Field(default=None, description="Organization Name")
    postal_code: Optional[StrictStr] = Field(default=None, description="Postal Code")
    region: Optional[StrictStr] = Field(default=None, description="Latitude")
    timezone: Optional[StrictStr] = Field(default=None, description="Local IANA time zone")
    __properties: ClassVar[List[str]] = ["area_code", "charset", "city", "continent_code", "country_code", "country_code3", "dma_code", "ip", "latitude", "longitude", "metro_code", "offset", "organization", "postal_code", "region", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeoIPObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeoIPObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area_code": obj.get("area_code"),
            "charset": obj.get("charset"),
            "city": obj.get("city"),
            "continent_code": obj.get("continent_code"),
            "country_code": obj.get("country_code"),
            "country_code3": obj.get("country_code3"),
            "dma_code": obj.get("dma_code"),
            "ip": obj.get("ip"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "metro_code": obj.get("metro_code"),
            "offset": obj.get("offset"),
            "organization": obj.get("organization"),
            "postal_code": obj.get("postal_code"),
            "region": obj.get("region"),
            "timezone": obj.get("timezone")
        })
        return _obj



# coding: utf-8

"""
    Weatherbit - Interactive Swagger UI Documentation

    This an interactive version of the documentation for the Weatherbit API.  The base URL for the API is [http://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/) or [https://api.weatherbit.io/v2.0/](http://api.weatherbit.io/v2.0/). Below is the Swagger UI documentation for the API. All API requests require the `key` parameter.        An Example for a 48 hour forecast for London, UK would be `http://api.weatherbit.io/v2.0/forecast/hourly?lat=51.5072`&`lon=-0.1276`. See our [Weather API description page](https://www.weatherbit.io/api) for the full documentation.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EnergyObs(BaseModel):
    """
    EnergyObs
    """ # noqa: E501
    cdd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cooling degree days")
    city_name: Optional[StrictStr] = Field(default=None, description="City name (closest)")
    clouds: Optional[StrictInt] = Field(default=None, description="Average cloud cover (%)")
    country_code: Optional[StrictStr] = Field(default=None, description="Country abbreviation")
    dewpt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average dew point temperature - Default (C)")
    hdd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Heating degree days")
    lat: Optional[StrictStr] = Field(default=None, description="Latitude")
    lon: Optional[StrictStr] = Field(default=None, description="Longitude")
    precip: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total precipitation in period - Default (mm)")
    rh: Optional[StrictInt] = Field(default=None, description="Average Relative humidity (%)")
    snow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total snowfall in period - Default (mm)")
    sources: Optional[List[StrictStr]] = Field(default=None, description="List of data sources used in response")
    state_code: Optional[StrictStr] = Field(default=None, description="State abbreviation")
    station_id: Optional[StrictStr] = Field(default=None, description="Nearest Station ID [DEPRECATED]")
    sun_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average number of daily sun hours - # hours where Solar GHI > 1000 W/m^2")
    t_dhi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total diffuse horizontal solar irradiance (W/m^2)")
    t_dni: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total direct normal solar irradiance (W/m^2)")
    t_ghi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total global horizontal solar irradiance (W/m^2)")
    temp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average temperature - Default (C)")
    timezone: Optional[StrictStr] = Field(default=None, description="Local IANA time zone")
    wind_dir: Optional[StrictInt] = Field(default=None, description="Average wind direction (Degrees)")
    wind_spd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average wind speed - Default (m/s)")
    __properties: ClassVar[List[str]] = ["cdd", "city_name", "clouds", "country_code", "dewpt", "hdd", "lat", "lon", "precip", "rh", "snow", "sources", "state_code", "station_id", "sun_hours", "t_dhi", "t_dni", "t_ghi", "temp", "timezone", "wind_dir", "wind_spd"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnergyObs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnergyObs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cdd": obj.get("cdd"),
            "city_name": obj.get("city_name"),
            "clouds": obj.get("clouds"),
            "country_code": obj.get("country_code"),
            "dewpt": obj.get("dewpt"),
            "hdd": obj.get("hdd"),
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "precip": obj.get("precip"),
            "rh": obj.get("rh"),
            "snow": obj.get("snow"),
            "sources": obj.get("sources"),
            "state_code": obj.get("state_code"),
            "station_id": obj.get("station_id"),
            "sun_hours": obj.get("sun_hours"),
            "t_dhi": obj.get("t_dhi"),
            "t_dni": obj.get("t_dni"),
            "t_ghi": obj.get("t_ghi"),
            "temp": obj.get("temp"),
            "timezone": obj.get("timezone"),
            "wind_dir": obj.get("wind_dir"),
            "wind_spd": obj.get("wind_spd")
        })
        return _obj



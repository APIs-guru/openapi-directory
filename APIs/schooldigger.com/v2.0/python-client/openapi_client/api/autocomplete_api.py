# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.api_autocomplete_school_result import APIAutocompleteSchoolResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AutocompleteApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def autocomplete_get_schools(
        self,
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        q: Annotated[Optional[StrictStr], Field(description="Search term for autocomplete (e.g. 'Lincol') (required)")] = None,
        q_search_city_state_name: Annotated[Optional[StrictBool], Field(description="Extend the search term to include city and state (e.g. 'Lincoln el paso' matches Lincoln Middle School in El Paso) (optional)")] = None,
        st: Annotated[Optional[StrictStr], Field(description="Two character state (e.g. 'CA') (optional -- leave blank to search entire U.S.)")] = None,
        level: Annotated[Optional[StrictStr], Field(description="Search for schools at this level only. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Private' (optional - leave blank to search for all schools)")] = None,
        box_latitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_longitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_latitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_longitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        return_count: Annotated[Optional[StrictInt], Field(description="Number of schools to return. Valid values: 1-20. (default: 10)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIAutocompleteSchoolResult:
        """Returns a simple and quick list of schools for use in a client-typed autocomplete


        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param q: Search term for autocomplete (e.g. 'Lincol') (required)
        :type q: str
        :param q_search_city_state_name: Extend the search term to include city and state (e.g. 'Lincoln el paso' matches Lincoln Middle School in El Paso) (optional)
        :type q_search_city_state_name: bool
        :param st: Two character state (e.g. 'CA') (optional -- leave blank to search entire U.S.)
        :type st: str
        :param level: Search for schools at this level only. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Private' (optional - leave blank to search for all schools)
        :type level: str
        :param box_latitude_nw: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_latitude_nw: float
        :param box_longitude_nw: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_longitude_nw: float
        :param box_latitude_se: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_latitude_se: float
        :param box_longitude_se: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_longitude_se: float
        :param return_count: Number of schools to return. Valid values: 1-20. (default: 10)
        :type return_count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_get_schools_serialize(
            app_id=app_id,
            app_key=app_key,
            q=q,
            q_search_city_state_name=q_search_city_state_name,
            st=st,
            level=level,
            box_latitude_nw=box_latitude_nw,
            box_longitude_nw=box_longitude_nw,
            box_latitude_se=box_latitude_se,
            box_longitude_se=box_longitude_se,
            return_count=return_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIAutocompleteSchoolResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def autocomplete_get_schools_with_http_info(
        self,
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        q: Annotated[Optional[StrictStr], Field(description="Search term for autocomplete (e.g. 'Lincol') (required)")] = None,
        q_search_city_state_name: Annotated[Optional[StrictBool], Field(description="Extend the search term to include city and state (e.g. 'Lincoln el paso' matches Lincoln Middle School in El Paso) (optional)")] = None,
        st: Annotated[Optional[StrictStr], Field(description="Two character state (e.g. 'CA') (optional -- leave blank to search entire U.S.)")] = None,
        level: Annotated[Optional[StrictStr], Field(description="Search for schools at this level only. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Private' (optional - leave blank to search for all schools)")] = None,
        box_latitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_longitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_latitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_longitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        return_count: Annotated[Optional[StrictInt], Field(description="Number of schools to return. Valid values: 1-20. (default: 10)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIAutocompleteSchoolResult]:
        """Returns a simple and quick list of schools for use in a client-typed autocomplete


        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param q: Search term for autocomplete (e.g. 'Lincol') (required)
        :type q: str
        :param q_search_city_state_name: Extend the search term to include city and state (e.g. 'Lincoln el paso' matches Lincoln Middle School in El Paso) (optional)
        :type q_search_city_state_name: bool
        :param st: Two character state (e.g. 'CA') (optional -- leave blank to search entire U.S.)
        :type st: str
        :param level: Search for schools at this level only. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Private' (optional - leave blank to search for all schools)
        :type level: str
        :param box_latitude_nw: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_latitude_nw: float
        :param box_longitude_nw: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_longitude_nw: float
        :param box_latitude_se: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_latitude_se: float
        :param box_longitude_se: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_longitude_se: float
        :param return_count: Number of schools to return. Valid values: 1-20. (default: 10)
        :type return_count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_get_schools_serialize(
            app_id=app_id,
            app_key=app_key,
            q=q,
            q_search_city_state_name=q_search_city_state_name,
            st=st,
            level=level,
            box_latitude_nw=box_latitude_nw,
            box_longitude_nw=box_longitude_nw,
            box_latitude_se=box_latitude_se,
            box_longitude_se=box_longitude_se,
            return_count=return_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIAutocompleteSchoolResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def autocomplete_get_schools_without_preload_content(
        self,
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        q: Annotated[Optional[StrictStr], Field(description="Search term for autocomplete (e.g. 'Lincol') (required)")] = None,
        q_search_city_state_name: Annotated[Optional[StrictBool], Field(description="Extend the search term to include city and state (e.g. 'Lincoln el paso' matches Lincoln Middle School in El Paso) (optional)")] = None,
        st: Annotated[Optional[StrictStr], Field(description="Two character state (e.g. 'CA') (optional -- leave blank to search entire U.S.)")] = None,
        level: Annotated[Optional[StrictStr], Field(description="Search for schools at this level only. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Private' (optional - leave blank to search for all schools)")] = None,
        box_latitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_longitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_latitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        box_longitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)")] = None,
        return_count: Annotated[Optional[StrictInt], Field(description="Number of schools to return. Valid values: 1-20. (default: 10)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns a simple and quick list of schools for use in a client-typed autocomplete


        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param q: Search term for autocomplete (e.g. 'Lincol') (required)
        :type q: str
        :param q_search_city_state_name: Extend the search term to include city and state (e.g. 'Lincoln el paso' matches Lincoln Middle School in El Paso) (optional)
        :type q_search_city_state_name: bool
        :param st: Two character state (e.g. 'CA') (optional -- leave blank to search entire U.S.)
        :type st: str
        :param level: Search for schools at this level only. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Private' (optional - leave blank to search for all schools)
        :type level: str
        :param box_latitude_nw: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_latitude_nw: float
        :param box_longitude_nw: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_longitude_nw: float
        :param box_latitude_se: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_latitude_se: float
        :param box_longitude_se: Search within a 'box' defined by (BoxLatitudeNW/BoxLongitudeNW) to (BoxLongitudeSE/BoxLatitudeSE) (optional. Pro, Enterprise API levels only.)
        :type box_longitude_se: float
        :param return_count: Number of schools to return. Valid values: 1-20. (default: 10)
        :type return_count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_get_schools_serialize(
            app_id=app_id,
            app_key=app_key,
            q=q,
            q_search_city_state_name=q_search_city_state_name,
            st=st,
            level=level,
            box_latitude_nw=box_latitude_nw,
            box_longitude_nw=box_longitude_nw,
            box_latitude_se=box_latitude_se,
            box_longitude_se=box_longitude_se,
            return_count=return_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIAutocompleteSchoolResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _autocomplete_get_schools_serialize(
        self,
        app_id,
        app_key,
        q,
        q_search_city_state_name,
        st,
        level,
        box_latitude_nw,
        box_longitude_nw,
        box_latitude_se,
        box_longitude_se,
        return_count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if q_search_city_state_name is not None:
            
            _query_params.append(('qSearchCityStateName', q_search_city_state_name))
            
        if st is not None:
            
            _query_params.append(('st', st))
            
        if level is not None:
            
            _query_params.append(('level', level))
            
        if box_latitude_nw is not None:
            
            _query_params.append(('boxLatitudeNW', box_latitude_nw))
            
        if box_longitude_nw is not None:
            
            _query_params.append(('boxLongitudeNW', box_longitude_nw))
            
        if box_latitude_se is not None:
            
            _query_params.append(('boxLatitudeSE', box_latitude_se))
            
        if box_longitude_se is not None:
            
            _query_params.append(('boxLongitudeSE', box_longitude_se))
            
        if return_count is not None:
            
            _query_params.append(('returnCount', return_count))
            
        if app_id is not None:
            
            _query_params.append(('appID', app_id))
            
        if app_key is not None:
            
            _query_params.append(('appKey', app_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2.0/autocomplete/schools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



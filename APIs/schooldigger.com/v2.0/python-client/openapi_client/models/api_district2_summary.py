# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.api_county import APICounty
from openapi_client.models.api_location import APILocation
from openapi_client.models.apilea_rank_history import APILEARankHistory
from openapi_client.models.apilea_yearly_detail import APILEAYearlyDetail
from typing import Optional, Set
from typing_extensions import Self

class APIDistrict2Summary(BaseModel):
    """
    APIDistrict2Summary
    """ # noqa: E501
    address: Optional[APILocation] = None
    county: Optional[APICounty] = None
    distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Distance from nearLatitude/nearLongitude (if supplied)")
    district_id: Optional[StrictStr] = Field(default=None, description="SchoolDigger District ID Number (7 digits). Use /districts/{districtID} to retrieve the entire district record", alias="districtID")
    district_name: Optional[StrictStr] = Field(default=None, description="District name", alias="districtName")
    district_yearly_details: Optional[List[APILEAYearlyDetail]] = Field(default=None, description="District yearly metrics", alias="districtYearlyDetails")
    has_boundary: Optional[StrictBool] = Field(default=None, description="Indicates that an attendance boundary is available for this district. (To retrieve, look up district with /districts/{id})", alias="hasBoundary")
    high_grade: Optional[StrictStr] = Field(default=None, description="The high grade served by this district", alias="highGrade")
    is_within_boundary: Optional[StrictBool] = Field(default=None, description="Indicates whether this district's boundary includes the specified location from nearLatitude/nearLongitude", alias="isWithinBoundary")
    location_is_within_boundary: Optional[StrictBool] = Field(default=None, description="Indicates whether this school's boundary includes the specified location from nearLatitude/nearLongitude or boundaryAddress (Enterprise API level)", alias="locationIsWithinBoundary")
    low_grade: Optional[StrictStr] = Field(default=None, description="The low grade served by this district (PK = Prekindergarten, K = Kindergarten)", alias="lowGrade")
    number_alternative_schools: Optional[StrictInt] = Field(default=None, description="Count of schools designated as other/alternative schools", alias="numberAlternativeSchools")
    number_high_schools: Optional[StrictInt] = Field(default=None, description="Count of schools designated as high schools", alias="numberHighSchools")
    number_middle_schools: Optional[StrictInt] = Field(default=None, description="Count of schools designated as middle schools", alias="numberMiddleSchools")
    number_primary_schools: Optional[StrictInt] = Field(default=None, description="Count of schools designated as primary schools", alias="numberPrimarySchools")
    number_total_schools: Optional[StrictInt] = Field(default=None, description="Count of schools in the district", alias="numberTotalSchools")
    phone: Optional[StrictStr] = Field(default=None, description="District phone number")
    rank_history: Optional[List[APILEARankHistory]] = Field(default=None, description="SchoolDigger yearly rank history of the district", alias="rankHistory")
    url: Optional[StrictStr] = Field(default=None, description="SchoolDigger URL for this district")
    __properties: ClassVar[List[str]] = ["address", "county", "distance", "districtID", "districtName", "districtYearlyDetails", "hasBoundary", "highGrade", "isWithinBoundary", "locationIsWithinBoundary", "lowGrade", "numberAlternativeSchools", "numberHighSchools", "numberMiddleSchools", "numberPrimarySchools", "numberTotalSchools", "phone", "rankHistory", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIDistrict2Summary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of county
        if self.county:
            _dict['county'] = self.county.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in district_yearly_details (list)
        _items = []
        if self.district_yearly_details:
            for _item_district_yearly_details in self.district_yearly_details:
                if _item_district_yearly_details:
                    _items.append(_item_district_yearly_details.to_dict())
            _dict['districtYearlyDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rank_history (list)
        _items = []
        if self.rank_history:
            for _item_rank_history in self.rank_history:
                if _item_rank_history:
                    _items.append(_item_rank_history.to_dict())
            _dict['rankHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIDistrict2Summary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": APILocation.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "county": APICounty.from_dict(obj["county"]) if obj.get("county") is not None else None,
            "distance": obj.get("distance"),
            "districtID": obj.get("districtID"),
            "districtName": obj.get("districtName"),
            "districtYearlyDetails": [APILEAYearlyDetail.from_dict(_item) for _item in obj["districtYearlyDetails"]] if obj.get("districtYearlyDetails") is not None else None,
            "hasBoundary": obj.get("hasBoundary"),
            "highGrade": obj.get("highGrade"),
            "isWithinBoundary": obj.get("isWithinBoundary"),
            "locationIsWithinBoundary": obj.get("locationIsWithinBoundary"),
            "lowGrade": obj.get("lowGrade"),
            "numberAlternativeSchools": obj.get("numberAlternativeSchools"),
            "numberHighSchools": obj.get("numberHighSchools"),
            "numberMiddleSchools": obj.get("numberMiddleSchools"),
            "numberPrimarySchools": obj.get("numberPrimarySchools"),
            "numberTotalSchools": obj.get("numberTotalSchools"),
            "phone": obj.get("phone"),
            "rankHistory": [APILEARankHistory.from_dict(_item) for _item in obj["rankHistory"]] if obj.get("rankHistory") is not None else None,
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_test_score import APITestScore
from typing import Optional, Set
from typing_extensions import Self

class APITestScoreWrapper(BaseModel):
    """
    APITestScoreWrapper
    """ # noqa: E501
    district_test_score: Optional[APITestScore] = Field(default=None, alias="districtTestScore")
    grade: Optional[StrictStr] = None
    school_test_score: Optional[APITestScore] = Field(default=None, alias="schoolTestScore")
    state_test_score: Optional[APITestScore] = Field(default=None, alias="stateTestScore")
    subject: Optional[StrictStr] = Field(default=None, description="Test subject")
    test: Optional[StrictStr] = Field(default=None, description="The name of the state-administered test")
    tier1: Optional[StrictStr] = Field(default=None, description="Tier 1 test score description (Enterprise API level only)")
    tier2: Optional[StrictStr] = Field(default=None, description="Tier 2 test score description (Enterprise API level only)")
    tier3: Optional[StrictStr] = Field(default=None, description="Tier 3 test score description (Enterprise API level only)")
    tier4: Optional[StrictStr] = Field(default=None, description="Tier 4 test score description (Enterprise API level only)")
    tier5: Optional[StrictStr] = Field(default=None, description="Tier 5 test score description (Enterprise API level only)")
    year: Optional[StrictInt] = Field(default=None, description="Year test was administered (2018 = 2017-18)")
    __properties: ClassVar[List[str]] = ["districtTestScore", "grade", "schoolTestScore", "stateTestScore", "subject", "test", "tier1", "tier2", "tier3", "tier4", "tier5", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APITestScoreWrapper from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of district_test_score
        if self.district_test_score:
            _dict['districtTestScore'] = self.district_test_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of school_test_score
        if self.school_test_score:
            _dict['schoolTestScore'] = self.school_test_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_test_score
        if self.state_test_score:
            _dict['stateTestScore'] = self.state_test_score.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APITestScoreWrapper from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "districtTestScore": APITestScore.from_dict(obj["districtTestScore"]) if obj.get("districtTestScore") is not None else None,
            "grade": obj.get("grade"),
            "schoolTestScore": APITestScore.from_dict(obj["schoolTestScore"]) if obj.get("schoolTestScore") is not None else None,
            "stateTestScore": APITestScore.from_dict(obj["stateTestScore"]) if obj.get("stateTestScore") is not None else None,
            "subject": obj.get("subject"),
            "test": obj.get("test"),
            "tier1": obj.get("tier1"),
            "tier2": obj.get("tier2"),
            "tier3": obj.get("tier3"),
            "tier4": obj.get("tier4"),
            "tier5": obj.get("tier5"),
            "year": obj.get("year")
        })
        return _obj



# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_school2_summary import APISchool2Summary
from typing import Optional, Set
from typing_extensions import Self

class APISchoolList2(BaseModel):
    """
    APISchoolList2
    """ # noqa: E501
    number_of_pages: Optional[StrictInt] = Field(default=None, description="The total count of pages in your query list based on given per_page value", alias="numberOfPages")
    number_of_schools: Optional[StrictInt] = Field(default=None, description="The total count of schools that match your query", alias="numberOfSchools")
    school_list: Optional[List[APISchool2Summary]] = Field(default=None, alias="schoolList")
    __properties: ClassVar[List[str]] = ["numberOfPages", "numberOfSchools", "schoolList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APISchoolList2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in school_list (list)
        _items = []
        if self.school_list:
            for _item_school_list in self.school_list:
                if _item_school_list:
                    _items.append(_item_school_list.to_dict())
            _dict['schoolList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APISchoolList2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numberOfPages": obj.get("numberOfPages"),
            "numberOfSchools": obj.get("numberOfSchools"),
            "schoolList": [APISchool2Summary.from_dict(_item) for _item in obj["schoolList"]] if obj.get("schoolList") is not None else None
        })
        return _obj



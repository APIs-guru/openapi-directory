# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.api_county import APICounty
from openapi_client.models.api_district_sum import APIDistrictSum
from openapi_client.models.api_location import APILocation
from openapi_client.models.api_rank_history import APIRankHistory
from openapi_client.models.api_school_finance import APISchoolFinance
from openapi_client.models.api_school_review import APISchoolReview
from openapi_client.models.api_test_score_wrapper import APITestScoreWrapper
from openapi_client.models.api_yearly_demographics import APIYearlyDemographics
from typing import Optional, Set
from typing_extensions import Self

class APISchool20Full(BaseModel):
    """
    APISchool20Full
    """ # noqa: E501
    address: Optional[APILocation] = None
    county: Optional[APICounty] = None
    district: Optional[APIDistrictSum] = None
    finance: Optional[List[APISchoolFinance]] = Field(default=None, description="School finance (Pro and Enterprise API level only)")
    high_grade: Optional[StrictStr] = Field(default=None, description="The high grade served by this school", alias="highGrade")
    is_charter_school: Optional[StrictStr] = Field(default=None, description="Indicates if school is a charter school (Yes/No/n-a)", alias="isCharterSchool")
    is_magnet_school: Optional[StrictStr] = Field(default=None, description="Indicates if school is a magnet school (Yes/No/n-a)", alias="isMagnetSchool")
    is_private: Optional[StrictBool] = Field(default=None, description="Indicates if school is a private school (Yes/No)", alias="isPrivate")
    is_title_i_school: Optional[StrictStr] = Field(default=None, description="Indicates if school is a Title I school (Yes/No/n-a)", alias="isTitleISchool")
    is_title_i_schoolwide_school: Optional[StrictStr] = Field(default=None, description="Indicates if a school-wide Title I school (Yes/No/n-a)", alias="isTitleISchoolwideSchool")
    is_virtual_school: Optional[StrictStr] = Field(default=None, description="Indicates if school is a virtual school (Yes/No/n-a)", alias="isVirtualSchool")
    locale: Optional[StrictStr] = Field(default=None, description="NCES Locale of school (https://nces.ed.gov/ccd/rural_locales.asp)")
    low_grade: Optional[StrictStr] = Field(default=None, description="The low grade served by this school (PK = Prekindergarten, K = Kindergarten)", alias="lowGrade")
    phone: Optional[StrictStr] = Field(default=None, description="School phone number")
    private_coed: Optional[StrictStr] = Field(default=None, description="Coed/Boys/Girls (private schools only)", alias="privateCoed")
    private_days: Optional[StrictInt] = Field(default=None, description="Days in the school year (private schools only)", alias="privateDays")
    private_has_library: Optional[StrictBool] = Field(default=None, description="Indicates if the school has a library (private schools only)", alias="privateHasLibrary")
    private_hours: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Hours in the school day (private schools only)", alias="privateHours")
    private_orientation: Optional[StrictStr] = Field(default=None, description="Affiliation of the school (private schools only)", alias="privateOrientation")
    rank_history: Optional[List[APIRankHistory]] = Field(default=None, description="SchoolDigger yearly rank history of the school", alias="rankHistory")
    rank_movement: Optional[StrictInt] = Field(default=None, description="Returns the movement of rank for this school between current and previous year", alias="rankMovement")
    reviews: Optional[List[APISchoolReview]] = Field(default=None, description="List of reviews for this school submitted by SchoolDigger site visitors")
    school_level: Optional[StrictStr] = Field(default=None, description="The level of school (Elementary, Middle, High, Private, Alternative)", alias="schoolLevel")
    school_name: Optional[StrictStr] = Field(default=None, description="School name", alias="schoolName")
    school_yearly_details: Optional[List[APIYearlyDemographics]] = Field(default=None, description="School Yearly metrics", alias="schoolYearlyDetails")
    schoolid: Optional[StrictStr] = Field(default=None, description="SchoolDigger School ID Number (12 digits)")
    test_scores: Optional[List[APITestScoreWrapper]] = Field(default=None, description="Test scores (including district and state) -- requires Pro or Enterprise level API subscription", alias="testScores")
    url: Optional[StrictStr] = Field(default=None, description="URL of the school's public website")
    url_compare_school_digger: Optional[StrictStr] = Field(default=None, description="SchoolDigger URL for comparing this school to nearby schools", alias="urlCompareSchoolDigger")
    url_school_digger: Optional[StrictStr] = Field(default=None, description="SchoolDigger URL for this school", alias="urlSchoolDigger")
    __properties: ClassVar[List[str]] = ["address", "county", "district", "finance", "highGrade", "isCharterSchool", "isMagnetSchool", "isPrivate", "isTitleISchool", "isTitleISchoolwideSchool", "isVirtualSchool", "locale", "lowGrade", "phone", "privateCoed", "privateDays", "privateHasLibrary", "privateHours", "privateOrientation", "rankHistory", "rankMovement", "reviews", "schoolLevel", "schoolName", "schoolYearlyDetails", "schoolid", "testScores", "url", "urlCompareSchoolDigger", "urlSchoolDigger"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APISchool20Full from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of county
        if self.county:
            _dict['county'] = self.county.to_dict()
        # override the default output from pydantic by calling `to_dict()` of district
        if self.district:
            _dict['district'] = self.district.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in finance (list)
        _items = []
        if self.finance:
            for _item_finance in self.finance:
                if _item_finance:
                    _items.append(_item_finance.to_dict())
            _dict['finance'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rank_history (list)
        _items = []
        if self.rank_history:
            for _item_rank_history in self.rank_history:
                if _item_rank_history:
                    _items.append(_item_rank_history.to_dict())
            _dict['rankHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviews (list)
        _items = []
        if self.reviews:
            for _item_reviews in self.reviews:
                if _item_reviews:
                    _items.append(_item_reviews.to_dict())
            _dict['reviews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in school_yearly_details (list)
        _items = []
        if self.school_yearly_details:
            for _item_school_yearly_details in self.school_yearly_details:
                if _item_school_yearly_details:
                    _items.append(_item_school_yearly_details.to_dict())
            _dict['schoolYearlyDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in test_scores (list)
        _items = []
        if self.test_scores:
            for _item_test_scores in self.test_scores:
                if _item_test_scores:
                    _items.append(_item_test_scores.to_dict())
            _dict['testScores'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APISchool20Full from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": APILocation.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "county": APICounty.from_dict(obj["county"]) if obj.get("county") is not None else None,
            "district": APIDistrictSum.from_dict(obj["district"]) if obj.get("district") is not None else None,
            "finance": [APISchoolFinance.from_dict(_item) for _item in obj["finance"]] if obj.get("finance") is not None else None,
            "highGrade": obj.get("highGrade"),
            "isCharterSchool": obj.get("isCharterSchool"),
            "isMagnetSchool": obj.get("isMagnetSchool"),
            "isPrivate": obj.get("isPrivate"),
            "isTitleISchool": obj.get("isTitleISchool"),
            "isTitleISchoolwideSchool": obj.get("isTitleISchoolwideSchool"),
            "isVirtualSchool": obj.get("isVirtualSchool"),
            "locale": obj.get("locale"),
            "lowGrade": obj.get("lowGrade"),
            "phone": obj.get("phone"),
            "privateCoed": obj.get("privateCoed"),
            "privateDays": obj.get("privateDays"),
            "privateHasLibrary": obj.get("privateHasLibrary"),
            "privateHours": obj.get("privateHours"),
            "privateOrientation": obj.get("privateOrientation"),
            "rankHistory": [APIRankHistory.from_dict(_item) for _item in obj["rankHistory"]] if obj.get("rankHistory") is not None else None,
            "rankMovement": obj.get("rankMovement"),
            "reviews": [APISchoolReview.from_dict(_item) for _item in obj["reviews"]] if obj.get("reviews") is not None else None,
            "schoolLevel": obj.get("schoolLevel"),
            "schoolName": obj.get("schoolName"),
            "schoolYearlyDetails": [APIYearlyDemographics.from_dict(_item) for _item in obj["schoolYearlyDetails"]] if obj.get("schoolYearlyDetails") is not None else None,
            "schoolid": obj.get("schoolid"),
            "testScores": [APITestScoreWrapper.from_dict(_item) for _item in obj["testScores"]] if obj.get("testScores") is not None else None,
            "url": obj.get("url"),
            "urlCompareSchoolDigger": obj.get("urlCompareSchoolDigger"),
            "urlSchoolDigger": obj.get("urlSchoolDigger")
        })
        return _obj



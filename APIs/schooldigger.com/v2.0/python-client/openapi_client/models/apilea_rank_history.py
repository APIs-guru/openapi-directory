# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class APILEARankHistory(BaseModel):
    """
    APILEARankHistory
    """ # noqa: E501
    rank: Optional[StrictInt] = Field(default=None, description="Statewide rank of this district")
    rank_of: Optional[StrictInt] = Field(default=None, description="Count of district ranked in this state", alias="rankOf")
    rank_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The rank score calculated by SchoolDigger (see https://www.schooldigger.com/aboutranking.aspx)", alias="rankScore")
    rank_stars: Optional[StrictInt] = Field(default=None, description="The number of stars SchoolDigger awarded in the ranking of the district (0-5, 5 is best)", alias="rankStars")
    rank_statewide_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentile of this district's rank (e.g. this district performed better than (x)% of this state's districts)", alias="rankStatewidePercentage")
    year: Optional[StrictInt] = Field(default=None, description="School year (2017 - 2016-17)")
    __properties: ClassVar[List[str]] = ["rank", "rankOf", "rankScore", "rankStars", "rankStatewidePercentage", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APILEARankHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APILEARankHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rank": obj.get("rank"),
            "rankOf": obj.get("rankOf"),
            "rankScore": obj.get("rankScore"),
            "rankStars": obj.get("rankStars"),
            "rankStatewidePercentage": obj.get("rankStatewidePercentage"),
            "year": obj.get("year")
        })
        return _obj



# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_lat_long import APILatLong
from typing import Optional, Set
from typing_extensions import Self

class APILocation(BaseModel):
    """
    APILocation
    """ # noqa: E501
    city: Optional[StrictStr] = None
    city_url: Optional[StrictStr] = Field(default=None, description="SchoolDigger URL for schools in this city", alias="cityURL")
    html: Optional[StrictStr] = Field(default=None, description="HTML formatted address")
    lat_long: Optional[APILatLong] = Field(default=None, alias="latLong")
    state: Optional[StrictStr] = None
    state_full: Optional[StrictStr] = Field(default=None, description="Full state name (WA = Washington)", alias="stateFull")
    street: Optional[StrictStr] = None
    zip: Optional[StrictStr] = None
    zip4: Optional[StrictStr] = None
    zip_url: Optional[StrictStr] = Field(default=None, description="SchoolDigger URL for schools in this zip code", alias="zipURL")
    __properties: ClassVar[List[str]] = ["city", "cityURL", "html", "latLong", "state", "stateFull", "street", "zip", "zip4", "zipURL"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APILocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lat_long
        if self.lat_long:
            _dict['latLong'] = self.lat_long.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APILocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "cityURL": obj.get("cityURL"),
            "html": obj.get("html"),
            "latLong": APILatLong.from_dict(obj["latLong"]) if obj.get("latLong") is not None else None,
            "state": obj.get("state"),
            "stateFull": obj.get("stateFull"),
            "street": obj.get("street"),
            "zip": obj.get("zip"),
            "zip4": obj.get("zip4"),
            "zipURL": obj.get("zipURL")
        })
        return _obj



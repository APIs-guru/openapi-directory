# coding: utf-8

"""
    SchoolDigger API V2.0

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.<br />Version 2.0 incorporates the ATTOM School Boundary Level add-on and spending per pupil metrics

    The version of the OpenAPI document: v2.0
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class APISchoolAC(BaseModel):
    """
    APISchoolAC
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="School location city")
    has_boundary: Optional[StrictBool] = Field(default=None, description="States whether there is an attendance boundary available for this school", alias="hasBoundary")
    high_grade: Optional[StrictStr] = Field(default=None, description="The high grade served by this school", alias="highGrade")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="School location latitude")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="School location longitude")
    low_grade: Optional[StrictStr] = Field(default=None, description="The low grade served by this school (PK = Prekindergarten, K = Kindergarten)", alias="lowGrade")
    rank: Optional[StrictInt] = Field(default=None, description="Statewide rank of this School")
    rank_of: Optional[StrictInt] = Field(default=None, description="Count of schools ranked at this state/level", alias="rankOf")
    rank_stars: Optional[StrictInt] = Field(default=None, description="The number of stars SchoolDigger awarded in the ranking of the school (0-5, 5 is best)", alias="rankStars")
    school_level: Optional[StrictStr] = Field(default=None, description="The level of school (Elementary, Middle, High, Private, Alternative)", alias="schoolLevel")
    school_name: Optional[StrictStr] = Field(default=None, description="School name", alias="schoolName")
    schoolid: Optional[StrictStr] = Field(default=None, description="SchoolDigger School ID Number (12 digits). Use /schools/{schoolID} to retrieve the full school record")
    state: Optional[StrictStr] = Field(default=None, description="School location state")
    zip: Optional[StrictStr] = Field(default=None, description="School location zip code")
    __properties: ClassVar[List[str]] = ["city", "hasBoundary", "highGrade", "latitude", "longitude", "lowGrade", "rank", "rankOf", "rankStars", "schoolLevel", "schoolName", "schoolid", "state", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APISchoolAC from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APISchoolAC from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "hasBoundary": obj.get("hasBoundary"),
            "highGrade": obj.get("highGrade"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "lowGrade": obj.get("lowGrade"),
            "rank": obj.get("rank"),
            "rankOf": obj.get("rankOf"),
            "rankStars": obj.get("rankStars"),
            "schoolLevel": obj.get("schoolLevel"),
            "schoolName": obj.get("schoolName"),
            "schoolid": obj.get("schoolid"),
            "state": obj.get("state"),
            "zip": obj.get("zip")
        })
        return _obj



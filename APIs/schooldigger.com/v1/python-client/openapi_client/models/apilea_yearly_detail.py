# coding: utf-8

"""
    SchoolDigger API V1

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.

    The version of the OpenAPI document: v1
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class APILEAYearlyDetail(BaseModel):
    """
    APILEAYearlyDetail
    """ # noqa: E501
    number_of_aids: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent instructional aids employed by the district", alias="numberOfAids")
    number_of_coords_supervisors: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent instructional coordinators/supervisors employed by the district", alias="numberOfCoordsSupervisors")
    number_of_english_language_learner_students: Optional[StrictInt] = Field(default=None, description="The number of English language learner (ELL) students served in appropriate programs", alias="numberOfEnglishLanguageLearnerStudents")
    number_of_guidance_elem: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent elementary guidance counselors employed by the district", alias="numberOfGuidanceElem")
    number_of_guidance_secondary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent secondary guidance counselors employed by the district", alias="numberOfGuidanceSecondary")
    number_of_guidance_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of full-time equivalent guidance counselors employed by the district", alias="numberOfGuidanceTotal")
    number_of_lea_administrators: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent LEA administrators employed by the district (LEA)", alias="numberOfLEAAdministrators")
    number_of_lea_support_staff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent LEA administrative support staff employed by the district (LEA)", alias="numberOfLEASupportStaff")
    number_of_librarians: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent librarians/media specialists employed by the district", alias="numberOfLibrarians")
    number_of_library_staff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent librarians/media support staff employed by the district", alias="numberOfLibraryStaff")
    number_of_other_support_staff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent all other support staff employed by the district (LEA)", alias="numberOfOtherSupportStaff")
    number_of_school_admin_support_staff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent school administrative support staff employed by the district (LEA)", alias="numberOfSchoolAdminSupportStaff")
    number_of_school_administrators: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent school administrators employed by the district (LEA)", alias="numberOfSchoolAdministrators")
    number_of_special_ed_students: Optional[StrictInt] = Field(default=None, description="The number of students having a written Individualized Education Program (IEP) under the Individuals With Disabilities Education Act (IDEA)", alias="numberOfSpecialEdStudents")
    number_of_student_support_staff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent student support services staff employed by the district (LEA)", alias="numberOfStudentSupportStaff")
    number_of_students: Optional[StrictInt] = Field(default=None, description="Number of students enrolled in the district", alias="numberOfStudents")
    number_of_teachers: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent teachers employed by the district", alias="numberOfTeachers")
    number_of_teachers_elementary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent elementary teachers employed by the district", alias="numberOfTeachersElementary")
    number_of_teachers_k: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent kindergarten teachers employed by the district", alias="numberOfTeachersK")
    number_of_teachers_pk: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent pre-kindergarten teachers employed by the district", alias="numberOfTeachersPK")
    number_of_teachers_secondary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of full-time equivalent secondary teachers employed by the district", alias="numberOfTeachersSecondary")
    year: Optional[StrictInt] = Field(default=None, description="School year (2018 = 2017-18)")
    __properties: ClassVar[List[str]] = ["numberOfAids", "numberOfCoordsSupervisors", "numberOfEnglishLanguageLearnerStudents", "numberOfGuidanceElem", "numberOfGuidanceSecondary", "numberOfGuidanceTotal", "numberOfLEAAdministrators", "numberOfLEASupportStaff", "numberOfLibrarians", "numberOfLibraryStaff", "numberOfOtherSupportStaff", "numberOfSchoolAdminSupportStaff", "numberOfSchoolAdministrators", "numberOfSpecialEdStudents", "numberOfStudentSupportStaff", "numberOfStudents", "numberOfTeachers", "numberOfTeachersElementary", "numberOfTeachersK", "numberOfTeachersPK", "numberOfTeachersSecondary", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APILEAYearlyDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APILEAYearlyDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numberOfAids": obj.get("numberOfAids"),
            "numberOfCoordsSupervisors": obj.get("numberOfCoordsSupervisors"),
            "numberOfEnglishLanguageLearnerStudents": obj.get("numberOfEnglishLanguageLearnerStudents"),
            "numberOfGuidanceElem": obj.get("numberOfGuidanceElem"),
            "numberOfGuidanceSecondary": obj.get("numberOfGuidanceSecondary"),
            "numberOfGuidanceTotal": obj.get("numberOfGuidanceTotal"),
            "numberOfLEAAdministrators": obj.get("numberOfLEAAdministrators"),
            "numberOfLEASupportStaff": obj.get("numberOfLEASupportStaff"),
            "numberOfLibrarians": obj.get("numberOfLibrarians"),
            "numberOfLibraryStaff": obj.get("numberOfLibraryStaff"),
            "numberOfOtherSupportStaff": obj.get("numberOfOtherSupportStaff"),
            "numberOfSchoolAdminSupportStaff": obj.get("numberOfSchoolAdminSupportStaff"),
            "numberOfSchoolAdministrators": obj.get("numberOfSchoolAdministrators"),
            "numberOfSpecialEdStudents": obj.get("numberOfSpecialEdStudents"),
            "numberOfStudentSupportStaff": obj.get("numberOfStudentSupportStaff"),
            "numberOfStudents": obj.get("numberOfStudents"),
            "numberOfTeachers": obj.get("numberOfTeachers"),
            "numberOfTeachersElementary": obj.get("numberOfTeachersElementary"),
            "numberOfTeachersK": obj.get("numberOfTeachersK"),
            "numberOfTeachersPK": obj.get("numberOfTeachersPK"),
            "numberOfTeachersSecondary": obj.get("numberOfTeachersSecondary"),
            "year": obj.get("year")
        })
        return _obj



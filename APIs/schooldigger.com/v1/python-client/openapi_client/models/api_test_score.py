# coding: utf-8

"""
    SchoolDigger API V1

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.

    The version of the OpenAPI document: v1
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class APITestScore(BaseModel):
    """
    APITestScore
    """ # noqa: E501
    mean_scaled_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mean scale score", alias="meanScaledScore")
    num_tier1: Optional[StrictInt] = Field(default=None, description="Count of students performing at tier 1 (Enterprise API level only)", alias="numTier1")
    num_tier2: Optional[StrictInt] = Field(default=None, description="Count of students performing at tier 2 (Enterprise API level only)", alias="numTier2")
    num_tier3: Optional[StrictInt] = Field(default=None, description="Count of students performing at tier 3 (Enterprise API level only)", alias="numTier3")
    num_tier4: Optional[StrictInt] = Field(default=None, description="Count of students performing at tier 4 (Enterprise API level only)", alias="numTier4")
    num_tier5: Optional[StrictInt] = Field(default=None, description="Count of students performing at tier 5 (Enterprise API level only)", alias="numTier5")
    number_met_standard: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Count of students meeting state standard", alias="numberMetStandard")
    percent_met_standard: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percent of students meeting state standard", alias="percentMetStandard")
    percent_tier1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percent of students performing at tier 1 (Enterprise API level only)", alias="percentTier1")
    percent_tier2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percent of students performing at tier 2 (Enterprise API level only)", alias="percentTier2")
    percent_tier3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percent of students performing at tier 3 (Enterprise API level only)", alias="percentTier3")
    percent_tier4: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percent of students performing at tier 4 (Enterprise API level only)", alias="percentTier4")
    percent_tier5: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percent of students performing at tier 5 (Enterprise API level only)", alias="percentTier5")
    students_eligible: Optional[StrictInt] = Field(default=None, description="Count of students eligible to take test", alias="studentsEligible")
    students_tested: Optional[StrictInt] = Field(default=None, description="Count of students tested", alias="studentsTested")
    __properties: ClassVar[List[str]] = ["meanScaledScore", "numTier1", "numTier2", "numTier3", "numTier4", "numTier5", "numberMetStandard", "percentMetStandard", "percentTier1", "percentTier2", "percentTier3", "percentTier4", "percentTier5", "studentsEligible", "studentsTested"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APITestScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APITestScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meanScaledScore": obj.get("meanScaledScore"),
            "numTier1": obj.get("numTier1"),
            "numTier2": obj.get("numTier2"),
            "numTier3": obj.get("numTier3"),
            "numTier4": obj.get("numTier4"),
            "numTier5": obj.get("numTier5"),
            "numberMetStandard": obj.get("numberMetStandard"),
            "percentMetStandard": obj.get("percentMetStandard"),
            "percentTier1": obj.get("percentTier1"),
            "percentTier2": obj.get("percentTier2"),
            "percentTier3": obj.get("percentTier3"),
            "percentTier4": obj.get("percentTier4"),
            "percentTier5": obj.get("percentTier5"),
            "studentsEligible": obj.get("studentsEligible"),
            "studentsTested": obj.get("studentsTested")
        })
        return _obj



# coding: utf-8

"""
    SchoolDigger API V1

    Get detailed data on over 120,000 schools and 18,500 districts in the U.S.

    The version of the OpenAPI document: v1
    Contact: api@schooldigger.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.api_school10_full import APISchool10Full
from openapi_client.models.api_school_list import APISchoolList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SchoolsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def schools_get_all_schools(
        self,
        st: Annotated[StrictStr, Field(description="Two character state (e.g. 'CA') - required")],
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        q: Annotated[Optional[StrictStr], Field(description="Search term - note: will match school name or city (optional)")] = None,
        q_search_school_name_only: Annotated[Optional[StrictBool], Field(description="For parameter 'q', only search school names instead of school and city (optional)")] = None,
        district_id: Annotated[Optional[StrictStr], Field(description="Search for schools within this district (7 digit district id) (optional)")] = None,
        level: Annotated[Optional[StrictStr], Field(description="Search for schools at this level. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Public', 'Private' (optional). 'Public' returns all Elementary, Middle, High and Alternative schools")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Search for schools in this city (optional)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Search for schools in this 5-digit zip code (optional)")] = None,
        is_magnet: Annotated[Optional[StrictBool], Field(description="True = return only magnet schools, False = return only non-magnet schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_charter: Annotated[Optional[StrictBool], Field(description="True = return only charter schools, False = return only non-charter schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_virtual: Annotated[Optional[StrictBool], Field(description="True = return only virtual schools, False = return only non-virtual schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_title_i: Annotated[Optional[StrictBool], Field(description="True = return only Title I schools, False = return only non-Title I schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_title_i_schoolwide: Annotated[Optional[StrictBool], Field(description="True = return only Title I school-wide schools, False = return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only)")] = None,
        near_latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)")] = None,
        near_longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)")] = None,
        boundary_address: Annotated[Optional[StrictStr], Field(description="Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: '123 Main St. AnyTown CA 90001' (optional) (Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times")] = None,
        distance_miles: Annotated[Optional[StrictInt], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only)")] = None,
        is_in_boundary_only: Annotated[Optional[StrictBool], Field(description="Return only the schools that include given location (nearLatitude/nearLongitude) or (boundaryAddress) in its attendance boundary (Enterprise API level only)")] = None,
        box_latitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_longitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_latitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_longitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to retrieve (optional, default: 1)")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of schools to retrieve on a page (50 max) (optional, default: 10)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort list. Values are: schoolname, distance, rank. For descending order, precede with '-' i.e. -schoolname (optional, default: schoolname)")] = None,
        include_unranked_schools_in_rank_sort: Annotated[Optional[StrictBool], Field(description="If sortBy is 'rank', this boolean determines if schools with no rank are included in the result (optional, default: false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APISchoolList:
        """Returns a list of schools

        Search the SchoolDigger database for schools. You may use any combination of criteria as query parameters.

        :param st: Two character state (e.g. 'CA') - required (required)
        :type st: str
        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param q: Search term - note: will match school name or city (optional)
        :type q: str
        :param q_search_school_name_only: For parameter 'q', only search school names instead of school and city (optional)
        :type q_search_school_name_only: bool
        :param district_id: Search for schools within this district (7 digit district id) (optional)
        :type district_id: str
        :param level: Search for schools at this level. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Public', 'Private' (optional). 'Public' returns all Elementary, Middle, High and Alternative schools
        :type level: str
        :param city: Search for schools in this city (optional)
        :type city: str
        :param zip: Search for schools in this 5-digit zip code (optional)
        :type zip: str
        :param is_magnet: True = return only magnet schools, False = return only non-magnet schools (optional) (Pro, Enterprise API levels only)
        :type is_magnet: bool
        :param is_charter: True = return only charter schools, False = return only non-charter schools (optional) (Pro, Enterprise API levels only)
        :type is_charter: bool
        :param is_virtual: True = return only virtual schools, False = return only non-virtual schools (optional) (Pro, Enterprise API levels only)
        :type is_virtual: bool
        :param is_title_i: True = return only Title I schools, False = return only non-Title I schools (optional) (Pro, Enterprise API levels only)
        :type is_title_i: bool
        :param is_title_i_schoolwide: True = return only Title I school-wide schools, False = return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only)
        :type is_title_i_schoolwide: bool
        :param near_latitude: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)
        :type near_latitude: float
        :param near_longitude: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)
        :type near_longitude: float
        :param boundary_address: Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: '123 Main St. AnyTown CA 90001' (optional) (Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times
        :type boundary_address: str
        :param distance_miles: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only)
        :type distance_miles: int
        :param is_in_boundary_only: Return only the schools that include given location (nearLatitude/nearLongitude) or (boundaryAddress) in its attendance boundary (Enterprise API level only)
        :type is_in_boundary_only: bool
        :param box_latitude_nw: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_latitude_nw: float
        :param box_longitude_nw: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_longitude_nw: float
        :param box_latitude_se: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_latitude_se: float
        :param box_longitude_se: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_longitude_se: float
        :param page: Page number to retrieve (optional, default: 1)
        :type page: int
        :param per_page: Number of schools to retrieve on a page (50 max) (optional, default: 10)
        :type per_page: int
        :param sort_by: Sort list. Values are: schoolname, distance, rank. For descending order, precede with '-' i.e. -schoolname (optional, default: schoolname)
        :type sort_by: str
        :param include_unranked_schools_in_rank_sort: If sortBy is 'rank', this boolean determines if schools with no rank are included in the result (optional, default: false)
        :type include_unranked_schools_in_rank_sort: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schools_get_all_schools_serialize(
            st=st,
            app_id=app_id,
            app_key=app_key,
            q=q,
            q_search_school_name_only=q_search_school_name_only,
            district_id=district_id,
            level=level,
            city=city,
            zip=zip,
            is_magnet=is_magnet,
            is_charter=is_charter,
            is_virtual=is_virtual,
            is_title_i=is_title_i,
            is_title_i_schoolwide=is_title_i_schoolwide,
            near_latitude=near_latitude,
            near_longitude=near_longitude,
            boundary_address=boundary_address,
            distance_miles=distance_miles,
            is_in_boundary_only=is_in_boundary_only,
            box_latitude_nw=box_latitude_nw,
            box_longitude_nw=box_longitude_nw,
            box_latitude_se=box_latitude_se,
            box_longitude_se=box_longitude_se,
            page=page,
            per_page=per_page,
            sort_by=sort_by,
            include_unranked_schools_in_rank_sort=include_unranked_schools_in_rank_sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APISchoolList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def schools_get_all_schools_with_http_info(
        self,
        st: Annotated[StrictStr, Field(description="Two character state (e.g. 'CA') - required")],
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        q: Annotated[Optional[StrictStr], Field(description="Search term - note: will match school name or city (optional)")] = None,
        q_search_school_name_only: Annotated[Optional[StrictBool], Field(description="For parameter 'q', only search school names instead of school and city (optional)")] = None,
        district_id: Annotated[Optional[StrictStr], Field(description="Search for schools within this district (7 digit district id) (optional)")] = None,
        level: Annotated[Optional[StrictStr], Field(description="Search for schools at this level. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Public', 'Private' (optional). 'Public' returns all Elementary, Middle, High and Alternative schools")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Search for schools in this city (optional)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Search for schools in this 5-digit zip code (optional)")] = None,
        is_magnet: Annotated[Optional[StrictBool], Field(description="True = return only magnet schools, False = return only non-magnet schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_charter: Annotated[Optional[StrictBool], Field(description="True = return only charter schools, False = return only non-charter schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_virtual: Annotated[Optional[StrictBool], Field(description="True = return only virtual schools, False = return only non-virtual schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_title_i: Annotated[Optional[StrictBool], Field(description="True = return only Title I schools, False = return only non-Title I schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_title_i_schoolwide: Annotated[Optional[StrictBool], Field(description="True = return only Title I school-wide schools, False = return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only)")] = None,
        near_latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)")] = None,
        near_longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)")] = None,
        boundary_address: Annotated[Optional[StrictStr], Field(description="Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: '123 Main St. AnyTown CA 90001' (optional) (Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times")] = None,
        distance_miles: Annotated[Optional[StrictInt], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only)")] = None,
        is_in_boundary_only: Annotated[Optional[StrictBool], Field(description="Return only the schools that include given location (nearLatitude/nearLongitude) or (boundaryAddress) in its attendance boundary (Enterprise API level only)")] = None,
        box_latitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_longitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_latitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_longitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to retrieve (optional, default: 1)")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of schools to retrieve on a page (50 max) (optional, default: 10)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort list. Values are: schoolname, distance, rank. For descending order, precede with '-' i.e. -schoolname (optional, default: schoolname)")] = None,
        include_unranked_schools_in_rank_sort: Annotated[Optional[StrictBool], Field(description="If sortBy is 'rank', this boolean determines if schools with no rank are included in the result (optional, default: false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APISchoolList]:
        """Returns a list of schools

        Search the SchoolDigger database for schools. You may use any combination of criteria as query parameters.

        :param st: Two character state (e.g. 'CA') - required (required)
        :type st: str
        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param q: Search term - note: will match school name or city (optional)
        :type q: str
        :param q_search_school_name_only: For parameter 'q', only search school names instead of school and city (optional)
        :type q_search_school_name_only: bool
        :param district_id: Search for schools within this district (7 digit district id) (optional)
        :type district_id: str
        :param level: Search for schools at this level. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Public', 'Private' (optional). 'Public' returns all Elementary, Middle, High and Alternative schools
        :type level: str
        :param city: Search for schools in this city (optional)
        :type city: str
        :param zip: Search for schools in this 5-digit zip code (optional)
        :type zip: str
        :param is_magnet: True = return only magnet schools, False = return only non-magnet schools (optional) (Pro, Enterprise API levels only)
        :type is_magnet: bool
        :param is_charter: True = return only charter schools, False = return only non-charter schools (optional) (Pro, Enterprise API levels only)
        :type is_charter: bool
        :param is_virtual: True = return only virtual schools, False = return only non-virtual schools (optional) (Pro, Enterprise API levels only)
        :type is_virtual: bool
        :param is_title_i: True = return only Title I schools, False = return only non-Title I schools (optional) (Pro, Enterprise API levels only)
        :type is_title_i: bool
        :param is_title_i_schoolwide: True = return only Title I school-wide schools, False = return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only)
        :type is_title_i_schoolwide: bool
        :param near_latitude: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)
        :type near_latitude: float
        :param near_longitude: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)
        :type near_longitude: float
        :param boundary_address: Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: '123 Main St. AnyTown CA 90001' (optional) (Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times
        :type boundary_address: str
        :param distance_miles: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only)
        :type distance_miles: int
        :param is_in_boundary_only: Return only the schools that include given location (nearLatitude/nearLongitude) or (boundaryAddress) in its attendance boundary (Enterprise API level only)
        :type is_in_boundary_only: bool
        :param box_latitude_nw: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_latitude_nw: float
        :param box_longitude_nw: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_longitude_nw: float
        :param box_latitude_se: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_latitude_se: float
        :param box_longitude_se: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_longitude_se: float
        :param page: Page number to retrieve (optional, default: 1)
        :type page: int
        :param per_page: Number of schools to retrieve on a page (50 max) (optional, default: 10)
        :type per_page: int
        :param sort_by: Sort list. Values are: schoolname, distance, rank. For descending order, precede with '-' i.e. -schoolname (optional, default: schoolname)
        :type sort_by: str
        :param include_unranked_schools_in_rank_sort: If sortBy is 'rank', this boolean determines if schools with no rank are included in the result (optional, default: false)
        :type include_unranked_schools_in_rank_sort: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schools_get_all_schools_serialize(
            st=st,
            app_id=app_id,
            app_key=app_key,
            q=q,
            q_search_school_name_only=q_search_school_name_only,
            district_id=district_id,
            level=level,
            city=city,
            zip=zip,
            is_magnet=is_magnet,
            is_charter=is_charter,
            is_virtual=is_virtual,
            is_title_i=is_title_i,
            is_title_i_schoolwide=is_title_i_schoolwide,
            near_latitude=near_latitude,
            near_longitude=near_longitude,
            boundary_address=boundary_address,
            distance_miles=distance_miles,
            is_in_boundary_only=is_in_boundary_only,
            box_latitude_nw=box_latitude_nw,
            box_longitude_nw=box_longitude_nw,
            box_latitude_se=box_latitude_se,
            box_longitude_se=box_longitude_se,
            page=page,
            per_page=per_page,
            sort_by=sort_by,
            include_unranked_schools_in_rank_sort=include_unranked_schools_in_rank_sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APISchoolList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def schools_get_all_schools_without_preload_content(
        self,
        st: Annotated[StrictStr, Field(description="Two character state (e.g. 'CA') - required")],
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        q: Annotated[Optional[StrictStr], Field(description="Search term - note: will match school name or city (optional)")] = None,
        q_search_school_name_only: Annotated[Optional[StrictBool], Field(description="For parameter 'q', only search school names instead of school and city (optional)")] = None,
        district_id: Annotated[Optional[StrictStr], Field(description="Search for schools within this district (7 digit district id) (optional)")] = None,
        level: Annotated[Optional[StrictStr], Field(description="Search for schools at this level. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Public', 'Private' (optional). 'Public' returns all Elementary, Middle, High and Alternative schools")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Search for schools in this city (optional)")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Search for schools in this 5-digit zip code (optional)")] = None,
        is_magnet: Annotated[Optional[StrictBool], Field(description="True = return only magnet schools, False = return only non-magnet schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_charter: Annotated[Optional[StrictBool], Field(description="True = return only charter schools, False = return only non-charter schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_virtual: Annotated[Optional[StrictBool], Field(description="True = return only virtual schools, False = return only non-virtual schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_title_i: Annotated[Optional[StrictBool], Field(description="True = return only Title I schools, False = return only non-Title I schools (optional) (Pro, Enterprise API levels only)")] = None,
        is_title_i_schoolwide: Annotated[Optional[StrictBool], Field(description="True = return only Title I school-wide schools, False = return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only)")] = None,
        near_latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)")] = None,
        near_longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)")] = None,
        boundary_address: Annotated[Optional[StrictStr], Field(description="Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: '123 Main St. AnyTown CA 90001' (optional) (Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times")] = None,
        distance_miles: Annotated[Optional[StrictInt], Field(description="Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only)")] = None,
        is_in_boundary_only: Annotated[Optional[StrictBool], Field(description="Return only the schools that include given location (nearLatitude/nearLongitude) or (boundaryAddress) in its attendance boundary (Enterprise API level only)")] = None,
        box_latitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_longitude_nw: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_latitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        box_longitude_se: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number to retrieve (optional, default: 1)")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of schools to retrieve on a page (50 max) (optional, default: 10)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort list. Values are: schoolname, distance, rank. For descending order, precede with '-' i.e. -schoolname (optional, default: schoolname)")] = None,
        include_unranked_schools_in_rank_sort: Annotated[Optional[StrictBool], Field(description="If sortBy is 'rank', this boolean determines if schools with no rank are included in the result (optional, default: false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns a list of schools

        Search the SchoolDigger database for schools. You may use any combination of criteria as query parameters.

        :param st: Two character state (e.g. 'CA') - required (required)
        :type st: str
        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param q: Search term - note: will match school name or city (optional)
        :type q: str
        :param q_search_school_name_only: For parameter 'q', only search school names instead of school and city (optional)
        :type q_search_school_name_only: bool
        :param district_id: Search for schools within this district (7 digit district id) (optional)
        :type district_id: str
        :param level: Search for schools at this level. Valid values: 'Elementary', 'Middle', 'High', 'Alt', 'Public', 'Private' (optional). 'Public' returns all Elementary, Middle, High and Alternative schools
        :type level: str
        :param city: Search for schools in this city (optional)
        :type city: str
        :param zip: Search for schools in this 5-digit zip code (optional)
        :type zip: str
        :param is_magnet: True = return only magnet schools, False = return only non-magnet schools (optional) (Pro, Enterprise API levels only)
        :type is_magnet: bool
        :param is_charter: True = return only charter schools, False = return only non-charter schools (optional) (Pro, Enterprise API levels only)
        :type is_charter: bool
        :param is_virtual: True = return only virtual schools, False = return only non-virtual schools (optional) (Pro, Enterprise API levels only)
        :type is_virtual: bool
        :param is_title_i: True = return only Title I schools, False = return only non-Title I schools (optional) (Pro, Enterprise API levels only)
        :type is_title_i: bool
        :param is_title_i_schoolwide: True = return only Title I school-wide schools, False = return only non-Title I school-wide schools (optional) (Pro, Enterprise API levels only)
        :type is_title_i_schoolwide: bool
        :param near_latitude: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. 44.982560) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)
        :type near_latitude: float
        :param near_longitude: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (e.g. -124.289185) (optional) (Pro, Enterprise API levels only. Enterprise API level will flag schools that include lat/long in its attendance boundary.)
        :type near_longitude: float
        :param boundary_address: Full U.S. address: flag returned schools that include this address in its attendance boundary. Example: '123 Main St. AnyTown CA 90001' (optional) (Enterprise API level only) IMPORTANT NOTE: If you have the lat/long of the address, use nearLatitude and nearLongitude instead for much faster response times
        :type boundary_address: str
        :param distance_miles: Search for schools within (distanceMiles) of (nearLatitude)/(nearLongitude) (Default 5 miles) (optional) (Pro, Enterprise API levels only)
        :type distance_miles: int
        :param is_in_boundary_only: Return only the schools that include given location (nearLatitude/nearLongitude) or (boundaryAddress) in its attendance boundary (Enterprise API level only)
        :type is_in_boundary_only: bool
        :param box_latitude_nw: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_latitude_nw: float
        :param box_longitude_nw: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_longitude_nw: float
        :param box_latitude_se: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_latitude_se: float
        :param box_longitude_se: Search for schools within a 'box' defined by (boxLatitudeNW/boxLongitudeNW) to (boxLongitudeSE/boxLatitudeSE) (optional)
        :type box_longitude_se: float
        :param page: Page number to retrieve (optional, default: 1)
        :type page: int
        :param per_page: Number of schools to retrieve on a page (50 max) (optional, default: 10)
        :type per_page: int
        :param sort_by: Sort list. Values are: schoolname, distance, rank. For descending order, precede with '-' i.e. -schoolname (optional, default: schoolname)
        :type sort_by: str
        :param include_unranked_schools_in_rank_sort: If sortBy is 'rank', this boolean determines if schools with no rank are included in the result (optional, default: false)
        :type include_unranked_schools_in_rank_sort: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schools_get_all_schools_serialize(
            st=st,
            app_id=app_id,
            app_key=app_key,
            q=q,
            q_search_school_name_only=q_search_school_name_only,
            district_id=district_id,
            level=level,
            city=city,
            zip=zip,
            is_magnet=is_magnet,
            is_charter=is_charter,
            is_virtual=is_virtual,
            is_title_i=is_title_i,
            is_title_i_schoolwide=is_title_i_schoolwide,
            near_latitude=near_latitude,
            near_longitude=near_longitude,
            boundary_address=boundary_address,
            distance_miles=distance_miles,
            is_in_boundary_only=is_in_boundary_only,
            box_latitude_nw=box_latitude_nw,
            box_longitude_nw=box_longitude_nw,
            box_latitude_se=box_latitude_se,
            box_longitude_se=box_longitude_se,
            page=page,
            per_page=per_page,
            sort_by=sort_by,
            include_unranked_schools_in_rank_sort=include_unranked_schools_in_rank_sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APISchoolList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _schools_get_all_schools_serialize(
        self,
        st,
        app_id,
        app_key,
        q,
        q_search_school_name_only,
        district_id,
        level,
        city,
        zip,
        is_magnet,
        is_charter,
        is_virtual,
        is_title_i,
        is_title_i_schoolwide,
        near_latitude,
        near_longitude,
        boundary_address,
        distance_miles,
        is_in_boundary_only,
        box_latitude_nw,
        box_longitude_nw,
        box_latitude_se,
        box_longitude_se,
        page,
        per_page,
        sort_by,
        include_unranked_schools_in_rank_sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if st is not None:
            
            _query_params.append(('st', st))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        if q_search_school_name_only is not None:
            
            _query_params.append(('qSearchSchoolNameOnly', q_search_school_name_only))
            
        if district_id is not None:
            
            _query_params.append(('districtID', district_id))
            
        if level is not None:
            
            _query_params.append(('level', level))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if is_magnet is not None:
            
            _query_params.append(('isMagnet', is_magnet))
            
        if is_charter is not None:
            
            _query_params.append(('isCharter', is_charter))
            
        if is_virtual is not None:
            
            _query_params.append(('isVirtual', is_virtual))
            
        if is_title_i is not None:
            
            _query_params.append(('isTitleI', is_title_i))
            
        if is_title_i_schoolwide is not None:
            
            _query_params.append(('isTitleISchoolwide', is_title_i_schoolwide))
            
        if near_latitude is not None:
            
            _query_params.append(('nearLatitude', near_latitude))
            
        if near_longitude is not None:
            
            _query_params.append(('nearLongitude', near_longitude))
            
        if boundary_address is not None:
            
            _query_params.append(('boundaryAddress', boundary_address))
            
        if distance_miles is not None:
            
            _query_params.append(('distanceMiles', distance_miles))
            
        if is_in_boundary_only is not None:
            
            _query_params.append(('isInBoundaryOnly', is_in_boundary_only))
            
        if box_latitude_nw is not None:
            
            _query_params.append(('boxLatitudeNW', box_latitude_nw))
            
        if box_longitude_nw is not None:
            
            _query_params.append(('boxLongitudeNW', box_longitude_nw))
            
        if box_latitude_se is not None:
            
            _query_params.append(('boxLatitudeSE', box_latitude_se))
            
        if box_longitude_se is not None:
            
            _query_params.append(('boxLongitudeSE', box_longitude_se))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('perPage', per_page))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if include_unranked_schools_in_rank_sort is not None:
            
            _query_params.append(('includeUnrankedSchoolsInRankSort', include_unranked_schools_in_rank_sort))
            
        if app_id is not None:
            
            _query_params.append(('appID', app_id))
            
        if app_key is not None:
            
            _query_params.append(('appKey', app_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/schools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def schools_get_school10(
        self,
        id: Annotated[StrictStr, Field(description="The 12 digit School ID (e.g. 064215006903)")],
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APISchool10Full:
        """Returns a detailed record for one school

        Retrieve a school record from the SchoolDigger database

        :param id: The 12 digit School ID (e.g. 064215006903) (required)
        :type id: str
        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schools_get_school10_serialize(
            id=id,
            app_id=app_id,
            app_key=app_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APISchool10Full",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def schools_get_school10_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The 12 digit School ID (e.g. 064215006903)")],
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APISchool10Full]:
        """Returns a detailed record for one school

        Retrieve a school record from the SchoolDigger database

        :param id: The 12 digit School ID (e.g. 064215006903) (required)
        :type id: str
        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schools_get_school10_serialize(
            id=id,
            app_id=app_id,
            app_key=app_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APISchool10Full",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def schools_get_school10_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The 12 digit School ID (e.g. 064215006903)")],
        app_id: Annotated[StrictStr, Field(description="Your API app id")],
        app_key: Annotated[StrictStr, Field(description="Your API app key")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns a detailed record for one school

        Retrieve a school record from the SchoolDigger database

        :param id: The 12 digit School ID (e.g. 064215006903) (required)
        :type id: str
        :param app_id: Your API app id (required)
        :type app_id: str
        :param app_key: Your API app key (required)
        :type app_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schools_get_school10_serialize(
            id=id,
            app_id=app_id,
            app_key=app_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APISchool10Full",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _schools_get_school10_serialize(
        self,
        id,
        app_id,
        app_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if app_id is not None:
            
            _query_params.append(('appID', app_id))
            
        if app_key is not None:
            
            _query_params.append(('appKey', app_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/schools/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



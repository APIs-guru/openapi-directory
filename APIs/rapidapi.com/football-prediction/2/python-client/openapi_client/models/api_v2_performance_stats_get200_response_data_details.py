# coding: utf-8

"""
    Football Prediction API

    The Football Prediction API allows developers to get predictions for upcoming football (soccer) matches, results for past matches, and performance monitoring for statistical models.

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_v2_performance_stats_get200_response_data_details_last14_days import ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days
from typing import Optional, Set
from typing_extensions import Self

class ApiV2PerformanceStatsGet200ResponseDataDetails(BaseModel):
    """
    ApiV2PerformanceStatsGet200ResponseDataDetails
    """ # noqa: E501
    last_14_days: Optional[ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days] = None
    last_30_days: Optional[ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days] = None
    last_7_days: Optional[ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days] = None
    yesterday: Optional[ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days] = None
    __properties: ClassVar[List[str]] = ["last_14_days", "last_30_days", "last_7_days", "yesterday"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV2PerformanceStatsGet200ResponseDataDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_14_days
        if self.last_14_days:
            _dict['last_14_days'] = self.last_14_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_30_days
        if self.last_30_days:
            _dict['last_30_days'] = self.last_30_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_7_days
        if self.last_7_days:
            _dict['last_7_days'] = self.last_7_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of yesterday
        if self.yesterday:
            _dict['yesterday'] = self.yesterday.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV2PerformanceStatsGet200ResponseDataDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "last_14_days": ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days.from_dict(obj["last_14_days"]) if obj.get("last_14_days") is not None else None,
            "last_30_days": ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days.from_dict(obj["last_30_days"]) if obj.get("last_30_days") is not None else None,
            "last_7_days": ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days.from_dict(obj["last_7_days"]) if obj.get("last_7_days") is not None else None,
            "yesterday": ApiV2PerformanceStatsGet200ResponseDataDetailsLast14Days.from_dict(obj["yesterday"]) if obj.get("yesterday") is not None else None
        })
        return _obj



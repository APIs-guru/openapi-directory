# coding: utf-8

"""
    Moon API

    # Moon-API.com Postman Collection  Welcome to the Moon Phase API Postman Collection! This collection contains a set of pre-configured API requests to interact with the Moon Phase API endpoints provided by [moon-api.com](https://moon-api.com). Explore the enchanting world of the moon and its ever-changing phases with ease using this collection.  ## Getting Started  To start using this Postman collection, follow these steps:  1. [Download and install Postman](https://www.postman.com/downloads/) if you haven't already. 2. Import the Moon API Postman Collection into your Postman app. 3. Set your RapidAPI key in the collection's environment variables. 4. Begin making requests to explore the moon phase data and retrieve lunar information.       ## Collection Structure  The Moon-API.com Postman Collection consists of the following requests:  - **Basic Moon Phase**: Retrieve the main moon phase data. - **Advanced Moon Phase**: Get detailed moon phase data based on a specific timezone and coordinates. - **Plain Text Moon Phase**: Get a plain text description of the current moon phase. - **Emoji Moon Phase**: Get the relevant emoji of the current moon phase. - **Lunar Calender**: Get the current year's moon phases in a markdown calender.       ## Environment Variables  The collection uses environment variables to store your RapidAPI key. To use this collection effectively, ensure you set the `X-Rapidapi-Key` variable in the collection's environment with your actual RapidAPI key.  ## How to Use  1. Select the desired request from the Moon API collection. 2. Click on the request to open it. 3. Send the request and view the response to retrieve the moon phase data.       ## Documentation  For more information on the Moon Phase API endpoints and their response formats, refer to the [official Moon API documentation](https://rapidapi.com/MoonAPIcom/api/moon-phase/details). Visit [moon-api.com](https://moon-api.com) to learn more about the Moon Phase API and the services provided.  Happy moon exploration with the Moon Phase API Postman Collection provided by [moon-api.com](https://moon-api.com)!

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetAdvancedMoonPhaseData200ResponseMoon(BaseModel):
    """
    GetAdvancedMoonPhaseData200ResponseMoon
    """ # noqa: E501
    age_days: Optional[Union[StrictFloat, StrictInt]] = None
    emoji: Optional[StrictStr] = None
    illumination: Optional[StrictStr] = None
    lunar_cycle: Optional[StrictStr] = None
    moon_altitude: Optional[Union[StrictFloat, StrictInt]] = None
    moon_azimuth: Optional[Union[StrictFloat, StrictInt]] = None
    moon_distance: Optional[Union[StrictFloat, StrictInt]] = None
    moon_parallactic_angle: Optional[Union[StrictFloat, StrictInt]] = None
    moonrise: Optional[StrictStr] = None
    moonrise_timestamp: Optional[Union[StrictFloat, StrictInt]] = None
    moonset: Optional[StrictStr] = None
    moonset_timestamp: Optional[Union[StrictFloat, StrictInt]] = None
    phase: Optional[StrictStr] = None
    phase_name: Optional[StrictStr] = None
    stage: Optional[StrictStr] = None
    zodiac_sign: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["age_days", "emoji", "illumination", "lunar_cycle", "moon_altitude", "moon_azimuth", "moon_distance", "moon_parallactic_angle", "moonrise", "moonrise_timestamp", "moonset", "moonset_timestamp", "phase", "phase_name", "stage", "zodiac_sign"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAdvancedMoonPhaseData200ResponseMoon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAdvancedMoonPhaseData200ResponseMoon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age_days": obj.get("age_days"),
            "emoji": obj.get("emoji"),
            "illumination": obj.get("illumination"),
            "lunar_cycle": obj.get("lunar_cycle"),
            "moon_altitude": obj.get("moon_altitude"),
            "moon_azimuth": obj.get("moon_azimuth"),
            "moon_distance": obj.get("moon_distance"),
            "moon_parallactic_angle": obj.get("moon_parallactic_angle"),
            "moonrise": obj.get("moonrise"),
            "moonrise_timestamp": obj.get("moonrise_timestamp"),
            "moonset": obj.get("moonset"),
            "moonset_timestamp": obj.get("moonset_timestamp"),
            "phase": obj.get("phase"),
            "phase_name": obj.get("phase_name"),
            "stage": obj.get("stage"),
            "zodiac_sign": obj.get("zodiac_sign")
        })
        return _obj



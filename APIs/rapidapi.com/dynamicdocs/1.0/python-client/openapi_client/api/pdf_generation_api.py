# coding: utf-8

"""
    DynamicDocs

    ADVICEment's [DynamicDocs API automates your document generation](https://advicement.io/dynamic-documents-api) and creates dynamic, optimized, interactive PDFs. Write your templates in LaTeX and call the API with JSON data to get your PDFs in seconds.  The template files are stored in your dashboard and can be edited, tested and published online. Document templates can contain dynamic text using logic statements, include tables stretching multiple pages and show great-looking charts based on the underlying data. LaTeX creates crisp, high-quality documents where every detail is well-positioned and styled.  Integrate with ADVICEment DynamicDocs API in minutes and start creating beautiful [dynamic PDF documents](https://advicement.io/dynamic-documents-api) for your needs.  For more information, visit [DynamicDocs API Home page](https://advicement.io/dynamic-documents-api).

    The version of the OpenAPI document: 1.0
    Contact: info@advicement.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Any, Dict, Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PDFGenerationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def compile(
        self,
        template_token: Annotated[StrictStr, Field(description="The template-token is available in your template settings after publishing your template.")],
        content_type: Annotated[StrictStr, Field(description="Should be set to \"application/json\"")],
        doc_url_expires_in: Annotated[Optional[StrictInt], Field(description="The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.")] = None,
        latex_compiler: Annotated[Optional[StrictStr], Field(description="The latex-compiler parameter can take the following values:  pdflatex lualatex")] = None,
        latex_runs_: Annotated[Optional[Annotated[int, Field(le=3, strict=True, ge=1)]], Field(description="The latex-runs is a numerical parameter and can take values of 1, 2 and 3. ")] = None,
        main_file_name: Annotated[Optional[StrictStr], Field(description="The main-file-name is a string parameter which identifies the main file to compile.")] = None,
        doc_file_name: Annotated[Optional[StrictStr], Field(description="The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.")] = None,
        body: Annotated[Optional[Dict[str, Any]], Field(description="Post the dynamic data for the template to compile the document PDF.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Compile New Document PDF

        Compile a PDF document from a specific template

        :param template_token: The template-token is available in your template settings after publishing your template. (required)
        :type template_token: str
        :param content_type: Should be set to \"application/json\" (required)
        :type content_type: str
        :param doc_url_expires_in: The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.
        :type doc_url_expires_in: int
        :param latex_compiler: The latex-compiler parameter can take the following values:  pdflatex lualatex
        :type latex_compiler: str
        :param latex_runs_: The latex-runs is a numerical parameter and can take values of 1, 2 and 3. 
        :type latex_runs_: int
        :param main_file_name: The main-file-name is a string parameter which identifies the main file to compile.
        :type main_file_name: str
        :param doc_file_name: The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.
        :type doc_file_name: str
        :param body: Post the dynamic data for the template to compile the document PDF.
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compile_serialize(
            template_token=template_token,
            content_type=content_type,
            doc_url_expires_in=doc_url_expires_in,
            latex_compiler=latex_compiler,
            latex_runs_=latex_runs_,
            main_file_name=main_file_name,
            doc_file_name=doc_file_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def compile_with_http_info(
        self,
        template_token: Annotated[StrictStr, Field(description="The template-token is available in your template settings after publishing your template.")],
        content_type: Annotated[StrictStr, Field(description="Should be set to \"application/json\"")],
        doc_url_expires_in: Annotated[Optional[StrictInt], Field(description="The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.")] = None,
        latex_compiler: Annotated[Optional[StrictStr], Field(description="The latex-compiler parameter can take the following values:  pdflatex lualatex")] = None,
        latex_runs_: Annotated[Optional[Annotated[int, Field(le=3, strict=True, ge=1)]], Field(description="The latex-runs is a numerical parameter and can take values of 1, 2 and 3. ")] = None,
        main_file_name: Annotated[Optional[StrictStr], Field(description="The main-file-name is a string parameter which identifies the main file to compile.")] = None,
        doc_file_name: Annotated[Optional[StrictStr], Field(description="The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.")] = None,
        body: Annotated[Optional[Dict[str, Any]], Field(description="Post the dynamic data for the template to compile the document PDF.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Compile New Document PDF

        Compile a PDF document from a specific template

        :param template_token: The template-token is available in your template settings after publishing your template. (required)
        :type template_token: str
        :param content_type: Should be set to \"application/json\" (required)
        :type content_type: str
        :param doc_url_expires_in: The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.
        :type doc_url_expires_in: int
        :param latex_compiler: The latex-compiler parameter can take the following values:  pdflatex lualatex
        :type latex_compiler: str
        :param latex_runs_: The latex-runs is a numerical parameter and can take values of 1, 2 and 3. 
        :type latex_runs_: int
        :param main_file_name: The main-file-name is a string parameter which identifies the main file to compile.
        :type main_file_name: str
        :param doc_file_name: The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.
        :type doc_file_name: str
        :param body: Post the dynamic data for the template to compile the document PDF.
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compile_serialize(
            template_token=template_token,
            content_type=content_type,
            doc_url_expires_in=doc_url_expires_in,
            latex_compiler=latex_compiler,
            latex_runs_=latex_runs_,
            main_file_name=main_file_name,
            doc_file_name=doc_file_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def compile_without_preload_content(
        self,
        template_token: Annotated[StrictStr, Field(description="The template-token is available in your template settings after publishing your template.")],
        content_type: Annotated[StrictStr, Field(description="Should be set to \"application/json\"")],
        doc_url_expires_in: Annotated[Optional[StrictInt], Field(description="The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.")] = None,
        latex_compiler: Annotated[Optional[StrictStr], Field(description="The latex-compiler parameter can take the following values:  pdflatex lualatex")] = None,
        latex_runs_: Annotated[Optional[Annotated[int, Field(le=3, strict=True, ge=1)]], Field(description="The latex-runs is a numerical parameter and can take values of 1, 2 and 3. ")] = None,
        main_file_name: Annotated[Optional[StrictStr], Field(description="The main-file-name is a string parameter which identifies the main file to compile.")] = None,
        doc_file_name: Annotated[Optional[StrictStr], Field(description="The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.")] = None,
        body: Annotated[Optional[Dict[str, Any]], Field(description="Post the dynamic data for the template to compile the document PDF.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Compile New Document PDF

        Compile a PDF document from a specific template

        :param template_token: The template-token is available in your template settings after publishing your template. (required)
        :type template_token: str
        :param content_type: Should be set to \"application/json\" (required)
        :type content_type: str
        :param doc_url_expires_in: The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.
        :type doc_url_expires_in: int
        :param latex_compiler: The latex-compiler parameter can take the following values:  pdflatex lualatex
        :type latex_compiler: str
        :param latex_runs_: The latex-runs is a numerical parameter and can take values of 1, 2 and 3. 
        :type latex_runs_: int
        :param main_file_name: The main-file-name is a string parameter which identifies the main file to compile.
        :type main_file_name: str
        :param doc_file_name: The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.
        :type doc_file_name: str
        :param body: Post the dynamic data for the template to compile the document PDF.
        :type body: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compile_serialize(
            template_token=template_token,
            content_type=content_type,
            doc_url_expires_in=doc_url_expires_in,
            latex_compiler=latex_compiler,
            latex_runs_=latex_runs_,
            main_file_name=main_file_name,
            doc_file_name=doc_file_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _compile_serialize(
        self,
        template_token,
        content_type,
        doc_url_expires_in,
        latex_compiler,
        latex_runs_,
        main_file_name,
        doc_file_name,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_token is not None:
            _path_params['template-token'] = template_token
        # process the query parameters
        if doc_url_expires_in is not None:
            
            _query_params.append(('doc-url-expires-in', doc_url_expires_in))
            
        if latex_compiler is not None:
            
            _query_params.append(('latex-compiler', latex_compiler))
            
        if latex_runs_ is not None:
            
            _query_params.append(('latex-runs ', latex_runs_))
            
        if main_file_name is not None:
            
            _query_params.append(('main-file-name', main_file_name))
            
        if doc_file_name is not None:
            
            _query_params.append(('doc-file-name', doc_file_name))
            
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Adv-Security-Token', 
            'X-RapidAPI-Key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/templates/{template-token}/compile',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.product_option import ProductOption

class TestProductOption(unittest.TestCase):
    """ProductOption unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProductOption:
        """Test ProductOption
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProductOption`
        """
        model = ProductOption()
        if include_optional:
            return ProductOption(
                additional_fields = openapi_client.models.additional_fields.additional_fields(),
                available = True,
                custom_fields = openapi_client.models.custom_fields.custom_fields(),
                description = '',
                id = '',
                name = '',
                option_items = [
                    openapi_client.models.product_option_item.Product_Option_Item(
                        additional_fields = openapi_client.models.additional_fields.additional_fields(), 
                        custom_fields = openapi_client.models.custom_fields.custom_fields(), 
                        id = '', 
                        name = '', 
                        price = '', 
                        product_option_item_id = '', 
                        quantity = 56, 
                        sku = '', 
                        sort_order = 56, 
                        type_price = '', 
                        weight = '', )
                    ],
                product_option_id = '',
                required = True,
                sort_order = 56,
                type = '',
                used_in_combination = True
            )
        else:
            return ProductOption(
        )
        """

    def testProductOption(self):
        """Test ProductOption"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

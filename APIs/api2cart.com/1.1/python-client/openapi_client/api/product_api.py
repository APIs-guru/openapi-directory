# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.account_config_update200_response import AccountConfigUpdate200Response
from openapi_client.models.attribute_delete200_response import AttributeDelete200Response
from openapi_client.models.cart_config_update200_response import CartConfigUpdate200Response
from openapi_client.models.cart_validate200_response import CartValidate200Response
from openapi_client.models.model_response_product_attribute_list import ModelResponseProductAttributeList
from openapi_client.models.model_response_product_child_item_list import ModelResponseProductChildItemList
from openapi_client.models.model_response_product_list import ModelResponseProductList
from openapi_client.models.product_add import ProductAdd
from openapi_client.models.product_add200_response import ProductAdd200Response
from openapi_client.models.product_attribute_value_set200_response import ProductAttributeValueSet200Response
from openapi_client.models.product_attribute_value_unset200_response import ProductAttributeValueUnset200Response
from openapi_client.models.product_brand_list200_response import ProductBrandList200Response
from openapi_client.models.product_child_item_find200_response import ProductChildItemFind200Response
from openapi_client.models.product_child_item_info200_response import ProductChildItemInfo200Response
from openapi_client.models.product_count200_response import ProductCount200Response
from openapi_client.models.product_currency_add200_response import ProductCurrencyAdd200Response
from openapi_client.models.product_currency_list200_response import ProductCurrencyList200Response
from openapi_client.models.product_delete200_response import ProductDelete200Response
from openapi_client.models.product_find200_response import ProductFind200Response
from openapi_client.models.product_image_add import ProductImageAdd
from openapi_client.models.product_image_add200_response import ProductImageAdd200Response
from openapi_client.models.product_image_update200_response import ProductImageUpdate200Response
from openapi_client.models.product_info200_response import ProductInfo200Response
from openapi_client.models.product_manufacturer_add200_response import ProductManufacturerAdd200Response
from openapi_client.models.product_option_add200_response import ProductOptionAdd200Response
from openapi_client.models.product_option_assign200_response import ProductOptionAssign200Response
from openapi_client.models.product_option_list200_response import ProductOptionList200Response
from openapi_client.models.product_option_value_add200_response import ProductOptionValueAdd200Response
from openapi_client.models.product_option_value_assign200_response import ProductOptionValueAssign200Response
from openapi_client.models.product_price_add import ProductPriceAdd
from openapi_client.models.product_price_update import ProductPriceUpdate
from openapi_client.models.product_review_list200_response import ProductReviewList200Response
from openapi_client.models.product_tax_add import ProductTaxAdd
from openapi_client.models.product_tax_add200_response import ProductTaxAdd200Response
from openapi_client.models.product_update import ProductUpdate
from openapi_client.models.product_variant_add import ProductVariantAdd
from openapi_client.models.product_variant_add200_response import ProductVariantAdd200Response
from openapi_client.models.product_variant_count200_response import ProductVariantCount200Response
from openapi_client.models.product_variant_image_add import ProductVariantImageAdd
from openapi_client.models.product_variant_list200_response import ProductVariantList200Response
from openapi_client.models.product_variant_price_add import ProductVariantPriceAdd
from openapi_client.models.product_variant_price_update import ProductVariantPriceUpdate
from openapi_client.models.product_variant_update import ProductVariantUpdate

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ProductApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def product_add(
        self,
        product_add: ProductAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductAdd200Response:
        """product_add

        Add new product to store.

        :param product_add: (required)
        :type product_add: ProductAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_add_serialize(
            product_add=product_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_add_with_http_info(
        self,
        product_add: ProductAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductAdd200Response]:
        """product_add

        Add new product to store.

        :param product_add: (required)
        :type product_add: ProductAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_add_serialize(
            product_add=product_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_add_without_preload_content(
        self,
        product_add: ProductAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_add

        Add new product to store.

        :param product_add: (required)
        :type product_add: ProductAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_add_serialize(
            product_add=product_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_add_serialize(
        self,
        product_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_add is not None:
            _body_params = product_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_attribute_list(
        self,
        product_id: Annotated[StrictStr, Field(description="Retrieves attributes specified by product id")],
        attribute_id: Annotated[Optional[StrictStr], Field(description="Retrieves info for specified attribute_id")] = None,
        variant_id: Annotated[Optional[StrictStr], Field(description="Defines product's variants specified by variant id")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        attribute_group_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_group_id")] = None,
        set_name: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by set_name in Magento")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by store id")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseProductAttributeList:
        """product_attribute_list

        Get list of attributes and values.

        :param product_id: Retrieves attributes specified by product id (required)
        :type product_id: str
        :param attribute_id: Retrieves info for specified attribute_id
        :type attribute_id: str
        :param variant_id: Defines product's variants specified by variant id
        :type variant_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param attribute_group_id: Filter by attribute_group_id
        :type attribute_group_id: str
        :param set_name: Retrieves attributes specified by set_name in Magento
        :type set_name: str
        :param lang_id: Retrieves attributes specified by language id
        :type lang_id: str
        :param store_id: Retrieves attributes specified by store id
        :type store_id: str
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_list_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            variant_id=variant_id,
            page_cursor=page_cursor,
            start=start,
            count=count,
            attribute_group_id=attribute_group_id,
            set_name=set_name,
            lang_id=lang_id,
            store_id=store_id,
            sort_by=sort_by,
            sort_direction=sort_direction,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductAttributeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_attribute_list_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Retrieves attributes specified by product id")],
        attribute_id: Annotated[Optional[StrictStr], Field(description="Retrieves info for specified attribute_id")] = None,
        variant_id: Annotated[Optional[StrictStr], Field(description="Defines product's variants specified by variant id")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        attribute_group_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_group_id")] = None,
        set_name: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by set_name in Magento")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by store id")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseProductAttributeList]:
        """product_attribute_list

        Get list of attributes and values.

        :param product_id: Retrieves attributes specified by product id (required)
        :type product_id: str
        :param attribute_id: Retrieves info for specified attribute_id
        :type attribute_id: str
        :param variant_id: Defines product's variants specified by variant id
        :type variant_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param attribute_group_id: Filter by attribute_group_id
        :type attribute_group_id: str
        :param set_name: Retrieves attributes specified by set_name in Magento
        :type set_name: str
        :param lang_id: Retrieves attributes specified by language id
        :type lang_id: str
        :param store_id: Retrieves attributes specified by store id
        :type store_id: str
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_list_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            variant_id=variant_id,
            page_cursor=page_cursor,
            start=start,
            count=count,
            attribute_group_id=attribute_group_id,
            set_name=set_name,
            lang_id=lang_id,
            store_id=store_id,
            sort_by=sort_by,
            sort_direction=sort_direction,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductAttributeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_attribute_list_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Retrieves attributes specified by product id")],
        attribute_id: Annotated[Optional[StrictStr], Field(description="Retrieves info for specified attribute_id")] = None,
        variant_id: Annotated[Optional[StrictStr], Field(description="Defines product's variants specified by variant id")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        attribute_group_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_group_id")] = None,
        set_name: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by set_name in Magento")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves attributes specified by store id")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_attribute_list

        Get list of attributes and values.

        :param product_id: Retrieves attributes specified by product id (required)
        :type product_id: str
        :param attribute_id: Retrieves info for specified attribute_id
        :type attribute_id: str
        :param variant_id: Defines product's variants specified by variant id
        :type variant_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param attribute_group_id: Filter by attribute_group_id
        :type attribute_group_id: str
        :param set_name: Retrieves attributes specified by set_name in Magento
        :type set_name: str
        :param lang_id: Retrieves attributes specified by language id
        :type lang_id: str
        :param store_id: Retrieves attributes specified by store id
        :type store_id: str
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_list_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            variant_id=variant_id,
            page_cursor=page_cursor,
            start=start,
            count=count,
            attribute_group_id=attribute_group_id,
            set_name=set_name,
            lang_id=lang_id,
            store_id=store_id,
            sort_by=sort_by,
            sort_direction=sort_direction,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductAttributeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_attribute_list_serialize(
        self,
        product_id,
        attribute_id,
        variant_id,
        page_cursor,
        start,
        count,
        attribute_group_id,
        set_name,
        lang_id,
        store_id,
        sort_by,
        sort_direction,
        params,
        response_fields,
        exclude,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if attribute_id is not None:
            
            _query_params.append(('attribute_id', attribute_id))
            
        if variant_id is not None:
            
            _query_params.append(('variant_id', variant_id))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if attribute_group_id is not None:
            
            _query_params.append(('attribute_group_id', attribute_group_id))
            
        if set_name is not None:
            
            _query_params.append(('set_name', set_name))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.attribute.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_attribute_value_set(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the attribute should be added")],
        attribute_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_id")] = None,
        attribute_group_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_group_id")] = None,
        attribute_name: Annotated[Optional[StrictStr], Field(description="Define attribute name")] = None,
        value: Annotated[Optional[StrictStr], Field(description="Define attribute value")] = None,
        value_id: Annotated[Optional[StrictInt], Field(description="Define attribute value id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductAttributeValueSet200Response:
        """product_attribute_value_set

        Set attribute value to product.

        :param product_id: Defines product id where the attribute should be added (required)
        :type product_id: str
        :param attribute_id: Filter by attribute_id
        :type attribute_id: str
        :param attribute_group_id: Filter by attribute_group_id
        :type attribute_group_id: str
        :param attribute_name: Define attribute name
        :type attribute_name: str
        :param value: Define attribute value
        :type value: str
        :param value_id: Define attribute value id
        :type value_id: int
        :param lang_id: Language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_value_set_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            attribute_group_id=attribute_group_id,
            attribute_name=attribute_name,
            value=value,
            value_id=value_id,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAttributeValueSet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_attribute_value_set_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the attribute should be added")],
        attribute_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_id")] = None,
        attribute_group_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_group_id")] = None,
        attribute_name: Annotated[Optional[StrictStr], Field(description="Define attribute name")] = None,
        value: Annotated[Optional[StrictStr], Field(description="Define attribute value")] = None,
        value_id: Annotated[Optional[StrictInt], Field(description="Define attribute value id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductAttributeValueSet200Response]:
        """product_attribute_value_set

        Set attribute value to product.

        :param product_id: Defines product id where the attribute should be added (required)
        :type product_id: str
        :param attribute_id: Filter by attribute_id
        :type attribute_id: str
        :param attribute_group_id: Filter by attribute_group_id
        :type attribute_group_id: str
        :param attribute_name: Define attribute name
        :type attribute_name: str
        :param value: Define attribute value
        :type value: str
        :param value_id: Define attribute value id
        :type value_id: int
        :param lang_id: Language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_value_set_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            attribute_group_id=attribute_group_id,
            attribute_name=attribute_name,
            value=value,
            value_id=value_id,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAttributeValueSet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_attribute_value_set_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the attribute should be added")],
        attribute_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_id")] = None,
        attribute_group_id: Annotated[Optional[StrictStr], Field(description="Filter by attribute_group_id")] = None,
        attribute_name: Annotated[Optional[StrictStr], Field(description="Define attribute name")] = None,
        value: Annotated[Optional[StrictStr], Field(description="Define attribute value")] = None,
        value_id: Annotated[Optional[StrictInt], Field(description="Define attribute value id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_attribute_value_set

        Set attribute value to product.

        :param product_id: Defines product id where the attribute should be added (required)
        :type product_id: str
        :param attribute_id: Filter by attribute_id
        :type attribute_id: str
        :param attribute_group_id: Filter by attribute_group_id
        :type attribute_group_id: str
        :param attribute_name: Define attribute name
        :type attribute_name: str
        :param value: Define attribute value
        :type value: str
        :param value_id: Define attribute value id
        :type value_id: int
        :param lang_id: Language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_value_set_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            attribute_group_id=attribute_group_id,
            attribute_name=attribute_name,
            value=value,
            value_id=value_id,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAttributeValueSet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_attribute_value_set_serialize(
        self,
        product_id,
        attribute_id,
        attribute_group_id,
        attribute_name,
        value,
        value_id,
        lang_id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if attribute_id is not None:
            
            _query_params.append(('attribute_id', attribute_id))
            
        if attribute_group_id is not None:
            
            _query_params.append(('attribute_group_id', attribute_group_id))
            
        if attribute_name is not None:
            
            _query_params.append(('attribute_name', attribute_name))
            
        if value is not None:
            
            _query_params.append(('value', value))
            
        if value_id is not None:
            
            _query_params.append(('value_id', value_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.attribute.value.set.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_attribute_value_unset(
        self,
        product_id: Annotated[StrictStr, Field(description="Product id")],
        attribute_id: Annotated[StrictStr, Field(description="Attribute Id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        include_default: Annotated[Optional[StrictBool], Field(description="Boolean, whether or not to unset default value of the attribute, if applicable")] = None,
        reindex: Annotated[Optional[StrictBool], Field(description="Is reindex required")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductAttributeValueUnset200Response:
        """product_attribute_value_unset

        Removes attribute value for a product.

        :param product_id: Product id (required)
        :type product_id: str
        :param attribute_id: Attribute Id (required)
        :type attribute_id: str
        :param store_id: Store Id
        :type store_id: str
        :param include_default: Boolean, whether or not to unset default value of the attribute, if applicable
        :type include_default: bool
        :param reindex: Is reindex required
        :type reindex: bool
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_value_unset_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            store_id=store_id,
            include_default=include_default,
            reindex=reindex,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAttributeValueUnset200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_attribute_value_unset_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Product id")],
        attribute_id: Annotated[StrictStr, Field(description="Attribute Id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        include_default: Annotated[Optional[StrictBool], Field(description="Boolean, whether or not to unset default value of the attribute, if applicable")] = None,
        reindex: Annotated[Optional[StrictBool], Field(description="Is reindex required")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductAttributeValueUnset200Response]:
        """product_attribute_value_unset

        Removes attribute value for a product.

        :param product_id: Product id (required)
        :type product_id: str
        :param attribute_id: Attribute Id (required)
        :type attribute_id: str
        :param store_id: Store Id
        :type store_id: str
        :param include_default: Boolean, whether or not to unset default value of the attribute, if applicable
        :type include_default: bool
        :param reindex: Is reindex required
        :type reindex: bool
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_value_unset_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            store_id=store_id,
            include_default=include_default,
            reindex=reindex,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAttributeValueUnset200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_attribute_value_unset_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Product id")],
        attribute_id: Annotated[StrictStr, Field(description="Attribute Id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        include_default: Annotated[Optional[StrictBool], Field(description="Boolean, whether or not to unset default value of the attribute, if applicable")] = None,
        reindex: Annotated[Optional[StrictBool], Field(description="Is reindex required")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_attribute_value_unset

        Removes attribute value for a product.

        :param product_id: Product id (required)
        :type product_id: str
        :param attribute_id: Attribute Id (required)
        :type attribute_id: str
        :param store_id: Store Id
        :type store_id: str
        :param include_default: Boolean, whether or not to unset default value of the attribute, if applicable
        :type include_default: bool
        :param reindex: Is reindex required
        :type reindex: bool
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_attribute_value_unset_serialize(
            product_id=product_id,
            attribute_id=attribute_id,
            store_id=store_id,
            include_default=include_default,
            reindex=reindex,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductAttributeValueUnset200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_attribute_value_unset_serialize(
        self,
        product_id,
        attribute_id,
        store_id,
        include_default,
        reindex,
        clear_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if attribute_id is not None:
            
            _query_params.append(('attribute_id', attribute_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if include_default is not None:
            
            _query_params.append(('include_default', include_default))
            
        if reindex is not None:
            
            _query_params.append(('reindex', reindex))
            
        if clear_cache is not None:
            
            _query_params.append(('clear_cache', clear_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.attribute.value.unset.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_brand_list(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        brand_ids: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand ids")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductBrandList200Response:
        """product_brand_list

        Get list of brands from your store.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param brand_ids: Retrieves brands specified by brand ids
        :type brand_ids: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_brand_list_serialize(
            start=start,
            count=count,
            params=params,
            brand_ids=brand_ids,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductBrandList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_brand_list_with_http_info(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        brand_ids: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand ids")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductBrandList200Response]:
        """product_brand_list

        Get list of brands from your store.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param brand_ids: Retrieves brands specified by brand ids
        :type brand_ids: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_brand_list_serialize(
            start=start,
            count=count,
            params=params,
            brand_ids=brand_ids,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductBrandList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_brand_list_without_preload_content(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        brand_ids: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand ids")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_brand_list

        Get list of brands from your store.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param brand_ids: Retrieves brands specified by brand ids
        :type brand_ids: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_brand_list_serialize(
            start=start,
            count=count,
            params=params,
            brand_ids=brand_ids,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductBrandList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_brand_list_serialize(
        self,
        start,
        count,
        params,
        brand_ids,
        exclude,
        store_id,
        lang_id,
        created_from,
        created_to,
        modified_from,
        modified_to,
        response_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if brand_ids is not None:
            
            _query_params.append(('brand_ids', brand_ids))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.brand.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_child_item_find(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductChildItemFind200Response:
        """product_child_item_find

        Search product child item (bundled item or configurable product variant) in store catalog.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductChildItemFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_child_item_find_with_http_info(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductChildItemFind200Response]:
        """product_child_item_find

        Search product child item (bundled item or configurable product variant) in store catalog.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductChildItemFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_child_item_find_without_preload_content(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_child_item_find

        Search product child item (bundled item or configurable product variant) in store catalog.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductChildItemFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_child_item_find_serialize(
        self,
        find_value,
        find_where,
        find_params,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if find_value is not None:
            
            _query_params.append(('find_value', find_value))
            
        if find_where is not None:
            
            _query_params.append(('find_where', find_where))
            
        if find_params is not None:
            
            _query_params.append(('find_params', find_params))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.child_item.find.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_child_item_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Filter by parent product id")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductChildItemInfo200Response:
        """product_child_item_info

        Get child for specific product.

        :param product_id: Filter by parent product id (required)
        :type product_id: str
        :param id: Entity id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_info_serialize(
            product_id=product_id,
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductChildItemInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_child_item_info_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Filter by parent product id")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductChildItemInfo200Response]:
        """product_child_item_info

        Get child for specific product.

        :param product_id: Filter by parent product id (required)
        :type product_id: str
        :param id: Entity id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_info_serialize(
            product_id=product_id,
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductChildItemInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_child_item_info_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Filter by parent product id")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_child_item_info

        Get child for specific product.

        :param product_id: Filter by parent product id (required)
        :type product_id: str
        :param id: Entity id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_info_serialize(
            product_id=product_id,
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductChildItemInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_child_item_info_serialize(
        self,
        product_id,
        id,
        params,
        response_fields,
        exclude,
        store_id,
        lang_id,
        currency_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if currency_id is not None:
            
            _query_params.append(('currency_id', currency_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.child_item.info.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_child_item_list(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Filter by parent product id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Filter by parent product ids")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseProductChildItemList:
        """product_child_item_list

        Get child items list of specific product(s).

        :param page_cursor: Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param product_id: Filter by parent product id
        :type product_id: str
        :param product_ids: Filter by parent product ids
        :type product_ids: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            product_id=product_id,
            product_ids=product_ids,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            avail_sale=avail_sale,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductChildItemList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_child_item_list_with_http_info(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Filter by parent product id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Filter by parent product ids")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseProductChildItemList]:
        """product_child_item_list

        Get child items list of specific product(s).

        :param page_cursor: Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param product_id: Filter by parent product id
        :type product_id: str
        :param product_ids: Filter by parent product ids
        :type product_ids: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            product_id=product_id,
            product_ids=product_ids,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            avail_sale=avail_sale,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductChildItemList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_child_item_list_without_preload_content(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Filter by parent product id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Filter by parent product ids")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_child_item_list

        Get child items list of specific product(s).

        :param page_cursor: Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param product_id: Filter by parent product id
        :type product_id: str
        :param product_ids: Filter by parent product ids
        :type product_ids: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_child_item_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            product_id=product_id,
            product_ids=product_ids,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            avail_sale=avail_sale,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductChildItemList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_child_item_list_serialize(
        self,
        page_cursor,
        start,
        count,
        params,
        response_fields,
        exclude,
        created_from,
        created_to,
        modified_from,
        modified_to,
        product_id,
        product_ids,
        store_id,
        lang_id,
        currency_id,
        avail_sale,
        report_request_id,
        disable_report_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if product_ids is not None:
            
            _query_params.append(('product_ids', product_ids))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if currency_id is not None:
            
            _query_params.append(('currency_id', currency_id))
            
        if avail_sale is not None:
            
            _query_params.append(('avail_sale', avail_sale))
            
        if report_request_id is not None:
            
            _query_params.append(('report_request_id', report_request_id))
            
        if disable_report_cache is not None:
            
            _query_params.append(('disable_report_cache', disable_report_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.child_item.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_count(
        self,
        category_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by category id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        avail_view: Annotated[Optional[StrictBool], Field(description="Specifies the set of visible/invisible products")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by language id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Counts products specified by product ids")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        brand_name: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand name")] = None,
        product_attributes: Annotated[Optional[List[StrictStr]], Field(description="Defines product attributes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines product's status")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines products's type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductCount200Response:
        """product_count

        Count products in store.

        :param category_id: Counts products specified by category id
        :type category_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param avail_view: Specifies the set of visible/invisible products
        :type avail_view: bool
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param store_id: Counts products specified by store id
        :type store_id: str
        :param lang_id: Counts products specified by language id
        :type lang_id: str
        :param product_ids: Counts products specified by product ids
        :type product_ids: str
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param brand_name: Retrieves brands specified by brand name
        :type brand_name: str
        :param product_attributes: Defines product attributes
        :type product_attributes: List[str]
        :param status: Defines product's status
        :type status: str
        :param type: Defines products's type
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_count_serialize(
            category_id=category_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            avail_view=avail_view,
            avail_sale=avail_sale,
            store_id=store_id,
            lang_id=lang_id,
            product_ids=product_ids,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            brand_name=brand_name,
            product_attributes=product_attributes,
            status=status,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_count_with_http_info(
        self,
        category_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by category id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        avail_view: Annotated[Optional[StrictBool], Field(description="Specifies the set of visible/invisible products")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by language id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Counts products specified by product ids")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        brand_name: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand name")] = None,
        product_attributes: Annotated[Optional[List[StrictStr]], Field(description="Defines product attributes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines product's status")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines products's type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductCount200Response]:
        """product_count

        Count products in store.

        :param category_id: Counts products specified by category id
        :type category_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param avail_view: Specifies the set of visible/invisible products
        :type avail_view: bool
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param store_id: Counts products specified by store id
        :type store_id: str
        :param lang_id: Counts products specified by language id
        :type lang_id: str
        :param product_ids: Counts products specified by product ids
        :type product_ids: str
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param brand_name: Retrieves brands specified by brand name
        :type brand_name: str
        :param product_attributes: Defines product attributes
        :type product_attributes: List[str]
        :param status: Defines product's status
        :type status: str
        :param type: Defines products's type
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_count_serialize(
            category_id=category_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            avail_view=avail_view,
            avail_sale=avail_sale,
            store_id=store_id,
            lang_id=lang_id,
            product_ids=product_ids,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            brand_name=brand_name,
            product_attributes=product_attributes,
            status=status,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_count_without_preload_content(
        self,
        category_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by category id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        avail_view: Annotated[Optional[StrictBool], Field(description="Specifies the set of visible/invisible products")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Counts products specified by language id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Counts products specified by product ids")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        brand_name: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand name")] = None,
        product_attributes: Annotated[Optional[List[StrictStr]], Field(description="Defines product attributes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines product's status")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines products's type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_count

        Count products in store.

        :param category_id: Counts products specified by category id
        :type category_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param avail_view: Specifies the set of visible/invisible products
        :type avail_view: bool
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param store_id: Counts products specified by store id
        :type store_id: str
        :param lang_id: Counts products specified by language id
        :type lang_id: str
        :param product_ids: Counts products specified by product ids
        :type product_ids: str
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param brand_name: Retrieves brands specified by brand name
        :type brand_name: str
        :param product_attributes: Defines product attributes
        :type product_attributes: List[str]
        :param status: Defines product's status
        :type status: str
        :param type: Defines products's type
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_count_serialize(
            category_id=category_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            avail_view=avail_view,
            avail_sale=avail_sale,
            store_id=store_id,
            lang_id=lang_id,
            product_ids=product_ids,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            brand_name=brand_name,
            product_attributes=product_attributes,
            status=status,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_count_serialize(
        self,
        category_id,
        created_from,
        created_to,
        modified_from,
        modified_to,
        avail_view,
        avail_sale,
        store_id,
        lang_id,
        product_ids,
        report_request_id,
        disable_report_cache,
        brand_name,
        product_attributes,
        status,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'product_attributes': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if category_id is not None:
            
            _query_params.append(('category_id', category_id))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if avail_view is not None:
            
            _query_params.append(('avail_view', avail_view))
            
        if avail_sale is not None:
            
            _query_params.append(('avail_sale', avail_sale))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if product_ids is not None:
            
            _query_params.append(('product_ids', product_ids))
            
        if report_request_id is not None:
            
            _query_params.append(('report_request_id', report_request_id))
            
        if disable_report_cache is not None:
            
            _query_params.append(('disable_report_cache', disable_report_cache))
            
        if brand_name is not None:
            
            _query_params.append(('brand_name', brand_name))
            
        if product_attributes is not None:
            
            _query_params.append(('product_attributes', product_attributes))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.count.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_currency_add(
        self,
        iso3: Annotated[StrictStr, Field(description="Specifies standardized currency code")],
        rate: Annotated[Union[StrictFloat, StrictInt], Field(description="Defines the numerical identifier against to the major currency")],
        name: Annotated[Optional[StrictStr], Field(description="Defines currency's name")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Specifies whether the currency is available")] = None,
        symbol_left: Annotated[Optional[StrictStr], Field(description="Defines the symbol that is located before the currency")] = None,
        symbol_right: Annotated[Optional[StrictStr], Field(description="Defines the symbol that is located after the currency")] = None,
        default: Annotated[Optional[StrictBool], Field(description="Specifies currency's default meaning")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductCurrencyAdd200Response:
        """product_currency_add

        Add currency and/or set default in store

        :param iso3: Specifies standardized currency code (required)
        :type iso3: str
        :param rate: Defines the numerical identifier against to the major currency (required)
        :type rate: float
        :param name: Defines currency's name
        :type name: str
        :param avail: Specifies whether the currency is available
        :type avail: bool
        :param symbol_left: Defines the symbol that is located before the currency
        :type symbol_left: str
        :param symbol_right: Defines the symbol that is located after the currency
        :type symbol_right: str
        :param default: Specifies currency's default meaning
        :type default: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_currency_add_serialize(
            iso3=iso3,
            rate=rate,
            name=name,
            avail=avail,
            symbol_left=symbol_left,
            symbol_right=symbol_right,
            default=default,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCurrencyAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_currency_add_with_http_info(
        self,
        iso3: Annotated[StrictStr, Field(description="Specifies standardized currency code")],
        rate: Annotated[Union[StrictFloat, StrictInt], Field(description="Defines the numerical identifier against to the major currency")],
        name: Annotated[Optional[StrictStr], Field(description="Defines currency's name")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Specifies whether the currency is available")] = None,
        symbol_left: Annotated[Optional[StrictStr], Field(description="Defines the symbol that is located before the currency")] = None,
        symbol_right: Annotated[Optional[StrictStr], Field(description="Defines the symbol that is located after the currency")] = None,
        default: Annotated[Optional[StrictBool], Field(description="Specifies currency's default meaning")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductCurrencyAdd200Response]:
        """product_currency_add

        Add currency and/or set default in store

        :param iso3: Specifies standardized currency code (required)
        :type iso3: str
        :param rate: Defines the numerical identifier against to the major currency (required)
        :type rate: float
        :param name: Defines currency's name
        :type name: str
        :param avail: Specifies whether the currency is available
        :type avail: bool
        :param symbol_left: Defines the symbol that is located before the currency
        :type symbol_left: str
        :param symbol_right: Defines the symbol that is located after the currency
        :type symbol_right: str
        :param default: Specifies currency's default meaning
        :type default: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_currency_add_serialize(
            iso3=iso3,
            rate=rate,
            name=name,
            avail=avail,
            symbol_left=symbol_left,
            symbol_right=symbol_right,
            default=default,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCurrencyAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_currency_add_without_preload_content(
        self,
        iso3: Annotated[StrictStr, Field(description="Specifies standardized currency code")],
        rate: Annotated[Union[StrictFloat, StrictInt], Field(description="Defines the numerical identifier against to the major currency")],
        name: Annotated[Optional[StrictStr], Field(description="Defines currency's name")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Specifies whether the currency is available")] = None,
        symbol_left: Annotated[Optional[StrictStr], Field(description="Defines the symbol that is located before the currency")] = None,
        symbol_right: Annotated[Optional[StrictStr], Field(description="Defines the symbol that is located after the currency")] = None,
        default: Annotated[Optional[StrictBool], Field(description="Specifies currency's default meaning")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_currency_add

        Add currency and/or set default in store

        :param iso3: Specifies standardized currency code (required)
        :type iso3: str
        :param rate: Defines the numerical identifier against to the major currency (required)
        :type rate: float
        :param name: Defines currency's name
        :type name: str
        :param avail: Specifies whether the currency is available
        :type avail: bool
        :param symbol_left: Defines the symbol that is located before the currency
        :type symbol_left: str
        :param symbol_right: Defines the symbol that is located after the currency
        :type symbol_right: str
        :param default: Specifies currency's default meaning
        :type default: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_currency_add_serialize(
            iso3=iso3,
            rate=rate,
            name=name,
            avail=avail,
            symbol_left=symbol_left,
            symbol_right=symbol_right,
            default=default,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCurrencyAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_currency_add_serialize(
        self,
        iso3,
        rate,
        name,
        avail,
        symbol_left,
        symbol_right,
        default,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if iso3 is not None:
            
            _query_params.append(('iso3', iso3))
            
        if rate is not None:
            
            _query_params.append(('rate', rate))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if avail is not None:
            
            _query_params.append(('avail', avail))
            
        if symbol_left is not None:
            
            _query_params.append(('symbol_left', symbol_left))
            
        if symbol_right is not None:
            
            _query_params.append(('symbol_right', symbol_right))
            
        if default is not None:
            
            _query_params.append(('default', default))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.currency.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_currency_list(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        default: Annotated[Optional[StrictBool], Field(description="Specifies the set of default/not default currencies")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available currencies")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductCurrencyList200Response:
        """product_currency_list

        Get list of currencies

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param default: Specifies the set of default/not default currencies
        :type default: bool
        :param avail: Specifies the set of available/not available currencies
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_currency_list_serialize(
            start=start,
            count=count,
            params=params,
            page_cursor=page_cursor,
            exclude=exclude,
            response_fields=response_fields,
            default=default,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCurrencyList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_currency_list_with_http_info(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        default: Annotated[Optional[StrictBool], Field(description="Specifies the set of default/not default currencies")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available currencies")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductCurrencyList200Response]:
        """product_currency_list

        Get list of currencies

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param default: Specifies the set of default/not default currencies
        :type default: bool
        :param avail: Specifies the set of available/not available currencies
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_currency_list_serialize(
            start=start,
            count=count,
            params=params,
            page_cursor=page_cursor,
            exclude=exclude,
            response_fields=response_fields,
            default=default,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCurrencyList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_currency_list_without_preload_content(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        default: Annotated[Optional[StrictBool], Field(description="Specifies the set of default/not default currencies")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available currencies")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_currency_list

        Get list of currencies

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param default: Specifies the set of default/not default currencies
        :type default: bool
        :param avail: Specifies the set of available/not available currencies
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_currency_list_serialize(
            start=start,
            count=count,
            params=params,
            page_cursor=page_cursor,
            exclude=exclude,
            response_fields=response_fields,
            default=default,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductCurrencyList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_currency_list_serialize(
        self,
        start,
        count,
        params,
        page_cursor,
        exclude,
        response_fields,
        default,
        avail,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if default is not None:
            
            _query_params.append(('default', default))
            
        if avail is not None:
            
            _query_params.append(('avail', avail))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.currency.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_delete(
        self,
        id: Annotated[StrictStr, Field(description="Product id that will be removed")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductDelete200Response:
        """product_delete

        Product delete

        :param id: Product id that will be removed (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Product id that will be removed")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductDelete200Response]:
        """product_delete

        Product delete

        :param id: Product id that will be removed (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Product id that will be removed")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_delete

        Product delete

        :param id: Product id that will be removed (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_delete_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_delete_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/product.delete.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_fields(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CartConfigUpdate200Response:
        """product_fields

        Retrieve all available fields for product item in store.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_fields_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_fields_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CartConfigUpdate200Response]:
        """product_fields

        Retrieve all available fields for product item in store.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_fields_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_fields_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_fields

        Retrieve all available fields for product item in store.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_fields_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_fields_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.fields.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_find(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        find_what: Annotated[Optional[StrictStr], Field(description="Parameter's value specifies the entity that has to be found")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Search products specified by language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductFind200Response:
        """product_find

        Search product in store catalog. \"Apple\" is specified here by default.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param find_what: Parameter's value specifies the entity that has to be found
        :type find_what: str
        :param lang_id: Search products specified by language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            find_what=find_what,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_find_with_http_info(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        find_what: Annotated[Optional[StrictStr], Field(description="Parameter's value specifies the entity that has to be found")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Search products specified by language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductFind200Response]:
        """product_find

        Search product in store catalog. \"Apple\" is specified here by default.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param find_what: Parameter's value specifies the entity that has to be found
        :type find_what: str
        :param lang_id: Search products specified by language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            find_what=find_what,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_find_without_preload_content(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        find_what: Annotated[Optional[StrictStr], Field(description="Parameter's value specifies the entity that has to be found")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Search products specified by language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_find

        Search product in store catalog. \"Apple\" is specified here by default.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param find_what: Parameter's value specifies the entity that has to be found
        :type find_what: str
        :param lang_id: Search products specified by language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            find_what=find_what,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_find_serialize(
        self,
        find_value,
        find_where,
        find_params,
        find_what,
        lang_id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if find_value is not None:
            
            _query_params.append(('find_value', find_value))
            
        if find_where is not None:
            
            _query_params.append(('find_where', find_where))
            
        if find_params is not None:
            
            _query_params.append(('find_params', find_params))
            
        if find_what is not None:
            
            _query_params.append(('find_what', find_what))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.find.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_image_add(
        self,
        product_image_add: ProductImageAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductImageAdd200Response:
        """product_image_add

        Add image to product

        :param product_image_add: (required)
        :type product_image_add: ProductImageAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_add_serialize(
            product_image_add=product_image_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_image_add_with_http_info(
        self,
        product_image_add: ProductImageAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductImageAdd200Response]:
        """product_image_add

        Add image to product

        :param product_image_add: (required)
        :type product_image_add: ProductImageAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_add_serialize(
            product_image_add=product_image_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_image_add_without_preload_content(
        self,
        product_image_add: ProductImageAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_image_add

        Add image to product

        :param product_image_add: (required)
        :type product_image_add: ProductImageAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_add_serialize(
            product_image_add=product_image_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_image_add_serialize(
        self,
        product_image_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_image_add is not None:
            _body_params = product_image_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.image.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_image_delete(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the image should be deleted")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AttributeDelete200Response:
        """product_image_delete

        Delete image

        :param product_id: Defines product id where the image should be deleted (required)
        :type product_id: str
        :param id: Entity id (required)
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_delete_serialize(
            product_id=product_id,
            id=id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_image_delete_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the image should be deleted")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AttributeDelete200Response]:
        """product_image_delete

        Delete image

        :param product_id: Defines product id where the image should be deleted (required)
        :type product_id: str
        :param id: Entity id (required)
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_delete_serialize(
            product_id=product_id,
            id=id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_image_delete_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the image should be deleted")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_image_delete

        Delete image

        :param product_id: Defines product id where the image should be deleted (required)
        :type product_id: str
        :param id: Entity id (required)
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_delete_serialize(
            product_id=product_id,
            id=id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_image_delete_serialize(
        self,
        product_id,
        id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/product.image.delete.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_image_update(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the image should be updated")],
        id: Annotated[StrictStr, Field(description="Defines image update specified by image id")],
        variant_ids: Annotated[Optional[StrictStr], Field(description="Defines product's variants ids")] = None,
        image_name: Annotated[Optional[StrictStr], Field(description="Defines image's name")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines image's types that are specified by comma-separated list")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Defines alternative text that has to be attached to the picture")] = None,
        position: Annotated[Optional[StrictInt], Field(description="Defines image’s position in the list")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="Define is hide image")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductImageUpdate200Response:
        """product_image_update

        Update details of image

        :param product_id: Defines product id where the image should be updated (required)
        :type product_id: str
        :param id: Defines image update specified by image id (required)
        :type id: str
        :param variant_ids: Defines product's variants ids
        :type variant_ids: str
        :param image_name: Defines image's name
        :type image_name: str
        :param type: Defines image's types that are specified by comma-separated list
        :type type: str
        :param label: Defines alternative text that has to be attached to the picture
        :type label: str
        :param position: Defines image’s position in the list
        :type position: int
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param hidden: Define is hide image
        :type hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_update_serialize(
            product_id=product_id,
            id=id,
            variant_ids=variant_ids,
            image_name=image_name,
            type=type,
            label=label,
            position=position,
            store_id=store_id,
            lang_id=lang_id,
            hidden=hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_image_update_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the image should be updated")],
        id: Annotated[StrictStr, Field(description="Defines image update specified by image id")],
        variant_ids: Annotated[Optional[StrictStr], Field(description="Defines product's variants ids")] = None,
        image_name: Annotated[Optional[StrictStr], Field(description="Defines image's name")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines image's types that are specified by comma-separated list")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Defines alternative text that has to be attached to the picture")] = None,
        position: Annotated[Optional[StrictInt], Field(description="Defines image’s position in the list")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="Define is hide image")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductImageUpdate200Response]:
        """product_image_update

        Update details of image

        :param product_id: Defines product id where the image should be updated (required)
        :type product_id: str
        :param id: Defines image update specified by image id (required)
        :type id: str
        :param variant_ids: Defines product's variants ids
        :type variant_ids: str
        :param image_name: Defines image's name
        :type image_name: str
        :param type: Defines image's types that are specified by comma-separated list
        :type type: str
        :param label: Defines alternative text that has to be attached to the picture
        :type label: str
        :param position: Defines image’s position in the list
        :type position: int
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param hidden: Define is hide image
        :type hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_update_serialize(
            product_id=product_id,
            id=id,
            variant_ids=variant_ids,
            image_name=image_name,
            type=type,
            label=label,
            position=position,
            store_id=store_id,
            lang_id=lang_id,
            hidden=hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_image_update_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the image should be updated")],
        id: Annotated[StrictStr, Field(description="Defines image update specified by image id")],
        variant_ids: Annotated[Optional[StrictStr], Field(description="Defines product's variants ids")] = None,
        image_name: Annotated[Optional[StrictStr], Field(description="Defines image's name")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines image's types that are specified by comma-separated list")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Defines alternative text that has to be attached to the picture")] = None,
        position: Annotated[Optional[StrictInt], Field(description="Defines image’s position in the list")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        hidden: Annotated[Optional[StrictBool], Field(description="Define is hide image")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_image_update

        Update details of image

        :param product_id: Defines product id where the image should be updated (required)
        :type product_id: str
        :param id: Defines image update specified by image id (required)
        :type id: str
        :param variant_ids: Defines product's variants ids
        :type variant_ids: str
        :param image_name: Defines image's name
        :type image_name: str
        :param type: Defines image's types that are specified by comma-separated list
        :type type: str
        :param label: Defines alternative text that has to be attached to the picture
        :type label: str
        :param position: Defines image’s position in the list
        :type position: int
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param hidden: Define is hide image
        :type hidden: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_image_update_serialize(
            product_id=product_id,
            id=id,
            variant_ids=variant_ids,
            image_name=image_name,
            type=type,
            label=label,
            position=position,
            store_id=store_id,
            lang_id=lang_id,
            hidden=hidden,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_image_update_serialize(
        self,
        product_id,
        id,
        variant_ids,
        image_name,
        type,
        label,
        position,
        store_id,
        lang_id,
        hidden,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if variant_ids is not None:
            
            _query_params.append(('variant_ids', variant_ids))
            
        if image_name is not None:
            
            _query_params.append(('image_name', image_name))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if label is not None:
            
            _query_params.append(('label', label))
            
        if position is not None:
            
            _query_params.append(('position', position))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if hidden is not None:
            
            _query_params.append(('hidden', hidden))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/product.image.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_info(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves product's info specified by product id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves product info specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves product info specified by language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductInfo200Response:
        """product_info

        Get product info about product ID *** or specify other product ID.

        :param id: Retrieves product's info specified by product id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves product info specified by store id
        :type store_id: str
        :param lang_id: Retrieves product info specified by language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_info_serialize(
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_info_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves product's info specified by product id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves product info specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves product info specified by language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductInfo200Response]:
        """product_info

        Get product info about product ID *** or specify other product ID.

        :param id: Retrieves product's info specified by product id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves product info specified by store id
        :type store_id: str
        :param lang_id: Retrieves product info specified by language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_info_serialize(
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_info_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves product's info specified by product id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves product info specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves product info specified by language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_info

        Get product info about product ID *** or specify other product ID.

        :param id: Retrieves product's info specified by product id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves product info specified by store id
        :type store_id: str
        :param lang_id: Retrieves product info specified by language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_info_serialize(
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_info_serialize(
        self,
        id,
        params,
        response_fields,
        exclude,
        store_id,
        lang_id,
        currency_id,
        report_request_id,
        disable_report_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if currency_id is not None:
            
            _query_params.append(('currency_id', currency_id))
            
        if report_request_id is not None:
            
            _query_params.append(('report_request_id', report_request_id))
            
        if disable_report_cache is not None:
            
            _query_params.append(('disable_report_cache', disable_report_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.info.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_list(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by category id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        avail_view: Annotated[Optional[StrictBool], Field(description="Specifies the set of visible/invisible products")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by product ids")] = None,
        since_id: Annotated[Optional[StrictInt], Field(description="Retrieve entities starting from the specified id.")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        sku: Annotated[Optional[StrictStr], Field(description="Filter by product's sku")] = None,
        disable_cache: Annotated[Optional[StrictBool], Field(description="Disable cache for current request")] = None,
        brand_name: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand name")] = None,
        product_attributes: Annotated[Optional[List[StrictStr]], Field(description="Defines product attributes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines product's status")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines products's type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseProductList:
        """product_list

        Get list of products from your store. Returns 10 products by default.

        :param page_cursor: Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param category_id: Retrieves products specified by category id
        :type category_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param avail_view: Specifies the set of visible/invisible products
        :type avail_view: bool
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param store_id: Retrieves products specified by store id
        :type store_id: str
        :param lang_id: Retrieves products specified by language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param product_ids: Retrieves products specified by product ids
        :type product_ids: str
        :param since_id: Retrieve entities starting from the specified id.
        :type since_id: int
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param sku: Filter by product's sku
        :type sku: str
        :param disable_cache: Disable cache for current request
        :type disable_cache: bool
        :param brand_name: Retrieves brands specified by brand name
        :type brand_name: str
        :param product_attributes: Defines product attributes
        :type product_attributes: List[str]
        :param status: Defines product's status
        :type status: str
        :param type: Defines products's type
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            category_id=category_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            avail_view=avail_view,
            avail_sale=avail_sale,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            product_ids=product_ids,
            since_id=since_id,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            sort_by=sort_by,
            sort_direction=sort_direction,
            sku=sku,
            disable_cache=disable_cache,
            brand_name=brand_name,
            product_attributes=product_attributes,
            status=status,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_list_with_http_info(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by category id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        avail_view: Annotated[Optional[StrictBool], Field(description="Specifies the set of visible/invisible products")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by product ids")] = None,
        since_id: Annotated[Optional[StrictInt], Field(description="Retrieve entities starting from the specified id.")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        sku: Annotated[Optional[StrictStr], Field(description="Filter by product's sku")] = None,
        disable_cache: Annotated[Optional[StrictBool], Field(description="Disable cache for current request")] = None,
        brand_name: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand name")] = None,
        product_attributes: Annotated[Optional[List[StrictStr]], Field(description="Defines product attributes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines product's status")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines products's type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseProductList]:
        """product_list

        Get list of products from your store. Returns 10 products by default.

        :param page_cursor: Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param category_id: Retrieves products specified by category id
        :type category_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param avail_view: Specifies the set of visible/invisible products
        :type avail_view: bool
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param store_id: Retrieves products specified by store id
        :type store_id: str
        :param lang_id: Retrieves products specified by language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param product_ids: Retrieves products specified by product ids
        :type product_ids: str
        :param since_id: Retrieve entities starting from the specified id.
        :type since_id: int
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param sku: Filter by product's sku
        :type sku: str
        :param disable_cache: Disable cache for current request
        :type disable_cache: bool
        :param brand_name: Retrieves brands specified by brand name
        :type brand_name: str
        :param product_attributes: Defines product attributes
        :type product_attributes: List[str]
        :param status: Defines product's status
        :type status: str
        :param type: Defines products's type
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            category_id=category_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            avail_view=avail_view,
            avail_sale=avail_sale,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            product_ids=product_ids,
            since_id=since_id,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            sort_by=sort_by,
            sort_direction=sort_direction,
            sku=sku,
            disable_cache=disable_cache,
            brand_name=brand_name,
            product_attributes=product_attributes,
            status=status,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_list_without_preload_content(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by category id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        avail_view: Annotated[Optional[StrictBool], Field(description="Specifies the set of visible/invisible products")] = None,
        avail_sale: Annotated[Optional[StrictBool], Field(description="Specifies the set of available/not available products for sale")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by store id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by language id")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        product_ids: Annotated[Optional[StrictStr], Field(description="Retrieves products specified by product ids")] = None,
        since_id: Annotated[Optional[StrictInt], Field(description="Retrieve entities starting from the specified id.")] = None,
        report_request_id: Annotated[Optional[StrictStr], Field(description="Report request id")] = None,
        disable_report_cache: Annotated[Optional[StrictBool], Field(description="Disable report cache for current request")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        sku: Annotated[Optional[StrictStr], Field(description="Filter by product's sku")] = None,
        disable_cache: Annotated[Optional[StrictBool], Field(description="Disable cache for current request")] = None,
        brand_name: Annotated[Optional[StrictStr], Field(description="Retrieves brands specified by brand name")] = None,
        product_attributes: Annotated[Optional[List[StrictStr]], Field(description="Defines product attributes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines product's status")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Defines products's type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_list

        Get list of products from your store. Returns 10 products by default.

        :param page_cursor: Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param category_id: Retrieves products specified by category id
        :type category_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param avail_view: Specifies the set of visible/invisible products
        :type avail_view: bool
        :param avail_sale: Specifies the set of available/not available products for sale
        :type avail_sale: bool
        :param store_id: Retrieves products specified by store id
        :type store_id: str
        :param lang_id: Retrieves products specified by language id
        :type lang_id: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param product_ids: Retrieves products specified by product ids
        :type product_ids: str
        :param since_id: Retrieve entities starting from the specified id.
        :type since_id: int
        :param report_request_id: Report request id
        :type report_request_id: str
        :param disable_report_cache: Disable report cache for current request
        :type disable_report_cache: bool
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param sku: Filter by product's sku
        :type sku: str
        :param disable_cache: Disable cache for current request
        :type disable_cache: bool
        :param brand_name: Retrieves brands specified by brand name
        :type brand_name: str
        :param product_attributes: Defines product attributes
        :type product_attributes: List[str]
        :param status: Defines product's status
        :type status: str
        :param type: Defines products's type
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            category_id=category_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            avail_view=avail_view,
            avail_sale=avail_sale,
            store_id=store_id,
            lang_id=lang_id,
            currency_id=currency_id,
            product_ids=product_ids,
            since_id=since_id,
            report_request_id=report_request_id,
            disable_report_cache=disable_report_cache,
            sort_by=sort_by,
            sort_direction=sort_direction,
            sku=sku,
            disable_cache=disable_cache,
            brand_name=brand_name,
            product_attributes=product_attributes,
            status=status,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseProductList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_list_serialize(
        self,
        page_cursor,
        start,
        count,
        params,
        response_fields,
        exclude,
        category_id,
        created_from,
        created_to,
        modified_from,
        modified_to,
        avail_view,
        avail_sale,
        store_id,
        lang_id,
        currency_id,
        product_ids,
        since_id,
        report_request_id,
        disable_report_cache,
        sort_by,
        sort_direction,
        sku,
        disable_cache,
        brand_name,
        product_attributes,
        status,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'product_attributes': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if category_id is not None:
            
            _query_params.append(('category_id', category_id))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if avail_view is not None:
            
            _query_params.append(('avail_view', avail_view))
            
        if avail_sale is not None:
            
            _query_params.append(('avail_sale', avail_sale))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if currency_id is not None:
            
            _query_params.append(('currency_id', currency_id))
            
        if product_ids is not None:
            
            _query_params.append(('product_ids', product_ids))
            
        if since_id is not None:
            
            _query_params.append(('since_id', since_id))
            
        if report_request_id is not None:
            
            _query_params.append(('report_request_id', report_request_id))
            
        if disable_report_cache is not None:
            
            _query_params.append(('disable_report_cache', disable_report_cache))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        if sku is not None:
            
            _query_params.append(('sku', sku))
            
        if disable_cache is not None:
            
            _query_params.append(('disable_cache', disable_cache))
            
        if brand_name is not None:
            
            _query_params.append(('brand_name', brand_name))
            
        if product_attributes is not None:
            
            _query_params.append(('product_attributes', product_attributes))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_manufacturer_add(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines products specified by product id")],
        manufacturer: Annotated[StrictStr, Field(description="Defines product’s manufacturer's name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductManufacturerAdd200Response:
        """product_manufacturer_add

        Add manufacturer to store and assign to product

        :param product_id: Defines products specified by product id (required)
        :type product_id: str
        :param manufacturer: Defines product’s manufacturer's name (required)
        :type manufacturer: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_manufacturer_add_serialize(
            product_id=product_id,
            manufacturer=manufacturer,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductManufacturerAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_manufacturer_add_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines products specified by product id")],
        manufacturer: Annotated[StrictStr, Field(description="Defines product’s manufacturer's name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductManufacturerAdd200Response]:
        """product_manufacturer_add

        Add manufacturer to store and assign to product

        :param product_id: Defines products specified by product id (required)
        :type product_id: str
        :param manufacturer: Defines product’s manufacturer's name (required)
        :type manufacturer: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_manufacturer_add_serialize(
            product_id=product_id,
            manufacturer=manufacturer,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductManufacturerAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_manufacturer_add_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines products specified by product id")],
        manufacturer: Annotated[StrictStr, Field(description="Defines product’s manufacturer's name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_manufacturer_add

        Add manufacturer to store and assign to product

        :param product_id: Defines products specified by product id (required)
        :type product_id: str
        :param manufacturer: Defines product’s manufacturer's name (required)
        :type manufacturer: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_manufacturer_add_serialize(
            product_id=product_id,
            manufacturer=manufacturer,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductManufacturerAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_manufacturer_add_serialize(
        self,
        product_id,
        manufacturer,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if manufacturer is not None:
            
            _query_params.append(('manufacturer', manufacturer))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.manufacturer.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_option_add(
        self,
        name: Annotated[StrictStr, Field(description="Defines option's name")],
        type: Annotated[StrictStr, Field(description="Defines option's type that has to be added")],
        product_id: Annotated[Optional[StrictStr], Field(description="Defines product id where the option should be added")] = None,
        default_option_value: Annotated[Optional[StrictStr], Field(description="Defines default option value that has to be added")] = None,
        option_values: Annotated[Optional[StrictStr], Field(description="Defines option values that has to be added")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Defines option's description")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines whether the option is available")] = None,
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        required: Annotated[Optional[StrictBool], Field(description="Defines if the option is required")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductOptionAdd200Response:
        """product_option_add

        Add product option from store.

        :param name: Defines option's name (required)
        :type name: str
        :param type: Defines option's type that has to be added (required)
        :type type: str
        :param product_id: Defines product id where the option should be added
        :type product_id: str
        :param default_option_value: Defines default option value that has to be added
        :type default_option_value: str
        :param option_values: Defines option values that has to be added
        :type option_values: str
        :param description: Defines option's description
        :type description: str
        :param avail: Defines whether the option is available
        :type avail: bool
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param required: Defines if the option is required
        :type required: bool
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_add_serialize(
            name=name,
            type=type,
            product_id=product_id,
            default_option_value=default_option_value,
            option_values=option_values,
            description=description,
            avail=avail,
            sort_order=sort_order,
            required=required,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_option_add_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Defines option's name")],
        type: Annotated[StrictStr, Field(description="Defines option's type that has to be added")],
        product_id: Annotated[Optional[StrictStr], Field(description="Defines product id where the option should be added")] = None,
        default_option_value: Annotated[Optional[StrictStr], Field(description="Defines default option value that has to be added")] = None,
        option_values: Annotated[Optional[StrictStr], Field(description="Defines option values that has to be added")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Defines option's description")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines whether the option is available")] = None,
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        required: Annotated[Optional[StrictBool], Field(description="Defines if the option is required")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductOptionAdd200Response]:
        """product_option_add

        Add product option from store.

        :param name: Defines option's name (required)
        :type name: str
        :param type: Defines option's type that has to be added (required)
        :type type: str
        :param product_id: Defines product id where the option should be added
        :type product_id: str
        :param default_option_value: Defines default option value that has to be added
        :type default_option_value: str
        :param option_values: Defines option values that has to be added
        :type option_values: str
        :param description: Defines option's description
        :type description: str
        :param avail: Defines whether the option is available
        :type avail: bool
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param required: Defines if the option is required
        :type required: bool
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_add_serialize(
            name=name,
            type=type,
            product_id=product_id,
            default_option_value=default_option_value,
            option_values=option_values,
            description=description,
            avail=avail,
            sort_order=sort_order,
            required=required,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_option_add_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Defines option's name")],
        type: Annotated[StrictStr, Field(description="Defines option's type that has to be added")],
        product_id: Annotated[Optional[StrictStr], Field(description="Defines product id where the option should be added")] = None,
        default_option_value: Annotated[Optional[StrictStr], Field(description="Defines default option value that has to be added")] = None,
        option_values: Annotated[Optional[StrictStr], Field(description="Defines option values that has to be added")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Defines option's description")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines whether the option is available")] = None,
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        required: Annotated[Optional[StrictBool], Field(description="Defines if the option is required")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_option_add

        Add product option from store.

        :param name: Defines option's name (required)
        :type name: str
        :param type: Defines option's type that has to be added (required)
        :type type: str
        :param product_id: Defines product id where the option should be added
        :type product_id: str
        :param default_option_value: Defines default option value that has to be added
        :type default_option_value: str
        :param option_values: Defines option values that has to be added
        :type option_values: str
        :param description: Defines option's description
        :type description: str
        :param avail: Defines whether the option is available
        :type avail: bool
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param required: Defines if the option is required
        :type required: bool
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_add_serialize(
            name=name,
            type=type,
            product_id=product_id,
            default_option_value=default_option_value,
            option_values=option_values,
            description=description,
            avail=avail,
            sort_order=sort_order,
            required=required,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_option_add_serialize(
        self,
        name,
        type,
        product_id,
        default_option_value,
        option_values,
        description,
        avail,
        sort_order,
        required,
        clear_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if default_option_value is not None:
            
            _query_params.append(('default_option_value', default_option_value))
            
        if option_values is not None:
            
            _query_params.append(('option_values', option_values))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if avail is not None:
            
            _query_params.append(('avail', avail))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if required is not None:
            
            _query_params.append(('required', required))
            
        if clear_cache is not None:
            
            _query_params.append(('clear_cache', clear_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.option.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_option_assign(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option should be assigned")],
        option_id: Annotated[StrictStr, Field(description="Defines option id which has to be assigned")],
        required: Annotated[Optional[StrictBool], Field(description="Defines if the option is required")] = None,
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        option_values: Annotated[Optional[StrictStr], Field(description="Defines option values that has to be assigned")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductOptionAssign200Response:
        """product_option_assign

        Assign option from product.

        :param product_id: Defines product id where the option should be assigned (required)
        :type product_id: str
        :param option_id: Defines option id which has to be assigned (required)
        :type option_id: str
        :param required: Defines if the option is required
        :type required: bool
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param option_values: Defines option values that has to be assigned
        :type option_values: str
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_assign_serialize(
            product_id=product_id,
            option_id=option_id,
            required=required,
            sort_order=sort_order,
            option_values=option_values,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionAssign200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_option_assign_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option should be assigned")],
        option_id: Annotated[StrictStr, Field(description="Defines option id which has to be assigned")],
        required: Annotated[Optional[StrictBool], Field(description="Defines if the option is required")] = None,
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        option_values: Annotated[Optional[StrictStr], Field(description="Defines option values that has to be assigned")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductOptionAssign200Response]:
        """product_option_assign

        Assign option from product.

        :param product_id: Defines product id where the option should be assigned (required)
        :type product_id: str
        :param option_id: Defines option id which has to be assigned (required)
        :type option_id: str
        :param required: Defines if the option is required
        :type required: bool
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param option_values: Defines option values that has to be assigned
        :type option_values: str
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_assign_serialize(
            product_id=product_id,
            option_id=option_id,
            required=required,
            sort_order=sort_order,
            option_values=option_values,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionAssign200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_option_assign_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option should be assigned")],
        option_id: Annotated[StrictStr, Field(description="Defines option id which has to be assigned")],
        required: Annotated[Optional[StrictBool], Field(description="Defines if the option is required")] = None,
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        option_values: Annotated[Optional[StrictStr], Field(description="Defines option values that has to be assigned")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_option_assign

        Assign option from product.

        :param product_id: Defines product id where the option should be assigned (required)
        :type product_id: str
        :param option_id: Defines option id which has to be assigned (required)
        :type option_id: str
        :param required: Defines if the option is required
        :type required: bool
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param option_values: Defines option values that has to be assigned
        :type option_values: str
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_assign_serialize(
            product_id=product_id,
            option_id=option_id,
            required=required,
            sort_order=sort_order,
            option_values=option_values,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionAssign200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_option_assign_serialize(
        self,
        product_id,
        option_id,
        required,
        sort_order,
        option_values,
        clear_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if option_id is not None:
            
            _query_params.append(('option_id', option_id))
            
        if required is not None:
            
            _query_params.append(('required', required))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if option_values is not None:
            
            _query_params.append(('option_values', option_values))
            
        if clear_cache is not None:
            
            _query_params.append(('clear_cache', clear_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.option.assign.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_option_list(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Retrieves products' options specified by product id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductOptionList200Response:
        """product_option_list

        Get list of options.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param product_id: Retrieves products' options specified by product id
        :type product_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_list_serialize(
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            product_id=product_id,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_option_list_with_http_info(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Retrieves products' options specified by product id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductOptionList200Response]:
        """product_option_list

        Get list of options.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param product_id: Retrieves products' options specified by product id
        :type product_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_list_serialize(
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            product_id=product_id,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_option_list_without_preload_content(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Retrieves products' options specified by product id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_option_list

        Get list of options.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param product_id: Retrieves products' options specified by product id
        :type product_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_list_serialize(
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            product_id=product_id,
            lang_id=lang_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_option_list_serialize(
        self,
        start,
        count,
        params,
        exclude,
        response_fields,
        product_id,
        lang_id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.option.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_option_value_add(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option value should be added")],
        option_id: Annotated[StrictStr, Field(description="Defines option id where the value has to be added")],
        option_value: Annotated[StrictStr, Field(description="Defines option value that has to be added")],
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductOptionValueAdd200Response:
        """product_option_value_add

        Add product option item from option.

        :param product_id: Defines product id where the option value should be added (required)
        :type product_id: str
        :param option_id: Defines option id where the value has to be added (required)
        :type option_id: str
        :param option_value: Defines option value that has to be added (required)
        :type option_value: str
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_add_serialize(
            product_id=product_id,
            option_id=option_id,
            option_value=option_value,
            sort_order=sort_order,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionValueAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_option_value_add_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option value should be added")],
        option_id: Annotated[StrictStr, Field(description="Defines option id where the value has to be added")],
        option_value: Annotated[StrictStr, Field(description="Defines option value that has to be added")],
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductOptionValueAdd200Response]:
        """product_option_value_add

        Add product option item from option.

        :param product_id: Defines product id where the option value should be added (required)
        :type product_id: str
        :param option_id: Defines option id where the value has to be added (required)
        :type option_id: str
        :param option_value: Defines option value that has to be added (required)
        :type option_value: str
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_add_serialize(
            product_id=product_id,
            option_id=option_id,
            option_value=option_value,
            sort_order=sort_order,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionValueAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_option_value_add_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option value should be added")],
        option_id: Annotated[StrictStr, Field(description="Defines option id where the value has to be added")],
        option_value: Annotated[StrictStr, Field(description="Defines option value that has to be added")],
        sort_order: Annotated[Optional[StrictInt], Field(description="Sort number in the list")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_option_value_add

        Add product option item from option.

        :param product_id: Defines product id where the option value should be added (required)
        :type product_id: str
        :param option_id: Defines option id where the value has to be added (required)
        :type option_id: str
        :param option_value: Defines option value that has to be added (required)
        :type option_value: str
        :param sort_order: Sort number in the list
        :type sort_order: int
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_add_serialize(
            product_id=product_id,
            option_id=option_id,
            option_value=option_value,
            sort_order=sort_order,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionValueAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_option_value_add_serialize(
        self,
        product_id,
        option_id,
        option_value,
        sort_order,
        clear_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if option_id is not None:
            
            _query_params.append(('option_id', option_id))
            
        if option_value is not None:
            
            _query_params.append(('option_value', option_value))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if clear_cache is not None:
            
            _query_params.append(('clear_cache', clear_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.option.value.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_option_value_assign(
        self,
        product_option_id: Annotated[StrictInt, Field(description="Defines product's option id where the value has to be assigned")],
        option_value_id: Annotated[StrictInt, Field(description="Defines value id that has to be assigned")],
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductOptionValueAssign200Response:
        """product_option_value_assign

        Assign product option item from product.

        :param product_option_id: Defines product's option id where the value has to be assigned (required)
        :type product_option_id: int
        :param option_value_id: Defines value id that has to be assigned (required)
        :type option_value_id: int
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_assign_serialize(
            product_option_id=product_option_id,
            option_value_id=option_value_id,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionValueAssign200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_option_value_assign_with_http_info(
        self,
        product_option_id: Annotated[StrictInt, Field(description="Defines product's option id where the value has to be assigned")],
        option_value_id: Annotated[StrictInt, Field(description="Defines value id that has to be assigned")],
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductOptionValueAssign200Response]:
        """product_option_value_assign

        Assign product option item from product.

        :param product_option_id: Defines product's option id where the value has to be assigned (required)
        :type product_option_id: int
        :param option_value_id: Defines value id that has to be assigned (required)
        :type option_value_id: int
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_assign_serialize(
            product_option_id=product_option_id,
            option_value_id=option_value_id,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionValueAssign200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_option_value_assign_without_preload_content(
        self,
        product_option_id: Annotated[StrictInt, Field(description="Defines product's option id where the value has to be assigned")],
        option_value_id: Annotated[StrictInt, Field(description="Defines value id that has to be assigned")],
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_option_value_assign

        Assign product option item from product.

        :param product_option_id: Defines product's option id where the value has to be assigned (required)
        :type product_option_id: int
        :param option_value_id: Defines value id that has to be assigned (required)
        :type option_value_id: int
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_assign_serialize(
            product_option_id=product_option_id,
            option_value_id=option_value_id,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductOptionValueAssign200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_option_value_assign_serialize(
        self,
        product_option_id,
        option_value_id,
        clear_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_option_id is not None:
            
            _query_params.append(('product_option_id', product_option_id))
            
        if option_value_id is not None:
            
            _query_params.append(('option_value_id', option_value_id))
            
        if clear_cache is not None:
            
            _query_params.append(('clear_cache', clear_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.option.value.assign.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_option_value_update(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option value should be updated")],
        option_id: Annotated[StrictStr, Field(description="Defines option id where the value has to be updated")],
        option_value_id: Annotated[StrictInt, Field(description="Defines value id that has to be assigned")],
        option_value: Annotated[StrictStr, Field(description="Defines option value that has to be added")],
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Defines new product option price")] = None,
        quantity: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Defines new products' options quantity")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """product_option_value_update

        Update product option item from option.

        :param product_id: Defines product id where the option value should be updated (required)
        :type product_id: str
        :param option_id: Defines option id where the value has to be updated (required)
        :type option_id: str
        :param option_value_id: Defines value id that has to be assigned (required)
        :type option_value_id: int
        :param option_value: Defines option value that has to be added (required)
        :type option_value: str
        :param price: Defines new product option price
        :type price: float
        :param quantity: Defines new products' options quantity
        :type quantity: float
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_update_serialize(
            product_id=product_id,
            option_id=option_id,
            option_value_id=option_value_id,
            option_value=option_value,
            price=price,
            quantity=quantity,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_option_value_update_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option value should be updated")],
        option_id: Annotated[StrictStr, Field(description="Defines option id where the value has to be updated")],
        option_value_id: Annotated[StrictInt, Field(description="Defines value id that has to be assigned")],
        option_value: Annotated[StrictStr, Field(description="Defines option value that has to be added")],
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Defines new product option price")] = None,
        quantity: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Defines new products' options quantity")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """product_option_value_update

        Update product option item from option.

        :param product_id: Defines product id where the option value should be updated (required)
        :type product_id: str
        :param option_id: Defines option id where the value has to be updated (required)
        :type option_id: str
        :param option_value_id: Defines value id that has to be assigned (required)
        :type option_value_id: int
        :param option_value: Defines option value that has to be added (required)
        :type option_value: str
        :param price: Defines new product option price
        :type price: float
        :param quantity: Defines new products' options quantity
        :type quantity: float
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_update_serialize(
            product_id=product_id,
            option_id=option_id,
            option_value_id=option_value_id,
            option_value=option_value,
            price=price,
            quantity=quantity,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_option_value_update_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the option value should be updated")],
        option_id: Annotated[StrictStr, Field(description="Defines option id where the value has to be updated")],
        option_value_id: Annotated[StrictInt, Field(description="Defines value id that has to be assigned")],
        option_value: Annotated[StrictStr, Field(description="Defines option value that has to be added")],
        price: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Defines new product option price")] = None,
        quantity: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Defines new products' options quantity")] = None,
        clear_cache: Annotated[Optional[StrictBool], Field(description="Is cache clear required")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_option_value_update

        Update product option item from option.

        :param product_id: Defines product id where the option value should be updated (required)
        :type product_id: str
        :param option_id: Defines option id where the value has to be updated (required)
        :type option_id: str
        :param option_value_id: Defines value id that has to be assigned (required)
        :type option_value_id: int
        :param option_value: Defines option value that has to be added (required)
        :type option_value: str
        :param price: Defines new product option price
        :type price: float
        :param quantity: Defines new products' options quantity
        :type quantity: float
        :param clear_cache: Is cache clear required
        :type clear_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_option_value_update_serialize(
            product_id=product_id,
            option_id=option_id,
            option_value_id=option_value_id,
            option_value=option_value,
            price=price,
            quantity=quantity,
            clear_cache=clear_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_option_value_update_serialize(
        self,
        product_id,
        option_id,
        option_value_id,
        option_value,
        price,
        quantity,
        clear_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if option_id is not None:
            
            _query_params.append(('option_id', option_id))
            
        if option_value_id is not None:
            
            _query_params.append(('option_value_id', option_value_id))
            
        if option_value is not None:
            
            _query_params.append(('option_value', option_value))
            
        if price is not None:
            
            _query_params.append(('price', price))
            
        if quantity is not None:
            
            _query_params.append(('quantity', quantity))
            
        if clear_cache is not None:
            
            _query_params.append(('clear_cache', clear_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/product.option.value.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_price_add(
        self,
        product_price_add: ProductPriceAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CartValidate200Response:
        """product_price_add

        Add some prices to the product.

        :param product_price_add: (required)
        :type product_price_add: ProductPriceAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_add_serialize(
            product_price_add=product_price_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartValidate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_price_add_with_http_info(
        self,
        product_price_add: ProductPriceAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CartValidate200Response]:
        """product_price_add

        Add some prices to the product.

        :param product_price_add: (required)
        :type product_price_add: ProductPriceAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_add_serialize(
            product_price_add=product_price_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartValidate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_price_add_without_preload_content(
        self,
        product_price_add: ProductPriceAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_price_add

        Add some prices to the product.

        :param product_price_add: (required)
        :type product_price_add: ProductPriceAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_add_serialize(
            product_price_add=product_price_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartValidate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_price_add_serialize(
        self,
        product_price_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_price_add is not None:
            _body_params = product_price_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.price.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_price_delete(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines the product where the price has to be deleted")],
        group_prices: Annotated[Optional[StrictStr], Field(description="Defines product's group prices")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AttributeDelete200Response:
        """product_price_delete

        Delete some prices of the product

        :param product_id: Defines the product where the price has to be deleted (required)
        :type product_id: str
        :param group_prices: Defines product's group prices
        :type group_prices: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_delete_serialize(
            product_id=product_id,
            group_prices=group_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_price_delete_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines the product where the price has to be deleted")],
        group_prices: Annotated[Optional[StrictStr], Field(description="Defines product's group prices")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AttributeDelete200Response]:
        """product_price_delete

        Delete some prices of the product

        :param product_id: Defines the product where the price has to be deleted (required)
        :type product_id: str
        :param group_prices: Defines product's group prices
        :type group_prices: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_delete_serialize(
            product_id=product_id,
            group_prices=group_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_price_delete_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines the product where the price has to be deleted")],
        group_prices: Annotated[Optional[StrictStr], Field(description="Defines product's group prices")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_price_delete

        Delete some prices of the product

        :param product_id: Defines the product where the price has to be deleted (required)
        :type product_id: str
        :param group_prices: Defines product's group prices
        :type group_prices: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_delete_serialize(
            product_id=product_id,
            group_prices=group_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_price_delete_serialize(
        self,
        product_id,
        group_prices,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if group_prices is not None:
            
            _query_params.append(('group_prices', group_prices))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/product.price.delete.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_price_update(
        self,
        product_price_update: ProductPriceUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """product_price_update

        Update some prices of the product.

        :param product_price_update: (required)
        :type product_price_update: ProductPriceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_update_serialize(
            product_price_update=product_price_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_price_update_with_http_info(
        self,
        product_price_update: ProductPriceUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """product_price_update

        Update some prices of the product.

        :param product_price_update: (required)
        :type product_price_update: ProductPriceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_update_serialize(
            product_price_update=product_price_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_price_update_without_preload_content(
        self,
        product_price_update: ProductPriceUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_price_update

        Update some prices of the product.

        :param product_price_update: (required)
        :type product_price_update: ProductPriceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_price_update_serialize(
            product_price_update=product_price_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_price_update_serialize(
        self,
        product_price_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_price_update is not None:
            _body_params = product_price_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/product.price.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_review_list(
        self,
        product_id: Annotated[StrictStr, Field(description="Product id")],
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Retrieves reviews specified by ids")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines status")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductReviewList200Response:
        """product_review_list

        Get reviews of a specific product.

        :param product_id: Product id (required)
        :type product_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param ids: Retrieves reviews specified by ids
        :type ids: str
        :param store_id: Store Id
        :type store_id: str
        :param status: Defines status
        :type status: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_review_list_serialize(
            product_id=product_id,
            start=start,
            page_cursor=page_cursor,
            count=count,
            ids=ids,
            store_id=store_id,
            status=status,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductReviewList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_review_list_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Product id")],
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Retrieves reviews specified by ids")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines status")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductReviewList200Response]:
        """product_review_list

        Get reviews of a specific product.

        :param product_id: Product id (required)
        :type product_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param ids: Retrieves reviews specified by ids
        :type ids: str
        :param store_id: Store Id
        :type store_id: str
        :param status: Defines status
        :type status: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_review_list_serialize(
            product_id=product_id,
            start=start,
            page_cursor=page_cursor,
            count=count,
            ids=ids,
            store_id=store_id,
            status=status,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductReviewList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_review_list_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Product id")],
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Retrieves reviews specified by ids")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Defines status")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_review_list

        Get reviews of a specific product.

        :param product_id: Product id (required)
        :type product_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param ids: Retrieves reviews specified by ids
        :type ids: str
        :param store_id: Store Id
        :type store_id: str
        :param status: Defines status
        :type status: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_review_list_serialize(
            product_id=product_id,
            start=start,
            page_cursor=page_cursor,
            count=count,
            ids=ids,
            store_id=store_id,
            status=status,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductReviewList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_review_list_serialize(
        self,
        product_id,
        start,
        page_cursor,
        count,
        ids,
        store_id,
        status,
        params,
        exclude,
        response_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.review.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_store_assign(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines id of the product which should be assigned to a store")],
        store_id: Annotated[StrictStr, Field(description="Defines id of the store product should be assigned to")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """product_store_assign

        Assign product to store

        :param product_id: Defines id of the product which should be assigned to a store (required)
        :type product_id: str
        :param store_id: Defines id of the store product should be assigned to (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_store_assign_serialize(
            product_id=product_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_store_assign_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines id of the product which should be assigned to a store")],
        store_id: Annotated[StrictStr, Field(description="Defines id of the store product should be assigned to")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """product_store_assign

        Assign product to store

        :param product_id: Defines id of the product which should be assigned to a store (required)
        :type product_id: str
        :param store_id: Defines id of the store product should be assigned to (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_store_assign_serialize(
            product_id=product_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_store_assign_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines id of the product which should be assigned to a store")],
        store_id: Annotated[StrictStr, Field(description="Defines id of the store product should be assigned to")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_store_assign

        Assign product to store

        :param product_id: Defines id of the product which should be assigned to a store (required)
        :type product_id: str
        :param store_id: Defines id of the store product should be assigned to (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_store_assign_serialize(
            product_id=product_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_store_assign_serialize(
        self,
        product_id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.store.assign.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_tax_add(
        self,
        product_tax_add: ProductTaxAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductTaxAdd200Response:
        """product_tax_add

        Add tax class and tax rate to store and assign to product.

        :param product_tax_add: (required)
        :type product_tax_add: ProductTaxAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_tax_add_serialize(
            product_tax_add=product_tax_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTaxAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_tax_add_with_http_info(
        self,
        product_tax_add: ProductTaxAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductTaxAdd200Response]:
        """product_tax_add

        Add tax class and tax rate to store and assign to product.

        :param product_tax_add: (required)
        :type product_tax_add: ProductTaxAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_tax_add_serialize(
            product_tax_add=product_tax_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTaxAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_tax_add_without_preload_content(
        self,
        product_tax_add: ProductTaxAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_tax_add

        Add tax class and tax rate to store and assign to product.

        :param product_tax_add: (required)
        :type product_tax_add: ProductTaxAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_tax_add_serialize(
            product_tax_add=product_tax_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductTaxAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_tax_add_serialize(
        self,
        product_tax_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_tax_add is not None:
            _body_params = product_tax_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.tax.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_update(
        self,
        product_update: ProductUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """product_update

        Update price and quantity for a specific product

        :param product_update: (required)
        :type product_update: ProductUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_update_serialize(
            product_update=product_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_update_with_http_info(
        self,
        product_update: ProductUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """product_update

        Update price and quantity for a specific product

        :param product_update: (required)
        :type product_update: ProductUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_update_serialize(
            product_update=product_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_update_without_preload_content(
        self,
        product_update: ProductUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_update

        Update price and quantity for a specific product

        :param product_update: (required)
        :type product_update: ProductUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_update_serialize(
            product_update=product_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_update_serialize(
        self,
        product_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_update is not None:
            _body_params = product_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/product.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_add(
        self,
        product_variant_add: ProductVariantAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductVariantAdd200Response:
        """product_variant_add

        Add variant to product.

        :param product_variant_add: (required)
        :type product_variant_add: ProductVariantAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_add_serialize(
            product_variant_add=product_variant_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_add_with_http_info(
        self,
        product_variant_add: ProductVariantAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductVariantAdd200Response]:
        """product_variant_add

        Add variant to product.

        :param product_variant_add: (required)
        :type product_variant_add: ProductVariantAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_add_serialize(
            product_variant_add=product_variant_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_add_without_preload_content(
        self,
        product_variant_add: ProductVariantAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_add

        Add variant to product.

        :param product_variant_add: (required)
        :type product_variant_add: ProductVariantAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_add_serialize(
            product_variant_add=product_variant_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_add_serialize(
        self,
        product_variant_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_variant_add is not None:
            _body_params = product_variant_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.variant.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_count(
        self,
        product_id: Annotated[StrictStr, Field(description="Retrieves products' variants specified by product id")],
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Counts products’ variants specified by category id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variants specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductVariantCount200Response:
        """(Deprecated) product_variant_count

        Get count variants.

        :param product_id: Retrieves products' variants specified by product id (required)
        :type product_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param category_id: Counts products’ variants specified by category id
        :type category_id: str
        :param store_id: Retrieves variants specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.count.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_count_serialize(
            product_id=product_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            category_id=category_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_count_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Retrieves products' variants specified by product id")],
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Counts products’ variants specified by category id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variants specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductVariantCount200Response]:
        """(Deprecated) product_variant_count

        Get count variants.

        :param product_id: Retrieves products' variants specified by product id (required)
        :type product_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param category_id: Counts products’ variants specified by category id
        :type category_id: str
        :param store_id: Retrieves variants specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.count.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_count_serialize(
            product_id=product_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            category_id=category_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_count_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Retrieves products' variants specified by product id")],
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Counts products’ variants specified by category id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variants specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) product_variant_count

        Get count variants.

        :param product_id: Retrieves products' variants specified by product id (required)
        :type product_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param category_id: Counts products’ variants specified by category id
        :type category_id: str
        :param store_id: Retrieves variants specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.count.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_count_serialize(
            product_id=product_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            category_id=category_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_count_serialize(
        self,
        product_id,
        created_from,
        created_to,
        modified_from,
        modified_to,
        category_id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if category_id is not None:
            
            _query_params.append(('category_id', category_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.variant.count.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_delete(
        self,
        id: Annotated[StrictStr, Field(description="Defines variant removal, specified by variant id")],
        product_id: Annotated[StrictStr, Field(description="Defines product's id where the variant has to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AttributeDelete200Response:
        """product_variant_delete

        Delete variant.

        :param id: Defines variant removal, specified by variant id (required)
        :type id: str
        :param product_id: Defines product's id where the variant has to be deleted (required)
        :type product_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_delete_serialize(
            id=id,
            product_id=product_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Defines variant removal, specified by variant id")],
        product_id: Annotated[StrictStr, Field(description="Defines product's id where the variant has to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AttributeDelete200Response]:
        """product_variant_delete

        Delete variant.

        :param id: Defines variant removal, specified by variant id (required)
        :type id: str
        :param product_id: Defines product's id where the variant has to be deleted (required)
        :type product_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_delete_serialize(
            id=id,
            product_id=product_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Defines variant removal, specified by variant id")],
        product_id: Annotated[StrictStr, Field(description="Defines product's id where the variant has to be deleted")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_delete

        Delete variant.

        :param id: Defines variant removal, specified by variant id (required)
        :type id: str
        :param product_id: Defines product's id where the variant has to be deleted (required)
        :type product_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_delete_serialize(
            id=id,
            product_id=product_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_delete_serialize(
        self,
        id,
        product_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/product.variant.delete.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_image_add(
        self,
        product_variant_image_add: ProductVariantImageAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductImageAdd200Response:
        """product_variant_image_add

        Add image to product

        :param product_variant_image_add: (required)
        :type product_variant_image_add: ProductVariantImageAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_image_add_serialize(
            product_variant_image_add=product_variant_image_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_image_add_with_http_info(
        self,
        product_variant_image_add: ProductVariantImageAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductImageAdd200Response]:
        """product_variant_image_add

        Add image to product

        :param product_variant_image_add: (required)
        :type product_variant_image_add: ProductVariantImageAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_image_add_serialize(
            product_variant_image_add=product_variant_image_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_image_add_without_preload_content(
        self,
        product_variant_image_add: ProductVariantImageAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_image_add

        Add image to product

        :param product_variant_image_add: (required)
        :type product_variant_image_add: ProductVariantImageAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_image_add_serialize(
            product_variant_image_add=product_variant_image_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductImageAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_image_add_serialize(
        self,
        product_variant_image_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_variant_image_add is not None:
            _body_params = product_variant_image_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.variant.image.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_image_delete(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the variant image should be deleted")],
        product_variant_id: Annotated[StrictInt, Field(description="Defines product's variants specified by variant id")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AttributeDelete200Response:
        """product_variant_image_delete

        Delete  image to product

        :param product_id: Defines product id where the variant image should be deleted (required)
        :type product_id: str
        :param product_variant_id: Defines product's variants specified by variant id (required)
        :type product_variant_id: int
        :param id: Entity id (required)
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_image_delete_serialize(
            product_id=product_id,
            product_variant_id=product_variant_id,
            id=id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_image_delete_with_http_info(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the variant image should be deleted")],
        product_variant_id: Annotated[StrictInt, Field(description="Defines product's variants specified by variant id")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AttributeDelete200Response]:
        """product_variant_image_delete

        Delete  image to product

        :param product_id: Defines product id where the variant image should be deleted (required)
        :type product_id: str
        :param product_variant_id: Defines product's variants specified by variant id (required)
        :type product_variant_id: int
        :param id: Entity id (required)
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_image_delete_serialize(
            product_id=product_id,
            product_variant_id=product_variant_id,
            id=id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_image_delete_without_preload_content(
        self,
        product_id: Annotated[StrictStr, Field(description="Defines product id where the variant image should be deleted")],
        product_variant_id: Annotated[StrictInt, Field(description="Defines product's variants specified by variant id")],
        id: Annotated[StrictStr, Field(description="Entity id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_image_delete

        Delete  image to product

        :param product_id: Defines product id where the variant image should be deleted (required)
        :type product_id: str
        :param product_variant_id: Defines product's variants specified by variant id (required)
        :type product_variant_id: int
        :param id: Entity id (required)
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_image_delete_serialize(
            product_id=product_id,
            product_variant_id=product_variant_id,
            id=id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_image_delete_serialize(
        self,
        product_id,
        product_variant_id,
        id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if product_variant_id is not None:
            
            _query_params.append(('product_variant_id', product_variant_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/product.variant.image.delete.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_info(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves variant's info specified by variant id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variant info specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductInfo200Response:
        """(Deprecated) product_variant_info

        Get variant info. This method is deprecated, and its development is stopped. Please use \"product.child_item.info\" instead.

        :param id: Retrieves variant's info specified by variant id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves variant info specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.info.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_info_serialize(
            id=id,
            params=params,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_info_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves variant's info specified by variant id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variant info specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductInfo200Response]:
        """(Deprecated) product_variant_info

        Get variant info. This method is deprecated, and its development is stopped. Please use \"product.child_item.info\" instead.

        :param id: Retrieves variant's info specified by variant id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves variant info specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.info.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_info_serialize(
            id=id,
            params=params,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_info_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves variant's info specified by variant id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variant info specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) product_variant_info

        Get variant info. This method is deprecated, and its development is stopped. Please use \"product.child_item.info\" instead.

        :param id: Retrieves variant's info specified by variant id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves variant info specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.info.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_info_serialize(
            id=id,
            params=params,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_info_serialize(
        self,
        id,
        params,
        exclude,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.variant.info.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_list(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Retrieves products’ variants specified by category id")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Retrieves products' variants specified by product id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variants specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProductVariantList200Response:
        """(Deprecated) product_variant_list

        Get a list of variants. This method is deprecated, and its development is stopped. Please use \"product.child_item.list\" instead.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param category_id: Retrieves products’ variants specified by category id
        :type category_id: str
        :param product_id: Retrieves products' variants specified by product id
        :type product_id: str
        :param store_id: Retrieves variants specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.list.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_list_serialize(
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            category_id=category_id,
            product_id=product_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_list_with_http_info(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Retrieves products’ variants specified by category id")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Retrieves products' variants specified by product id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variants specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProductVariantList200Response]:
        """(Deprecated) product_variant_list

        Get a list of variants. This method is deprecated, and its development is stopped. Please use \"product.child_item.list\" instead.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param category_id: Retrieves products’ variants specified by category id
        :type category_id: str
        :param product_id: Retrieves products' variants specified by product id
        :type product_id: str
        :param store_id: Retrieves variants specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.list.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_list_serialize(
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            category_id=category_id,
            product_id=product_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_list_without_preload_content(
        self,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        category_id: Annotated[Optional[StrictStr], Field(description="Retrieves products’ variants specified by category id")] = None,
        product_id: Annotated[Optional[StrictStr], Field(description="Retrieves products' variants specified by product id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves variants specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) product_variant_list

        Get a list of variants. This method is deprecated, and its development is stopped. Please use \"product.child_item.list\" instead.

        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param category_id: Retrieves products’ variants specified by category id
        :type category_id: str
        :param product_id: Retrieves products' variants specified by product id
        :type product_id: str
        :param store_id: Retrieves variants specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /product.variant.list.json is deprecated.", DeprecationWarning)

        _param = self._product_variant_list_serialize(
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            category_id=category_id,
            product_id=product_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProductVariantList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_list_serialize(
        self,
        start,
        count,
        params,
        exclude,
        created_from,
        created_to,
        modified_from,
        modified_to,
        category_id,
        product_id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if category_id is not None:
            
            _query_params.append(('category_id', category_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/product.variant.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_price_add(
        self,
        product_variant_price_add: ProductVariantPriceAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CartValidate200Response:
        """product_variant_price_add

        Add some prices to the product variant.

        :param product_variant_price_add: (required)
        :type product_variant_price_add: ProductVariantPriceAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_add_serialize(
            product_variant_price_add=product_variant_price_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartValidate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_price_add_with_http_info(
        self,
        product_variant_price_add: ProductVariantPriceAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CartValidate200Response]:
        """product_variant_price_add

        Add some prices to the product variant.

        :param product_variant_price_add: (required)
        :type product_variant_price_add: ProductVariantPriceAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_add_serialize(
            product_variant_price_add=product_variant_price_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartValidate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_price_add_without_preload_content(
        self,
        product_variant_price_add: ProductVariantPriceAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_price_add

        Add some prices to the product variant.

        :param product_variant_price_add: (required)
        :type product_variant_price_add: ProductVariantPriceAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_add_serialize(
            product_variant_price_add=product_variant_price_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CartValidate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_price_add_serialize(
        self,
        product_variant_price_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_variant_price_add is not None:
            _body_params = product_variant_price_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/product.variant.price.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_price_delete(
        self,
        id: Annotated[StrictStr, Field(description="Defines the variant where the price has to be deleted")],
        product_id: Annotated[StrictStr, Field(description="Product id")],
        group_prices: Annotated[StrictStr, Field(description="Defines variants's group prices")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AttributeDelete200Response:
        """product_variant_price_delete

        Delete some prices of the product variant.

        :param id: Defines the variant where the price has to be deleted (required)
        :type id: str
        :param product_id: Product id (required)
        :type product_id: str
        :param group_prices: Defines variants's group prices (required)
        :type group_prices: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_delete_serialize(
            id=id,
            product_id=product_id,
            group_prices=group_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_price_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Defines the variant where the price has to be deleted")],
        product_id: Annotated[StrictStr, Field(description="Product id")],
        group_prices: Annotated[StrictStr, Field(description="Defines variants's group prices")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AttributeDelete200Response]:
        """product_variant_price_delete

        Delete some prices of the product variant.

        :param id: Defines the variant where the price has to be deleted (required)
        :type id: str
        :param product_id: Product id (required)
        :type product_id: str
        :param group_prices: Defines variants's group prices (required)
        :type group_prices: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_delete_serialize(
            id=id,
            product_id=product_id,
            group_prices=group_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_price_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Defines the variant where the price has to be deleted")],
        product_id: Annotated[StrictStr, Field(description="Product id")],
        group_prices: Annotated[StrictStr, Field(description="Defines variants's group prices")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_price_delete

        Delete some prices of the product variant.

        :param id: Defines the variant where the price has to be deleted (required)
        :type id: str
        :param product_id: Product id (required)
        :type product_id: str
        :param group_prices: Defines variants's group prices (required)
        :type group_prices: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_delete_serialize(
            id=id,
            product_id=product_id,
            group_prices=group_prices,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttributeDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_price_delete_serialize(
        self,
        id,
        product_id,
        group_prices,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if group_prices is not None:
            
            _query_params.append(('group_prices', group_prices))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/product.variant.price.delete.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_price_update(
        self,
        product_variant_price_update: ProductVariantPriceUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """product_variant_price_update

        Update some prices of the product variant.

        :param product_variant_price_update: (required)
        :type product_variant_price_update: ProductVariantPriceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_update_serialize(
            product_variant_price_update=product_variant_price_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_price_update_with_http_info(
        self,
        product_variant_price_update: ProductVariantPriceUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """product_variant_price_update

        Update some prices of the product variant.

        :param product_variant_price_update: (required)
        :type product_variant_price_update: ProductVariantPriceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_update_serialize(
            product_variant_price_update=product_variant_price_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_price_update_without_preload_content(
        self,
        product_variant_price_update: ProductVariantPriceUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_price_update

        Update some prices of the product variant.

        :param product_variant_price_update: (required)
        :type product_variant_price_update: ProductVariantPriceUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_price_update_serialize(
            product_variant_price_update=product_variant_price_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_price_update_serialize(
        self,
        product_variant_price_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_variant_price_update is not None:
            _body_params = product_variant_price_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/product.variant.price.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def product_variant_update(
        self,
        product_variant_update: ProductVariantUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """product_variant_update

        Update variant.

        :param product_variant_update: (required)
        :type product_variant_update: ProductVariantUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_update_serialize(
            product_variant_update=product_variant_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def product_variant_update_with_http_info(
        self,
        product_variant_update: ProductVariantUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """product_variant_update

        Update variant.

        :param product_variant_update: (required)
        :type product_variant_update: ProductVariantUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_update_serialize(
            product_variant_update=product_variant_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def product_variant_update_without_preload_content(
        self,
        product_variant_update: ProductVariantUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """product_variant_update

        Update variant.

        :param product_variant_update: (required)
        :type product_variant_update: ProductVariantUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._product_variant_update_serialize(
            product_variant_update=product_variant_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _product_variant_update_serialize(
        self,
        product_variant_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if product_variant_update is not None:
            _body_params = product_variant_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/product.variant.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



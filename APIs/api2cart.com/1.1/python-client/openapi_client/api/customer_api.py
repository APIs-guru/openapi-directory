# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.customer_add import CustomerAdd
from openapi_client.models.customer_add200_response import CustomerAdd200Response
from openapi_client.models.customer_count200_response import CustomerCount200Response
from openapi_client.models.customer_find200_response import CustomerFind200Response
from openapi_client.models.customer_group_add200_response import CustomerGroupAdd200Response
from openapi_client.models.customer_info200_response import CustomerInfo200Response
from openapi_client.models.customer_update import CustomerUpdate
from openapi_client.models.customer_update200_response import CustomerUpdate200Response
from openapi_client.models.customer_wishlist_list200_response import CustomerWishlistList200Response
from openapi_client.models.model_response_customer_attribute_list import ModelResponseCustomerAttributeList
from openapi_client.models.model_response_customer_group_list import ModelResponseCustomerGroupList
from openapi_client.models.model_response_customer_list import ModelResponseCustomerList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CustomerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def customer_add(
        self,
        customer_add: CustomerAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CustomerAdd200Response:
        """customer_add

        Add customer into store.

        :param customer_add: (required)
        :type customer_add: CustomerAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_add_serialize(
            customer_add=customer_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_add_with_http_info(
        self,
        customer_add: CustomerAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CustomerAdd200Response]:
        """customer_add

        Add customer into store.

        :param customer_add: (required)
        :type customer_add: CustomerAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_add_serialize(
            customer_add=customer_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_add_without_preload_content(
        self,
        customer_add: CustomerAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_add

        Add customer into store.

        :param customer_add: (required)
        :type customer_add: CustomerAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_add_serialize(
            customer_add=customer_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_add_serialize(
        self,
        customer_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if customer_add is not None:
            _body_params = customer_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/customer.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_attribute_list(
        self,
        customer_id: Annotated[StrictStr, Field(description="Retrieves orders specified by customer id")],
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseCustomerAttributeList:
        """customer_attribute_list

        Get attributes for specific customer

        :param customer_id: Retrieves orders specified by customer id (required)
        :type customer_id: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_attribute_list_serialize(
            customer_id=customer_id,
            count=count,
            page_cursor=page_cursor,
            store_id=store_id,
            lang_id=lang_id,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerAttributeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_attribute_list_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="Retrieves orders specified by customer id")],
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseCustomerAttributeList]:
        """customer_attribute_list

        Get attributes for specific customer

        :param customer_id: Retrieves orders specified by customer id (required)
        :type customer_id: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_attribute_list_serialize(
            customer_id=customer_id,
            count=count,
            page_cursor=page_cursor,
            store_id=store_id,
            lang_id=lang_id,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerAttributeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_attribute_list_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="Retrieves orders specified by customer id")],
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_attribute_list

        Get attributes for specific customer

        :param customer_id: Retrieves orders specified by customer id (required)
        :type customer_id: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_attribute_list_serialize(
            customer_id=customer_id,
            count=count,
            page_cursor=page_cursor,
            store_id=store_id,
            lang_id=lang_id,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerAttributeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_attribute_list_serialize(
        self,
        customer_id,
        count,
        page_cursor,
        store_id,
        lang_id,
        params,
        exclude,
        response_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if customer_id is not None:
            
            _query_params.append(('customer_id', customer_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/customer.attribute.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_count(
        self,
        group_id: Annotated[Optional[StrictStr], Field(description="Customer group_id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts customer specified by store id")] = None,
        customer_list_id: Annotated[Optional[StrictStr], Field(description="The numeric ID of the customer list in Demandware.")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines category's visibility status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CustomerCount200Response:
        """customer_count

        Get number of customers from store.

        :param group_id: Customer group_id
        :type group_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param store_id: Counts customer specified by store id
        :type store_id: str
        :param customer_list_id: The numeric ID of the customer list in Demandware.
        :type customer_list_id: str
        :param avail: Defines category's visibility status
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_count_serialize(
            group_id=group_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            store_id=store_id,
            customer_list_id=customer_list_id,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_count_with_http_info(
        self,
        group_id: Annotated[Optional[StrictStr], Field(description="Customer group_id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts customer specified by store id")] = None,
        customer_list_id: Annotated[Optional[StrictStr], Field(description="The numeric ID of the customer list in Demandware.")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines category's visibility status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CustomerCount200Response]:
        """customer_count

        Get number of customers from store.

        :param group_id: Customer group_id
        :type group_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param store_id: Counts customer specified by store id
        :type store_id: str
        :param customer_list_id: The numeric ID of the customer list in Demandware.
        :type customer_list_id: str
        :param avail: Defines category's visibility status
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_count_serialize(
            group_id=group_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            store_id=store_id,
            customer_list_id=customer_list_id,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_count_without_preload_content(
        self,
        group_id: Annotated[Optional[StrictStr], Field(description="Customer group_id")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts customer specified by store id")] = None,
        customer_list_id: Annotated[Optional[StrictStr], Field(description="The numeric ID of the customer list in Demandware.")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines category's visibility status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_count

        Get number of customers from store.

        :param group_id: Customer group_id
        :type group_id: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param store_id: Counts customer specified by store id
        :type store_id: str
        :param customer_list_id: The numeric ID of the customer list in Demandware.
        :type customer_list_id: str
        :param avail: Defines category's visibility status
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_count_serialize(
            group_id=group_id,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            store_id=store_id,
            customer_list_id=customer_list_id,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_count_serialize(
        self,
        group_id,
        created_from,
        created_to,
        modified_from,
        modified_to,
        store_id,
        customer_list_id,
        avail,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if group_id is not None:
            
            _query_params.append(('group_id', group_id))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if customer_list_id is not None:
            
            _query_params.append(('customer_list_id', customer_list_id))
            
        if avail is not None:
            
            _query_params.append(('avail', avail))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/customer.count.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_find(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CustomerFind200Response:
        """customer_find

        Find customers in store.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_find_with_http_info(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CustomerFind200Response]:
        """customer_find

        Find customers in store.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_find_without_preload_content(
        self,
        find_value: Annotated[StrictStr, Field(description="Entity search that is specified by some value")],
        find_where: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by the comma-separated unique fields")] = None,
        find_params: Annotated[Optional[StrictStr], Field(description="Entity search that is specified by comma-separated parameters")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_find

        Find customers in store.

        :param find_value: Entity search that is specified by some value (required)
        :type find_value: str
        :param find_where: Entity search that is specified by the comma-separated unique fields
        :type find_where: str
        :param find_params: Entity search that is specified by comma-separated parameters
        :type find_params: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_find_serialize(
            find_value=find_value,
            find_where=find_where,
            find_params=find_params,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_find_serialize(
        self,
        find_value,
        find_where,
        find_params,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if find_value is not None:
            
            _query_params.append(('find_value', find_value))
            
        if find_where is not None:
            
            _query_params.append(('find_where', find_where))
            
        if find_params is not None:
            
            _query_params.append(('find_params', find_params))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/customer.find.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_group_add(
        self,
        name: Annotated[StrictStr, Field(description="Customer group name")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        stores_ids: Annotated[Optional[StrictStr], Field(description="Assign customer group to the stores that is specified by comma-separated stores' id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CustomerGroupAdd200Response:
        """customer_group_add

        Create customer group.

        :param name: Customer group name (required)
        :type name: str
        :param store_id: Store Id
        :type store_id: str
        :param stores_ids: Assign customer group to the stores that is specified by comma-separated stores' id
        :type stores_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_group_add_serialize(
            name=name,
            store_id=store_id,
            stores_ids=stores_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerGroupAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_group_add_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Customer group name")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        stores_ids: Annotated[Optional[StrictStr], Field(description="Assign customer group to the stores that is specified by comma-separated stores' id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CustomerGroupAdd200Response]:
        """customer_group_add

        Create customer group.

        :param name: Customer group name (required)
        :type name: str
        :param store_id: Store Id
        :type store_id: str
        :param stores_ids: Assign customer group to the stores that is specified by comma-separated stores' id
        :type stores_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_group_add_serialize(
            name=name,
            store_id=store_id,
            stores_ids=stores_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerGroupAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_group_add_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Customer group name")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        stores_ids: Annotated[Optional[StrictStr], Field(description="Assign customer group to the stores that is specified by comma-separated stores' id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_group_add

        Create customer group.

        :param name: Customer group name (required)
        :type name: str
        :param store_id: Store Id
        :type store_id: str
        :param stores_ids: Assign customer group to the stores that is specified by comma-separated stores' id
        :type stores_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_group_add_serialize(
            name=name,
            store_id=store_id,
            stores_ids=stores_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerGroupAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_group_add_serialize(
        self,
        name,
        store_id,
        stores_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if stores_ids is not None:
            
            _query_params.append(('stores_ids', stores_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/customer.group.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_group_list(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="Groups that will be assigned to a customer")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseCustomerGroupList:
        """customer_group_list

        Get list of customers groups.

        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param group_ids: Groups that will be assigned to a customer
        :type group_ids: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_group_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            store_id=store_id,
            lang_id=lang_id,
            group_ids=group_ids,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerGroupList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_group_list_with_http_info(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="Groups that will be assigned to a customer")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseCustomerGroupList]:
        """customer_group_list

        Get list of customers groups.

        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param group_ids: Groups that will be assigned to a customer
        :type group_ids: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_group_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            store_id=store_id,
            lang_id=lang_id,
            group_ids=group_ids,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerGroupList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_group_list_without_preload_content(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        lang_id: Annotated[Optional[StrictStr], Field(description="Language id")] = None,
        group_ids: Annotated[Optional[StrictStr], Field(description="Groups that will be assigned to a customer")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_group_list

        Get list of customers groups.

        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param store_id: Store Id
        :type store_id: str
        :param lang_id: Language id
        :type lang_id: str
        :param group_ids: Groups that will be assigned to a customer
        :type group_ids: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_group_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            store_id=store_id,
            lang_id=lang_id,
            group_ids=group_ids,
            params=params,
            exclude=exclude,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerGroupList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_group_list_serialize(
        self,
        page_cursor,
        start,
        count,
        store_id,
        lang_id,
        group_ids,
        params,
        exclude,
        response_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if lang_id is not None:
            
            _query_params.append(('lang_id', lang_id))
            
        if group_ids is not None:
            
            _query_params.append(('group_ids', group_ids))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/customer.group.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_info(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves customer's info specified by customer id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves customer info specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CustomerInfo200Response:
        """customer_info

        Get customers' details from store.

        :param id: Retrieves customer's info specified by customer id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves customer info specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_info_serialize(
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_info_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves customer's info specified by customer id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves customer info specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CustomerInfo200Response]:
        """customer_info

        Get customers' details from store.

        :param id: Retrieves customer's info specified by customer id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves customer info specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_info_serialize(
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_info_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Retrieves customer's info specified by customer id")],
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves customer info specified by store id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_info

        Get customers' details from store.

        :param id: Retrieves customer's info specified by customer id (required)
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Retrieves customer info specified by store id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_info_serialize(
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_info_serialize(
        self,
        id,
        params,
        response_fields,
        exclude,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/customer.info.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_list(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        group_id: Annotated[Optional[StrictStr], Field(description="Customer group_id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves customers specified by store id")] = None,
        customer_list_id: Annotated[Optional[StrictStr], Field(description="The numeric ID of the customer list in Demandware.")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines category's visibility status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseCustomerList:
        """customer_list

        Get list of customers from store.

        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param group_id: Customer group_id
        :type group_id: str
        :param store_id: Retrieves customers specified by store id
        :type store_id: str
        :param customer_list_id: The numeric ID of the customer list in Demandware.
        :type customer_list_id: str
        :param avail: Defines category's visibility status
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            group_id=group_id,
            store_id=store_id,
            customer_list_id=customer_list_id,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_list_with_http_info(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        group_id: Annotated[Optional[StrictStr], Field(description="Customer group_id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves customers specified by store id")] = None,
        customer_list_id: Annotated[Optional[StrictStr], Field(description="The numeric ID of the customer list in Demandware.")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines category's visibility status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseCustomerList]:
        """customer_list

        Get list of customers from store.

        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param group_id: Customer group_id
        :type group_id: str
        :param store_id: Retrieves customers specified by store id
        :type store_id: str
        :param customer_list_id: The numeric ID of the customer list in Demandware.
        :type customer_list_id: str
        :param avail: Defines category's visibility status
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            group_id=group_id,
            store_id=store_id,
            customer_list_id=customer_list_id,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_list_without_preload_content(
        self,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        group_id: Annotated[Optional[StrictStr], Field(description="Customer group_id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Retrieves customers specified by store id")] = None,
        customer_list_id: Annotated[Optional[StrictStr], Field(description="The numeric ID of the customer list in Demandware.")] = None,
        avail: Annotated[Optional[StrictBool], Field(description="Defines category's visibility status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_list

        Get list of customers from store.

        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param group_id: Customer group_id
        :type group_id: str
        :param store_id: Retrieves customers specified by store id
        :type store_id: str
        :param customer_list_id: The numeric ID of the customer list in Demandware.
        :type customer_list_id: str
        :param avail: Defines category's visibility status
        :type avail: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_list_serialize(
            page_cursor=page_cursor,
            start=start,
            count=count,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            group_id=group_id,
            store_id=store_id,
            customer_list_id=customer_list_id,
            avail=avail,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseCustomerList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_list_serialize(
        self,
        page_cursor,
        start,
        count,
        created_from,
        created_to,
        modified_from,
        modified_to,
        params,
        response_fields,
        exclude,
        group_id,
        store_id,
        customer_list_id,
        avail,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if group_id is not None:
            
            _query_params.append(('group_id', group_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if customer_list_id is not None:
            
            _query_params.append(('customer_list_id', customer_list_id))
            
        if avail is not None:
            
            _query_params.append(('avail', avail))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/customer.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_update(
        self,
        customer_update: CustomerUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CustomerUpdate200Response:
        """customer_update

        Update information of customer in store.

        :param customer_update: (required)
        :type customer_update: CustomerUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_update_serialize(
            customer_update=customer_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_update_with_http_info(
        self,
        customer_update: CustomerUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CustomerUpdate200Response]:
        """customer_update

        Update information of customer in store.

        :param customer_update: (required)
        :type customer_update: CustomerUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_update_serialize(
            customer_update=customer_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_update_without_preload_content(
        self,
        customer_update: CustomerUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_update

        Update information of customer in store.

        :param customer_update: (required)
        :type customer_update: CustomerUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_update_serialize(
            customer_update=customer_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_update_serialize(
        self,
        customer_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if customer_update is not None:
            _body_params = customer_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/customer.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def customer_wishlist_list(
        self,
        customer_id: Annotated[StrictStr, Field(description="Retrieves orders specified by customer id")],
        id: Annotated[Optional[StrictStr], Field(description="Entity id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CustomerWishlistList200Response:
        """customer_wishlist_list

        Get a Wish List of customer from the store.

        :param customer_id: Retrieves orders specified by customer id (required)
        :type customer_id: str
        :param id: Entity id
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_wishlist_list_serialize(
            customer_id=customer_id,
            id=id,
            store_id=store_id,
            start=start,
            count=count,
            page_cursor=page_cursor,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerWishlistList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def customer_wishlist_list_with_http_info(
        self,
        customer_id: Annotated[StrictStr, Field(description="Retrieves orders specified by customer id")],
        id: Annotated[Optional[StrictStr], Field(description="Entity id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CustomerWishlistList200Response]:
        """customer_wishlist_list

        Get a Wish List of customer from the store.

        :param customer_id: Retrieves orders specified by customer id (required)
        :type customer_id: str
        :param id: Entity id
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_wishlist_list_serialize(
            customer_id=customer_id,
            id=id,
            store_id=store_id,
            start=start,
            count=count,
            page_cursor=page_cursor,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerWishlistList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def customer_wishlist_list_without_preload_content(
        self,
        customer_id: Annotated[StrictStr, Field(description="Retrieves orders specified by customer id")],
        id: Annotated[Optional[StrictStr], Field(description="Entity id")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """customer_wishlist_list

        Get a Wish List of customer from the store.

        :param customer_id: Retrieves orders specified by customer id (required)
        :type customer_id: str
        :param id: Entity id
        :type id: str
        :param store_id: Store Id
        :type store_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._customer_wishlist_list_serialize(
            customer_id=customer_id,
            id=id,
            store_id=store_id,
            start=start,
            count=count,
            page_cursor=page_cursor,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CustomerWishlistList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _customer_wishlist_list_serialize(
        self,
        customer_id,
        id,
        store_id,
        start,
        count,
        page_cursor,
        response_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if customer_id is not None:
            
            _query_params.append(('customer_id', customer_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/customer.wishlist.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



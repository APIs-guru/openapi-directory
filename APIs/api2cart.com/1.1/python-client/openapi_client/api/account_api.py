# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.account_cart_add import AccountCartAdd
from openapi_client.models.account_cart_add200_response import AccountCartAdd200Response
from openapi_client.models.account_cart_list200_response import AccountCartList200Response
from openapi_client.models.account_config_update200_response import AccountConfigUpdate200Response
from openapi_client.models.account_failed_webhooks200_response import AccountFailedWebhooks200Response
from openapi_client.models.account_supported_platforms200_response import AccountSupportedPlatforms200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AccountApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def account_cart_add(
        self,
        account_cart_add: AccountCartAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountCartAdd200Response:
        """account_cart_add

        Add store to the account

        :param account_cart_add: (required)
        :type account_cart_add: AccountCartAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_cart_add_serialize(
            account_cart_add=account_cart_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountCartAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def account_cart_add_with_http_info(
        self,
        account_cart_add: AccountCartAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountCartAdd200Response]:
        """account_cart_add

        Add store to the account

        :param account_cart_add: (required)
        :type account_cart_add: AccountCartAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_cart_add_serialize(
            account_cart_add=account_cart_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountCartAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def account_cart_add_without_preload_content(
        self,
        account_cart_add: AccountCartAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """account_cart_add

        Add store to the account

        :param account_cart_add: (required)
        :type account_cart_add: AccountCartAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_cart_add_serialize(
            account_cart_add=account_cart_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountCartAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _account_cart_add_serialize(
        self,
        account_cart_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if account_cart_add is not None:
            _body_params = account_cart_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/account.cart.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def account_cart_list(
        self,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        request_from_date: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        request_to_date: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        store_url: Annotated[Optional[StrictStr], Field(description="A web address of a store")] = None,
        store_key: Annotated[Optional[StrictStr], Field(description="Find store by store key")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountCartList200Response:
        """account_cart_list

        Get list of carts.

        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param request_from_date: Retrieve entities from their creation date
        :type request_from_date: str
        :param request_to_date: Retrieve entities to their creation date
        :type request_to_date: str
        :param store_url: A web address of a store
        :type store_url: str
        :param store_key: Find store by store key
        :type store_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_cart_list_serialize(
            params=params,
            exclude=exclude,
            request_from_date=request_from_date,
            request_to_date=request_to_date,
            store_url=store_url,
            store_key=store_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountCartList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def account_cart_list_with_http_info(
        self,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        request_from_date: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        request_to_date: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        store_url: Annotated[Optional[StrictStr], Field(description="A web address of a store")] = None,
        store_key: Annotated[Optional[StrictStr], Field(description="Find store by store key")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountCartList200Response]:
        """account_cart_list

        Get list of carts.

        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param request_from_date: Retrieve entities from their creation date
        :type request_from_date: str
        :param request_to_date: Retrieve entities to their creation date
        :type request_to_date: str
        :param store_url: A web address of a store
        :type store_url: str
        :param store_key: Find store by store key
        :type store_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_cart_list_serialize(
            params=params,
            exclude=exclude,
            request_from_date=request_from_date,
            request_to_date=request_to_date,
            store_url=store_url,
            store_key=store_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountCartList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def account_cart_list_without_preload_content(
        self,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        request_from_date: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        request_to_date: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        store_url: Annotated[Optional[StrictStr], Field(description="A web address of a store")] = None,
        store_key: Annotated[Optional[StrictStr], Field(description="Find store by store key")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """account_cart_list

        Get list of carts.

        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param request_from_date: Retrieve entities from their creation date
        :type request_from_date: str
        :param request_to_date: Retrieve entities to their creation date
        :type request_to_date: str
        :param store_url: A web address of a store
        :type store_url: str
        :param store_key: Find store by store key
        :type store_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_cart_list_serialize(
            params=params,
            exclude=exclude,
            request_from_date=request_from_date,
            request_to_date=request_to_date,
            store_url=store_url,
            store_key=store_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountCartList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _account_cart_list_serialize(
        self,
        params,
        exclude,
        request_from_date,
        request_to_date,
        store_url,
        store_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if request_from_date is not None:
            
            _query_params.append(('request_from_date', request_from_date))
            
        if request_to_date is not None:
            
            _query_params.append(('request_to_date', request_to_date))
            
        if store_url is not None:
            
            _query_params.append(('store_url', store_url))
            
        if store_key is not None:
            
            _query_params.append(('store_key', store_key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/account.cart.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def account_config_update(
        self,
        new_store_key: Annotated[Optional[StrictStr], Field(description="Update store key")] = None,
        bridge_url: Annotated[Optional[StrictStr], Field(description="This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)")] = None,
        store_root: Annotated[Optional[StrictStr], Field(description="Absolute path to the store root directory (used with \"bridge_url\" parameter)")] = None,
        db_tables_prefix: Annotated[Optional[StrictStr], Field(description="DB tables prefix")] = None,
        var_3dcart_private_key: Annotated[Optional[StrictStr], Field(description="3DCart Private Key")] = None,
        var_3dcart_access_token: Annotated[Optional[StrictStr], Field(description="3DCart Token")] = None,
        var_3dcartapi_api_key: Annotated[Optional[StrictStr], Field(description="3DCart API Key")] = None,
        amazon_sp_client_id: Annotated[Optional[StrictStr], Field(description="Amazon SP API app client id")] = None,
        amazon_sp_client_secret: Annotated[Optional[StrictStr], Field(description="Amazon SP API app client secret")] = None,
        amazon_sp_aws_user_key_id: Annotated[Optional[StrictStr], Field(description="Amazon AWS user access key ID")] = None,
        amazon_sp_aws_user_secret: Annotated[Optional[StrictStr], Field(description="Amazon AWS user secret access key")] = None,
        amazon_sp_aws_region: Annotated[Optional[StrictStr], Field(description="Amazon AWS Region")] = None,
        amazon_sp_aws_role_arn: Annotated[Optional[StrictStr], Field(description="Amazon AWS Role ARN")] = None,
        amazon_sp_refresh_token: Annotated[Optional[StrictStr], Field(description="Amazon SP API OAuth refresh token")] = None,
        amazon_sp_api_environment: Annotated[Optional[StrictStr], Field(description="Amazon SP API environment")] = None,
        amazon_access_token: Annotated[Optional[StrictStr], Field(description="MWS Auth Token. Access token authorizing the app to access resources on behalf of a user")] = None,
        amazon_seller_id: Annotated[Optional[StrictStr], Field(description="Amazon Seller ID (Merchant token)")] = None,
        amazon_marketplaces_ids: Annotated[Optional[StrictStr], Field(description="Amazon Marketplace IDs comma separated string")] = None,
        amazon_secret_key: Annotated[Optional[StrictStr], Field(description="Amazon Secret Key")] = None,
        amazon_access_key_id: Annotated[Optional[StrictStr], Field(description="Amazon Secret Key Id")] = None,
        aspdotnetstorefront_api_user: Annotated[Optional[StrictStr], Field(description="It's a AspDotNetStorefront account for which API is available")] = None,
        aspdotnetstorefront_api_pass: Annotated[Optional[StrictStr], Field(description="AspDotNetStorefront API Password")] = None,
        bigcommerceapi_admin_account: Annotated[Optional[StrictStr], Field(description="It's a BigCommerce account for which API is enabled")] = None,
        bigcommerceapi_api_path: Annotated[Optional[StrictStr], Field(description="BigCommerce API URL")] = None,
        bigcommerceapi_api_key: Annotated[Optional[StrictStr], Field(description="Bigcommerce API Key")] = None,
        bigcommerceapi_client_id: Annotated[Optional[StrictStr], Field(description="Client ID of the requesting app")] = None,
        bigcommerceapi_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        bigcommerceapi_context: Annotated[Optional[StrictStr], Field(description="API Path section unique to the store")] = None,
        demandware_client_id: Annotated[Optional[StrictStr], Field(description="Demandware client id")] = None,
        demandware_api_password: Annotated[Optional[StrictStr], Field(description="Demandware api password")] = None,
        demandware_user_name: Annotated[Optional[StrictStr], Field(description="Demandware user name")] = None,
        demandware_user_password: Annotated[Optional[StrictStr], Field(description="Demandware user password")] = None,
        ebay_client_id: Annotated[Optional[StrictStr], Field(description="Application ID (AppID).")] = None,
        ebay_client_secret: Annotated[Optional[StrictStr], Field(description="Shared Secret from eBay application")] = None,
        ebay_runame: Annotated[Optional[StrictStr], Field(description="The RuName value that eBay assigns to your application.")] = None,
        ebay_access_token: Annotated[Optional[StrictStr], Field(description="Used to authenticate API requests.")] = None,
        ebay_refresh_token: Annotated[Optional[StrictStr], Field(description="Used to renew the access token.")] = None,
        ebay_environment: Annotated[Optional[StrictStr], Field(description="eBay environment")] = None,
        ebay_site_id: Annotated[Optional[StrictInt], Field(description="eBay global ID")] = None,
        ecwid_acess_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        ecwid_store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        etsy_keystring: Annotated[Optional[StrictStr], Field(description="Etsy keystring")] = None,
        etsy_shared_secret: Annotated[Optional[StrictStr], Field(description="Etsy shared secret")] = None,
        etsy_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        etsy_token_secret: Annotated[Optional[StrictStr], Field(description="Secret token authorizing the app to access resources on behalf of a user")] = None,
        etsy_client_id: Annotated[Optional[StrictStr], Field(description="Etsy Client Id")] = None,
        etsy_refresh_token: Annotated[Optional[StrictStr], Field(description="Etsy Refresh token")] = None,
        neto_api_key: Annotated[Optional[StrictStr], Field(description="Neto API Key")] = None,
        neto_api_username: Annotated[Optional[StrictStr], Field(description="Neto User Name")] = None,
        shopify_api_key: Annotated[Optional[StrictStr], Field(description="Shopify API Key")] = None,
        shopify_api_password: Annotated[Optional[StrictStr], Field(description="Shopify API Password")] = None,
        shopify_shared_secret: Annotated[Optional[StrictStr], Field(description="Shared secret")] = None,
        shopify_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        shopware_access_key: Annotated[Optional[StrictStr], Field(description="Shopware access key")] = None,
        shopware_api_key: Annotated[Optional[StrictStr], Field(description="Shopware api key")] = None,
        shopware_api_secret: Annotated[Optional[StrictStr], Field(description="Shopware client secret access key")] = None,
        volusion_login: Annotated[Optional[StrictStr], Field(description="It's a Volusion account for which API is enabled")] = None,
        volusion_password: Annotated[Optional[StrictStr], Field(description="Volusion API Password")] = None,
        walmart_client_id: Annotated[Optional[StrictStr], Field(description="Walmart client ID")] = None,
        walmart_client_secret: Annotated[Optional[StrictStr], Field(description="Walmart client secret")] = None,
        walmart_environment: Annotated[Optional[StrictStr], Field(description="Walmart environment")] = None,
        walmart_channel_type: Annotated[Optional[StrictStr], Field(description="Walmart WM_CONSUMER.CHANNEL.TYPE header")] = None,
        squarespace_api_key: Annotated[Optional[StrictStr], Field(description="Squarespace API Key")] = None,
        hybris_client_id: Annotated[Optional[StrictStr], Field(description="Omni Commerce Connector Client ID")] = None,
        hybris_client_secret: Annotated[Optional[StrictStr], Field(description="Omni Commerce Connector Client Secret")] = None,
        hybris_username: Annotated[Optional[StrictStr], Field(description="User Name")] = None,
        hybris_password: Annotated[Optional[StrictStr], Field(description="User password")] = None,
        hybris_websites: Annotated[Optional[List[StrictStr]], Field(description="Websites to stores mapping data")] = None,
        lightspeed_api_key: Annotated[Optional[StrictStr], Field(description="LightSpeed api key")] = None,
        lightspeed_api_secret: Annotated[Optional[StrictStr], Field(description="LightSpeed api secret")] = None,
        commercehq_api_key: Annotated[Optional[StrictStr], Field(description="CommerceHQ api key")] = None,
        commercehq_api_password: Annotated[Optional[StrictStr], Field(description="CommerceHQ api password")] = None,
        wc_consumer_key: Annotated[Optional[StrictStr], Field(description="Woocommerce consumer key")] = None,
        wc_consumer_secret: Annotated[Optional[StrictStr], Field(description="Woocommerce consumer secret")] = None,
        magento_consumer_key: Annotated[Optional[StrictStr], Field(description="Magento Consumer Key")] = None,
        magento_consumer_secret: Annotated[Optional[StrictStr], Field(description="Magento Consumer Secret")] = None,
        magento_access_token: Annotated[Optional[StrictStr], Field(description="Magento Access Token")] = None,
        magento_token_secret: Annotated[Optional[StrictStr], Field(description="Magento Token Secret")] = None,
        prestashop_webservice_key: Annotated[Optional[StrictStr], Field(description="Prestashop webservice key")] = None,
        wix_app_id: Annotated[Optional[StrictStr], Field(description="Wix App ID")] = None,
        wix_app_secret_key: Annotated[Optional[StrictStr], Field(description="Wix App Secret Key")] = None,
        wix_refresh_token: Annotated[Optional[StrictStr], Field(description="Wix refresh token")] = None,
        mercado_libre_app_id: Annotated[Optional[StrictStr], Field(description="Mercado Libre App ID")] = None,
        mercado_libre_app_secret_key: Annotated[Optional[StrictStr], Field(description="Mercado Libre App Secret Key")] = None,
        mercado_libre_refresh_token: Annotated[Optional[StrictStr], Field(description="Mercado Libre Refresh Token")] = None,
        zid_client_id: Annotated[Optional[StrictInt], Field(description="Zid Client ID")] = None,
        zid_client_secret: Annotated[Optional[StrictStr], Field(description="Zid Client Secret")] = None,
        zid_access_token: Annotated[Optional[StrictStr], Field(description="Zid Access Token")] = None,
        zid_authorization: Annotated[Optional[StrictStr], Field(description="Zid Authorization")] = None,
        zid_refresh_token: Annotated[Optional[StrictStr], Field(description="Zid refresh token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """account_config_update

        Update configs in the API2Cart database.

        :param new_store_key: Update store key
        :type new_store_key: str
        :param bridge_url: This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        :type bridge_url: str
        :param store_root: Absolute path to the store root directory (used with \"bridge_url\" parameter)
        :type store_root: str
        :param db_tables_prefix: DB tables prefix
        :type db_tables_prefix: str
        :param var_3dcart_private_key: 3DCart Private Key
        :type var_3dcart_private_key: str
        :param var_3dcart_access_token: 3DCart Token
        :type var_3dcart_access_token: str
        :param var_3dcartapi_api_key: 3DCart API Key
        :type var_3dcartapi_api_key: str
        :param amazon_sp_client_id: Amazon SP API app client id
        :type amazon_sp_client_id: str
        :param amazon_sp_client_secret: Amazon SP API app client secret
        :type amazon_sp_client_secret: str
        :param amazon_sp_aws_user_key_id: Amazon AWS user access key ID
        :type amazon_sp_aws_user_key_id: str
        :param amazon_sp_aws_user_secret: Amazon AWS user secret access key
        :type amazon_sp_aws_user_secret: str
        :param amazon_sp_aws_region: Amazon AWS Region
        :type amazon_sp_aws_region: str
        :param amazon_sp_aws_role_arn: Amazon AWS Role ARN
        :type amazon_sp_aws_role_arn: str
        :param amazon_sp_refresh_token: Amazon SP API OAuth refresh token
        :type amazon_sp_refresh_token: str
        :param amazon_sp_api_environment: Amazon SP API environment
        :type amazon_sp_api_environment: str
        :param amazon_access_token: MWS Auth Token. Access token authorizing the app to access resources on behalf of a user
        :type amazon_access_token: str
        :param amazon_seller_id: Amazon Seller ID (Merchant token)
        :type amazon_seller_id: str
        :param amazon_marketplaces_ids: Amazon Marketplace IDs comma separated string
        :type amazon_marketplaces_ids: str
        :param amazon_secret_key: Amazon Secret Key
        :type amazon_secret_key: str
        :param amazon_access_key_id: Amazon Secret Key Id
        :type amazon_access_key_id: str
        :param aspdotnetstorefront_api_user: It's a AspDotNetStorefront account for which API is available
        :type aspdotnetstorefront_api_user: str
        :param aspdotnetstorefront_api_pass: AspDotNetStorefront API Password
        :type aspdotnetstorefront_api_pass: str
        :param bigcommerceapi_admin_account: It's a BigCommerce account for which API is enabled
        :type bigcommerceapi_admin_account: str
        :param bigcommerceapi_api_path: BigCommerce API URL
        :type bigcommerceapi_api_path: str
        :param bigcommerceapi_api_key: Bigcommerce API Key
        :type bigcommerceapi_api_key: str
        :param bigcommerceapi_client_id: Client ID of the requesting app
        :type bigcommerceapi_client_id: str
        :param bigcommerceapi_access_token: Access token authorizing the app to access resources on behalf of a user
        :type bigcommerceapi_access_token: str
        :param bigcommerceapi_context: API Path section unique to the store
        :type bigcommerceapi_context: str
        :param demandware_client_id: Demandware client id
        :type demandware_client_id: str
        :param demandware_api_password: Demandware api password
        :type demandware_api_password: str
        :param demandware_user_name: Demandware user name
        :type demandware_user_name: str
        :param demandware_user_password: Demandware user password
        :type demandware_user_password: str
        :param ebay_client_id: Application ID (AppID).
        :type ebay_client_id: str
        :param ebay_client_secret: Shared Secret from eBay application
        :type ebay_client_secret: str
        :param ebay_runame: The RuName value that eBay assigns to your application.
        :type ebay_runame: str
        :param ebay_access_token: Used to authenticate API requests.
        :type ebay_access_token: str
        :param ebay_refresh_token: Used to renew the access token.
        :type ebay_refresh_token: str
        :param ebay_environment: eBay environment
        :type ebay_environment: str
        :param ebay_site_id: eBay global ID
        :type ebay_site_id: int
        :param ecwid_acess_token: Access token authorizing the app to access resources on behalf of a user
        :type ecwid_acess_token: str
        :param ecwid_store_id: Store Id
        :type ecwid_store_id: str
        :param etsy_keystring: Etsy keystring
        :type etsy_keystring: str
        :param etsy_shared_secret: Etsy shared secret
        :type etsy_shared_secret: str
        :param etsy_access_token: Access token authorizing the app to access resources on behalf of a user
        :type etsy_access_token: str
        :param etsy_token_secret: Secret token authorizing the app to access resources on behalf of a user
        :type etsy_token_secret: str
        :param etsy_client_id: Etsy Client Id
        :type etsy_client_id: str
        :param etsy_refresh_token: Etsy Refresh token
        :type etsy_refresh_token: str
        :param neto_api_key: Neto API Key
        :type neto_api_key: str
        :param neto_api_username: Neto User Name
        :type neto_api_username: str
        :param shopify_api_key: Shopify API Key
        :type shopify_api_key: str
        :param shopify_api_password: Shopify API Password
        :type shopify_api_password: str
        :param shopify_shared_secret: Shared secret
        :type shopify_shared_secret: str
        :param shopify_access_token: Access token authorizing the app to access resources on behalf of a user
        :type shopify_access_token: str
        :param shopware_access_key: Shopware access key
        :type shopware_access_key: str
        :param shopware_api_key: Shopware api key
        :type shopware_api_key: str
        :param shopware_api_secret: Shopware client secret access key
        :type shopware_api_secret: str
        :param volusion_login: It's a Volusion account for which API is enabled
        :type volusion_login: str
        :param volusion_password: Volusion API Password
        :type volusion_password: str
        :param walmart_client_id: Walmart client ID
        :type walmart_client_id: str
        :param walmart_client_secret: Walmart client secret
        :type walmart_client_secret: str
        :param walmart_environment: Walmart environment
        :type walmart_environment: str
        :param walmart_channel_type: Walmart WM_CONSUMER.CHANNEL.TYPE header
        :type walmart_channel_type: str
        :param squarespace_api_key: Squarespace API Key
        :type squarespace_api_key: str
        :param hybris_client_id: Omni Commerce Connector Client ID
        :type hybris_client_id: str
        :param hybris_client_secret: Omni Commerce Connector Client Secret
        :type hybris_client_secret: str
        :param hybris_username: User Name
        :type hybris_username: str
        :param hybris_password: User password
        :type hybris_password: str
        :param hybris_websites: Websites to stores mapping data
        :type hybris_websites: List[str]
        :param lightspeed_api_key: LightSpeed api key
        :type lightspeed_api_key: str
        :param lightspeed_api_secret: LightSpeed api secret
        :type lightspeed_api_secret: str
        :param commercehq_api_key: CommerceHQ api key
        :type commercehq_api_key: str
        :param commercehq_api_password: CommerceHQ api password
        :type commercehq_api_password: str
        :param wc_consumer_key: Woocommerce consumer key
        :type wc_consumer_key: str
        :param wc_consumer_secret: Woocommerce consumer secret
        :type wc_consumer_secret: str
        :param magento_consumer_key: Magento Consumer Key
        :type magento_consumer_key: str
        :param magento_consumer_secret: Magento Consumer Secret
        :type magento_consumer_secret: str
        :param magento_access_token: Magento Access Token
        :type magento_access_token: str
        :param magento_token_secret: Magento Token Secret
        :type magento_token_secret: str
        :param prestashop_webservice_key: Prestashop webservice key
        :type prestashop_webservice_key: str
        :param wix_app_id: Wix App ID
        :type wix_app_id: str
        :param wix_app_secret_key: Wix App Secret Key
        :type wix_app_secret_key: str
        :param wix_refresh_token: Wix refresh token
        :type wix_refresh_token: str
        :param mercado_libre_app_id: Mercado Libre App ID
        :type mercado_libre_app_id: str
        :param mercado_libre_app_secret_key: Mercado Libre App Secret Key
        :type mercado_libre_app_secret_key: str
        :param mercado_libre_refresh_token: Mercado Libre Refresh Token
        :type mercado_libre_refresh_token: str
        :param zid_client_id: Zid Client ID
        :type zid_client_id: int
        :param zid_client_secret: Zid Client Secret
        :type zid_client_secret: str
        :param zid_access_token: Zid Access Token
        :type zid_access_token: str
        :param zid_authorization: Zid Authorization
        :type zid_authorization: str
        :param zid_refresh_token: Zid refresh token
        :type zid_refresh_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_config_update_serialize(
            new_store_key=new_store_key,
            bridge_url=bridge_url,
            store_root=store_root,
            db_tables_prefix=db_tables_prefix,
            var_3dcart_private_key=var_3dcart_private_key,
            var_3dcart_access_token=var_3dcart_access_token,
            var_3dcartapi_api_key=var_3dcartapi_api_key,
            amazon_sp_client_id=amazon_sp_client_id,
            amazon_sp_client_secret=amazon_sp_client_secret,
            amazon_sp_aws_user_key_id=amazon_sp_aws_user_key_id,
            amazon_sp_aws_user_secret=amazon_sp_aws_user_secret,
            amazon_sp_aws_region=amazon_sp_aws_region,
            amazon_sp_aws_role_arn=amazon_sp_aws_role_arn,
            amazon_sp_refresh_token=amazon_sp_refresh_token,
            amazon_sp_api_environment=amazon_sp_api_environment,
            amazon_access_token=amazon_access_token,
            amazon_seller_id=amazon_seller_id,
            amazon_marketplaces_ids=amazon_marketplaces_ids,
            amazon_secret_key=amazon_secret_key,
            amazon_access_key_id=amazon_access_key_id,
            aspdotnetstorefront_api_user=aspdotnetstorefront_api_user,
            aspdotnetstorefront_api_pass=aspdotnetstorefront_api_pass,
            bigcommerceapi_admin_account=bigcommerceapi_admin_account,
            bigcommerceapi_api_path=bigcommerceapi_api_path,
            bigcommerceapi_api_key=bigcommerceapi_api_key,
            bigcommerceapi_client_id=bigcommerceapi_client_id,
            bigcommerceapi_access_token=bigcommerceapi_access_token,
            bigcommerceapi_context=bigcommerceapi_context,
            demandware_client_id=demandware_client_id,
            demandware_api_password=demandware_api_password,
            demandware_user_name=demandware_user_name,
            demandware_user_password=demandware_user_password,
            ebay_client_id=ebay_client_id,
            ebay_client_secret=ebay_client_secret,
            ebay_runame=ebay_runame,
            ebay_access_token=ebay_access_token,
            ebay_refresh_token=ebay_refresh_token,
            ebay_environment=ebay_environment,
            ebay_site_id=ebay_site_id,
            ecwid_acess_token=ecwid_acess_token,
            ecwid_store_id=ecwid_store_id,
            etsy_keystring=etsy_keystring,
            etsy_shared_secret=etsy_shared_secret,
            etsy_access_token=etsy_access_token,
            etsy_token_secret=etsy_token_secret,
            etsy_client_id=etsy_client_id,
            etsy_refresh_token=etsy_refresh_token,
            neto_api_key=neto_api_key,
            neto_api_username=neto_api_username,
            shopify_api_key=shopify_api_key,
            shopify_api_password=shopify_api_password,
            shopify_shared_secret=shopify_shared_secret,
            shopify_access_token=shopify_access_token,
            shopware_access_key=shopware_access_key,
            shopware_api_key=shopware_api_key,
            shopware_api_secret=shopware_api_secret,
            volusion_login=volusion_login,
            volusion_password=volusion_password,
            walmart_client_id=walmart_client_id,
            walmart_client_secret=walmart_client_secret,
            walmart_environment=walmart_environment,
            walmart_channel_type=walmart_channel_type,
            squarespace_api_key=squarespace_api_key,
            hybris_client_id=hybris_client_id,
            hybris_client_secret=hybris_client_secret,
            hybris_username=hybris_username,
            hybris_password=hybris_password,
            hybris_websites=hybris_websites,
            lightspeed_api_key=lightspeed_api_key,
            lightspeed_api_secret=lightspeed_api_secret,
            commercehq_api_key=commercehq_api_key,
            commercehq_api_password=commercehq_api_password,
            wc_consumer_key=wc_consumer_key,
            wc_consumer_secret=wc_consumer_secret,
            magento_consumer_key=magento_consumer_key,
            magento_consumer_secret=magento_consumer_secret,
            magento_access_token=magento_access_token,
            magento_token_secret=magento_token_secret,
            prestashop_webservice_key=prestashop_webservice_key,
            wix_app_id=wix_app_id,
            wix_app_secret_key=wix_app_secret_key,
            wix_refresh_token=wix_refresh_token,
            mercado_libre_app_id=mercado_libre_app_id,
            mercado_libre_app_secret_key=mercado_libre_app_secret_key,
            mercado_libre_refresh_token=mercado_libre_refresh_token,
            zid_client_id=zid_client_id,
            zid_client_secret=zid_client_secret,
            zid_access_token=zid_access_token,
            zid_authorization=zid_authorization,
            zid_refresh_token=zid_refresh_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def account_config_update_with_http_info(
        self,
        new_store_key: Annotated[Optional[StrictStr], Field(description="Update store key")] = None,
        bridge_url: Annotated[Optional[StrictStr], Field(description="This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)")] = None,
        store_root: Annotated[Optional[StrictStr], Field(description="Absolute path to the store root directory (used with \"bridge_url\" parameter)")] = None,
        db_tables_prefix: Annotated[Optional[StrictStr], Field(description="DB tables prefix")] = None,
        var_3dcart_private_key: Annotated[Optional[StrictStr], Field(description="3DCart Private Key")] = None,
        var_3dcart_access_token: Annotated[Optional[StrictStr], Field(description="3DCart Token")] = None,
        var_3dcartapi_api_key: Annotated[Optional[StrictStr], Field(description="3DCart API Key")] = None,
        amazon_sp_client_id: Annotated[Optional[StrictStr], Field(description="Amazon SP API app client id")] = None,
        amazon_sp_client_secret: Annotated[Optional[StrictStr], Field(description="Amazon SP API app client secret")] = None,
        amazon_sp_aws_user_key_id: Annotated[Optional[StrictStr], Field(description="Amazon AWS user access key ID")] = None,
        amazon_sp_aws_user_secret: Annotated[Optional[StrictStr], Field(description="Amazon AWS user secret access key")] = None,
        amazon_sp_aws_region: Annotated[Optional[StrictStr], Field(description="Amazon AWS Region")] = None,
        amazon_sp_aws_role_arn: Annotated[Optional[StrictStr], Field(description="Amazon AWS Role ARN")] = None,
        amazon_sp_refresh_token: Annotated[Optional[StrictStr], Field(description="Amazon SP API OAuth refresh token")] = None,
        amazon_sp_api_environment: Annotated[Optional[StrictStr], Field(description="Amazon SP API environment")] = None,
        amazon_access_token: Annotated[Optional[StrictStr], Field(description="MWS Auth Token. Access token authorizing the app to access resources on behalf of a user")] = None,
        amazon_seller_id: Annotated[Optional[StrictStr], Field(description="Amazon Seller ID (Merchant token)")] = None,
        amazon_marketplaces_ids: Annotated[Optional[StrictStr], Field(description="Amazon Marketplace IDs comma separated string")] = None,
        amazon_secret_key: Annotated[Optional[StrictStr], Field(description="Amazon Secret Key")] = None,
        amazon_access_key_id: Annotated[Optional[StrictStr], Field(description="Amazon Secret Key Id")] = None,
        aspdotnetstorefront_api_user: Annotated[Optional[StrictStr], Field(description="It's a AspDotNetStorefront account for which API is available")] = None,
        aspdotnetstorefront_api_pass: Annotated[Optional[StrictStr], Field(description="AspDotNetStorefront API Password")] = None,
        bigcommerceapi_admin_account: Annotated[Optional[StrictStr], Field(description="It's a BigCommerce account for which API is enabled")] = None,
        bigcommerceapi_api_path: Annotated[Optional[StrictStr], Field(description="BigCommerce API URL")] = None,
        bigcommerceapi_api_key: Annotated[Optional[StrictStr], Field(description="Bigcommerce API Key")] = None,
        bigcommerceapi_client_id: Annotated[Optional[StrictStr], Field(description="Client ID of the requesting app")] = None,
        bigcommerceapi_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        bigcommerceapi_context: Annotated[Optional[StrictStr], Field(description="API Path section unique to the store")] = None,
        demandware_client_id: Annotated[Optional[StrictStr], Field(description="Demandware client id")] = None,
        demandware_api_password: Annotated[Optional[StrictStr], Field(description="Demandware api password")] = None,
        demandware_user_name: Annotated[Optional[StrictStr], Field(description="Demandware user name")] = None,
        demandware_user_password: Annotated[Optional[StrictStr], Field(description="Demandware user password")] = None,
        ebay_client_id: Annotated[Optional[StrictStr], Field(description="Application ID (AppID).")] = None,
        ebay_client_secret: Annotated[Optional[StrictStr], Field(description="Shared Secret from eBay application")] = None,
        ebay_runame: Annotated[Optional[StrictStr], Field(description="The RuName value that eBay assigns to your application.")] = None,
        ebay_access_token: Annotated[Optional[StrictStr], Field(description="Used to authenticate API requests.")] = None,
        ebay_refresh_token: Annotated[Optional[StrictStr], Field(description="Used to renew the access token.")] = None,
        ebay_environment: Annotated[Optional[StrictStr], Field(description="eBay environment")] = None,
        ebay_site_id: Annotated[Optional[StrictInt], Field(description="eBay global ID")] = None,
        ecwid_acess_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        ecwid_store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        etsy_keystring: Annotated[Optional[StrictStr], Field(description="Etsy keystring")] = None,
        etsy_shared_secret: Annotated[Optional[StrictStr], Field(description="Etsy shared secret")] = None,
        etsy_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        etsy_token_secret: Annotated[Optional[StrictStr], Field(description="Secret token authorizing the app to access resources on behalf of a user")] = None,
        etsy_client_id: Annotated[Optional[StrictStr], Field(description="Etsy Client Id")] = None,
        etsy_refresh_token: Annotated[Optional[StrictStr], Field(description="Etsy Refresh token")] = None,
        neto_api_key: Annotated[Optional[StrictStr], Field(description="Neto API Key")] = None,
        neto_api_username: Annotated[Optional[StrictStr], Field(description="Neto User Name")] = None,
        shopify_api_key: Annotated[Optional[StrictStr], Field(description="Shopify API Key")] = None,
        shopify_api_password: Annotated[Optional[StrictStr], Field(description="Shopify API Password")] = None,
        shopify_shared_secret: Annotated[Optional[StrictStr], Field(description="Shared secret")] = None,
        shopify_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        shopware_access_key: Annotated[Optional[StrictStr], Field(description="Shopware access key")] = None,
        shopware_api_key: Annotated[Optional[StrictStr], Field(description="Shopware api key")] = None,
        shopware_api_secret: Annotated[Optional[StrictStr], Field(description="Shopware client secret access key")] = None,
        volusion_login: Annotated[Optional[StrictStr], Field(description="It's a Volusion account for which API is enabled")] = None,
        volusion_password: Annotated[Optional[StrictStr], Field(description="Volusion API Password")] = None,
        walmart_client_id: Annotated[Optional[StrictStr], Field(description="Walmart client ID")] = None,
        walmart_client_secret: Annotated[Optional[StrictStr], Field(description="Walmart client secret")] = None,
        walmart_environment: Annotated[Optional[StrictStr], Field(description="Walmart environment")] = None,
        walmart_channel_type: Annotated[Optional[StrictStr], Field(description="Walmart WM_CONSUMER.CHANNEL.TYPE header")] = None,
        squarespace_api_key: Annotated[Optional[StrictStr], Field(description="Squarespace API Key")] = None,
        hybris_client_id: Annotated[Optional[StrictStr], Field(description="Omni Commerce Connector Client ID")] = None,
        hybris_client_secret: Annotated[Optional[StrictStr], Field(description="Omni Commerce Connector Client Secret")] = None,
        hybris_username: Annotated[Optional[StrictStr], Field(description="User Name")] = None,
        hybris_password: Annotated[Optional[StrictStr], Field(description="User password")] = None,
        hybris_websites: Annotated[Optional[List[StrictStr]], Field(description="Websites to stores mapping data")] = None,
        lightspeed_api_key: Annotated[Optional[StrictStr], Field(description="LightSpeed api key")] = None,
        lightspeed_api_secret: Annotated[Optional[StrictStr], Field(description="LightSpeed api secret")] = None,
        commercehq_api_key: Annotated[Optional[StrictStr], Field(description="CommerceHQ api key")] = None,
        commercehq_api_password: Annotated[Optional[StrictStr], Field(description="CommerceHQ api password")] = None,
        wc_consumer_key: Annotated[Optional[StrictStr], Field(description="Woocommerce consumer key")] = None,
        wc_consumer_secret: Annotated[Optional[StrictStr], Field(description="Woocommerce consumer secret")] = None,
        magento_consumer_key: Annotated[Optional[StrictStr], Field(description="Magento Consumer Key")] = None,
        magento_consumer_secret: Annotated[Optional[StrictStr], Field(description="Magento Consumer Secret")] = None,
        magento_access_token: Annotated[Optional[StrictStr], Field(description="Magento Access Token")] = None,
        magento_token_secret: Annotated[Optional[StrictStr], Field(description="Magento Token Secret")] = None,
        prestashop_webservice_key: Annotated[Optional[StrictStr], Field(description="Prestashop webservice key")] = None,
        wix_app_id: Annotated[Optional[StrictStr], Field(description="Wix App ID")] = None,
        wix_app_secret_key: Annotated[Optional[StrictStr], Field(description="Wix App Secret Key")] = None,
        wix_refresh_token: Annotated[Optional[StrictStr], Field(description="Wix refresh token")] = None,
        mercado_libre_app_id: Annotated[Optional[StrictStr], Field(description="Mercado Libre App ID")] = None,
        mercado_libre_app_secret_key: Annotated[Optional[StrictStr], Field(description="Mercado Libre App Secret Key")] = None,
        mercado_libre_refresh_token: Annotated[Optional[StrictStr], Field(description="Mercado Libre Refresh Token")] = None,
        zid_client_id: Annotated[Optional[StrictInt], Field(description="Zid Client ID")] = None,
        zid_client_secret: Annotated[Optional[StrictStr], Field(description="Zid Client Secret")] = None,
        zid_access_token: Annotated[Optional[StrictStr], Field(description="Zid Access Token")] = None,
        zid_authorization: Annotated[Optional[StrictStr], Field(description="Zid Authorization")] = None,
        zid_refresh_token: Annotated[Optional[StrictStr], Field(description="Zid refresh token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """account_config_update

        Update configs in the API2Cart database.

        :param new_store_key: Update store key
        :type new_store_key: str
        :param bridge_url: This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        :type bridge_url: str
        :param store_root: Absolute path to the store root directory (used with \"bridge_url\" parameter)
        :type store_root: str
        :param db_tables_prefix: DB tables prefix
        :type db_tables_prefix: str
        :param var_3dcart_private_key: 3DCart Private Key
        :type var_3dcart_private_key: str
        :param var_3dcart_access_token: 3DCart Token
        :type var_3dcart_access_token: str
        :param var_3dcartapi_api_key: 3DCart API Key
        :type var_3dcartapi_api_key: str
        :param amazon_sp_client_id: Amazon SP API app client id
        :type amazon_sp_client_id: str
        :param amazon_sp_client_secret: Amazon SP API app client secret
        :type amazon_sp_client_secret: str
        :param amazon_sp_aws_user_key_id: Amazon AWS user access key ID
        :type amazon_sp_aws_user_key_id: str
        :param amazon_sp_aws_user_secret: Amazon AWS user secret access key
        :type amazon_sp_aws_user_secret: str
        :param amazon_sp_aws_region: Amazon AWS Region
        :type amazon_sp_aws_region: str
        :param amazon_sp_aws_role_arn: Amazon AWS Role ARN
        :type amazon_sp_aws_role_arn: str
        :param amazon_sp_refresh_token: Amazon SP API OAuth refresh token
        :type amazon_sp_refresh_token: str
        :param amazon_sp_api_environment: Amazon SP API environment
        :type amazon_sp_api_environment: str
        :param amazon_access_token: MWS Auth Token. Access token authorizing the app to access resources on behalf of a user
        :type amazon_access_token: str
        :param amazon_seller_id: Amazon Seller ID (Merchant token)
        :type amazon_seller_id: str
        :param amazon_marketplaces_ids: Amazon Marketplace IDs comma separated string
        :type amazon_marketplaces_ids: str
        :param amazon_secret_key: Amazon Secret Key
        :type amazon_secret_key: str
        :param amazon_access_key_id: Amazon Secret Key Id
        :type amazon_access_key_id: str
        :param aspdotnetstorefront_api_user: It's a AspDotNetStorefront account for which API is available
        :type aspdotnetstorefront_api_user: str
        :param aspdotnetstorefront_api_pass: AspDotNetStorefront API Password
        :type aspdotnetstorefront_api_pass: str
        :param bigcommerceapi_admin_account: It's a BigCommerce account for which API is enabled
        :type bigcommerceapi_admin_account: str
        :param bigcommerceapi_api_path: BigCommerce API URL
        :type bigcommerceapi_api_path: str
        :param bigcommerceapi_api_key: Bigcommerce API Key
        :type bigcommerceapi_api_key: str
        :param bigcommerceapi_client_id: Client ID of the requesting app
        :type bigcommerceapi_client_id: str
        :param bigcommerceapi_access_token: Access token authorizing the app to access resources on behalf of a user
        :type bigcommerceapi_access_token: str
        :param bigcommerceapi_context: API Path section unique to the store
        :type bigcommerceapi_context: str
        :param demandware_client_id: Demandware client id
        :type demandware_client_id: str
        :param demandware_api_password: Demandware api password
        :type demandware_api_password: str
        :param demandware_user_name: Demandware user name
        :type demandware_user_name: str
        :param demandware_user_password: Demandware user password
        :type demandware_user_password: str
        :param ebay_client_id: Application ID (AppID).
        :type ebay_client_id: str
        :param ebay_client_secret: Shared Secret from eBay application
        :type ebay_client_secret: str
        :param ebay_runame: The RuName value that eBay assigns to your application.
        :type ebay_runame: str
        :param ebay_access_token: Used to authenticate API requests.
        :type ebay_access_token: str
        :param ebay_refresh_token: Used to renew the access token.
        :type ebay_refresh_token: str
        :param ebay_environment: eBay environment
        :type ebay_environment: str
        :param ebay_site_id: eBay global ID
        :type ebay_site_id: int
        :param ecwid_acess_token: Access token authorizing the app to access resources on behalf of a user
        :type ecwid_acess_token: str
        :param ecwid_store_id: Store Id
        :type ecwid_store_id: str
        :param etsy_keystring: Etsy keystring
        :type etsy_keystring: str
        :param etsy_shared_secret: Etsy shared secret
        :type etsy_shared_secret: str
        :param etsy_access_token: Access token authorizing the app to access resources on behalf of a user
        :type etsy_access_token: str
        :param etsy_token_secret: Secret token authorizing the app to access resources on behalf of a user
        :type etsy_token_secret: str
        :param etsy_client_id: Etsy Client Id
        :type etsy_client_id: str
        :param etsy_refresh_token: Etsy Refresh token
        :type etsy_refresh_token: str
        :param neto_api_key: Neto API Key
        :type neto_api_key: str
        :param neto_api_username: Neto User Name
        :type neto_api_username: str
        :param shopify_api_key: Shopify API Key
        :type shopify_api_key: str
        :param shopify_api_password: Shopify API Password
        :type shopify_api_password: str
        :param shopify_shared_secret: Shared secret
        :type shopify_shared_secret: str
        :param shopify_access_token: Access token authorizing the app to access resources on behalf of a user
        :type shopify_access_token: str
        :param shopware_access_key: Shopware access key
        :type shopware_access_key: str
        :param shopware_api_key: Shopware api key
        :type shopware_api_key: str
        :param shopware_api_secret: Shopware client secret access key
        :type shopware_api_secret: str
        :param volusion_login: It's a Volusion account for which API is enabled
        :type volusion_login: str
        :param volusion_password: Volusion API Password
        :type volusion_password: str
        :param walmart_client_id: Walmart client ID
        :type walmart_client_id: str
        :param walmart_client_secret: Walmart client secret
        :type walmart_client_secret: str
        :param walmart_environment: Walmart environment
        :type walmart_environment: str
        :param walmart_channel_type: Walmart WM_CONSUMER.CHANNEL.TYPE header
        :type walmart_channel_type: str
        :param squarespace_api_key: Squarespace API Key
        :type squarespace_api_key: str
        :param hybris_client_id: Omni Commerce Connector Client ID
        :type hybris_client_id: str
        :param hybris_client_secret: Omni Commerce Connector Client Secret
        :type hybris_client_secret: str
        :param hybris_username: User Name
        :type hybris_username: str
        :param hybris_password: User password
        :type hybris_password: str
        :param hybris_websites: Websites to stores mapping data
        :type hybris_websites: List[str]
        :param lightspeed_api_key: LightSpeed api key
        :type lightspeed_api_key: str
        :param lightspeed_api_secret: LightSpeed api secret
        :type lightspeed_api_secret: str
        :param commercehq_api_key: CommerceHQ api key
        :type commercehq_api_key: str
        :param commercehq_api_password: CommerceHQ api password
        :type commercehq_api_password: str
        :param wc_consumer_key: Woocommerce consumer key
        :type wc_consumer_key: str
        :param wc_consumer_secret: Woocommerce consumer secret
        :type wc_consumer_secret: str
        :param magento_consumer_key: Magento Consumer Key
        :type magento_consumer_key: str
        :param magento_consumer_secret: Magento Consumer Secret
        :type magento_consumer_secret: str
        :param magento_access_token: Magento Access Token
        :type magento_access_token: str
        :param magento_token_secret: Magento Token Secret
        :type magento_token_secret: str
        :param prestashop_webservice_key: Prestashop webservice key
        :type prestashop_webservice_key: str
        :param wix_app_id: Wix App ID
        :type wix_app_id: str
        :param wix_app_secret_key: Wix App Secret Key
        :type wix_app_secret_key: str
        :param wix_refresh_token: Wix refresh token
        :type wix_refresh_token: str
        :param mercado_libre_app_id: Mercado Libre App ID
        :type mercado_libre_app_id: str
        :param mercado_libre_app_secret_key: Mercado Libre App Secret Key
        :type mercado_libre_app_secret_key: str
        :param mercado_libre_refresh_token: Mercado Libre Refresh Token
        :type mercado_libre_refresh_token: str
        :param zid_client_id: Zid Client ID
        :type zid_client_id: int
        :param zid_client_secret: Zid Client Secret
        :type zid_client_secret: str
        :param zid_access_token: Zid Access Token
        :type zid_access_token: str
        :param zid_authorization: Zid Authorization
        :type zid_authorization: str
        :param zid_refresh_token: Zid refresh token
        :type zid_refresh_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_config_update_serialize(
            new_store_key=new_store_key,
            bridge_url=bridge_url,
            store_root=store_root,
            db_tables_prefix=db_tables_prefix,
            var_3dcart_private_key=var_3dcart_private_key,
            var_3dcart_access_token=var_3dcart_access_token,
            var_3dcartapi_api_key=var_3dcartapi_api_key,
            amazon_sp_client_id=amazon_sp_client_id,
            amazon_sp_client_secret=amazon_sp_client_secret,
            amazon_sp_aws_user_key_id=amazon_sp_aws_user_key_id,
            amazon_sp_aws_user_secret=amazon_sp_aws_user_secret,
            amazon_sp_aws_region=amazon_sp_aws_region,
            amazon_sp_aws_role_arn=amazon_sp_aws_role_arn,
            amazon_sp_refresh_token=amazon_sp_refresh_token,
            amazon_sp_api_environment=amazon_sp_api_environment,
            amazon_access_token=amazon_access_token,
            amazon_seller_id=amazon_seller_id,
            amazon_marketplaces_ids=amazon_marketplaces_ids,
            amazon_secret_key=amazon_secret_key,
            amazon_access_key_id=amazon_access_key_id,
            aspdotnetstorefront_api_user=aspdotnetstorefront_api_user,
            aspdotnetstorefront_api_pass=aspdotnetstorefront_api_pass,
            bigcommerceapi_admin_account=bigcommerceapi_admin_account,
            bigcommerceapi_api_path=bigcommerceapi_api_path,
            bigcommerceapi_api_key=bigcommerceapi_api_key,
            bigcommerceapi_client_id=bigcommerceapi_client_id,
            bigcommerceapi_access_token=bigcommerceapi_access_token,
            bigcommerceapi_context=bigcommerceapi_context,
            demandware_client_id=demandware_client_id,
            demandware_api_password=demandware_api_password,
            demandware_user_name=demandware_user_name,
            demandware_user_password=demandware_user_password,
            ebay_client_id=ebay_client_id,
            ebay_client_secret=ebay_client_secret,
            ebay_runame=ebay_runame,
            ebay_access_token=ebay_access_token,
            ebay_refresh_token=ebay_refresh_token,
            ebay_environment=ebay_environment,
            ebay_site_id=ebay_site_id,
            ecwid_acess_token=ecwid_acess_token,
            ecwid_store_id=ecwid_store_id,
            etsy_keystring=etsy_keystring,
            etsy_shared_secret=etsy_shared_secret,
            etsy_access_token=etsy_access_token,
            etsy_token_secret=etsy_token_secret,
            etsy_client_id=etsy_client_id,
            etsy_refresh_token=etsy_refresh_token,
            neto_api_key=neto_api_key,
            neto_api_username=neto_api_username,
            shopify_api_key=shopify_api_key,
            shopify_api_password=shopify_api_password,
            shopify_shared_secret=shopify_shared_secret,
            shopify_access_token=shopify_access_token,
            shopware_access_key=shopware_access_key,
            shopware_api_key=shopware_api_key,
            shopware_api_secret=shopware_api_secret,
            volusion_login=volusion_login,
            volusion_password=volusion_password,
            walmart_client_id=walmart_client_id,
            walmart_client_secret=walmart_client_secret,
            walmart_environment=walmart_environment,
            walmart_channel_type=walmart_channel_type,
            squarespace_api_key=squarespace_api_key,
            hybris_client_id=hybris_client_id,
            hybris_client_secret=hybris_client_secret,
            hybris_username=hybris_username,
            hybris_password=hybris_password,
            hybris_websites=hybris_websites,
            lightspeed_api_key=lightspeed_api_key,
            lightspeed_api_secret=lightspeed_api_secret,
            commercehq_api_key=commercehq_api_key,
            commercehq_api_password=commercehq_api_password,
            wc_consumer_key=wc_consumer_key,
            wc_consumer_secret=wc_consumer_secret,
            magento_consumer_key=magento_consumer_key,
            magento_consumer_secret=magento_consumer_secret,
            magento_access_token=magento_access_token,
            magento_token_secret=magento_token_secret,
            prestashop_webservice_key=prestashop_webservice_key,
            wix_app_id=wix_app_id,
            wix_app_secret_key=wix_app_secret_key,
            wix_refresh_token=wix_refresh_token,
            mercado_libre_app_id=mercado_libre_app_id,
            mercado_libre_app_secret_key=mercado_libre_app_secret_key,
            mercado_libre_refresh_token=mercado_libre_refresh_token,
            zid_client_id=zid_client_id,
            zid_client_secret=zid_client_secret,
            zid_access_token=zid_access_token,
            zid_authorization=zid_authorization,
            zid_refresh_token=zid_refresh_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def account_config_update_without_preload_content(
        self,
        new_store_key: Annotated[Optional[StrictStr], Field(description="Update store key")] = None,
        bridge_url: Annotated[Optional[StrictStr], Field(description="This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)")] = None,
        store_root: Annotated[Optional[StrictStr], Field(description="Absolute path to the store root directory (used with \"bridge_url\" parameter)")] = None,
        db_tables_prefix: Annotated[Optional[StrictStr], Field(description="DB tables prefix")] = None,
        var_3dcart_private_key: Annotated[Optional[StrictStr], Field(description="3DCart Private Key")] = None,
        var_3dcart_access_token: Annotated[Optional[StrictStr], Field(description="3DCart Token")] = None,
        var_3dcartapi_api_key: Annotated[Optional[StrictStr], Field(description="3DCart API Key")] = None,
        amazon_sp_client_id: Annotated[Optional[StrictStr], Field(description="Amazon SP API app client id")] = None,
        amazon_sp_client_secret: Annotated[Optional[StrictStr], Field(description="Amazon SP API app client secret")] = None,
        amazon_sp_aws_user_key_id: Annotated[Optional[StrictStr], Field(description="Amazon AWS user access key ID")] = None,
        amazon_sp_aws_user_secret: Annotated[Optional[StrictStr], Field(description="Amazon AWS user secret access key")] = None,
        amazon_sp_aws_region: Annotated[Optional[StrictStr], Field(description="Amazon AWS Region")] = None,
        amazon_sp_aws_role_arn: Annotated[Optional[StrictStr], Field(description="Amazon AWS Role ARN")] = None,
        amazon_sp_refresh_token: Annotated[Optional[StrictStr], Field(description="Amazon SP API OAuth refresh token")] = None,
        amazon_sp_api_environment: Annotated[Optional[StrictStr], Field(description="Amazon SP API environment")] = None,
        amazon_access_token: Annotated[Optional[StrictStr], Field(description="MWS Auth Token. Access token authorizing the app to access resources on behalf of a user")] = None,
        amazon_seller_id: Annotated[Optional[StrictStr], Field(description="Amazon Seller ID (Merchant token)")] = None,
        amazon_marketplaces_ids: Annotated[Optional[StrictStr], Field(description="Amazon Marketplace IDs comma separated string")] = None,
        amazon_secret_key: Annotated[Optional[StrictStr], Field(description="Amazon Secret Key")] = None,
        amazon_access_key_id: Annotated[Optional[StrictStr], Field(description="Amazon Secret Key Id")] = None,
        aspdotnetstorefront_api_user: Annotated[Optional[StrictStr], Field(description="It's a AspDotNetStorefront account for which API is available")] = None,
        aspdotnetstorefront_api_pass: Annotated[Optional[StrictStr], Field(description="AspDotNetStorefront API Password")] = None,
        bigcommerceapi_admin_account: Annotated[Optional[StrictStr], Field(description="It's a BigCommerce account for which API is enabled")] = None,
        bigcommerceapi_api_path: Annotated[Optional[StrictStr], Field(description="BigCommerce API URL")] = None,
        bigcommerceapi_api_key: Annotated[Optional[StrictStr], Field(description="Bigcommerce API Key")] = None,
        bigcommerceapi_client_id: Annotated[Optional[StrictStr], Field(description="Client ID of the requesting app")] = None,
        bigcommerceapi_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        bigcommerceapi_context: Annotated[Optional[StrictStr], Field(description="API Path section unique to the store")] = None,
        demandware_client_id: Annotated[Optional[StrictStr], Field(description="Demandware client id")] = None,
        demandware_api_password: Annotated[Optional[StrictStr], Field(description="Demandware api password")] = None,
        demandware_user_name: Annotated[Optional[StrictStr], Field(description="Demandware user name")] = None,
        demandware_user_password: Annotated[Optional[StrictStr], Field(description="Demandware user password")] = None,
        ebay_client_id: Annotated[Optional[StrictStr], Field(description="Application ID (AppID).")] = None,
        ebay_client_secret: Annotated[Optional[StrictStr], Field(description="Shared Secret from eBay application")] = None,
        ebay_runame: Annotated[Optional[StrictStr], Field(description="The RuName value that eBay assigns to your application.")] = None,
        ebay_access_token: Annotated[Optional[StrictStr], Field(description="Used to authenticate API requests.")] = None,
        ebay_refresh_token: Annotated[Optional[StrictStr], Field(description="Used to renew the access token.")] = None,
        ebay_environment: Annotated[Optional[StrictStr], Field(description="eBay environment")] = None,
        ebay_site_id: Annotated[Optional[StrictInt], Field(description="eBay global ID")] = None,
        ecwid_acess_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        ecwid_store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        etsy_keystring: Annotated[Optional[StrictStr], Field(description="Etsy keystring")] = None,
        etsy_shared_secret: Annotated[Optional[StrictStr], Field(description="Etsy shared secret")] = None,
        etsy_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        etsy_token_secret: Annotated[Optional[StrictStr], Field(description="Secret token authorizing the app to access resources on behalf of a user")] = None,
        etsy_client_id: Annotated[Optional[StrictStr], Field(description="Etsy Client Id")] = None,
        etsy_refresh_token: Annotated[Optional[StrictStr], Field(description="Etsy Refresh token")] = None,
        neto_api_key: Annotated[Optional[StrictStr], Field(description="Neto API Key")] = None,
        neto_api_username: Annotated[Optional[StrictStr], Field(description="Neto User Name")] = None,
        shopify_api_key: Annotated[Optional[StrictStr], Field(description="Shopify API Key")] = None,
        shopify_api_password: Annotated[Optional[StrictStr], Field(description="Shopify API Password")] = None,
        shopify_shared_secret: Annotated[Optional[StrictStr], Field(description="Shared secret")] = None,
        shopify_access_token: Annotated[Optional[StrictStr], Field(description="Access token authorizing the app to access resources on behalf of a user")] = None,
        shopware_access_key: Annotated[Optional[StrictStr], Field(description="Shopware access key")] = None,
        shopware_api_key: Annotated[Optional[StrictStr], Field(description="Shopware api key")] = None,
        shopware_api_secret: Annotated[Optional[StrictStr], Field(description="Shopware client secret access key")] = None,
        volusion_login: Annotated[Optional[StrictStr], Field(description="It's a Volusion account for which API is enabled")] = None,
        volusion_password: Annotated[Optional[StrictStr], Field(description="Volusion API Password")] = None,
        walmart_client_id: Annotated[Optional[StrictStr], Field(description="Walmart client ID")] = None,
        walmart_client_secret: Annotated[Optional[StrictStr], Field(description="Walmart client secret")] = None,
        walmart_environment: Annotated[Optional[StrictStr], Field(description="Walmart environment")] = None,
        walmart_channel_type: Annotated[Optional[StrictStr], Field(description="Walmart WM_CONSUMER.CHANNEL.TYPE header")] = None,
        squarespace_api_key: Annotated[Optional[StrictStr], Field(description="Squarespace API Key")] = None,
        hybris_client_id: Annotated[Optional[StrictStr], Field(description="Omni Commerce Connector Client ID")] = None,
        hybris_client_secret: Annotated[Optional[StrictStr], Field(description="Omni Commerce Connector Client Secret")] = None,
        hybris_username: Annotated[Optional[StrictStr], Field(description="User Name")] = None,
        hybris_password: Annotated[Optional[StrictStr], Field(description="User password")] = None,
        hybris_websites: Annotated[Optional[List[StrictStr]], Field(description="Websites to stores mapping data")] = None,
        lightspeed_api_key: Annotated[Optional[StrictStr], Field(description="LightSpeed api key")] = None,
        lightspeed_api_secret: Annotated[Optional[StrictStr], Field(description="LightSpeed api secret")] = None,
        commercehq_api_key: Annotated[Optional[StrictStr], Field(description="CommerceHQ api key")] = None,
        commercehq_api_password: Annotated[Optional[StrictStr], Field(description="CommerceHQ api password")] = None,
        wc_consumer_key: Annotated[Optional[StrictStr], Field(description="Woocommerce consumer key")] = None,
        wc_consumer_secret: Annotated[Optional[StrictStr], Field(description="Woocommerce consumer secret")] = None,
        magento_consumer_key: Annotated[Optional[StrictStr], Field(description="Magento Consumer Key")] = None,
        magento_consumer_secret: Annotated[Optional[StrictStr], Field(description="Magento Consumer Secret")] = None,
        magento_access_token: Annotated[Optional[StrictStr], Field(description="Magento Access Token")] = None,
        magento_token_secret: Annotated[Optional[StrictStr], Field(description="Magento Token Secret")] = None,
        prestashop_webservice_key: Annotated[Optional[StrictStr], Field(description="Prestashop webservice key")] = None,
        wix_app_id: Annotated[Optional[StrictStr], Field(description="Wix App ID")] = None,
        wix_app_secret_key: Annotated[Optional[StrictStr], Field(description="Wix App Secret Key")] = None,
        wix_refresh_token: Annotated[Optional[StrictStr], Field(description="Wix refresh token")] = None,
        mercado_libre_app_id: Annotated[Optional[StrictStr], Field(description="Mercado Libre App ID")] = None,
        mercado_libre_app_secret_key: Annotated[Optional[StrictStr], Field(description="Mercado Libre App Secret Key")] = None,
        mercado_libre_refresh_token: Annotated[Optional[StrictStr], Field(description="Mercado Libre Refresh Token")] = None,
        zid_client_id: Annotated[Optional[StrictInt], Field(description="Zid Client ID")] = None,
        zid_client_secret: Annotated[Optional[StrictStr], Field(description="Zid Client Secret")] = None,
        zid_access_token: Annotated[Optional[StrictStr], Field(description="Zid Access Token")] = None,
        zid_authorization: Annotated[Optional[StrictStr], Field(description="Zid Authorization")] = None,
        zid_refresh_token: Annotated[Optional[StrictStr], Field(description="Zid refresh token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """account_config_update

        Update configs in the API2Cart database.

        :param new_store_key: Update store key
        :type new_store_key: str
        :param bridge_url: This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        :type bridge_url: str
        :param store_root: Absolute path to the store root directory (used with \"bridge_url\" parameter)
        :type store_root: str
        :param db_tables_prefix: DB tables prefix
        :type db_tables_prefix: str
        :param var_3dcart_private_key: 3DCart Private Key
        :type var_3dcart_private_key: str
        :param var_3dcart_access_token: 3DCart Token
        :type var_3dcart_access_token: str
        :param var_3dcartapi_api_key: 3DCart API Key
        :type var_3dcartapi_api_key: str
        :param amazon_sp_client_id: Amazon SP API app client id
        :type amazon_sp_client_id: str
        :param amazon_sp_client_secret: Amazon SP API app client secret
        :type amazon_sp_client_secret: str
        :param amazon_sp_aws_user_key_id: Amazon AWS user access key ID
        :type amazon_sp_aws_user_key_id: str
        :param amazon_sp_aws_user_secret: Amazon AWS user secret access key
        :type amazon_sp_aws_user_secret: str
        :param amazon_sp_aws_region: Amazon AWS Region
        :type amazon_sp_aws_region: str
        :param amazon_sp_aws_role_arn: Amazon AWS Role ARN
        :type amazon_sp_aws_role_arn: str
        :param amazon_sp_refresh_token: Amazon SP API OAuth refresh token
        :type amazon_sp_refresh_token: str
        :param amazon_sp_api_environment: Amazon SP API environment
        :type amazon_sp_api_environment: str
        :param amazon_access_token: MWS Auth Token. Access token authorizing the app to access resources on behalf of a user
        :type amazon_access_token: str
        :param amazon_seller_id: Amazon Seller ID (Merchant token)
        :type amazon_seller_id: str
        :param amazon_marketplaces_ids: Amazon Marketplace IDs comma separated string
        :type amazon_marketplaces_ids: str
        :param amazon_secret_key: Amazon Secret Key
        :type amazon_secret_key: str
        :param amazon_access_key_id: Amazon Secret Key Id
        :type amazon_access_key_id: str
        :param aspdotnetstorefront_api_user: It's a AspDotNetStorefront account for which API is available
        :type aspdotnetstorefront_api_user: str
        :param aspdotnetstorefront_api_pass: AspDotNetStorefront API Password
        :type aspdotnetstorefront_api_pass: str
        :param bigcommerceapi_admin_account: It's a BigCommerce account for which API is enabled
        :type bigcommerceapi_admin_account: str
        :param bigcommerceapi_api_path: BigCommerce API URL
        :type bigcommerceapi_api_path: str
        :param bigcommerceapi_api_key: Bigcommerce API Key
        :type bigcommerceapi_api_key: str
        :param bigcommerceapi_client_id: Client ID of the requesting app
        :type bigcommerceapi_client_id: str
        :param bigcommerceapi_access_token: Access token authorizing the app to access resources on behalf of a user
        :type bigcommerceapi_access_token: str
        :param bigcommerceapi_context: API Path section unique to the store
        :type bigcommerceapi_context: str
        :param demandware_client_id: Demandware client id
        :type demandware_client_id: str
        :param demandware_api_password: Demandware api password
        :type demandware_api_password: str
        :param demandware_user_name: Demandware user name
        :type demandware_user_name: str
        :param demandware_user_password: Demandware user password
        :type demandware_user_password: str
        :param ebay_client_id: Application ID (AppID).
        :type ebay_client_id: str
        :param ebay_client_secret: Shared Secret from eBay application
        :type ebay_client_secret: str
        :param ebay_runame: The RuName value that eBay assigns to your application.
        :type ebay_runame: str
        :param ebay_access_token: Used to authenticate API requests.
        :type ebay_access_token: str
        :param ebay_refresh_token: Used to renew the access token.
        :type ebay_refresh_token: str
        :param ebay_environment: eBay environment
        :type ebay_environment: str
        :param ebay_site_id: eBay global ID
        :type ebay_site_id: int
        :param ecwid_acess_token: Access token authorizing the app to access resources on behalf of a user
        :type ecwid_acess_token: str
        :param ecwid_store_id: Store Id
        :type ecwid_store_id: str
        :param etsy_keystring: Etsy keystring
        :type etsy_keystring: str
        :param etsy_shared_secret: Etsy shared secret
        :type etsy_shared_secret: str
        :param etsy_access_token: Access token authorizing the app to access resources on behalf of a user
        :type etsy_access_token: str
        :param etsy_token_secret: Secret token authorizing the app to access resources on behalf of a user
        :type etsy_token_secret: str
        :param etsy_client_id: Etsy Client Id
        :type etsy_client_id: str
        :param etsy_refresh_token: Etsy Refresh token
        :type etsy_refresh_token: str
        :param neto_api_key: Neto API Key
        :type neto_api_key: str
        :param neto_api_username: Neto User Name
        :type neto_api_username: str
        :param shopify_api_key: Shopify API Key
        :type shopify_api_key: str
        :param shopify_api_password: Shopify API Password
        :type shopify_api_password: str
        :param shopify_shared_secret: Shared secret
        :type shopify_shared_secret: str
        :param shopify_access_token: Access token authorizing the app to access resources on behalf of a user
        :type shopify_access_token: str
        :param shopware_access_key: Shopware access key
        :type shopware_access_key: str
        :param shopware_api_key: Shopware api key
        :type shopware_api_key: str
        :param shopware_api_secret: Shopware client secret access key
        :type shopware_api_secret: str
        :param volusion_login: It's a Volusion account for which API is enabled
        :type volusion_login: str
        :param volusion_password: Volusion API Password
        :type volusion_password: str
        :param walmart_client_id: Walmart client ID
        :type walmart_client_id: str
        :param walmart_client_secret: Walmart client secret
        :type walmart_client_secret: str
        :param walmart_environment: Walmart environment
        :type walmart_environment: str
        :param walmart_channel_type: Walmart WM_CONSUMER.CHANNEL.TYPE header
        :type walmart_channel_type: str
        :param squarespace_api_key: Squarespace API Key
        :type squarespace_api_key: str
        :param hybris_client_id: Omni Commerce Connector Client ID
        :type hybris_client_id: str
        :param hybris_client_secret: Omni Commerce Connector Client Secret
        :type hybris_client_secret: str
        :param hybris_username: User Name
        :type hybris_username: str
        :param hybris_password: User password
        :type hybris_password: str
        :param hybris_websites: Websites to stores mapping data
        :type hybris_websites: List[str]
        :param lightspeed_api_key: LightSpeed api key
        :type lightspeed_api_key: str
        :param lightspeed_api_secret: LightSpeed api secret
        :type lightspeed_api_secret: str
        :param commercehq_api_key: CommerceHQ api key
        :type commercehq_api_key: str
        :param commercehq_api_password: CommerceHQ api password
        :type commercehq_api_password: str
        :param wc_consumer_key: Woocommerce consumer key
        :type wc_consumer_key: str
        :param wc_consumer_secret: Woocommerce consumer secret
        :type wc_consumer_secret: str
        :param magento_consumer_key: Magento Consumer Key
        :type magento_consumer_key: str
        :param magento_consumer_secret: Magento Consumer Secret
        :type magento_consumer_secret: str
        :param magento_access_token: Magento Access Token
        :type magento_access_token: str
        :param magento_token_secret: Magento Token Secret
        :type magento_token_secret: str
        :param prestashop_webservice_key: Prestashop webservice key
        :type prestashop_webservice_key: str
        :param wix_app_id: Wix App ID
        :type wix_app_id: str
        :param wix_app_secret_key: Wix App Secret Key
        :type wix_app_secret_key: str
        :param wix_refresh_token: Wix refresh token
        :type wix_refresh_token: str
        :param mercado_libre_app_id: Mercado Libre App ID
        :type mercado_libre_app_id: str
        :param mercado_libre_app_secret_key: Mercado Libre App Secret Key
        :type mercado_libre_app_secret_key: str
        :param mercado_libre_refresh_token: Mercado Libre Refresh Token
        :type mercado_libre_refresh_token: str
        :param zid_client_id: Zid Client ID
        :type zid_client_id: int
        :param zid_client_secret: Zid Client Secret
        :type zid_client_secret: str
        :param zid_access_token: Zid Access Token
        :type zid_access_token: str
        :param zid_authorization: Zid Authorization
        :type zid_authorization: str
        :param zid_refresh_token: Zid refresh token
        :type zid_refresh_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_config_update_serialize(
            new_store_key=new_store_key,
            bridge_url=bridge_url,
            store_root=store_root,
            db_tables_prefix=db_tables_prefix,
            var_3dcart_private_key=var_3dcart_private_key,
            var_3dcart_access_token=var_3dcart_access_token,
            var_3dcartapi_api_key=var_3dcartapi_api_key,
            amazon_sp_client_id=amazon_sp_client_id,
            amazon_sp_client_secret=amazon_sp_client_secret,
            amazon_sp_aws_user_key_id=amazon_sp_aws_user_key_id,
            amazon_sp_aws_user_secret=amazon_sp_aws_user_secret,
            amazon_sp_aws_region=amazon_sp_aws_region,
            amazon_sp_aws_role_arn=amazon_sp_aws_role_arn,
            amazon_sp_refresh_token=amazon_sp_refresh_token,
            amazon_sp_api_environment=amazon_sp_api_environment,
            amazon_access_token=amazon_access_token,
            amazon_seller_id=amazon_seller_id,
            amazon_marketplaces_ids=amazon_marketplaces_ids,
            amazon_secret_key=amazon_secret_key,
            amazon_access_key_id=amazon_access_key_id,
            aspdotnetstorefront_api_user=aspdotnetstorefront_api_user,
            aspdotnetstorefront_api_pass=aspdotnetstorefront_api_pass,
            bigcommerceapi_admin_account=bigcommerceapi_admin_account,
            bigcommerceapi_api_path=bigcommerceapi_api_path,
            bigcommerceapi_api_key=bigcommerceapi_api_key,
            bigcommerceapi_client_id=bigcommerceapi_client_id,
            bigcommerceapi_access_token=bigcommerceapi_access_token,
            bigcommerceapi_context=bigcommerceapi_context,
            demandware_client_id=demandware_client_id,
            demandware_api_password=demandware_api_password,
            demandware_user_name=demandware_user_name,
            demandware_user_password=demandware_user_password,
            ebay_client_id=ebay_client_id,
            ebay_client_secret=ebay_client_secret,
            ebay_runame=ebay_runame,
            ebay_access_token=ebay_access_token,
            ebay_refresh_token=ebay_refresh_token,
            ebay_environment=ebay_environment,
            ebay_site_id=ebay_site_id,
            ecwid_acess_token=ecwid_acess_token,
            ecwid_store_id=ecwid_store_id,
            etsy_keystring=etsy_keystring,
            etsy_shared_secret=etsy_shared_secret,
            etsy_access_token=etsy_access_token,
            etsy_token_secret=etsy_token_secret,
            etsy_client_id=etsy_client_id,
            etsy_refresh_token=etsy_refresh_token,
            neto_api_key=neto_api_key,
            neto_api_username=neto_api_username,
            shopify_api_key=shopify_api_key,
            shopify_api_password=shopify_api_password,
            shopify_shared_secret=shopify_shared_secret,
            shopify_access_token=shopify_access_token,
            shopware_access_key=shopware_access_key,
            shopware_api_key=shopware_api_key,
            shopware_api_secret=shopware_api_secret,
            volusion_login=volusion_login,
            volusion_password=volusion_password,
            walmart_client_id=walmart_client_id,
            walmart_client_secret=walmart_client_secret,
            walmart_environment=walmart_environment,
            walmart_channel_type=walmart_channel_type,
            squarespace_api_key=squarespace_api_key,
            hybris_client_id=hybris_client_id,
            hybris_client_secret=hybris_client_secret,
            hybris_username=hybris_username,
            hybris_password=hybris_password,
            hybris_websites=hybris_websites,
            lightspeed_api_key=lightspeed_api_key,
            lightspeed_api_secret=lightspeed_api_secret,
            commercehq_api_key=commercehq_api_key,
            commercehq_api_password=commercehq_api_password,
            wc_consumer_key=wc_consumer_key,
            wc_consumer_secret=wc_consumer_secret,
            magento_consumer_key=magento_consumer_key,
            magento_consumer_secret=magento_consumer_secret,
            magento_access_token=magento_access_token,
            magento_token_secret=magento_token_secret,
            prestashop_webservice_key=prestashop_webservice_key,
            wix_app_id=wix_app_id,
            wix_app_secret_key=wix_app_secret_key,
            wix_refresh_token=wix_refresh_token,
            mercado_libre_app_id=mercado_libre_app_id,
            mercado_libre_app_secret_key=mercado_libre_app_secret_key,
            mercado_libre_refresh_token=mercado_libre_refresh_token,
            zid_client_id=zid_client_id,
            zid_client_secret=zid_client_secret,
            zid_access_token=zid_access_token,
            zid_authorization=zid_authorization,
            zid_refresh_token=zid_refresh_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _account_config_update_serialize(
        self,
        new_store_key,
        bridge_url,
        store_root,
        db_tables_prefix,
        var_3dcart_private_key,
        var_3dcart_access_token,
        var_3dcartapi_api_key,
        amazon_sp_client_id,
        amazon_sp_client_secret,
        amazon_sp_aws_user_key_id,
        amazon_sp_aws_user_secret,
        amazon_sp_aws_region,
        amazon_sp_aws_role_arn,
        amazon_sp_refresh_token,
        amazon_sp_api_environment,
        amazon_access_token,
        amazon_seller_id,
        amazon_marketplaces_ids,
        amazon_secret_key,
        amazon_access_key_id,
        aspdotnetstorefront_api_user,
        aspdotnetstorefront_api_pass,
        bigcommerceapi_admin_account,
        bigcommerceapi_api_path,
        bigcommerceapi_api_key,
        bigcommerceapi_client_id,
        bigcommerceapi_access_token,
        bigcommerceapi_context,
        demandware_client_id,
        demandware_api_password,
        demandware_user_name,
        demandware_user_password,
        ebay_client_id,
        ebay_client_secret,
        ebay_runame,
        ebay_access_token,
        ebay_refresh_token,
        ebay_environment,
        ebay_site_id,
        ecwid_acess_token,
        ecwid_store_id,
        etsy_keystring,
        etsy_shared_secret,
        etsy_access_token,
        etsy_token_secret,
        etsy_client_id,
        etsy_refresh_token,
        neto_api_key,
        neto_api_username,
        shopify_api_key,
        shopify_api_password,
        shopify_shared_secret,
        shopify_access_token,
        shopware_access_key,
        shopware_api_key,
        shopware_api_secret,
        volusion_login,
        volusion_password,
        walmart_client_id,
        walmart_client_secret,
        walmart_environment,
        walmart_channel_type,
        squarespace_api_key,
        hybris_client_id,
        hybris_client_secret,
        hybris_username,
        hybris_password,
        hybris_websites,
        lightspeed_api_key,
        lightspeed_api_secret,
        commercehq_api_key,
        commercehq_api_password,
        wc_consumer_key,
        wc_consumer_secret,
        magento_consumer_key,
        magento_consumer_secret,
        magento_access_token,
        magento_token_secret,
        prestashop_webservice_key,
        wix_app_id,
        wix_app_secret_key,
        wix_refresh_token,
        mercado_libre_app_id,
        mercado_libre_app_secret_key,
        mercado_libre_refresh_token,
        zid_client_id,
        zid_client_secret,
        zid_access_token,
        zid_authorization,
        zid_refresh_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'hybris_websites': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if new_store_key is not None:
            
            _query_params.append(('new_store_key', new_store_key))
            
        if bridge_url is not None:
            
            _query_params.append(('bridge_url', bridge_url))
            
        if store_root is not None:
            
            _query_params.append(('store_root', store_root))
            
        if db_tables_prefix is not None:
            
            _query_params.append(('db_tables_prefix', db_tables_prefix))
            
        if var_3dcart_private_key is not None:
            
            _query_params.append(('3dcart_private_key', var_3dcart_private_key))
            
        if var_3dcart_access_token is not None:
            
            _query_params.append(('3dcart_access_token', var_3dcart_access_token))
            
        if var_3dcartapi_api_key is not None:
            
            _query_params.append(('3dcartapi_api_key', var_3dcartapi_api_key))
            
        if amazon_sp_client_id is not None:
            
            _query_params.append(('amazon_sp_client_id', amazon_sp_client_id))
            
        if amazon_sp_client_secret is not None:
            
            _query_params.append(('amazon_sp_client_secret', amazon_sp_client_secret))
            
        if amazon_sp_aws_user_key_id is not None:
            
            _query_params.append(('amazon_sp_aws_user_key_id', amazon_sp_aws_user_key_id))
            
        if amazon_sp_aws_user_secret is not None:
            
            _query_params.append(('amazon_sp_aws_user_secret', amazon_sp_aws_user_secret))
            
        if amazon_sp_aws_region is not None:
            
            _query_params.append(('amazon_sp_aws_region', amazon_sp_aws_region))
            
        if amazon_sp_aws_role_arn is not None:
            
            _query_params.append(('amazon_sp_aws_role_arn', amazon_sp_aws_role_arn))
            
        if amazon_sp_refresh_token is not None:
            
            _query_params.append(('amazon_sp_refresh_token', amazon_sp_refresh_token))
            
        if amazon_sp_api_environment is not None:
            
            _query_params.append(('amazon_sp_api_environment', amazon_sp_api_environment))
            
        if amazon_access_token is not None:
            
            _query_params.append(('amazon_access_token', amazon_access_token))
            
        if amazon_seller_id is not None:
            
            _query_params.append(('amazon_seller_id', amazon_seller_id))
            
        if amazon_marketplaces_ids is not None:
            
            _query_params.append(('amazon_marketplaces_ids', amazon_marketplaces_ids))
            
        if amazon_secret_key is not None:
            
            _query_params.append(('amazon_secret_key', amazon_secret_key))
            
        if amazon_access_key_id is not None:
            
            _query_params.append(('amazon_access_key_id', amazon_access_key_id))
            
        if aspdotnetstorefront_api_user is not None:
            
            _query_params.append(('aspdotnetstorefront_api_user', aspdotnetstorefront_api_user))
            
        if aspdotnetstorefront_api_pass is not None:
            
            _query_params.append(('aspdotnetstorefront_api_pass', aspdotnetstorefront_api_pass))
            
        if bigcommerceapi_admin_account is not None:
            
            _query_params.append(('bigcommerceapi_admin_account', bigcommerceapi_admin_account))
            
        if bigcommerceapi_api_path is not None:
            
            _query_params.append(('bigcommerceapi_api_path', bigcommerceapi_api_path))
            
        if bigcommerceapi_api_key is not None:
            
            _query_params.append(('bigcommerceapi_api_key', bigcommerceapi_api_key))
            
        if bigcommerceapi_client_id is not None:
            
            _query_params.append(('bigcommerceapi_client_id', bigcommerceapi_client_id))
            
        if bigcommerceapi_access_token is not None:
            
            _query_params.append(('bigcommerceapi_access_token', bigcommerceapi_access_token))
            
        if bigcommerceapi_context is not None:
            
            _query_params.append(('bigcommerceapi_context', bigcommerceapi_context))
            
        if demandware_client_id is not None:
            
            _query_params.append(('demandware_client_id', demandware_client_id))
            
        if demandware_api_password is not None:
            
            _query_params.append(('demandware_api_password', demandware_api_password))
            
        if demandware_user_name is not None:
            
            _query_params.append(('demandware_user_name', demandware_user_name))
            
        if demandware_user_password is not None:
            
            _query_params.append(('demandware_user_password', demandware_user_password))
            
        if ebay_client_id is not None:
            
            _query_params.append(('ebay_client_id', ebay_client_id))
            
        if ebay_client_secret is not None:
            
            _query_params.append(('ebay_client_secret', ebay_client_secret))
            
        if ebay_runame is not None:
            
            _query_params.append(('ebay_runame', ebay_runame))
            
        if ebay_access_token is not None:
            
            _query_params.append(('ebay_access_token', ebay_access_token))
            
        if ebay_refresh_token is not None:
            
            _query_params.append(('ebay_refresh_token', ebay_refresh_token))
            
        if ebay_environment is not None:
            
            _query_params.append(('ebay_environment', ebay_environment))
            
        if ebay_site_id is not None:
            
            _query_params.append(('ebay_site_id', ebay_site_id))
            
        if ecwid_acess_token is not None:
            
            _query_params.append(('ecwid_acess_token', ecwid_acess_token))
            
        if ecwid_store_id is not None:
            
            _query_params.append(('ecwid_store_id', ecwid_store_id))
            
        if etsy_keystring is not None:
            
            _query_params.append(('etsy_keystring', etsy_keystring))
            
        if etsy_shared_secret is not None:
            
            _query_params.append(('etsy_shared_secret', etsy_shared_secret))
            
        if etsy_access_token is not None:
            
            _query_params.append(('etsy_access_token', etsy_access_token))
            
        if etsy_token_secret is not None:
            
            _query_params.append(('etsy_token_secret', etsy_token_secret))
            
        if etsy_client_id is not None:
            
            _query_params.append(('etsy_client_id', etsy_client_id))
            
        if etsy_refresh_token is not None:
            
            _query_params.append(('etsy_refresh_token', etsy_refresh_token))
            
        if neto_api_key is not None:
            
            _query_params.append(('neto_api_key', neto_api_key))
            
        if neto_api_username is not None:
            
            _query_params.append(('neto_api_username', neto_api_username))
            
        if shopify_api_key is not None:
            
            _query_params.append(('shopify_api_key', shopify_api_key))
            
        if shopify_api_password is not None:
            
            _query_params.append(('shopify_api_password', shopify_api_password))
            
        if shopify_shared_secret is not None:
            
            _query_params.append(('shopify_shared_secret', shopify_shared_secret))
            
        if shopify_access_token is not None:
            
            _query_params.append(('shopify_access_token', shopify_access_token))
            
        if shopware_access_key is not None:
            
            _query_params.append(('shopware_access_key', shopware_access_key))
            
        if shopware_api_key is not None:
            
            _query_params.append(('shopware_api_key', shopware_api_key))
            
        if shopware_api_secret is not None:
            
            _query_params.append(('shopware_api_secret', shopware_api_secret))
            
        if volusion_login is not None:
            
            _query_params.append(('volusion_login', volusion_login))
            
        if volusion_password is not None:
            
            _query_params.append(('volusion_password', volusion_password))
            
        if walmart_client_id is not None:
            
            _query_params.append(('walmart_client_id', walmart_client_id))
            
        if walmart_client_secret is not None:
            
            _query_params.append(('walmart_client_secret', walmart_client_secret))
            
        if walmart_environment is not None:
            
            _query_params.append(('walmart_environment', walmart_environment))
            
        if walmart_channel_type is not None:
            
            _query_params.append(('walmart_channel_type', walmart_channel_type))
            
        if squarespace_api_key is not None:
            
            _query_params.append(('squarespace_api_key', squarespace_api_key))
            
        if hybris_client_id is not None:
            
            _query_params.append(('hybris_client_id', hybris_client_id))
            
        if hybris_client_secret is not None:
            
            _query_params.append(('hybris_client_secret', hybris_client_secret))
            
        if hybris_username is not None:
            
            _query_params.append(('hybris_username', hybris_username))
            
        if hybris_password is not None:
            
            _query_params.append(('hybris_password', hybris_password))
            
        if hybris_websites is not None:
            
            _query_params.append(('hybris_websites', hybris_websites))
            
        if lightspeed_api_key is not None:
            
            _query_params.append(('lightspeed_api_key', lightspeed_api_key))
            
        if lightspeed_api_secret is not None:
            
            _query_params.append(('lightspeed_api_secret', lightspeed_api_secret))
            
        if commercehq_api_key is not None:
            
            _query_params.append(('commercehq_api_key', commercehq_api_key))
            
        if commercehq_api_password is not None:
            
            _query_params.append(('commercehq_api_password', commercehq_api_password))
            
        if wc_consumer_key is not None:
            
            _query_params.append(('wc_consumer_key', wc_consumer_key))
            
        if wc_consumer_secret is not None:
            
            _query_params.append(('wc_consumer_secret', wc_consumer_secret))
            
        if magento_consumer_key is not None:
            
            _query_params.append(('magento_consumer_key', magento_consumer_key))
            
        if magento_consumer_secret is not None:
            
            _query_params.append(('magento_consumer_secret', magento_consumer_secret))
            
        if magento_access_token is not None:
            
            _query_params.append(('magento_access_token', magento_access_token))
            
        if magento_token_secret is not None:
            
            _query_params.append(('magento_token_secret', magento_token_secret))
            
        if prestashop_webservice_key is not None:
            
            _query_params.append(('prestashop_webservice_key', prestashop_webservice_key))
            
        if wix_app_id is not None:
            
            _query_params.append(('wix_app_id', wix_app_id))
            
        if wix_app_secret_key is not None:
            
            _query_params.append(('wix_app_secret_key', wix_app_secret_key))
            
        if wix_refresh_token is not None:
            
            _query_params.append(('wix_refresh_token', wix_refresh_token))
            
        if mercado_libre_app_id is not None:
            
            _query_params.append(('mercado_libre_app_id', mercado_libre_app_id))
            
        if mercado_libre_app_secret_key is not None:
            
            _query_params.append(('mercado_libre_app_secret_key', mercado_libre_app_secret_key))
            
        if mercado_libre_refresh_token is not None:
            
            _query_params.append(('mercado_libre_refresh_token', mercado_libre_refresh_token))
            
        if zid_client_id is not None:
            
            _query_params.append(('zid_client_id', zid_client_id))
            
        if zid_client_secret is not None:
            
            _query_params.append(('zid_client_secret', zid_client_secret))
            
        if zid_access_token is not None:
            
            _query_params.append(('zid_access_token', zid_access_token))
            
        if zid_authorization is not None:
            
            _query_params.append(('zid_authorization', zid_authorization))
            
        if zid_refresh_token is not None:
            
            _query_params.append(('zid_refresh_token', zid_refresh_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/account.config.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def account_failed_webhooks(
        self,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="List of сomma-separated webhook ids")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountFailedWebhooks200Response:
        """account_failed_webhooks

        List webhooks that was not delivered to the callback.

        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param ids: List of сomma-separated webhook ids
        :type ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_failed_webhooks_serialize(
            count=count,
            start=start,
            ids=ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountFailedWebhooks200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def account_failed_webhooks_with_http_info(
        self,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="List of сomma-separated webhook ids")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountFailedWebhooks200Response]:
        """account_failed_webhooks

        List webhooks that was not delivered to the callback.

        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param ids: List of сomma-separated webhook ids
        :type ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_failed_webhooks_serialize(
            count=count,
            start=start,
            ids=ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountFailedWebhooks200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def account_failed_webhooks_without_preload_content(
        self,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="List of сomma-separated webhook ids")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """account_failed_webhooks

        List webhooks that was not delivered to the callback.

        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param ids: List of сomma-separated webhook ids
        :type ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_failed_webhooks_serialize(
            count=count,
            start=start,
            ids=ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountFailedWebhooks200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _account_failed_webhooks_serialize(
        self,
        count,
        start,
        ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/account.failed_webhooks.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def account_supported_platforms(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountSupportedPlatforms200Response:
        """account_supported_platforms

        Get list of supported platforms

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_supported_platforms_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountSupportedPlatforms200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def account_supported_platforms_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountSupportedPlatforms200Response]:
        """account_supported_platforms

        Get list of supported platforms

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_supported_platforms_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountSupportedPlatforms200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def account_supported_platforms_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """account_supported_platforms

        Get list of supported platforms

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._account_supported_platforms_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountSupportedPlatforms200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _account_supported_platforms_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/account.supported_platforms.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.account_config_update200_response import AccountConfigUpdate200Response
from openapi_client.models.model_response_order_abandoned_list import ModelResponseOrderAbandonedList
from openapi_client.models.model_response_order_list import ModelResponseOrderList
from openapi_client.models.model_response_order_preestimate_shipping_list import ModelResponseOrderPreestimateShippingList
from openapi_client.models.model_response_order_shipment_list import ModelResponseOrderShipmentList
from openapi_client.models.model_response_order_transaction_list import ModelResponseOrderTransactionList
from openapi_client.models.order_add import OrderAdd
from openapi_client.models.order_add200_response import OrderAdd200Response
from openapi_client.models.order_count200_response import OrderCount200Response
from openapi_client.models.order_financial_status_list200_response import OrderFinancialStatusList200Response
from openapi_client.models.order_find200_response import OrderFind200Response
from openapi_client.models.order_fulfillment_status_list200_response import OrderFulfillmentStatusList200Response
from openapi_client.models.order_info200_response import OrderInfo200Response
from openapi_client.models.order_preestimate_shipping_list import OrderPreestimateShippingList
from openapi_client.models.order_refund_add import OrderRefundAdd
from openapi_client.models.order_refund_add200_response import OrderRefundAdd200Response
from openapi_client.models.order_shipment_add import OrderShipmentAdd
from openapi_client.models.order_shipment_add200_response import OrderShipmentAdd200Response
from openapi_client.models.order_shipment_delete200_response import OrderShipmentDelete200Response
from openapi_client.models.order_shipment_tracking_add import OrderShipmentTrackingAdd
from openapi_client.models.order_shipment_tracking_add200_response import OrderShipmentTrackingAdd200Response
from openapi_client.models.order_shipment_update import OrderShipmentUpdate
from openapi_client.models.order_status_list200_response import OrderStatusList200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class OrderApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def order_abandoned_list(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        skip_empty_email: Annotated[Optional[StrictBool], Field(description="Filter empty emails")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseOrderAbandonedList:
        """order_abandoned_list

        Get list of orders that were left by customers before completing the order.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param skip_empty_email: Filter empty emails
        :type skip_empty_email: bool
        :param store_id: Store Id
        :type store_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_abandoned_list_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            skip_empty_email=skip_empty_email,
            store_id=store_id,
            page_cursor=page_cursor,
            count=count,
            start=start,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderAbandonedList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_abandoned_list_with_http_info(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        skip_empty_email: Annotated[Optional[StrictBool], Field(description="Filter empty emails")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseOrderAbandonedList]:
        """order_abandoned_list

        Get list of orders that were left by customers before completing the order.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param skip_empty_email: Filter empty emails
        :type skip_empty_email: bool
        :param store_id: Store Id
        :type store_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_abandoned_list_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            skip_empty_email=skip_empty_email,
            store_id=store_id,
            page_cursor=page_cursor,
            count=count,
            start=start,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderAbandonedList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_abandoned_list_without_preload_content(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        skip_empty_email: Annotated[Optional[StrictBool], Field(description="Filter empty emails")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_abandoned_list

        Get list of orders that were left by customers before completing the order.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param skip_empty_email: Filter empty emails
        :type skip_empty_email: bool
        :param store_id: Store Id
        :type store_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_abandoned_list_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            skip_empty_email=skip_empty_email,
            store_id=store_id,
            page_cursor=page_cursor,
            count=count,
            start=start,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderAbandonedList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_abandoned_list_serialize(
        self,
        customer_id,
        customer_email,
        created_to,
        created_from,
        modified_to,
        modified_from,
        skip_empty_email,
        store_id,
        page_cursor,
        count,
        start,
        params,
        response_fields,
        exclude,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if customer_id is not None:
            
            _query_params.append(('customer_id', customer_id))
            
        if customer_email is not None:
            
            _query_params.append(('customer_email', customer_email))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if skip_empty_email is not None:
            
            _query_params.append(('skip_empty_email', skip_empty_email))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.abandoned.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_add(
        self,
        order_add: OrderAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderAdd200Response:
        """order_add

        Add a new order to the cart.

        :param order_add: (required)
        :type order_add: OrderAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_add_serialize(
            order_add=order_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_add_with_http_info(
        self,
        order_add: OrderAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderAdd200Response]:
        """order_add

        Add a new order to the cart.

        :param order_add: (required)
        :type order_add: OrderAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_add_serialize(
            order_add=order_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_add_without_preload_content(
        self,
        order_add: OrderAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_add

        Add a new order to the cart.

        :param order_add: (required)
        :type order_add: OrderAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_add_serialize(
            order_add=order_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_add_serialize(
        self,
        order_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if order_add is not None:
            _body_params = order_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/order.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_count(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by customer email")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by order status")] = None,
        order_status_ids: Annotated[Optional[List[StrictStr]], Field(description="Retrieves orders specified by order statuses")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by store id")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Counts orders specified by ids")] = None,
        order_ids: Annotated[Optional[StrictStr], Field(description="Counts orders specified by order ids")] = None,
        ebay_order_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by order status")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by financial status")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        shipping_method: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping method")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Retrieves order with delivery method")] = None,
        ship_node_type: Annotated[Optional[StrictStr], Field(description="Retrieves order with ship node type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderCount200Response:
        """order_count

        Count orders in store

        :param customer_id: Counts orders quantity specified by customer id
        :type customer_id: str
        :param customer_email: Counts orders quantity specified by customer email
        :type customer_email: str
        :param order_status: Counts orders quantity specified by order status
        :type order_status: str
        :param order_status_ids: Retrieves orders specified by order statuses
        :type order_status_ids: List[str]
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param store_id: Counts orders quantity specified by store id
        :type store_id: str
        :param ids: Counts orders specified by ids
        :type ids: str
        :param order_ids: Counts orders specified by order ids
        :type order_ids: str
        :param ebay_order_status: Counts orders quantity specified by order status
        :type ebay_order_status: str
        :param financial_status: Counts orders quantity specified by financial status
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param shipping_method: Retrieve entities according to shipping method
        :type shipping_method: str
        :param delivery_method: Retrieves order with delivery method
        :type delivery_method: str
        :param ship_node_type: Retrieves order with ship node type
        :type ship_node_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_count_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            order_status=order_status,
            order_status_ids=order_status_ids,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            store_id=store_id,
            ids=ids,
            order_ids=order_ids,
            ebay_order_status=ebay_order_status,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            shipping_method=shipping_method,
            delivery_method=delivery_method,
            ship_node_type=ship_node_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_count_with_http_info(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by customer email")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by order status")] = None,
        order_status_ids: Annotated[Optional[List[StrictStr]], Field(description="Retrieves orders specified by order statuses")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by store id")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Counts orders specified by ids")] = None,
        order_ids: Annotated[Optional[StrictStr], Field(description="Counts orders specified by order ids")] = None,
        ebay_order_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by order status")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by financial status")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        shipping_method: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping method")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Retrieves order with delivery method")] = None,
        ship_node_type: Annotated[Optional[StrictStr], Field(description="Retrieves order with ship node type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderCount200Response]:
        """order_count

        Count orders in store

        :param customer_id: Counts orders quantity specified by customer id
        :type customer_id: str
        :param customer_email: Counts orders quantity specified by customer email
        :type customer_email: str
        :param order_status: Counts orders quantity specified by order status
        :type order_status: str
        :param order_status_ids: Retrieves orders specified by order statuses
        :type order_status_ids: List[str]
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param store_id: Counts orders quantity specified by store id
        :type store_id: str
        :param ids: Counts orders specified by ids
        :type ids: str
        :param order_ids: Counts orders specified by order ids
        :type order_ids: str
        :param ebay_order_status: Counts orders quantity specified by order status
        :type ebay_order_status: str
        :param financial_status: Counts orders quantity specified by financial status
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param shipping_method: Retrieve entities according to shipping method
        :type shipping_method: str
        :param delivery_method: Retrieves order with delivery method
        :type delivery_method: str
        :param ship_node_type: Retrieves order with ship node type
        :type ship_node_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_count_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            order_status=order_status,
            order_status_ids=order_status_ids,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            store_id=store_id,
            ids=ids,
            order_ids=order_ids,
            ebay_order_status=ebay_order_status,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            shipping_method=shipping_method,
            delivery_method=delivery_method,
            ship_node_type=ship_node_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_count_without_preload_content(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by customer email")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by order status")] = None,
        order_status_ids: Annotated[Optional[List[StrictStr]], Field(description="Retrieves orders specified by order statuses")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by store id")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Counts orders specified by ids")] = None,
        order_ids: Annotated[Optional[StrictStr], Field(description="Counts orders specified by order ids")] = None,
        ebay_order_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by order status")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Counts orders quantity specified by financial status")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        shipping_method: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping method")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Retrieves order with delivery method")] = None,
        ship_node_type: Annotated[Optional[StrictStr], Field(description="Retrieves order with ship node type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_count

        Count orders in store

        :param customer_id: Counts orders quantity specified by customer id
        :type customer_id: str
        :param customer_email: Counts orders quantity specified by customer email
        :type customer_email: str
        :param order_status: Counts orders quantity specified by order status
        :type order_status: str
        :param order_status_ids: Retrieves orders specified by order statuses
        :type order_status_ids: List[str]
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param store_id: Counts orders quantity specified by store id
        :type store_id: str
        :param ids: Counts orders specified by ids
        :type ids: str
        :param order_ids: Counts orders specified by order ids
        :type order_ids: str
        :param ebay_order_status: Counts orders quantity specified by order status
        :type ebay_order_status: str
        :param financial_status: Counts orders quantity specified by financial status
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param shipping_method: Retrieve entities according to shipping method
        :type shipping_method: str
        :param delivery_method: Retrieves order with delivery method
        :type delivery_method: str
        :param ship_node_type: Retrieves order with ship node type
        :type ship_node_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_count_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            order_status=order_status,
            order_status_ids=order_status_ids,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            store_id=store_id,
            ids=ids,
            order_ids=order_ids,
            ebay_order_status=ebay_order_status,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            shipping_method=shipping_method,
            delivery_method=delivery_method,
            ship_node_type=ship_node_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_count_serialize(
        self,
        customer_id,
        customer_email,
        order_status,
        order_status_ids,
        created_to,
        created_from,
        modified_to,
        modified_from,
        store_id,
        ids,
        order_ids,
        ebay_order_status,
        financial_status,
        fulfillment_status,
        shipping_method,
        delivery_method,
        ship_node_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'order_status_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if customer_id is not None:
            
            _query_params.append(('customer_id', customer_id))
            
        if customer_email is not None:
            
            _query_params.append(('customer_email', customer_email))
            
        if order_status is not None:
            
            _query_params.append(('order_status', order_status))
            
        if order_status_ids is not None:
            
            _query_params.append(('order_status_ids', order_status_ids))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if order_ids is not None:
            
            _query_params.append(('order_ids', order_ids))
            
        if ebay_order_status is not None:
            
            _query_params.append(('ebay_order_status', ebay_order_status))
            
        if financial_status is not None:
            
            _query_params.append(('financial_status', financial_status))
            
        if fulfillment_status is not None:
            
            _query_params.append(('fulfillment_status', fulfillment_status))
            
        if shipping_method is not None:
            
            _query_params.append(('shipping_method', shipping_method))
            
        if delivery_method is not None:
            
            _query_params.append(('delivery_method', delivery_method))
            
        if ship_node_type is not None:
            
            _query_params.append(('ship_node_type', ship_node_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.count.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_financial_status_list(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderFinancialStatusList200Response:
        """order_financial_status_list

        Retrieve list of financial statuses

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_financial_status_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFinancialStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_financial_status_list_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderFinancialStatusList200Response]:
        """order_financial_status_list

        Retrieve list of financial statuses

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_financial_status_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFinancialStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_financial_status_list_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_financial_status_list

        Retrieve list of financial statuses

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_financial_status_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFinancialStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_financial_status_list_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.financial_status.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_find(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by financial status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderFind200Response:
        """(Deprecated) order_find

        This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param order_status: Retrieves orders specified by order status
        :type order_status: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param financial_status: Retrieves orders specified by financial status
        :type financial_status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /order.find.json is deprecated.", DeprecationWarning)

        _param = self._order_find_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            order_status=order_status,
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            financial_status=financial_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_find_with_http_info(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by financial status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderFind200Response]:
        """(Deprecated) order_find

        This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param order_status: Retrieves orders specified by order status
        :type order_status: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param financial_status: Retrieves orders specified by financial status
        :type financial_status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /order.find.json is deprecated.", DeprecationWarning)

        _param = self._order_find_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            order_status=order_status,
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            financial_status=financial_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_find_without_preload_content(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by financial status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) order_find

        This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param order_status: Retrieves orders specified by order status
        :type order_status: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param financial_status: Retrieves orders specified by financial status
        :type financial_status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /order.find.json is deprecated.", DeprecationWarning)

        _param = self._order_find_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            order_status=order_status,
            start=start,
            count=count,
            params=params,
            exclude=exclude,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            financial_status=financial_status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFind200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_find_serialize(
        self,
        customer_id,
        customer_email,
        order_status,
        start,
        count,
        params,
        exclude,
        created_to,
        created_from,
        modified_to,
        modified_from,
        financial_status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if customer_id is not None:
            
            _query_params.append(('customer_id', customer_id))
            
        if customer_email is not None:
            
            _query_params.append(('customer_email', customer_email))
            
        if order_status is not None:
            
            _query_params.append(('order_status', order_status))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if financial_status is not None:
            
            _query_params.append(('financial_status', financial_status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.find.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_fulfillment_status_list(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderFulfillmentStatusList200Response:
        """order_fulfillment_status_list

        Retrieve list of fulfillment statuses

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_fulfillment_status_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFulfillmentStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_fulfillment_status_list_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderFulfillmentStatusList200Response]:
        """order_fulfillment_status_list

        Retrieve list of fulfillment statuses

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_fulfillment_status_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFulfillmentStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_fulfillment_status_list_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_fulfillment_status_list

        Retrieve list of fulfillment statuses

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_fulfillment_status_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderFulfillmentStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_fulfillment_status_list_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.fulfillment_status.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_info(
        self,
        order_id: Annotated[Optional[StrictStr], Field(description="Retrieves order’s info specified by order id")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Retrieves order info specified by id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Defines store id where the order should be found")] = None,
        enable_cache: Annotated[Optional[StrictBool], Field(description="If the value is 'true' and order exist in our cache, we will return order.info response from cache")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderInfo200Response:
        """order_info

        Info about a specific order by ID

        :param order_id: Retrieves order’s info specified by order id
        :type order_id: str
        :param id: Retrieves order info specified by id
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Defines store id where the order should be found
        :type store_id: str
        :param enable_cache: If the value is 'true' and order exist in our cache, we will return order.info response from cache
        :type enable_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_info_serialize(
            order_id=order_id,
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            enable_cache=enable_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_info_with_http_info(
        self,
        order_id: Annotated[Optional[StrictStr], Field(description="Retrieves order’s info specified by order id")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Retrieves order info specified by id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Defines store id where the order should be found")] = None,
        enable_cache: Annotated[Optional[StrictBool], Field(description="If the value is 'true' and order exist in our cache, we will return order.info response from cache")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderInfo200Response]:
        """order_info

        Info about a specific order by ID

        :param order_id: Retrieves order’s info specified by order id
        :type order_id: str
        :param id: Retrieves order info specified by id
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Defines store id where the order should be found
        :type store_id: str
        :param enable_cache: If the value is 'true' and order exist in our cache, we will return order.info response from cache
        :type enable_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_info_serialize(
            order_id=order_id,
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            enable_cache=enable_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_info_without_preload_content(
        self,
        order_id: Annotated[Optional[StrictStr], Field(description="Retrieves order’s info specified by order id")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Retrieves order info specified by id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Defines store id where the order should be found")] = None,
        enable_cache: Annotated[Optional[StrictBool], Field(description="If the value is 'true' and order exist in our cache, we will return order.info response from cache")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_info

        Info about a specific order by ID

        :param order_id: Retrieves order’s info specified by order id
        :type order_id: str
        :param id: Retrieves order info specified by id
        :type id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Defines store id where the order should be found
        :type store_id: str
        :param enable_cache: If the value is 'true' and order exist in our cache, we will return order.info response from cache
        :type enable_cache: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_info_serialize(
            order_id=order_id,
            id=id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            enable_cache=enable_cache,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderInfo200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_info_serialize(
        self,
        order_id,
        id,
        params,
        response_fields,
        exclude,
        store_id,
        enable_cache,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('order_id', order_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if enable_cache is not None:
            
            _query_params.append(('enable_cache', enable_cache))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.info.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_list(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Filter orders by customer's phone number")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        order_status_ids: Annotated[Optional[List[StrictStr]], Field(description="Retrieves orders specified by order statuses")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by ids")] = None,
        order_ids: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order ids")] = None,
        ebay_order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        basket_id: Annotated[Optional[StrictStr], Field(description="Retrieves order’s info specified by basket id.")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by financial status")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        shipping_method: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping method")] = None,
        skip_order_ids: Annotated[Optional[StrictStr], Field(description="Skipped orders by ids")] = None,
        since_id: Annotated[Optional[StrictInt], Field(description="Retrieve entities starting from the specified id.")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="Filter deleted orders")] = None,
        shipping_country_iso3: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping country")] = None,
        enable_cache: Annotated[Optional[StrictBool], Field(description="If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Retrieves order with delivery method")] = None,
        ship_node_type: Annotated[Optional[StrictStr], Field(description="Retrieves order with ship node type")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseOrderList:
        """order_list

        Get list of orders from store.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param phone: Filter orders by customer's phone number
        :type phone: str
        :param order_status: Retrieves orders specified by order status
        :type order_status: str
        :param order_status_ids: Retrieves orders specified by order statuses
        :type order_status_ids: List[str]
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param store_id: Store Id
        :type store_id: str
        :param ids: Retrieves orders specified by ids
        :type ids: str
        :param order_ids: Retrieves orders specified by order ids
        :type order_ids: str
        :param ebay_order_status: Retrieves orders specified by order status
        :type ebay_order_status: str
        :param basket_id: Retrieves order’s info specified by basket id.
        :type basket_id: str
        :param financial_status: Retrieves orders specified by financial status
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param shipping_method: Retrieve entities according to shipping method
        :type shipping_method: str
        :param skip_order_ids: Skipped orders by ids
        :type skip_order_ids: str
        :param since_id: Retrieve entities starting from the specified id.
        :type since_id: int
        :param is_deleted: Filter deleted orders
        :type is_deleted: bool
        :param shipping_country_iso3: Retrieve entities according to shipping country
        :type shipping_country_iso3: str
        :param enable_cache: If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
        :type enable_cache: bool
        :param delivery_method: Retrieves order with delivery method
        :type delivery_method: str
        :param ship_node_type: Retrieves order with ship node type
        :type ship_node_type: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_list_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            phone=phone,
            order_status=order_status,
            order_status_ids=order_status_ids,
            start=start,
            count=count,
            page_cursor=page_cursor,
            sort_by=sort_by,
            sort_direction=sort_direction,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            store_id=store_id,
            ids=ids,
            order_ids=order_ids,
            ebay_order_status=ebay_order_status,
            basket_id=basket_id,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            shipping_method=shipping_method,
            skip_order_ids=skip_order_ids,
            since_id=since_id,
            is_deleted=is_deleted,
            shipping_country_iso3=shipping_country_iso3,
            enable_cache=enable_cache,
            delivery_method=delivery_method,
            ship_node_type=ship_node_type,
            currency_id=currency_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_list_with_http_info(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Filter orders by customer's phone number")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        order_status_ids: Annotated[Optional[List[StrictStr]], Field(description="Retrieves orders specified by order statuses")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by ids")] = None,
        order_ids: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order ids")] = None,
        ebay_order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        basket_id: Annotated[Optional[StrictStr], Field(description="Retrieves order’s info specified by basket id.")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by financial status")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        shipping_method: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping method")] = None,
        skip_order_ids: Annotated[Optional[StrictStr], Field(description="Skipped orders by ids")] = None,
        since_id: Annotated[Optional[StrictInt], Field(description="Retrieve entities starting from the specified id.")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="Filter deleted orders")] = None,
        shipping_country_iso3: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping country")] = None,
        enable_cache: Annotated[Optional[StrictBool], Field(description="If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Retrieves order with delivery method")] = None,
        ship_node_type: Annotated[Optional[StrictStr], Field(description="Retrieves order with ship node type")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseOrderList]:
        """order_list

        Get list of orders from store.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param phone: Filter orders by customer's phone number
        :type phone: str
        :param order_status: Retrieves orders specified by order status
        :type order_status: str
        :param order_status_ids: Retrieves orders specified by order statuses
        :type order_status_ids: List[str]
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param store_id: Store Id
        :type store_id: str
        :param ids: Retrieves orders specified by ids
        :type ids: str
        :param order_ids: Retrieves orders specified by order ids
        :type order_ids: str
        :param ebay_order_status: Retrieves orders specified by order status
        :type ebay_order_status: str
        :param basket_id: Retrieves order’s info specified by basket id.
        :type basket_id: str
        :param financial_status: Retrieves orders specified by financial status
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param shipping_method: Retrieve entities according to shipping method
        :type shipping_method: str
        :param skip_order_ids: Skipped orders by ids
        :type skip_order_ids: str
        :param since_id: Retrieve entities starting from the specified id.
        :type since_id: int
        :param is_deleted: Filter deleted orders
        :type is_deleted: bool
        :param shipping_country_iso3: Retrieve entities according to shipping country
        :type shipping_country_iso3: str
        :param enable_cache: If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
        :type enable_cache: bool
        :param delivery_method: Retrieves order with delivery method
        :type delivery_method: str
        :param ship_node_type: Retrieves order with ship node type
        :type ship_node_type: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_list_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            phone=phone,
            order_status=order_status,
            order_status_ids=order_status_ids,
            start=start,
            count=count,
            page_cursor=page_cursor,
            sort_by=sort_by,
            sort_direction=sort_direction,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            store_id=store_id,
            ids=ids,
            order_ids=order_ids,
            ebay_order_status=ebay_order_status,
            basket_id=basket_id,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            shipping_method=shipping_method,
            skip_order_ids=skip_order_ids,
            since_id=since_id,
            is_deleted=is_deleted,
            shipping_country_iso3=shipping_country_iso3,
            enable_cache=enable_cache,
            delivery_method=delivery_method,
            ship_node_type=ship_node_type,
            currency_id=currency_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_list_without_preload_content(
        self,
        customer_id: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer id")] = None,
        customer_email: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by customer email")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Filter orders by customer's phone number")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        order_status_ids: Annotated[Optional[List[StrictStr]], Field(description="Retrieves orders specified by order statuses")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Set field to sort by")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Set sorting direction")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        ids: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by ids")] = None,
        order_ids: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order ids")] = None,
        ebay_order_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by order status")] = None,
        basket_id: Annotated[Optional[StrictStr], Field(description="Retrieves order’s info specified by basket id.")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Retrieves orders specified by financial status")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        shipping_method: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping method")] = None,
        skip_order_ids: Annotated[Optional[StrictStr], Field(description="Skipped orders by ids")] = None,
        since_id: Annotated[Optional[StrictInt], Field(description="Retrieve entities starting from the specified id.")] = None,
        is_deleted: Annotated[Optional[StrictBool], Field(description="Filter deleted orders")] = None,
        shipping_country_iso3: Annotated[Optional[StrictStr], Field(description="Retrieve entities according to shipping country")] = None,
        enable_cache: Annotated[Optional[StrictBool], Field(description="If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)")] = None,
        delivery_method: Annotated[Optional[StrictStr], Field(description="Retrieves order with delivery method")] = None,
        ship_node_type: Annotated[Optional[StrictStr], Field(description="Retrieves order with ship node type")] = None,
        currency_id: Annotated[Optional[StrictStr], Field(description="Currency Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_list

        Get list of orders from store.

        :param customer_id: Retrieves orders specified by customer id
        :type customer_id: str
        :param customer_email: Retrieves orders specified by customer email
        :type customer_email: str
        :param phone: Filter orders by customer's phone number
        :type phone: str
        :param order_status: Retrieves orders specified by order status
        :type order_status: str
        :param order_status_ids: Retrieves orders specified by order statuses
        :type order_status_ids: List[str]
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param page_cursor: Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param sort_by: Set field to sort by
        :type sort_by: str
        :param sort_direction: Set sorting direction
        :type sort_direction: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param store_id: Store Id
        :type store_id: str
        :param ids: Retrieves orders specified by ids
        :type ids: str
        :param order_ids: Retrieves orders specified by order ids
        :type order_ids: str
        :param ebay_order_status: Retrieves orders specified by order status
        :type ebay_order_status: str
        :param basket_id: Retrieves order’s info specified by basket id.
        :type basket_id: str
        :param financial_status: Retrieves orders specified by financial status
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param shipping_method: Retrieve entities according to shipping method
        :type shipping_method: str
        :param skip_order_ids: Skipped orders by ids
        :type skip_order_ids: str
        :param since_id: Retrieve entities starting from the specified id.
        :type since_id: int
        :param is_deleted: Filter deleted orders
        :type is_deleted: bool
        :param shipping_country_iso3: Retrieve entities according to shipping country
        :type shipping_country_iso3: str
        :param enable_cache: If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
        :type enable_cache: bool
        :param delivery_method: Retrieves order with delivery method
        :type delivery_method: str
        :param ship_node_type: Retrieves order with ship node type
        :type ship_node_type: str
        :param currency_id: Currency Id
        :type currency_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_list_serialize(
            customer_id=customer_id,
            customer_email=customer_email,
            phone=phone,
            order_status=order_status,
            order_status_ids=order_status_ids,
            start=start,
            count=count,
            page_cursor=page_cursor,
            sort_by=sort_by,
            sort_direction=sort_direction,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_to=created_to,
            created_from=created_from,
            modified_to=modified_to,
            modified_from=modified_from,
            store_id=store_id,
            ids=ids,
            order_ids=order_ids,
            ebay_order_status=ebay_order_status,
            basket_id=basket_id,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            shipping_method=shipping_method,
            skip_order_ids=skip_order_ids,
            since_id=since_id,
            is_deleted=is_deleted,
            shipping_country_iso3=shipping_country_iso3,
            enable_cache=enable_cache,
            delivery_method=delivery_method,
            ship_node_type=ship_node_type,
            currency_id=currency_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_list_serialize(
        self,
        customer_id,
        customer_email,
        phone,
        order_status,
        order_status_ids,
        start,
        count,
        page_cursor,
        sort_by,
        sort_direction,
        params,
        response_fields,
        exclude,
        created_to,
        created_from,
        modified_to,
        modified_from,
        store_id,
        ids,
        order_ids,
        ebay_order_status,
        basket_id,
        financial_status,
        fulfillment_status,
        shipping_method,
        skip_order_ids,
        since_id,
        is_deleted,
        shipping_country_iso3,
        enable_cache,
        delivery_method,
        ship_node_type,
        currency_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'order_status_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if customer_id is not None:
            
            _query_params.append(('customer_id', customer_id))
            
        if customer_email is not None:
            
            _query_params.append(('customer_email', customer_email))
            
        if phone is not None:
            
            _query_params.append(('phone', phone))
            
        if order_status is not None:
            
            _query_params.append(('order_status', order_status))
            
        if order_status_ids is not None:
            
            _query_params.append(('order_status_ids', order_status_ids))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('sort_direction', sort_direction))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if order_ids is not None:
            
            _query_params.append(('order_ids', order_ids))
            
        if ebay_order_status is not None:
            
            _query_params.append(('ebay_order_status', ebay_order_status))
            
        if basket_id is not None:
            
            _query_params.append(('basket_id', basket_id))
            
        if financial_status is not None:
            
            _query_params.append(('financial_status', financial_status))
            
        if fulfillment_status is not None:
            
            _query_params.append(('fulfillment_status', fulfillment_status))
            
        if shipping_method is not None:
            
            _query_params.append(('shipping_method', shipping_method))
            
        if skip_order_ids is not None:
            
            _query_params.append(('skip_order_ids', skip_order_ids))
            
        if since_id is not None:
            
            _query_params.append(('since_id', since_id))
            
        if is_deleted is not None:
            
            _query_params.append(('is_deleted', is_deleted))
            
        if shipping_country_iso3 is not None:
            
            _query_params.append(('shipping_country_iso3', shipping_country_iso3))
            
        if enable_cache is not None:
            
            _query_params.append(('enable_cache', enable_cache))
            
        if delivery_method is not None:
            
            _query_params.append(('delivery_method', delivery_method))
            
        if ship_node_type is not None:
            
            _query_params.append(('ship_node_type', ship_node_type))
            
        if currency_id is not None:
            
            _query_params.append(('currency_id', currency_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_preestimate_shipping_list(
        self,
        order_preestimate_shipping_list: OrderPreestimateShippingList,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseOrderPreestimateShippingList:
        """order_preestimate_shipping_list

        Retrieve list of order preestimated shipping methods

        :param order_preestimate_shipping_list: (required)
        :type order_preestimate_shipping_list: OrderPreestimateShippingList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_preestimate_shipping_list_serialize(
            order_preestimate_shipping_list=order_preestimate_shipping_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderPreestimateShippingList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_preestimate_shipping_list_with_http_info(
        self,
        order_preestimate_shipping_list: OrderPreestimateShippingList,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseOrderPreestimateShippingList]:
        """order_preestimate_shipping_list

        Retrieve list of order preestimated shipping methods

        :param order_preestimate_shipping_list: (required)
        :type order_preestimate_shipping_list: OrderPreestimateShippingList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_preestimate_shipping_list_serialize(
            order_preestimate_shipping_list=order_preestimate_shipping_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderPreestimateShippingList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_preestimate_shipping_list_without_preload_content(
        self,
        order_preestimate_shipping_list: OrderPreestimateShippingList,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_preestimate_shipping_list

        Retrieve list of order preestimated shipping methods

        :param order_preestimate_shipping_list: (required)
        :type order_preestimate_shipping_list: OrderPreestimateShippingList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_preestimate_shipping_list_serialize(
            order_preestimate_shipping_list=order_preestimate_shipping_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderPreestimateShippingList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_preestimate_shipping_list_serialize(
        self,
        order_preestimate_shipping_list,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if order_preestimate_shipping_list is not None:
            _body_params = order_preestimate_shipping_list


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/order.preestimate_shipping.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_refund_add(
        self,
        order_refund_add: OrderRefundAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderRefundAdd200Response:
        """order_refund_add

        Add a refund to the order.

        :param order_refund_add: (required)
        :type order_refund_add: OrderRefundAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_refund_add_serialize(
            order_refund_add=order_refund_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderRefundAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_refund_add_with_http_info(
        self,
        order_refund_add: OrderRefundAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderRefundAdd200Response]:
        """order_refund_add

        Add a refund to the order.

        :param order_refund_add: (required)
        :type order_refund_add: OrderRefundAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_refund_add_serialize(
            order_refund_add=order_refund_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderRefundAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_refund_add_without_preload_content(
        self,
        order_refund_add: OrderRefundAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_refund_add

        Add a refund to the order.

        :param order_refund_add: (required)
        :type order_refund_add: OrderRefundAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_refund_add_serialize(
            order_refund_add=order_refund_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderRefundAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_refund_add_serialize(
        self,
        order_refund_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if order_refund_add is not None:
            _body_params = order_refund_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/order.refund.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_shipment_add(
        self,
        order_shipment_add: OrderShipmentAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderShipmentAdd200Response:
        """order_shipment_add

        Add a shipment to the order.

        :param order_shipment_add: (required)
        :type order_shipment_add: OrderShipmentAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_add_serialize(
            order_shipment_add=order_shipment_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_shipment_add_with_http_info(
        self,
        order_shipment_add: OrderShipmentAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderShipmentAdd200Response]:
        """order_shipment_add

        Add a shipment to the order.

        :param order_shipment_add: (required)
        :type order_shipment_add: OrderShipmentAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_add_serialize(
            order_shipment_add=order_shipment_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_shipment_add_without_preload_content(
        self,
        order_shipment_add: OrderShipmentAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_shipment_add

        Add a shipment to the order.

        :param order_shipment_add: (required)
        :type order_shipment_add: OrderShipmentAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_add_serialize(
            order_shipment_add=order_shipment_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_shipment_add_serialize(
        self,
        order_shipment_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if order_shipment_add is not None:
            _body_params = order_shipment_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/order.shipment.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_shipment_delete(
        self,
        shipment_id: Annotated[StrictStr, Field(description="Shipment id indicates the number of delivery")],
        order_id: Annotated[StrictStr, Field(description="Defines the order for which the shipment will be deleted")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderShipmentDelete200Response:
        """order_shipment_delete

        Delete order's shipment.

        :param shipment_id: Shipment id indicates the number of delivery (required)
        :type shipment_id: str
        :param order_id: Defines the order for which the shipment will be deleted (required)
        :type order_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_delete_serialize(
            shipment_id=shipment_id,
            order_id=order_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_shipment_delete_with_http_info(
        self,
        shipment_id: Annotated[StrictStr, Field(description="Shipment id indicates the number of delivery")],
        order_id: Annotated[StrictStr, Field(description="Defines the order for which the shipment will be deleted")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderShipmentDelete200Response]:
        """order_shipment_delete

        Delete order's shipment.

        :param shipment_id: Shipment id indicates the number of delivery (required)
        :type shipment_id: str
        :param order_id: Defines the order for which the shipment will be deleted (required)
        :type order_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_delete_serialize(
            shipment_id=shipment_id,
            order_id=order_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_shipment_delete_without_preload_content(
        self,
        shipment_id: Annotated[StrictStr, Field(description="Shipment id indicates the number of delivery")],
        order_id: Annotated[StrictStr, Field(description="Defines the order for which the shipment will be deleted")],
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_shipment_delete

        Delete order's shipment.

        :param shipment_id: Shipment id indicates the number of delivery (required)
        :type shipment_id: str
        :param order_id: Defines the order for which the shipment will be deleted (required)
        :type order_id: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_delete_serialize(
            shipment_id=shipment_id,
            order_id=order_id,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentDelete200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_shipment_delete_serialize(
        self,
        shipment_id,
        order_id,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if shipment_id is not None:
            
            _query_params.append(('shipment_id', shipment_id))
            
        if order_id is not None:
            
            _query_params.append(('order_id', order_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/order.shipment.delete.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_shipment_info(
        self,
        id: Annotated[StrictStr, Field(description="Entity id")],
        order_id: Annotated[StrictStr, Field(description="Defines the order id")],
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseOrderShipmentList:
        """order_shipment_info

        Get information of shipment.

        :param id: Entity id (required)
        :type id: str
        :param order_id: Defines the order id (required)
        :type order_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_info_serialize(
            id=id,
            order_id=order_id,
            start=start,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderShipmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_shipment_info_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Entity id")],
        order_id: Annotated[StrictStr, Field(description="Defines the order id")],
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseOrderShipmentList]:
        """order_shipment_info

        Get information of shipment.

        :param id: Entity id (required)
        :type id: str
        :param order_id: Defines the order id (required)
        :type order_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_info_serialize(
            id=id,
            order_id=order_id,
            start=start,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderShipmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_shipment_info_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Entity id")],
        order_id: Annotated[StrictStr, Field(description="Defines the order id")],
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_shipment_info

        Get information of shipment.

        :param id: Entity id (required)
        :type id: str
        :param order_id: Defines the order id (required)
        :type order_id: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_info_serialize(
            id=id,
            order_id=order_id,
            start=start,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderShipmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_shipment_info_serialize(
        self,
        id,
        order_id,
        start,
        params,
        response_fields,
        exclude,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if order_id is not None:
            
            _query_params.append(('order_id', order_id))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.shipment.info.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_shipment_list(
        self,
        order_id: Annotated[StrictStr, Field(description="Retrieves shipments specified by order id")],
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseOrderShipmentList:
        """order_shipment_list

        Get list of shipments by orders.

        :param order_id: Retrieves shipments specified by order id (required)
        :type order_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_list_serialize(
            order_id=order_id,
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderShipmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_shipment_list_with_http_info(
        self,
        order_id: Annotated[StrictStr, Field(description="Retrieves shipments specified by order id")],
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseOrderShipmentList]:
        """order_shipment_list

        Get list of shipments by orders.

        :param order_id: Retrieves shipments specified by order id (required)
        :type order_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_list_serialize(
            order_id=order_id,
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderShipmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_shipment_list_without_preload_content(
        self,
        order_id: Annotated[StrictStr, Field(description="Retrieves shipments specified by order id")],
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        start: Annotated[Optional[StrictInt], Field(description="This parameter sets the number from which you want to get entities")] = None,
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        created_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their creation date")] = None,
        created_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their creation date")] = None,
        modified_from: Annotated[Optional[StrictStr], Field(description="Retrieve entities from their modification date")] = None,
        modified_to: Annotated[Optional[StrictStr], Field(description="Retrieve entities to their modification date")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_shipment_list

        Get list of shipments by orders.

        :param order_id: Retrieves shipments specified by order id (required)
        :type order_id: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param start: This parameter sets the number from which you want to get entities
        :type start: int
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param created_from: Retrieve entities from their creation date
        :type created_from: str
        :param created_to: Retrieve entities to their creation date
        :type created_to: str
        :param modified_from: Retrieve entities from their modification date
        :type modified_from: str
        :param modified_to: Retrieve entities to their modification date
        :type modified_to: str
        :param store_id: Store Id
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_list_serialize(
            order_id=order_id,
            page_cursor=page_cursor,
            start=start,
            count=count,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            created_from=created_from,
            created_to=created_to,
            modified_from=modified_from,
            modified_to=modified_to,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderShipmentList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_shipment_list_serialize(
        self,
        order_id,
        page_cursor,
        start,
        count,
        params,
        response_fields,
        exclude,
        created_from,
        created_to,
        modified_from,
        modified_to,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('order_id', order_id))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if created_from is not None:
            
            _query_params.append(('created_from', created_from))
            
        if created_to is not None:
            
            _query_params.append(('created_to', created_to))
            
        if modified_from is not None:
            
            _query_params.append(('modified_from', modified_from))
            
        if modified_to is not None:
            
            _query_params.append(('modified_to', modified_to))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.shipment.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_shipment_tracking_add(
        self,
        order_shipment_tracking_add: OrderShipmentTrackingAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderShipmentTrackingAdd200Response:
        """order_shipment_tracking_add

        Add order shipment's tracking info.

        :param order_shipment_tracking_add: (required)
        :type order_shipment_tracking_add: OrderShipmentTrackingAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_tracking_add_serialize(
            order_shipment_tracking_add=order_shipment_tracking_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentTrackingAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_shipment_tracking_add_with_http_info(
        self,
        order_shipment_tracking_add: OrderShipmentTrackingAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderShipmentTrackingAdd200Response]:
        """order_shipment_tracking_add

        Add order shipment's tracking info.

        :param order_shipment_tracking_add: (required)
        :type order_shipment_tracking_add: OrderShipmentTrackingAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_tracking_add_serialize(
            order_shipment_tracking_add=order_shipment_tracking_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentTrackingAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_shipment_tracking_add_without_preload_content(
        self,
        order_shipment_tracking_add: OrderShipmentTrackingAdd,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_shipment_tracking_add

        Add order shipment's tracking info.

        :param order_shipment_tracking_add: (required)
        :type order_shipment_tracking_add: OrderShipmentTrackingAdd
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_tracking_add_serialize(
            order_shipment_tracking_add=order_shipment_tracking_add,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderShipmentTrackingAdd200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_shipment_tracking_add_serialize(
        self,
        order_shipment_tracking_add,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if order_shipment_tracking_add is not None:
            _body_params = order_shipment_tracking_add


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/order.shipment.tracking.add.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_shipment_update(
        self,
        order_shipment_update: OrderShipmentUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """order_shipment_update

        Update order's shipment information.

        :param order_shipment_update: (required)
        :type order_shipment_update: OrderShipmentUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_update_serialize(
            order_shipment_update=order_shipment_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_shipment_update_with_http_info(
        self,
        order_shipment_update: OrderShipmentUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """order_shipment_update

        Update order's shipment information.

        :param order_shipment_update: (required)
        :type order_shipment_update: OrderShipmentUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_update_serialize(
            order_shipment_update=order_shipment_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_shipment_update_without_preload_content(
        self,
        order_shipment_update: OrderShipmentUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_shipment_update

        Update order's shipment information.

        :param order_shipment_update: (required)
        :type order_shipment_update: OrderShipmentUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_shipment_update_serialize(
            order_shipment_update=order_shipment_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_shipment_update_serialize(
        self,
        order_shipment_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if order_shipment_update is not None:
            _body_params = order_shipment_update


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/order.shipment.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_status_list(
        self,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrderStatusList200Response:
        """order_status_list

        Retrieve list of statuses

        :param store_id: Store Id
        :type store_id: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_status_list_serialize(
            store_id=store_id,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_status_list_with_http_info(
        self,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrderStatusList200Response]:
        """order_status_list

        Retrieve list of statuses

        :param store_id: Store Id
        :type store_id: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_status_list_serialize(
            store_id=store_id,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_status_list_without_preload_content(
        self,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_status_list

        Retrieve list of statuses

        :param store_id: Store Id
        :type store_id: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_status_list_serialize(
            store_id=store_id,
            response_fields=response_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrderStatusList200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_status_list_serialize(
        self,
        store_id,
        response_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.status.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_transaction_list(
        self,
        order_ids: Annotated[StrictStr, Field(description="Retrieves order transactions specified by order ids")],
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelResponseOrderTransactionList:
        """order_transaction_list

        Retrieve list of order transaction

        :param order_ids: Retrieves order transactions specified by order ids (required)
        :type order_ids: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param store_id: Store Id
        :type store_id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_transaction_list_serialize(
            order_ids=order_ids,
            count=count,
            store_id=store_id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            page_cursor=page_cursor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderTransactionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_transaction_list_with_http_info(
        self,
        order_ids: Annotated[StrictStr, Field(description="Retrieves order transactions specified by order ids")],
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelResponseOrderTransactionList]:
        """order_transaction_list

        Retrieve list of order transaction

        :param order_ids: Retrieves order transactions specified by order ids (required)
        :type order_ids: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param store_id: Store Id
        :type store_id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_transaction_list_serialize(
            order_ids=order_ids,
            count=count,
            store_id=store_id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            page_cursor=page_cursor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderTransactionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_transaction_list_without_preload_content(
        self,
        order_ids: Annotated[StrictStr, Field(description="Retrieves order transactions specified by order ids")],
        count: Annotated[Optional[StrictInt], Field(description="This parameter sets the entity amount that has to be retrieved. Max allowed count=250")] = None,
        store_id: Annotated[Optional[StrictStr], Field(description="Store Id")] = None,
        params: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        response_fields: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to retrieve")] = None,
        exclude: Annotated[Optional[StrictStr], Field(description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")] = None,
        page_cursor: Annotated[Optional[StrictStr], Field(description="Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_transaction_list

        Retrieve list of order transaction

        :param order_ids: Retrieves order transactions specified by order ids (required)
        :type order_ids: str
        :param count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :type count: int
        :param store_id: Store Id
        :type store_id: str
        :param params: Set this parameter in order to choose which entity fields you want to retrieve
        :type params: str
        :param response_fields: Set this parameter in order to choose which entity fields you want to retrieve
        :type response_fields: str
        :param exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :type exclude: str
        :param page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :type page_cursor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_transaction_list_serialize(
            order_ids=order_ids,
            count=count,
            store_id=store_id,
            params=params,
            response_fields=response_fields,
            exclude=exclude,
            page_cursor=page_cursor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelResponseOrderTransactionList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_transaction_list_serialize(
        self,
        order_ids,
        count,
        store_id,
        params,
        response_fields,
        exclude,
        page_cursor,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if order_ids is not None:
            
            _query_params.append(('order_ids', order_ids))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        if response_fields is not None:
            
            _query_params.append(('response_fields', response_fields))
            
        if exclude is not None:
            
            _query_params.append(('exclude', exclude))
            
        if page_cursor is not None:
            
            _query_params.append(('page_cursor', page_cursor))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/order.transaction.list.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_update(
        self,
        order_id: Annotated[StrictStr, Field(description="Defines the orders specified by order id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Defines store id where the order should be found")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Defines new order's status")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Specifies order comment")] = None,
        admin_comment: Annotated[Optional[StrictStr], Field(description="Specifies admin's order comment")] = None,
        admin_private_comment: Annotated[Optional[StrictStr], Field(description="Specifies private admin's order comment")] = None,
        date_modified: Annotated[Optional[StrictStr], Field(description="Specifies order's  modification date")] = None,
        date_finished: Annotated[Optional[StrictStr], Field(description="Specifies order's  finished date")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Update order financial status to specified")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        order_payment_method: Annotated[Optional[StrictStr], Field(description="Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'")] = None,
        send_notifications: Annotated[Optional[StrictBool], Field(description="Send notifications to customer after order was created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountConfigUpdate200Response:
        """order_update

        Update existing order.

        :param order_id: Defines the orders specified by order id (required)
        :type order_id: str
        :param store_id: Defines store id where the order should be found
        :type store_id: str
        :param order_status: Defines new order's status
        :type order_status: str
        :param comment: Specifies order comment
        :type comment: str
        :param admin_comment: Specifies admin's order comment
        :type admin_comment: str
        :param admin_private_comment: Specifies private admin's order comment
        :type admin_private_comment: str
        :param date_modified: Specifies order's  modification date
        :type date_modified: str
        :param date_finished: Specifies order's  finished date
        :type date_finished: str
        :param financial_status: Update order financial status to specified
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param order_payment_method: Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
        :type order_payment_method: str
        :param send_notifications: Send notifications to customer after order was created
        :type send_notifications: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_update_serialize(
            order_id=order_id,
            store_id=store_id,
            order_status=order_status,
            comment=comment,
            admin_comment=admin_comment,
            admin_private_comment=admin_private_comment,
            date_modified=date_modified,
            date_finished=date_finished,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            order_payment_method=order_payment_method,
            send_notifications=send_notifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_update_with_http_info(
        self,
        order_id: Annotated[StrictStr, Field(description="Defines the orders specified by order id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Defines store id where the order should be found")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Defines new order's status")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Specifies order comment")] = None,
        admin_comment: Annotated[Optional[StrictStr], Field(description="Specifies admin's order comment")] = None,
        admin_private_comment: Annotated[Optional[StrictStr], Field(description="Specifies private admin's order comment")] = None,
        date_modified: Annotated[Optional[StrictStr], Field(description="Specifies order's  modification date")] = None,
        date_finished: Annotated[Optional[StrictStr], Field(description="Specifies order's  finished date")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Update order financial status to specified")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        order_payment_method: Annotated[Optional[StrictStr], Field(description="Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'")] = None,
        send_notifications: Annotated[Optional[StrictBool], Field(description="Send notifications to customer after order was created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountConfigUpdate200Response]:
        """order_update

        Update existing order.

        :param order_id: Defines the orders specified by order id (required)
        :type order_id: str
        :param store_id: Defines store id where the order should be found
        :type store_id: str
        :param order_status: Defines new order's status
        :type order_status: str
        :param comment: Specifies order comment
        :type comment: str
        :param admin_comment: Specifies admin's order comment
        :type admin_comment: str
        :param admin_private_comment: Specifies private admin's order comment
        :type admin_private_comment: str
        :param date_modified: Specifies order's  modification date
        :type date_modified: str
        :param date_finished: Specifies order's  finished date
        :type date_finished: str
        :param financial_status: Update order financial status to specified
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param order_payment_method: Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
        :type order_payment_method: str
        :param send_notifications: Send notifications to customer after order was created
        :type send_notifications: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_update_serialize(
            order_id=order_id,
            store_id=store_id,
            order_status=order_status,
            comment=comment,
            admin_comment=admin_comment,
            admin_private_comment=admin_private_comment,
            date_modified=date_modified,
            date_finished=date_finished,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            order_payment_method=order_payment_method,
            send_notifications=send_notifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_update_without_preload_content(
        self,
        order_id: Annotated[StrictStr, Field(description="Defines the orders specified by order id")],
        store_id: Annotated[Optional[StrictStr], Field(description="Defines store id where the order should be found")] = None,
        order_status: Annotated[Optional[StrictStr], Field(description="Defines new order's status")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Specifies order comment")] = None,
        admin_comment: Annotated[Optional[StrictStr], Field(description="Specifies admin's order comment")] = None,
        admin_private_comment: Annotated[Optional[StrictStr], Field(description="Specifies private admin's order comment")] = None,
        date_modified: Annotated[Optional[StrictStr], Field(description="Specifies order's  modification date")] = None,
        date_finished: Annotated[Optional[StrictStr], Field(description="Specifies order's  finished date")] = None,
        financial_status: Annotated[Optional[StrictStr], Field(description="Update order financial status to specified")] = None,
        fulfillment_status: Annotated[Optional[StrictStr], Field(description="Create order with fulfillment status")] = None,
        order_payment_method: Annotated[Optional[StrictStr], Field(description="Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'")] = None,
        send_notifications: Annotated[Optional[StrictBool], Field(description="Send notifications to customer after order was created")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """order_update

        Update existing order.

        :param order_id: Defines the orders specified by order id (required)
        :type order_id: str
        :param store_id: Defines store id where the order should be found
        :type store_id: str
        :param order_status: Defines new order's status
        :type order_status: str
        :param comment: Specifies order comment
        :type comment: str
        :param admin_comment: Specifies admin's order comment
        :type admin_comment: str
        :param admin_private_comment: Specifies private admin's order comment
        :type admin_private_comment: str
        :param date_modified: Specifies order's  modification date
        :type date_modified: str
        :param date_finished: Specifies order's  finished date
        :type date_finished: str
        :param financial_status: Update order financial status to specified
        :type financial_status: str
        :param fulfillment_status: Create order with fulfillment status
        :type fulfillment_status: str
        :param order_payment_method: Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
        :type order_payment_method: str
        :param send_notifications: Send notifications to customer after order was created
        :type send_notifications: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_update_serialize(
            order_id=order_id,
            store_id=store_id,
            order_status=order_status,
            comment=comment,
            admin_comment=admin_comment,
            admin_private_comment=admin_private_comment,
            date_modified=date_modified,
            date_finished=date_finished,
            financial_status=financial_status,
            fulfillment_status=fulfillment_status,
            order_payment_method=order_payment_method,
            send_notifications=send_notifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountConfigUpdate200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_update_serialize(
        self,
        order_id,
        store_id,
        order_status,
        comment,
        admin_comment,
        admin_private_comment,
        date_modified,
        date_finished,
        financial_status,
        fulfillment_status,
        order_payment_method,
        send_notifications,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('order_id', order_id))
            
        if store_id is not None:
            
            _query_params.append(('store_id', store_id))
            
        if order_status is not None:
            
            _query_params.append(('order_status', order_status))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if admin_comment is not None:
            
            _query_params.append(('admin_comment', admin_comment))
            
        if admin_private_comment is not None:
            
            _query_params.append(('admin_private_comment', admin_private_comment))
            
        if date_modified is not None:
            
            _query_params.append(('date_modified', date_modified))
            
        if date_finished is not None:
            
            _query_params.append(('date_finished', date_finished))
            
        if financial_status is not None:
            
            _query_params.append(('financial_status', financial_status))
            
        if fulfillment_status is not None:
            
            _query_params.append(('fulfillment_status', fulfillment_status))
            
        if order_payment_method is not None:
            
            _query_params.append(('order_payment_method', order_payment_method))
            
        if send_notifications is not None:
            
            _query_params.append(('send_notifications', send_notifications))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'store_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/order.update.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



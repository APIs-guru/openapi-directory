# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_preestimate_shipping_list_order_item_inner import OrderPreestimateShippingListOrderItemInner
from typing import Optional, Set
from typing_extensions import Self

class OrderPreestimateShippingList(BaseModel):
    """
    OrderPreestimateShippingList
    """ # noqa: E501
    customer_email: Optional[StrictStr] = Field(default=None, description="Retrieves orders specified by customer email")
    customer_id: Optional[StrictStr] = Field(default=None, description="Retrieves orders specified by customer id")
    exclude: Optional[StrictStr] = Field(default=None, description="Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all")
    order_item: List[OrderPreestimateShippingListOrderItemInner]
    params: Optional[StrictStr] = Field(default='force_all', description="Set this parameter in order to choose which entity fields you want to retrieve")
    shipp_address_1: Optional[StrictStr] = Field(default=None, description="Specifies first shipping address")
    shipp_city: Optional[StrictStr] = Field(default=None, description="Specifies shipping city")
    shipp_country: StrictStr = Field(description="Specifies shipping country code")
    shipp_postcode: Optional[StrictStr] = Field(default=None, description="Specifies shipping postcode")
    shipp_state: Optional[StrictStr] = Field(default=None, description="Specifies shipping state code")
    store_id: Optional[StrictStr] = Field(default=None, description="Store Id")
    warehouse_id: Optional[StrictStr] = Field(default=None, description="This parameter is used for selecting a warehouse where you need to set/modify a product quantity.")
    __properties: ClassVar[List[str]] = ["customer_email", "customer_id", "exclude", "order_item", "params", "shipp_address_1", "shipp_city", "shipp_country", "shipp_postcode", "shipp_state", "store_id", "warehouse_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderPreestimateShippingList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_item (list)
        _items = []
        if self.order_item:
            for _item_order_item in self.order_item:
                if _item_order_item:
                    _items.append(_item_order_item.to_dict())
            _dict['order_item'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderPreestimateShippingList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_email": obj.get("customer_email"),
            "customer_id": obj.get("customer_id"),
            "exclude": obj.get("exclude"),
            "order_item": [OrderPreestimateShippingListOrderItemInner.from_dict(_item) for _item in obj["order_item"]] if obj.get("order_item") is not None else None,
            "params": obj.get("params") if obj.get("params") is not None else 'force_all',
            "shipp_address_1": obj.get("shipp_address_1"),
            "shipp_city": obj.get("shipp_city"),
            "shipp_country": obj.get("shipp_country"),
            "shipp_postcode": obj.get("shipp_postcode"),
            "shipp_state": obj.get("shipp_state"),
            "store_id": obj.get("store_id"),
            "warehouse_id": obj.get("warehouse_id")
        })
        return _obj



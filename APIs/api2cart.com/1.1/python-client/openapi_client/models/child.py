# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.a2_c_date_time import A2CDateTime
from openapi_client.models.discount import Discount
from openapi_client.models.image import Image
from openapi_client.models.product_advanced_price import ProductAdvancedPrice
from openapi_client.models.product_child_item_combination import ProductChildItemCombination
from openapi_client.models.product_inventory import ProductInventory
from typing import Optional, Set
from typing_extensions import Self

class Child(BaseModel):
    """
    Child
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    advanced_price: Optional[List[ProductAdvancedPrice]] = None
    allow_backorders: Optional[StrictBool] = None
    avail_for_sale: Optional[StrictBool] = None
    combination: Optional[List[ProductChildItemCombination]] = None
    cost_price: Optional[Union[StrictFloat, StrictInt]] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default_price: Optional[Union[StrictFloat, StrictInt]] = None
    default_qty_in_pack: Optional[Union[StrictFloat, StrictInt]] = None
    dimensions_unit: Optional[StrictStr] = None
    discounts: Optional[List[Discount]] = None
    ean: Optional[StrictStr] = None
    full_description: Optional[StrictStr] = None
    gtin: Optional[StrictStr] = None
    height: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = None
    images: Optional[List[Image]] = None
    in_stock: Optional[StrictBool] = None
    inventory: Optional[List[ProductInventory]] = None
    inventory_level: Optional[Union[StrictFloat, StrictInt]] = None
    is_qty_in_pack_fixed: Optional[StrictBool] = None
    isbn: Optional[StrictStr] = None
    length: Optional[Union[StrictFloat, StrictInt]] = None
    list_price: Optional[Union[StrictFloat, StrictInt]] = None
    manage_stock: Optional[StrictBool] = None
    meta_description: Optional[StrictStr] = None
    meta_keywords: Optional[StrictStr] = None
    meta_title: Optional[StrictStr] = None
    min_quantity: Optional[Union[StrictFloat, StrictInt]] = None
    modified_time: Optional[A2CDateTime] = None
    mpn: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = None
    short_description: Optional[StrictStr] = None
    sku: Optional[StrictStr] = None
    sort_order: Optional[StrictInt] = None
    tax_class_id: Optional[StrictStr] = None
    upc: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    weight_unit: Optional[StrictStr] = None
    wholesale_price: Optional[Union[StrictFloat, StrictInt]] = None
    width: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "advanced_price", "allow_backorders", "avail_for_sale", "combination", "cost_price", "created_time", "custom_fields", "default_price", "default_qty_in_pack", "dimensions_unit", "discounts", "ean", "full_description", "gtin", "height", "id", "images", "in_stock", "inventory", "inventory_level", "is_qty_in_pack_fixed", "isbn", "length", "list_price", "manage_stock", "meta_description", "meta_keywords", "meta_title", "min_quantity", "modified_time", "mpn", "name", "parent_id", "short_description", "sku", "sort_order", "tax_class_id", "upc", "url", "weight", "weight_unit", "wholesale_price", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Child from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_price (list)
        _items = []
        if self.advanced_price:
            for _item_advanced_price in self.advanced_price:
                if _item_advanced_price:
                    _items.append(_item_advanced_price.to_dict())
            _dict['advanced_price'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in combination (list)
        _items = []
        if self.combination:
            for _item_combination in self.combination:
                if _item_combination:
                    _items.append(_item_combination.to_dict())
            _dict['combination'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_time
        if self.created_time:
            _dict['created_time'] = self.created_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inventory (list)
        _items = []
        if self.inventory:
            for _item_inventory in self.inventory:
                if _item_inventory:
                    _items.append(_item_inventory.to_dict())
            _dict['inventory'] = _items
        # override the default output from pydantic by calling `to_dict()` of modified_time
        if self.modified_time:
            _dict['modified_time'] = self.modified_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Child from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "advanced_price": [ProductAdvancedPrice.from_dict(_item) for _item in obj["advanced_price"]] if obj.get("advanced_price") is not None else None,
            "allow_backorders": obj.get("allow_backorders"),
            "avail_for_sale": obj.get("avail_for_sale"),
            "combination": [ProductChildItemCombination.from_dict(_item) for _item in obj["combination"]] if obj.get("combination") is not None else None,
            "cost_price": obj.get("cost_price"),
            "created_time": A2CDateTime.from_dict(obj["created_time"]) if obj.get("created_time") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "default_price": obj.get("default_price"),
            "default_qty_in_pack": obj.get("default_qty_in_pack"),
            "dimensions_unit": obj.get("dimensions_unit"),
            "discounts": [Discount.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "ean": obj.get("ean"),
            "full_description": obj.get("full_description"),
            "gtin": obj.get("gtin"),
            "height": obj.get("height"),
            "id": obj.get("id"),
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "in_stock": obj.get("in_stock"),
            "inventory": [ProductInventory.from_dict(_item) for _item in obj["inventory"]] if obj.get("inventory") is not None else None,
            "inventory_level": obj.get("inventory_level"),
            "is_qty_in_pack_fixed": obj.get("is_qty_in_pack_fixed"),
            "isbn": obj.get("isbn"),
            "length": obj.get("length"),
            "list_price": obj.get("list_price"),
            "manage_stock": obj.get("manage_stock"),
            "meta_description": obj.get("meta_description"),
            "meta_keywords": obj.get("meta_keywords"),
            "meta_title": obj.get("meta_title"),
            "min_quantity": obj.get("min_quantity"),
            "modified_time": A2CDateTime.from_dict(obj["modified_time"]) if obj.get("modified_time") is not None else None,
            "mpn": obj.get("mpn"),
            "name": obj.get("name"),
            "parent_id": obj.get("parent_id"),
            "short_description": obj.get("short_description"),
            "sku": obj.get("sku"),
            "sort_order": obj.get("sort_order"),
            "tax_class_id": obj.get("tax_class_id"),
            "upc": obj.get("upc"),
            "url": obj.get("url"),
            "weight": obj.get("weight"),
            "weight_unit": obj.get("weight_unit"),
            "wholesale_price": obj.get("wholesale_price"),
            "width": obj.get("width")
        })
        return _obj



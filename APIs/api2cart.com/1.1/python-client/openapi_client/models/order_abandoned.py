# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.a2_c_date_time import A2CDateTime
from openapi_client.models.base_customer import BaseCustomer
from openapi_client.models.currency import Currency
from openapi_client.models.order_item import OrderItem
from openapi_client.models.order_totals import OrderTotals
from typing import Optional, Set
from typing_extensions import Self

class OrderAbandoned(BaseModel):
    """
    OrderAbandoned
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    basket_id: Optional[StrictStr] = None
    basket_url: Optional[StrictStr] = None
    created_at: Optional[A2CDateTime] = None
    currency: Optional[Currency] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer: Optional[BaseCustomer] = None
    id: Optional[StrictStr] = None
    modified_at: Optional[A2CDateTime] = None
    order_products: Optional[List[OrderItem]] = None
    totals: Optional[OrderTotals] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "basket_id", "basket_url", "created_at", "currency", "custom_fields", "customer", "id", "modified_at", "order_products", "totals"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderAbandoned from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_at
        if self.modified_at:
            _dict['modified_at'] = self.modified_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_products (list)
        _items = []
        if self.order_products:
            for _item_order_products in self.order_products:
                if _item_order_products:
                    _items.append(_item_order_products.to_dict())
            _dict['order_products'] = _items
        # override the default output from pydantic by calling `to_dict()` of totals
        if self.totals:
            _dict['totals'] = self.totals.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderAbandoned from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "basket_id": obj.get("basket_id"),
            "basket_url": obj.get("basket_url"),
            "created_at": A2CDateTime.from_dict(obj["created_at"]) if obj.get("created_at") is not None else None,
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "customer": BaseCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "id": obj.get("id"),
            "modified_at": A2CDateTime.from_dict(obj["modified_at"]) if obj.get("modified_at") is not None else None,
            "order_products": [OrderItem.from_dict(_item) for _item in obj["order_products"]] if obj.get("order_products") is not None else None,
            "totals": OrderTotals.from_dict(obj["totals"]) if obj.get("totals") is not None else None
        })
        return _obj



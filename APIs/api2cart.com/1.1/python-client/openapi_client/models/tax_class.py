# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.tax_class_rate import TaxClassRate
from typing import Optional, Set
from typing_extensions import Self

class TaxClass(BaseModel):
    """
    TaxClass
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[StrictBool] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    tax: Optional[Union[StrictFloat, StrictInt]] = None
    tax_rates: Optional[List[TaxClassRate]] = None
    tax_type: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "avail", "custom_fields", "id", "name", "tax", "tax_rates", "tax_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaxClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tax_rates (list)
        _items = []
        if self.tax_rates:
            for _item_tax_rates in self.tax_rates:
                if _item_tax_rates:
                    _items.append(_item_tax_rates.to_dict())
            _dict['tax_rates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaxClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "avail": obj.get("avail"),
            "custom_fields": obj.get("custom_fields"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "tax": obj.get("tax"),
            "tax_rates": [TaxClassRate.from_dict(_item) for _item in obj["tax_rates"]] if obj.get("tax_rates") is not None else None,
            "tax_type": obj.get("tax_type")
        })
        return _obj



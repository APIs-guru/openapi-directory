# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.carrier import Carrier
from openapi_client.models.cart_channel import CartChannel
from openapi_client.models.currency import Currency
from openapi_client.models.info import Info
from openapi_client.models.language import Language
from typing import Optional, Set
from typing_extensions import Self

class CartStoreInfo(BaseModel):
    """
    CartStoreInfo
    """ # noqa: E501
    active: Optional[StrictBool] = None
    additional_fields: Optional[Dict[str, Any]] = None
    carrier_info: Optional[List[Carrier]] = None
    channels: Optional[List[CartChannel]] = None
    country: Optional[StrictStr] = None
    currency: Optional[Currency] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default_warehouse_id: Optional[StrictStr] = None
    dimension_unit: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    multi_store_url: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    prices_include_tax: Optional[StrictBool] = None
    root_category_id: Optional[StrictStr] = None
    store_currencies: Optional[List[Currency]] = None
    store_id: Optional[StrictStr] = None
    store_languages: Optional[List[Language]] = None
    store_owner_info: Optional[Info] = None
    timezone: Optional[StrictStr] = None
    weight_unit: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["active", "additional_fields", "carrier_info", "channels", "country", "currency", "custom_fields", "default_warehouse_id", "dimension_unit", "language", "multi_store_url", "name", "prices_include_tax", "root_category_id", "store_currencies", "store_id", "store_languages", "store_owner_info", "timezone", "weight_unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CartStoreInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in carrier_info (list)
        _items = []
        if self.carrier_info:
            for _item_carrier_info in self.carrier_info:
                if _item_carrier_info:
                    _items.append(_item_carrier_info.to_dict())
            _dict['carrier_info'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in channels (list)
        _items = []
        if self.channels:
            for _item_channels in self.channels:
                if _item_channels:
                    _items.append(_item_channels.to_dict())
            _dict['channels'] = _items
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in store_currencies (list)
        _items = []
        if self.store_currencies:
            for _item_store_currencies in self.store_currencies:
                if _item_store_currencies:
                    _items.append(_item_store_currencies.to_dict())
            _dict['store_currencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in store_languages (list)
        _items = []
        if self.store_languages:
            for _item_store_languages in self.store_languages:
                if _item_store_languages:
                    _items.append(_item_store_languages.to_dict())
            _dict['store_languages'] = _items
        # override the default output from pydantic by calling `to_dict()` of store_owner_info
        if self.store_owner_info:
            _dict['store_owner_info'] = self.store_owner_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CartStoreInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "additional_fields": obj.get("additional_fields"),
            "carrier_info": [Carrier.from_dict(_item) for _item in obj["carrier_info"]] if obj.get("carrier_info") is not None else None,
            "channels": [CartChannel.from_dict(_item) for _item in obj["channels"]] if obj.get("channels") is not None else None,
            "country": obj.get("country"),
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "default_warehouse_id": obj.get("default_warehouse_id"),
            "dimension_unit": obj.get("dimension_unit"),
            "language": obj.get("language"),
            "multi_store_url": obj.get("multi_store_url"),
            "name": obj.get("name"),
            "prices_include_tax": obj.get("prices_include_tax"),
            "root_category_id": obj.get("root_category_id"),
            "store_currencies": [Currency.from_dict(_item) for _item in obj["store_currencies"]] if obj.get("store_currencies") is not None else None,
            "store_id": obj.get("store_id"),
            "store_languages": [Language.from_dict(_item) for _item in obj["store_languages"]] if obj.get("store_languages") is not None else None,
            "store_owner_info": Info.from_dict(obj["store_owner_info"]) if obj.get("store_owner_info") is not None else None,
            "timezone": obj.get("timezone"),
            "weight_unit": obj.get("weight_unit")
        })
        return _obj



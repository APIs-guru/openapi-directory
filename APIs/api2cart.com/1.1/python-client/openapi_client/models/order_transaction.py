# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.a2_c_date_time import A2CDateTime
from typing import Optional, Set
from typing_extensions import Self

class OrderTransaction(BaseModel):
    """
    OrderTransaction
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    avs_message: Optional[StrictStr] = None
    avs_postal_resp_code: Optional[StrictStr] = None
    avs_street_resp_code: Optional[StrictStr] = None
    card_bin: Optional[StrictStr] = None
    card_brand: Optional[StrictStr] = None
    card_last_four: Optional[StrictStr] = None
    created_time: Optional[A2CDateTime] = None
    currency: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    cvv_code: Optional[StrictStr] = None
    cvv_message: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    gateway: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    is_test_mode: Optional[StrictBool] = None
    order_id: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = None
    reference_number: Optional[StrictStr] = None
    settlement_amount: Optional[Union[StrictFloat, StrictInt]] = None
    settlement_created_time: Optional[A2CDateTime] = None
    settlement_currency: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    transaction_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "amount", "avs_message", "avs_postal_resp_code", "avs_street_resp_code", "card_bin", "card_brand", "card_last_four", "created_time", "currency", "custom_fields", "cvv_code", "cvv_message", "description", "gateway", "id", "is_test_mode", "order_id", "parent_id", "reference_number", "settlement_amount", "settlement_created_time", "settlement_currency", "status", "transaction_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_time
        if self.created_time:
            _dict['created_time'] = self.created_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settlement_created_time
        if self.settlement_created_time:
            _dict['settlement_created_time'] = self.settlement_created_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "amount": obj.get("amount"),
            "avs_message": obj.get("avs_message"),
            "avs_postal_resp_code": obj.get("avs_postal_resp_code"),
            "avs_street_resp_code": obj.get("avs_street_resp_code"),
            "card_bin": obj.get("card_bin"),
            "card_brand": obj.get("card_brand"),
            "card_last_four": obj.get("card_last_four"),
            "created_time": A2CDateTime.from_dict(obj["created_time"]) if obj.get("created_time") is not None else None,
            "currency": obj.get("currency"),
            "custom_fields": obj.get("custom_fields"),
            "cvv_code": obj.get("cvv_code"),
            "cvv_message": obj.get("cvv_message"),
            "description": obj.get("description"),
            "gateway": obj.get("gateway"),
            "id": obj.get("id"),
            "is_test_mode": obj.get("is_test_mode"),
            "order_id": obj.get("order_id"),
            "parent_id": obj.get("parent_id"),
            "reference_number": obj.get("reference_number"),
            "settlement_amount": obj.get("settlement_amount"),
            "settlement_created_time": A2CDateTime.from_dict(obj["settlement_created_time"]) if obj.get("settlement_created_time") is not None else None,
            "settlement_currency": obj.get("settlement_currency"),
            "status": obj.get("status"),
            "transaction_id": obj.get("transaction_id")
        })
        return _obj



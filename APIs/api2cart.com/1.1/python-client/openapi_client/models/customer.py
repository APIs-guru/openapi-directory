# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.a2_c_date_time import A2CDateTime
from openapi_client.models.customer_address import CustomerAddress
from openapi_client.models.customer_group import CustomerGroup
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    address_book: Optional[List[CustomerAddress]] = None
    birth_day: Optional[A2CDateTime] = None
    company: Optional[StrictStr] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    email: Optional[StrictStr] = None
    fax: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    group: Optional[List[CustomerGroup]] = None
    id: Optional[StrictStr] = None
    ip_address: Optional[StrictStr] = None
    lang_id: Optional[StrictStr] = None
    last_login: Optional[A2CDateTime] = None
    last_name: Optional[StrictStr] = None
    last_order_id: Optional[StrictStr] = None
    login: Optional[StrictStr] = None
    modified_time: Optional[A2CDateTime] = None
    news_letter_subscription: Optional[StrictBool] = None
    orders_count: Optional[StrictInt] = None
    phone: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    stores_ids: Optional[List[StrictStr]] = None
    website: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "address_book", "birth_day", "company", "created_time", "custom_fields", "email", "fax", "first_name", "gender", "group", "id", "ip_address", "lang_id", "last_login", "last_name", "last_order_id", "login", "modified_time", "news_letter_subscription", "orders_count", "phone", "status", "stores_ids", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address_book (list)
        _items = []
        if self.address_book:
            for _item_address_book in self.address_book:
                if _item_address_book:
                    _items.append(_item_address_book.to_dict())
            _dict['address_book'] = _items
        # override the default output from pydantic by calling `to_dict()` of birth_day
        if self.birth_day:
            _dict['birth_day'] = self.birth_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_time
        if self.created_time:
            _dict['created_time'] = self.created_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in group (list)
        _items = []
        if self.group:
            for _item_group in self.group:
                if _item_group:
                    _items.append(_item_group.to_dict())
            _dict['group'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_login
        if self.last_login:
            _dict['last_login'] = self.last_login.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_time
        if self.modified_time:
            _dict['modified_time'] = self.modified_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "address_book": [CustomerAddress.from_dict(_item) for _item in obj["address_book"]] if obj.get("address_book") is not None else None,
            "birth_day": A2CDateTime.from_dict(obj["birth_day"]) if obj.get("birth_day") is not None else None,
            "company": obj.get("company"),
            "created_time": A2CDateTime.from_dict(obj["created_time"]) if obj.get("created_time") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "email": obj.get("email"),
            "fax": obj.get("fax"),
            "first_name": obj.get("first_name"),
            "gender": obj.get("gender"),
            "group": [CustomerGroup.from_dict(_item) for _item in obj["group"]] if obj.get("group") is not None else None,
            "id": obj.get("id"),
            "ip_address": obj.get("ip_address"),
            "lang_id": obj.get("lang_id"),
            "last_login": A2CDateTime.from_dict(obj["last_login"]) if obj.get("last_login") is not None else None,
            "last_name": obj.get("last_name"),
            "last_order_id": obj.get("last_order_id"),
            "login": obj.get("login"),
            "modified_time": A2CDateTime.from_dict(obj["modified_time"]) if obj.get("modified_time") is not None else None,
            "news_letter_subscription": obj.get("news_letter_subscription"),
            "orders_count": obj.get("orders_count"),
            "phone": obj.get("phone"),
            "status": obj.get("status"),
            "stores_ids": obj.get("stores_ids"),
            "website": obj.get("website")
        })
        return _obj



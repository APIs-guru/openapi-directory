# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.product_variant_add_attributes_inner import ProductVariantAddAttributesInner
from typing import Optional, Set
from typing_extensions import Self

class ProductVariantAdd(BaseModel):
    """
    ProductVariantAdd
    """ # noqa: E501
    attributes: Optional[List[ProductVariantAddAttributesInner]] = Field(default=None, description="Defines variant's attributes list")
    available_for_sale: Optional[StrictBool] = Field(default=True, description="Specifies the set of visible/invisible product's variants for sale")
    available_for_view: Optional[StrictBool] = Field(default=True, description="Specifies the set of visible/invisible product's variants for users")
    barcode: Optional[StrictStr] = Field(default=None, description="A barcode is a unique code composed of numbers used as a product identifier.")
    clear_cache: Optional[StrictBool] = Field(default=True, description="Is cache clear required")
    cost_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's cost price")
    country_of_origin: Optional[StrictStr] = Field(default=None, description="The country where the inventory item was made")
    created_at: Optional[StrictStr] = Field(default=None, description="Defines the date of entity creation")
    description: Optional[StrictStr] = Field(default=None, description="Specifies variant's description")
    harmonized_system_code: Optional[StrictStr] = Field(default=None, description="Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's height")
    lang_id: Optional[StrictStr] = Field(default=None, description="Language id")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's length")
    manage_stock: Optional[StrictBool] = Field(default=None, description="Defines inventory tracking for product variant")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Specifies the product variant's manufacturer")
    meta_description: Optional[StrictStr] = Field(default=None, description="Defines unique meta description of a entity")
    meta_keywords: Optional[StrictStr] = Field(default=None, description="Defines unique meta keywords for each entity")
    meta_title: Optional[StrictStr] = Field(default=None, description="Defines unique meta title for each entity")
    model: StrictStr = Field(description="Specifies variant's model that has to be added")
    name: Optional[StrictStr] = Field(default=None, description="Defines variant's name that has to be added")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's variant price")
    product_id: Optional[StrictStr] = Field(default=None, description="Defines product's id where the variant has to be added")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Defines product variant's quantity that has to be added")
    short_description: Optional[StrictStr] = Field(default=None, description="Defines short description")
    sku: Optional[StrictStr] = Field(default=None, description="Defines variant's sku that has to be added")
    special_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies variant's model that has to be added")
    sprice_create: Optional[StrictStr] = Field(default=None, description="Defines the date of special price creation")
    sprice_expire: Optional[StrictStr] = Field(default=None, description="Defines the term of special price offer duration")
    sprice_modified: Optional[StrictStr] = Field(default=None, description="Defines the date of special price modification")
    store_id: Optional[StrictStr] = Field(default=None, description="Add variants specified by store id")
    tax_class_id: Optional[StrictStr] = Field(default=None, description="Defines tax classes where entity has to be added")
    taxable: Optional[StrictBool] = Field(default=True, description="Specifies whether a tax is charged")
    url: Optional[StrictStr] = Field(default=None, description="Defines unique product variant's URL")
    warehouse_id: Optional[StrictStr] = Field(default=None, description="This parameter is used for selecting a warehouse where you need to set/modify a product quantity.")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Weight")
    weight_unit: Optional[StrictStr] = Field(default=None, description="Weight Unit")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's width")
    __properties: ClassVar[List[str]] = ["attributes", "available_for_sale", "available_for_view", "barcode", "clear_cache", "cost_price", "country_of_origin", "created_at", "description", "harmonized_system_code", "height", "lang_id", "length", "manage_stock", "manufacturer", "meta_description", "meta_keywords", "meta_title", "model", "name", "price", "product_id", "quantity", "short_description", "sku", "special_price", "sprice_create", "sprice_expire", "sprice_modified", "store_id", "tax_class_id", "taxable", "url", "warehouse_id", "weight", "weight_unit", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductVariantAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductVariantAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": [ProductVariantAddAttributesInner.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "available_for_sale": obj.get("available_for_sale") if obj.get("available_for_sale") is not None else True,
            "available_for_view": obj.get("available_for_view") if obj.get("available_for_view") is not None else True,
            "barcode": obj.get("barcode"),
            "clear_cache": obj.get("clear_cache") if obj.get("clear_cache") is not None else True,
            "cost_price": obj.get("cost_price"),
            "country_of_origin": obj.get("country_of_origin"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "harmonized_system_code": obj.get("harmonized_system_code"),
            "height": obj.get("height"),
            "lang_id": obj.get("lang_id"),
            "length": obj.get("length"),
            "manage_stock": obj.get("manage_stock"),
            "manufacturer": obj.get("manufacturer"),
            "meta_description": obj.get("meta_description"),
            "meta_keywords": obj.get("meta_keywords"),
            "meta_title": obj.get("meta_title"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "price": obj.get("price"),
            "product_id": obj.get("product_id"),
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else 0,
            "short_description": obj.get("short_description"),
            "sku": obj.get("sku"),
            "special_price": obj.get("special_price"),
            "sprice_create": obj.get("sprice_create"),
            "sprice_expire": obj.get("sprice_expire"),
            "sprice_modified": obj.get("sprice_modified"),
            "store_id": obj.get("store_id"),
            "tax_class_id": obj.get("tax_class_id"),
            "taxable": obj.get("taxable") if obj.get("taxable") is not None else True,
            "url": obj.get("url"),
            "warehouse_id": obj.get("warehouse_id"),
            "weight": obj.get("weight") if obj.get("weight") is not None else 0,
            "weight_unit": obj.get("weight_unit"),
            "width": obj.get("width")
        })
        return _obj



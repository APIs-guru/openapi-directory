# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.a2_c_date_time import A2CDateTime
from openapi_client.models.product_review_rating import ProductReviewRating
from typing import Optional, Set
from typing_extensions import Self

class ProductReview(BaseModel):
    """
    ProductReview
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    nick_name: Optional[StrictStr] = None
    product_id: Optional[StrictStr] = None
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    ratings: Optional[List[ProductReviewRating]] = None
    status: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "created_time", "custom_fields", "customer_id", "email", "id", "message", "nick_name", "product_id", "rating", "ratings", "status", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductReview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_time
        if self.created_time:
            _dict['created_time'] = self.created_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ratings (list)
        _items = []
        if self.ratings:
            for _item_ratings in self.ratings:
                if _item_ratings:
                    _items.append(_item_ratings.to_dict())
            _dict['ratings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductReview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "created_time": A2CDateTime.from_dict(obj["created_time"]) if obj.get("created_time") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "customer_id": obj.get("customer_id"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "nick_name": obj.get("nick_name"),
            "product_id": obj.get("product_id"),
            "rating": obj.get("rating"),
            "ratings": [ProductReviewRating.from_dict(_item) for _item in obj["ratings"]] if obj.get("ratings") is not None else None,
            "status": obj.get("status"),
            "summary": obj.get("summary")
        })
        return _obj



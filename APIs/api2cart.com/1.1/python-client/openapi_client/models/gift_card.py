# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.coupon_history import CouponHistory
from typing import Optional, Set
from typing_extensions import Self

class GiftCard(BaseModel):
    """
    GiftCard
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    avail_to: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    currency_code: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    free_product_ids: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    initial_amount: Optional[Union[StrictFloat, StrictInt]] = None
    issuer_email: Optional[StrictStr] = None
    issuer_name: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    recipient_email: Optional[StrictStr] = None
    recipient_name: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    usage_history: Optional[List[CouponHistory]] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "amount", "avail_to", "code", "created_at", "currency_code", "custom_fields", "free_product_ids", "id", "initial_amount", "issuer_email", "issuer_name", "message", "name", "recipient_email", "recipient_name", "status", "type", "usage_history"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GiftCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in usage_history (list)
        _items = []
        if self.usage_history:
            for _item_usage_history in self.usage_history:
                if _item_usage_history:
                    _items.append(_item_usage_history.to_dict())
            _dict['usage_history'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GiftCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "amount": obj.get("amount"),
            "avail_to": obj.get("avail_to"),
            "code": obj.get("code"),
            "created_at": obj.get("created_at"),
            "currency_code": obj.get("currency_code"),
            "custom_fields": obj.get("custom_fields"),
            "free_product_ids": obj.get("free_product_ids"),
            "id": obj.get("id"),
            "initial_amount": obj.get("initial_amount"),
            "issuer_email": obj.get("issuer_email"),
            "issuer_name": obj.get("issuer_name"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "recipient_email": obj.get("recipient_email"),
            "recipient_name": obj.get("recipient_name"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "usage_history": [CouponHistory.from_dict(_item) for _item in obj["usage_history"]] if obj.get("usage_history") is not None else None
        })
        return _obj



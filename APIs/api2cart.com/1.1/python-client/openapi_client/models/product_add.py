# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.product_add_files_inner import ProductAddFilesInner
from openapi_client.models.product_add_group_prices_inner import ProductAddGroupPricesInner
from openapi_client.models.product_add_seller_profiles import ProductAddSellerProfiles
from openapi_client.models.product_add_shipping_details_inner import ProductAddShippingDetailsInner
from openapi_client.models.product_add_tier_prices_inner import ProductAddTierPricesInner
from typing import Optional, Set
from typing_extensions import Self

class ProductAdd(BaseModel):
    """
    ProductAdd
    """ # noqa: E501
    attribute_name: Optional[StrictStr] = Field(default=None, description="Defines product’s attribute name separated with a comma in Magento")
    attribute_set_name: Optional[StrictStr] = Field(default='Default', description="Defines product’s attribute set name in Magento")
    avail_from: Optional[StrictStr] = Field(default=None, description="Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.")
    available_for_sale: Optional[StrictBool] = Field(default=True, description="Specifies the set of visible/invisible products for sale")
    available_for_view: Optional[StrictBool] = Field(default=True, description="Specifies the set of visible/invisible products for users")
    backorder_status: Optional[StrictStr] = Field(default=None, description="Set backorder status")
    barcode: Optional[StrictStr] = Field(default=None, description="A barcode is a unique code composed of numbers used as a product identifier.")
    best_offer: Optional[List[StrictStr]] = Field(default=None, description="The price at which Best Offers are automatically accepted.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>")
    brand_name: Optional[StrictStr] = Field(default=None, description="Retrieves brands specified by brand name")
    categories_ids: Optional[StrictStr] = Field(default=None, description="Defines product add that is specified by comma-separated categories id")
    category_id: Optional[StrictStr] = Field(default=None, description="Defines product add that is specified by category id")
    clear_cache: Optional[StrictBool] = Field(default=True, description="Is cache clear required")
    condition: Optional[StrictStr] = Field(default=None, description="The human-readable label for the condition (e.g., \"New\").")
    cost_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's cost price")
    country_of_origin: Optional[StrictStr] = Field(default=None, description="The country where the inventory item was made")
    created_at: Optional[StrictStr] = Field(default=None, description="Defines the date of entity creation")
    description: StrictStr = Field(description="Defines product's description that has to be added")
    downloadable: Optional[StrictBool] = Field(default=False, description="Defines whether the product is downloadable")
    ean: Optional[StrictStr] = Field(default=None, description="European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.")
    files: Optional[List[ProductAddFilesInner]] = Field(default=None, description="File Url")
    group_prices: Optional[List[ProductAddGroupPricesInner]] = Field(default=None, description="Defines product's group prices")
    gtin: Optional[StrictStr] = Field(default=None, description="Global Trade Item Number. An GTIN is an identifier for trade items.")
    harmonized_system_code: Optional[StrictStr] = Field(default=None, description="Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's height")
    image_name: Optional[StrictStr] = Field(default=None, description="Defines image's name")
    image_url: Optional[StrictStr] = Field(default=None, description="Image Url")
    isbn: Optional[StrictStr] = Field(default=None, description="International Standard Book Number. An ISBN is a unique identifier for books.")
    lang_id: Optional[StrictStr] = Field(default=None, description="Language id")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's length")
    listing_duration: Optional[StrictStr] = Field(default=None, description="Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.")
    listing_type: Optional[StrictStr] = Field(default='FixedPrice', description="Indicates the selling format of the marketplace listing.")
    manage_stock: Optional[StrictBool] = Field(default=None, description="Defines inventory tracking for product")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Defines product's manufacturer")
    marketplace_item_properties: Optional[StrictStr] = Field(default='false', description="String containing the JSON representation of the supplied data")
    meta_description: Optional[StrictStr] = Field(default=None, description="Defines unique meta description of a entity")
    meta_keywords: Optional[StrictStr] = Field(default=None, description="Defines unique meta keywords for each entity")
    meta_title: Optional[StrictStr] = Field(default=None, description="Defines unique meta title for each entity")
    model: StrictStr = Field(description="Defines product's model that has to be added")
    mpn: Optional[StrictStr] = Field(default=None, description="Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.")
    name: StrictStr = Field(description="Defines product's name that has to be added")
    old_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's old price")
    ordered_count: Optional[StrictInt] = Field(default=0, description="Defines how many times the product was ordered")
    package_details: Optional[List[StrictStr]] = Field(default=None, description="If the seller is subscribed to \"Business Policies\", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>")
    payment_methods: Optional[List[StrictStr]] = Field(default=None, description="Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>")
    paypal_email: Optional[StrictStr] = Field(default=None, description="Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.")
    price: Union[StrictFloat, StrictInt] = Field(description="Defines product's price that has to be added")
    product_class: Optional[StrictStr] = Field(default=None, description="A categorization for the product")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Defines product's quantity that has to be added")
    return_accepted: Optional[StrictBool] = Field(default=None, description="Indicates whether the seller allows the buyer to return the item.")
    sales_tax: Optional[List[StrictStr]] = Field(default=None, description="Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>")
    search_keywords: Optional[StrictStr] = Field(default=None, description="Defines unique search keywords")
    seller_profiles: Optional[ProductAddSellerProfiles] = None
    seo_url: Optional[StrictStr] = Field(default=None, description="Defines unique URL for SEO")
    shipping_details: Optional[List[ProductAddShippingDetailsInner]] = Field(default=None, description="The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>")
    shipping_template_id: Optional[StrictInt] = Field(default=0, description="The numeric ID of the shipping template associated with the products in Etsy.")
    short_description: Optional[StrictStr] = Field(default=None, description="Defines short description")
    sku: Optional[StrictStr] = Field(default=None, description="Defines product's sku that has to be added")
    special_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's model that has to be added")
    specifics: Optional[List[StrictStr]] = Field(default=None, description="An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         <hr>         <div style=\"font-style:normal\">Param structure:           <div style=\"margin-left: 2%;\">             <code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">               specifics[int][<b>name</b>] = string</br>               specifics[int][<b>value</b>] = string</br>             </code>           </div>         </div>")
    sprice_create: Optional[StrictStr] = Field(default=None, description="Defines the date of special price creation")
    sprice_expire: Optional[StrictStr] = Field(default=None, description="Defines the term of special price offer duration")
    sprice_modified: Optional[StrictStr] = Field(default=None, description="Defines the date of special price modification")
    status: Optional[StrictStr] = Field(default=None, description="Defines product's status")
    store_id: Optional[StrictStr] = Field(default=None, description="Store Id")
    stores_ids: Optional[StrictStr] = Field(default='0', description="Assign product to the stores that is specified by comma-separated stores' id")
    tags: Optional[StrictStr] = Field(default=None, description="Product tags")
    tax_class_id: Optional[StrictStr] = Field(default=None, description="Defines tax classes where entity has to be added")
    taxable: Optional[StrictBool] = Field(default=True, description="Specifies whether a tax is charged")
    tier_prices: Optional[List[ProductAddTierPricesInner]] = Field(default=None, description="Defines product's tier prices")
    type: Optional[StrictStr] = Field(default='simple', description="Defines product's type")
    upc: Optional[StrictStr] = Field(default=None, description="Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.")
    url: Optional[StrictStr] = Field(default=None, description="Defines unique product's URL")
    viewed_count: Optional[StrictInt] = Field(default=0, description="Specifies the number of product's reviews")
    visible: Optional[StrictStr] = Field(default=None, description="Set visibility status")
    warehouse_id: Optional[StrictStr] = Field(default=None, description="This parameter is used for selecting a warehouse where you need to set/modify a product quantity.")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Weight")
    weight_unit: Optional[StrictStr] = Field(default=None, description="Weight Unit")
    wholesale_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's sale price")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's width")
    __properties: ClassVar[List[str]] = ["attribute_name", "attribute_set_name", "avail_from", "available_for_sale", "available_for_view", "backorder_status", "barcode", "best_offer", "brand_name", "categories_ids", "category_id", "clear_cache", "condition", "cost_price", "country_of_origin", "created_at", "description", "downloadable", "ean", "files", "group_prices", "gtin", "harmonized_system_code", "height", "image_name", "image_url", "isbn", "lang_id", "length", "listing_duration", "listing_type", "manage_stock", "manufacturer", "marketplace_item_properties", "meta_description", "meta_keywords", "meta_title", "model", "mpn", "name", "old_price", "ordered_count", "package_details", "payment_methods", "paypal_email", "price", "product_class", "quantity", "return_accepted", "sales_tax", "search_keywords", "seller_profiles", "seo_url", "shipping_details", "shipping_template_id", "short_description", "sku", "special_price", "specifics", "sprice_create", "sprice_expire", "sprice_modified", "status", "store_id", "stores_ids", "tags", "tax_class_id", "taxable", "tier_prices", "type", "upc", "url", "viewed_count", "visible", "warehouse_id", "weight", "weight_unit", "wholesale_price", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_prices (list)
        _items = []
        if self.group_prices:
            for _item_group_prices in self.group_prices:
                if _item_group_prices:
                    _items.append(_item_group_prices.to_dict())
            _dict['group_prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of seller_profiles
        if self.seller_profiles:
            _dict['seller_profiles'] = self.seller_profiles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_details (list)
        _items = []
        if self.shipping_details:
            for _item_shipping_details in self.shipping_details:
                if _item_shipping_details:
                    _items.append(_item_shipping_details.to_dict())
            _dict['shipping_details'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tier_prices (list)
        _items = []
        if self.tier_prices:
            for _item_tier_prices in self.tier_prices:
                if _item_tier_prices:
                    _items.append(_item_tier_prices.to_dict())
            _dict['tier_prices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attribute_name": obj.get("attribute_name"),
            "attribute_set_name": obj.get("attribute_set_name") if obj.get("attribute_set_name") is not None else 'Default',
            "avail_from": obj.get("avail_from"),
            "available_for_sale": obj.get("available_for_sale") if obj.get("available_for_sale") is not None else True,
            "available_for_view": obj.get("available_for_view") if obj.get("available_for_view") is not None else True,
            "backorder_status": obj.get("backorder_status"),
            "barcode": obj.get("barcode"),
            "best_offer": obj.get("best_offer"),
            "brand_name": obj.get("brand_name"),
            "categories_ids": obj.get("categories_ids"),
            "category_id": obj.get("category_id"),
            "clear_cache": obj.get("clear_cache") if obj.get("clear_cache") is not None else True,
            "condition": obj.get("condition"),
            "cost_price": obj.get("cost_price"),
            "country_of_origin": obj.get("country_of_origin"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "downloadable": obj.get("downloadable") if obj.get("downloadable") is not None else False,
            "ean": obj.get("ean"),
            "files": [ProductAddFilesInner.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "group_prices": [ProductAddGroupPricesInner.from_dict(_item) for _item in obj["group_prices"]] if obj.get("group_prices") is not None else None,
            "gtin": obj.get("gtin"),
            "harmonized_system_code": obj.get("harmonized_system_code"),
            "height": obj.get("height"),
            "image_name": obj.get("image_name"),
            "image_url": obj.get("image_url"),
            "isbn": obj.get("isbn"),
            "lang_id": obj.get("lang_id"),
            "length": obj.get("length"),
            "listing_duration": obj.get("listing_duration"),
            "listing_type": obj.get("listing_type") if obj.get("listing_type") is not None else 'FixedPrice',
            "manage_stock": obj.get("manage_stock"),
            "manufacturer": obj.get("manufacturer"),
            "marketplace_item_properties": obj.get("marketplace_item_properties") if obj.get("marketplace_item_properties") is not None else 'false',
            "meta_description": obj.get("meta_description"),
            "meta_keywords": obj.get("meta_keywords"),
            "meta_title": obj.get("meta_title"),
            "model": obj.get("model"),
            "mpn": obj.get("mpn"),
            "name": obj.get("name"),
            "old_price": obj.get("old_price"),
            "ordered_count": obj.get("ordered_count") if obj.get("ordered_count") is not None else 0,
            "package_details": obj.get("package_details"),
            "payment_methods": obj.get("payment_methods"),
            "paypal_email": obj.get("paypal_email"),
            "price": obj.get("price"),
            "product_class": obj.get("product_class"),
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else 0,
            "return_accepted": obj.get("return_accepted"),
            "sales_tax": obj.get("sales_tax"),
            "search_keywords": obj.get("search_keywords"),
            "seller_profiles": ProductAddSellerProfiles.from_dict(obj["seller_profiles"]) if obj.get("seller_profiles") is not None else None,
            "seo_url": obj.get("seo_url"),
            "shipping_details": [ProductAddShippingDetailsInner.from_dict(_item) for _item in obj["shipping_details"]] if obj.get("shipping_details") is not None else None,
            "shipping_template_id": obj.get("shipping_template_id") if obj.get("shipping_template_id") is not None else 0,
            "short_description": obj.get("short_description"),
            "sku": obj.get("sku"),
            "special_price": obj.get("special_price"),
            "specifics": obj.get("specifics"),
            "sprice_create": obj.get("sprice_create"),
            "sprice_expire": obj.get("sprice_expire"),
            "sprice_modified": obj.get("sprice_modified"),
            "status": obj.get("status"),
            "store_id": obj.get("store_id"),
            "stores_ids": obj.get("stores_ids") if obj.get("stores_ids") is not None else '0',
            "tags": obj.get("tags"),
            "tax_class_id": obj.get("tax_class_id"),
            "taxable": obj.get("taxable") if obj.get("taxable") is not None else True,
            "tier_prices": [ProductAddTierPricesInner.from_dict(_item) for _item in obj["tier_prices"]] if obj.get("tier_prices") is not None else None,
            "type": obj.get("type") if obj.get("type") is not None else 'simple',
            "upc": obj.get("upc"),
            "url": obj.get("url"),
            "viewed_count": obj.get("viewed_count") if obj.get("viewed_count") is not None else 0,
            "visible": obj.get("visible"),
            "warehouse_id": obj.get("warehouse_id"),
            "weight": obj.get("weight") if obj.get("weight") is not None else 0,
            "weight_unit": obj.get("weight_unit"),
            "wholesale_price": obj.get("wholesale_price"),
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customer_update_address_inner import CustomerUpdateAddressInner
from typing import Optional, Set
from typing_extensions import Self

class CustomerUpdate(BaseModel):
    """
    CustomerUpdate
    """ # noqa: E501
    address: Optional[List[CustomerUpdateAddressInner]] = None
    email: Optional[StrictStr] = Field(default=None, description="Defines customer's email")
    first_name: Optional[StrictStr] = Field(default=None, description="Defines customer's first name")
    group_id: Optional[StrictStr] = Field(default=None, description="Customer group_id")
    group_ids: Optional[StrictStr] = Field(default=None, description="Groups that will be assigned to a customer")
    id: Optional[StrictStr] = Field(default=None, description="Entity id")
    last_name: Optional[StrictStr] = Field(default=None, description="Defines customer's last name")
    news_letter_subscription: Optional[StrictBool] = Field(default=None, description="Defines whether the newsletter subscription is available for the user")
    phone: Optional[StrictStr] = Field(default=None, description="Defines customer's phone number")
    tags: Optional[StrictStr] = Field(default=None, description="Customer tags")
    __properties: ClassVar[List[str]] = ["address", "email", "first_name", "group_id", "group_ids", "id", "last_name", "news_letter_subscription", "phone", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address (list)
        _items = []
        if self.address:
            for _item_address in self.address:
                if _item_address:
                    _items.append(_item_address.to_dict())
            _dict['address'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": [CustomerUpdateAddressInner.from_dict(_item) for _item in obj["address"]] if obj.get("address") is not None else None,
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "group_id": obj.get("group_id"),
            "group_ids": obj.get("group_ids"),
            "id": obj.get("id"),
            "last_name": obj.get("last_name"),
            "news_letter_subscription": obj.get("news_letter_subscription"),
            "phone": obj.get("phone"),
            "tags": obj.get("tags")
        })
        return _obj



# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomerAddAddressInner(BaseModel):
    """
    CustomerAddAddressInner
    """ # noqa: E501
    address_book_address1: Optional[StrictStr] = Field(default=None, description="Specifies customer's first address in the address book")
    address_book_address2: Optional[StrictStr] = Field(default=None, description="Specifies customer's second address in the address book")
    address_book_city: Optional[StrictStr] = Field(default=None, description="Specifies customer's city in the address book")
    address_book_company: Optional[StrictStr] = Field(default=None, description="Specifies customer's company name in the address book")
    address_book_country: Optional[StrictStr] = Field(default=None, description="ISO code or name of country")
    address_book_default: Optional[StrictBool] = Field(default=None, description="Defines whether the address is used by default")
    address_book_fax: Optional[StrictStr] = Field(default=None, description="Specifies customer's fax in the address book")
    address_book_first_name: Optional[StrictStr] = Field(default=None, description="Specifies customer's first name in the address book")
    address_book_gender: Optional[StrictStr] = Field(default=None, description="Specifies customer's gender")
    address_book_identification_number: Optional[StrictStr] = Field(default=None, description="The national ID card number of this person, or a unique tax identification number.")
    address_book_last_name: Optional[StrictStr] = Field(default=None, description="Specifies customer's last name in the address book")
    address_book_phone: Optional[StrictStr] = Field(default=None, description="Specifies customer's phone number in the address book")
    address_book_phone_mobile: Optional[StrictStr] = Field(default=None, description="Specifies customer's mobile phone number in the address book")
    address_book_postcode: Optional[StrictStr] = Field(default=None, description="Specifies customer's postcode")
    address_book_region: Optional[StrictStr] = Field(default=None, description="Specifies customer's region")
    address_book_state: Optional[StrictStr] = Field(default=None, description="ISO code or name of state.")
    address_book_tax_id: Optional[StrictStr] = Field(default=None, description="Add Tax Id")
    address_book_type: Optional[StrictStr] = Field(default=None, description="Specifies customer's address type")
    address_book_website: Optional[StrictStr] = Field(default=None, description="Specifies customer's website in the address book")
    __properties: ClassVar[List[str]] = ["address_book_address1", "address_book_address2", "address_book_city", "address_book_company", "address_book_country", "address_book_default", "address_book_fax", "address_book_first_name", "address_book_gender", "address_book_identification_number", "address_book_last_name", "address_book_phone", "address_book_phone_mobile", "address_book_postcode", "address_book_region", "address_book_state", "address_book_tax_id", "address_book_type", "address_book_website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerAddAddressInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerAddAddressInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address_book_address1": obj.get("address_book_address1"),
            "address_book_address2": obj.get("address_book_address2"),
            "address_book_city": obj.get("address_book_city"),
            "address_book_company": obj.get("address_book_company"),
            "address_book_country": obj.get("address_book_country"),
            "address_book_default": obj.get("address_book_default"),
            "address_book_fax": obj.get("address_book_fax"),
            "address_book_first_name": obj.get("address_book_first_name"),
            "address_book_gender": obj.get("address_book_gender"),
            "address_book_identification_number": obj.get("address_book_identification_number"),
            "address_book_last_name": obj.get("address_book_last_name"),
            "address_book_phone": obj.get("address_book_phone"),
            "address_book_phone_mobile": obj.get("address_book_phone_mobile"),
            "address_book_postcode": obj.get("address_book_postcode"),
            "address_book_region": obj.get("address_book_region"),
            "address_book_state": obj.get("address_book_state"),
            "address_book_tax_id": obj.get("address_book_tax_id"),
            "address_book_type": obj.get("address_book_type"),
            "address_book_website": obj.get("address_book_website")
        })
        return _obj



# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_shipment_add_items_inner import OrderShipmentAddItemsInner
from openapi_client.models.order_shipment_add_tracking_numbers_inner import OrderShipmentAddTrackingNumbersInner
from typing import Optional, Set
from typing_extensions import Self

class OrderShipmentAdd(BaseModel):
    """
    OrderShipmentAdd
    """ # noqa: E501
    adjust_stock: Optional[StrictBool] = Field(default=False, description="This parameter is used for adjust stock.")
    enable_cache: Optional[StrictBool] = Field(default=False, description="If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.")
    is_shipped: Optional[StrictBool] = Field(default=True, description="Defines shipment's status")
    items: Optional[List[OrderShipmentAddItemsInner]] = Field(default=None, description="Defines items in the order that will be shipped")
    order_id: Optional[StrictStr] = Field(default=None, description="Defines the order for which the shipment will be created")
    send_notifications: Optional[StrictBool] = Field(default=False, description="Send notifications to customer after shipment was created")
    shipment_provider: Optional[StrictStr] = Field(default=None, description="Defines company name that provide tracking of shipment")
    shipping_method: Optional[StrictStr] = Field(default=None, description="Define shipping method")
    store_id: Optional[StrictStr] = Field(default=None, description="Store Id")
    tracking_link: Optional[StrictStr] = Field(default=None, description="Defines custom tracking link")
    tracking_numbers: Optional[List[OrderShipmentAddTrackingNumbersInner]] = Field(default=None, description="Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"https://api2cart.com/docs/#/cart/CartInfo\">cart.info</a > method")
    warehouse_id: Optional[StrictStr] = Field(default=None, description="This parameter is used for selecting a warehouse where you need to set/modify a product quantity.")
    __properties: ClassVar[List[str]] = ["adjust_stock", "enable_cache", "is_shipped", "items", "order_id", "send_notifications", "shipment_provider", "shipping_method", "store_id", "tracking_link", "tracking_numbers", "warehouse_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderShipmentAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tracking_numbers (list)
        _items = []
        if self.tracking_numbers:
            for _item_tracking_numbers in self.tracking_numbers:
                if _item_tracking_numbers:
                    _items.append(_item_tracking_numbers.to_dict())
            _dict['tracking_numbers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderShipmentAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjust_stock": obj.get("adjust_stock") if obj.get("adjust_stock") is not None else False,
            "enable_cache": obj.get("enable_cache") if obj.get("enable_cache") is not None else False,
            "is_shipped": obj.get("is_shipped") if obj.get("is_shipped") is not None else True,
            "items": [OrderShipmentAddItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "order_id": obj.get("order_id"),
            "send_notifications": obj.get("send_notifications") if obj.get("send_notifications") is not None else False,
            "shipment_provider": obj.get("shipment_provider"),
            "shipping_method": obj.get("shipping_method"),
            "store_id": obj.get("store_id"),
            "tracking_link": obj.get("tracking_link"),
            "tracking_numbers": [OrderShipmentAddTrackingNumbersInner.from_dict(_item) for _item in obj["tracking_numbers"]] if obj.get("tracking_numbers") is not None else None,
            "warehouse_id": obj.get("warehouse_id")
        })
        return _obj



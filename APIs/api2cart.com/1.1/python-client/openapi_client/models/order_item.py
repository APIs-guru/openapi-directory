# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.order_item_option import OrderItemOption
from typing import Optional, Set
from typing_extensions import Self

class OrderItem(BaseModel):
    """
    OrderItem
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    barcode: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    discount_amount: Optional[Union[StrictFloat, StrictInt]] = None
    model: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    options: Optional[List[OrderItemOption]] = None
    order_product_id: Optional[StrictStr] = None
    parent_order_product_id: Optional[StrictStr] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    price_inc_tax: Optional[Union[StrictFloat, StrictInt]] = None
    product_id: Optional[StrictStr] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    tax_percent: Optional[Union[StrictFloat, StrictInt]] = None
    tax_value: Optional[Union[StrictFloat, StrictInt]] = None
    tax_value_after_discount: Optional[Union[StrictFloat, StrictInt]] = None
    total_price: Optional[Union[StrictFloat, StrictInt]] = None
    variant_id: Optional[StrictStr] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    weight_unit: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "barcode", "custom_fields", "discount_amount", "model", "name", "options", "order_product_id", "parent_order_product_id", "price", "price_inc_tax", "product_id", "quantity", "tax_percent", "tax_value", "tax_value_after_discount", "total_price", "variant_id", "weight", "weight_unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item_options in self.options:
                if _item_options:
                    _items.append(_item_options.to_dict())
            _dict['options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "barcode": obj.get("barcode"),
            "custom_fields": obj.get("custom_fields"),
            "discount_amount": obj.get("discount_amount"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "options": [OrderItemOption.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "order_product_id": obj.get("order_product_id"),
            "parent_order_product_id": obj.get("parent_order_product_id"),
            "price": obj.get("price"),
            "price_inc_tax": obj.get("price_inc_tax"),
            "product_id": obj.get("product_id"),
            "quantity": obj.get("quantity"),
            "tax_percent": obj.get("tax_percent"),
            "tax_value": obj.get("tax_value"),
            "tax_value_after_discount": obj.get("tax_value_after_discount"),
            "total_price": obj.get("total_price"),
            "variant_id": obj.get("variant_id"),
            "weight": obj.get("weight"),
            "weight_unit": obj.get("weight_unit")
        })
        return _obj



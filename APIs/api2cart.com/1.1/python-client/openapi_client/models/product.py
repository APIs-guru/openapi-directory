# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.a2_c_date_time import A2CDateTime
from openapi_client.models.discount import Discount
from openapi_client.models.image import Image
from openapi_client.models.product_advanced_price import ProductAdvancedPrice
from openapi_client.models.product_group_item import ProductGroupItem
from openapi_client.models.product_group_price import ProductGroupPrice
from openapi_client.models.product_inventory import ProductInventory
from openapi_client.models.product_option import ProductOption
from openapi_client.models.product_tier_price import ProductTierPrice
from openapi_client.models.special_price import SpecialPrice
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    Product
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    advanced_price: Optional[List[ProductAdvancedPrice]] = None
    avail_sale: Optional[StrictBool] = None
    avail_view: Optional[StrictBool] = None
    backorders: Optional[StrictStr] = None
    categories_ids: Optional[List[StrictStr]] = None
    cost_price: Optional[Union[StrictFloat, StrictInt]] = None
    create_at: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = None
    dimensions_unit: Optional[StrictStr] = None
    discounts: Optional[List[Discount]] = None
    group_items: Optional[List[ProductGroupItem]] = None
    group_price: Optional[List[ProductGroupPrice]] = None
    height: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictStr] = None
    images: Optional[List[Image]] = None
    in_stock: Optional[StrictBool] = None
    inventory: Optional[List[ProductInventory]] = None
    is_downloadable: Optional[StrictBool] = None
    is_stock_managed: Optional[StrictBool] = None
    is_virtual: Optional[StrictBool] = None
    length: Optional[Union[StrictFloat, StrictInt]] = None
    manage_stock: Optional[StrictStr] = None
    meta_description: Optional[StrictStr] = None
    meta_keywords: Optional[StrictStr] = None
    meta_title: Optional[StrictStr] = None
    modified_at: Optional[A2CDateTime] = None
    name: Optional[StrictStr] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    product_options: Optional[List[ProductOption]] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    related_products_ids: Optional[List[StrictStr]] = None
    seo_url: Optional[StrictStr] = None
    short_description: Optional[StrictStr] = None
    sort_order: Optional[StrictInt] = None
    special_price: Optional[SpecialPrice] = None
    stores_ids: Optional[List[StrictStr]] = None
    tax_class_id: Optional[StrictStr] = None
    tier_price: Optional[List[ProductTierPrice]] = None
    type: Optional[StrictStr] = None
    u_brand: Optional[StrictStr] = None
    u_brand_id: Optional[StrictStr] = None
    u_model: Optional[StrictStr] = None
    u_mpn: Optional[StrictStr] = None
    u_sku: Optional[StrictStr] = None
    u_upc: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    weight: Optional[Union[StrictFloat, StrictInt]] = None
    weight_unit: Optional[StrictStr] = None
    width: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "advanced_price", "avail_sale", "avail_view", "backorders", "categories_ids", "cost_price", "create_at", "custom_fields", "description", "dimensions_unit", "discounts", "group_items", "group_price", "height", "id", "images", "in_stock", "inventory", "is_downloadable", "is_stock_managed", "is_virtual", "length", "manage_stock", "meta_description", "meta_keywords", "meta_title", "modified_at", "name", "price", "product_options", "quantity", "related_products_ids", "seo_url", "short_description", "sort_order", "special_price", "stores_ids", "tax_class_id", "tier_price", "type", "u_brand", "u_brand_id", "u_model", "u_mpn", "u_sku", "u_upc", "url", "weight", "weight_unit", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_price (list)
        _items = []
        if self.advanced_price:
            for _item_advanced_price in self.advanced_price:
                if _item_advanced_price:
                    _items.append(_item_advanced_price.to_dict())
            _dict['advanced_price'] = _items
        # override the default output from pydantic by calling `to_dict()` of create_at
        if self.create_at:
            _dict['create_at'] = self.create_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_items (list)
        _items = []
        if self.group_items:
            for _item_group_items in self.group_items:
                if _item_group_items:
                    _items.append(_item_group_items.to_dict())
            _dict['group_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_price (list)
        _items = []
        if self.group_price:
            for _item_group_price in self.group_price:
                if _item_group_price:
                    _items.append(_item_group_price.to_dict())
            _dict['group_price'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inventory (list)
        _items = []
        if self.inventory:
            for _item_inventory in self.inventory:
                if _item_inventory:
                    _items.append(_item_inventory.to_dict())
            _dict['inventory'] = _items
        # override the default output from pydantic by calling `to_dict()` of modified_at
        if self.modified_at:
            _dict['modified_at'] = self.modified_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_options (list)
        _items = []
        if self.product_options:
            for _item_product_options in self.product_options:
                if _item_product_options:
                    _items.append(_item_product_options.to_dict())
            _dict['product_options'] = _items
        # override the default output from pydantic by calling `to_dict()` of special_price
        if self.special_price:
            _dict['special_price'] = self.special_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tier_price (list)
        _items = []
        if self.tier_price:
            for _item_tier_price in self.tier_price:
                if _item_tier_price:
                    _items.append(_item_tier_price.to_dict())
            _dict['tier_price'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "advanced_price": [ProductAdvancedPrice.from_dict(_item) for _item in obj["advanced_price"]] if obj.get("advanced_price") is not None else None,
            "avail_sale": obj.get("avail_sale"),
            "avail_view": obj.get("avail_view"),
            "backorders": obj.get("backorders"),
            "categories_ids": obj.get("categories_ids"),
            "cost_price": obj.get("cost_price"),
            "create_at": A2CDateTime.from_dict(obj["create_at"]) if obj.get("create_at") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "dimensions_unit": obj.get("dimensions_unit"),
            "discounts": [Discount.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "group_items": [ProductGroupItem.from_dict(_item) for _item in obj["group_items"]] if obj.get("group_items") is not None else None,
            "group_price": [ProductGroupPrice.from_dict(_item) for _item in obj["group_price"]] if obj.get("group_price") is not None else None,
            "height": obj.get("height"),
            "id": obj.get("id"),
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "in_stock": obj.get("in_stock"),
            "inventory": [ProductInventory.from_dict(_item) for _item in obj["inventory"]] if obj.get("inventory") is not None else None,
            "is_downloadable": obj.get("is_downloadable"),
            "is_stock_managed": obj.get("is_stock_managed"),
            "is_virtual": obj.get("is_virtual"),
            "length": obj.get("length"),
            "manage_stock": obj.get("manage_stock"),
            "meta_description": obj.get("meta_description"),
            "meta_keywords": obj.get("meta_keywords"),
            "meta_title": obj.get("meta_title"),
            "modified_at": A2CDateTime.from_dict(obj["modified_at"]) if obj.get("modified_at") is not None else None,
            "name": obj.get("name"),
            "price": obj.get("price"),
            "product_options": [ProductOption.from_dict(_item) for _item in obj["product_options"]] if obj.get("product_options") is not None else None,
            "quantity": obj.get("quantity"),
            "related_products_ids": obj.get("related_products_ids"),
            "seo_url": obj.get("seo_url"),
            "short_description": obj.get("short_description"),
            "sort_order": obj.get("sort_order"),
            "special_price": SpecialPrice.from_dict(obj["special_price"]) if obj.get("special_price") is not None else None,
            "stores_ids": obj.get("stores_ids"),
            "tax_class_id": obj.get("tax_class_id"),
            "tier_price": [ProductTierPrice.from_dict(_item) for _item in obj["tier_price"]] if obj.get("tier_price") is not None else None,
            "type": obj.get("type"),
            "u_brand": obj.get("u_brand"),
            "u_brand_id": obj.get("u_brand_id"),
            "u_model": obj.get("u_model"),
            "u_mpn": obj.get("u_mpn"),
            "u_sku": obj.get("u_sku"),
            "u_upc": obj.get("u_upc"),
            "url": obj.get("url"),
            "weight": obj.get("weight"),
            "weight_unit": obj.get("weight_unit"),
            "width": obj.get("width")
        })
        return _obj



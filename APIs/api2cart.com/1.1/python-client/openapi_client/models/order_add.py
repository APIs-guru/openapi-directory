# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.order_add_note_attributes_inner import OrderAddNoteAttributesInner
from openapi_client.models.order_add_order_item_inner import OrderAddOrderItemInner
from typing import Optional, Set
from typing_extensions import Self

class OrderAdd(BaseModel):
    """
    OrderAdd
    """ # noqa: E501
    admin_comment: Optional[StrictStr] = Field(default=None, description="Specifies admin's order comment")
    admin_private_comment: Optional[StrictStr] = Field(default=None, description="Specifies private admin's order comment")
    bill_address_1: StrictStr = Field(description="Specifies first billing address")
    bill_address_2: Optional[StrictStr] = Field(default=None, description="Specifies second billing address")
    bill_city: StrictStr = Field(description="Specifies billing city")
    bill_company: Optional[StrictStr] = Field(default=None, description="Specifies billing company")
    bill_country: StrictStr = Field(description="Specifies billing country code")
    bill_fax: Optional[StrictStr] = Field(default=None, description="Specifies billing fax")
    bill_first_name: StrictStr = Field(description="Specifies billing first name")
    bill_last_name: StrictStr = Field(description="Specifies billing last name")
    bill_phone: Optional[StrictStr] = Field(default=None, description="Specifies billing phone")
    bill_postcode: StrictStr = Field(description="Specifies billing postcode")
    bill_state: StrictStr = Field(description="Specifies billing state code")
    channel_id: Optional[StrictStr] = Field(default=None, description="Channel ID")
    clear_cache: Optional[StrictBool] = Field(default=True, description="Is cache clear required")
    comment: Optional[StrictStr] = Field(default=None, description="Specifies order comment")
    coupon_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies order's coupon discount")
    coupons: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="Coupons that will be applied to order")
    create_invoice: Optional[StrictBool] = Field(default=False, description="Defines whether the invoice is created automatically along with the order")
    currency: Optional[StrictStr] = Field(default=None, description="Currency code of order")
    customer_birthday: Optional[StrictStr] = Field(default=None, description="Specifies customer’s birthday")
    customer_email: StrictStr = Field(description="Defines the customer specified by email for whom order has to be created")
    customer_fax: Optional[StrictStr] = Field(default=None, description="Specifies customer’s fax")
    customer_first_name: Optional[StrictStr] = Field(default=None, description="Specifies customer's first name")
    customer_last_name: Optional[StrictStr] = Field(default=None, description="Specifies customer’s last name")
    customer_phone: Optional[StrictStr] = Field(default=None, description="Specifies customer’s phone")
    var_date: Optional[StrictStr] = Field(default=None, description="Specifies an order creation date in format Y-m-d H:i:s", alias="date")
    date_finished: Optional[StrictStr] = Field(default=None, description="Specifies order's  finished date")
    date_modified: Optional[StrictStr] = Field(default=None, description="Specifies order's  modification date")
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies order's discount")
    external_source: Optional[StrictStr] = Field(default=None, description="Identifying the system used to generate the order")
    financial_status: Optional[StrictStr] = Field(default=None, description="Create order with financial status")
    fulfillment_status: Optional[StrictStr] = Field(default=None, description="Create order with fulfillment status")
    gift_certificate_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Discounts for order with gift certificates")
    id: Optional[StrictStr] = Field(default=None, description="Defines order's id")
    inventory_behaviour: Optional[StrictStr] = Field(default='bypass', description="The behaviour to use when updating inventory.<hr><div style=\"font-style:normal\">Values description:<div style=\"margin-left: 2%; padding-top: 2%\"><div style=\"font-size:85%\"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product's </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product's </br> inventory policy.</br></br></div></div></div>")
    note_attributes: Optional[List[OrderAddNoteAttributesInner]] = Field(default=None, description="Defines note attributes")
    order_id: Optional[StrictStr] = Field(default=None, description="Defines the order id if it is supported by the cart")
    order_item: List[OrderAddOrderItemInner]
    order_payment_method: Optional[StrictStr] = Field(default=None, description="Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'")
    order_shipping_method: Optional[StrictStr] = Field(default=None, description="Defines order shipping method")
    order_status: StrictStr = Field(description="Defines order status.")
    prices_inc_tax: Optional[StrictBool] = Field(default=False, description="Indicates whether prices and subtotal includes tax.")
    send_admin_notifications: Optional[StrictBool] = Field(default=False, description="Notify admin when new order was created.")
    send_notifications: Optional[StrictBool] = Field(default=False, description="Send notifications to customer after order was created")
    shipp_address_1: Optional[StrictStr] = Field(default=None, description="Specifies first shipping address")
    shipp_address_2: Optional[StrictStr] = Field(default=None, description="Specifies second address line of a shipping street address")
    shipp_city: Optional[StrictStr] = Field(default=None, description="Specifies shipping city")
    shipp_company: Optional[StrictStr] = Field(default=None, description="Specifies shipping company")
    shipp_country: Optional[StrictStr] = Field(default=None, description="Specifies shipping country code")
    shipp_fax: Optional[StrictStr] = Field(default=None, description="Specifies shipping fax")
    shipp_first_name: Optional[StrictStr] = Field(default=None, description="Specifies shipping first name")
    shipp_last_name: Optional[StrictStr] = Field(default=None, description="Specifies shipping last name")
    shipp_phone: Optional[StrictStr] = Field(default=None, description="Specifies shipping phone")
    shipp_postcode: Optional[StrictStr] = Field(default=None, description="Specifies shipping postcode")
    shipp_state: Optional[StrictStr] = Field(default=None, description="Specifies shipping state code")
    shipping_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="Specifies order's shipping price")
    shipping_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies order's shipping price tax")
    store_id: Optional[StrictStr] = Field(default=None, description="Defines store id where the order should be assigned")
    subtotal_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts")
    tags: Optional[StrictStr] = Field(default=None, description="Order tags")
    tax_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="The value of tax cost for order")
    total_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines total paid amount for the order")
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines order's total price")
    total_weight: Optional[StrictInt] = Field(default=None, description="Defines the sum of all line item weights in grams for the order")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Payment transaction id")
    __properties: ClassVar[List[str]] = ["admin_comment", "admin_private_comment", "bill_address_1", "bill_address_2", "bill_city", "bill_company", "bill_country", "bill_fax", "bill_first_name", "bill_last_name", "bill_phone", "bill_postcode", "bill_state", "channel_id", "clear_cache", "comment", "coupon_discount", "coupons", "create_invoice", "currency", "customer_birthday", "customer_email", "customer_fax", "customer_first_name", "customer_last_name", "customer_phone", "date", "date_finished", "date_modified", "discount", "external_source", "financial_status", "fulfillment_status", "gift_certificate_discount", "id", "inventory_behaviour", "note_attributes", "order_id", "order_item", "order_payment_method", "order_shipping_method", "order_status", "prices_inc_tax", "send_admin_notifications", "send_notifications", "shipp_address_1", "shipp_address_2", "shipp_city", "shipp_company", "shipp_country", "shipp_fax", "shipp_first_name", "shipp_last_name", "shipp_phone", "shipp_postcode", "shipp_state", "shipping_price", "shipping_tax", "store_id", "subtotal_price", "tags", "tax_price", "total_paid", "total_price", "total_weight", "transaction_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in note_attributes (list)
        _items = []
        if self.note_attributes:
            for _item_note_attributes in self.note_attributes:
                if _item_note_attributes:
                    _items.append(_item_note_attributes.to_dict())
            _dict['note_attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_item (list)
        _items = []
        if self.order_item:
            for _item_order_item in self.order_item:
                if _item_order_item:
                    _items.append(_item_order_item.to_dict())
            _dict['order_item'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admin_comment": obj.get("admin_comment"),
            "admin_private_comment": obj.get("admin_private_comment"),
            "bill_address_1": obj.get("bill_address_1"),
            "bill_address_2": obj.get("bill_address_2"),
            "bill_city": obj.get("bill_city"),
            "bill_company": obj.get("bill_company"),
            "bill_country": obj.get("bill_country"),
            "bill_fax": obj.get("bill_fax"),
            "bill_first_name": obj.get("bill_first_name"),
            "bill_last_name": obj.get("bill_last_name"),
            "bill_phone": obj.get("bill_phone"),
            "bill_postcode": obj.get("bill_postcode"),
            "bill_state": obj.get("bill_state"),
            "channel_id": obj.get("channel_id"),
            "clear_cache": obj.get("clear_cache") if obj.get("clear_cache") is not None else True,
            "comment": obj.get("comment"),
            "coupon_discount": obj.get("coupon_discount"),
            "coupons": obj.get("coupons"),
            "create_invoice": obj.get("create_invoice") if obj.get("create_invoice") is not None else False,
            "currency": obj.get("currency"),
            "customer_birthday": obj.get("customer_birthday"),
            "customer_email": obj.get("customer_email"),
            "customer_fax": obj.get("customer_fax"),
            "customer_first_name": obj.get("customer_first_name"),
            "customer_last_name": obj.get("customer_last_name"),
            "customer_phone": obj.get("customer_phone"),
            "date": obj.get("date"),
            "date_finished": obj.get("date_finished"),
            "date_modified": obj.get("date_modified"),
            "discount": obj.get("discount"),
            "external_source": obj.get("external_source"),
            "financial_status": obj.get("financial_status"),
            "fulfillment_status": obj.get("fulfillment_status"),
            "gift_certificate_discount": obj.get("gift_certificate_discount"),
            "id": obj.get("id"),
            "inventory_behaviour": obj.get("inventory_behaviour") if obj.get("inventory_behaviour") is not None else 'bypass',
            "note_attributes": [OrderAddNoteAttributesInner.from_dict(_item) for _item in obj["note_attributes"]] if obj.get("note_attributes") is not None else None,
            "order_id": obj.get("order_id"),
            "order_item": [OrderAddOrderItemInner.from_dict(_item) for _item in obj["order_item"]] if obj.get("order_item") is not None else None,
            "order_payment_method": obj.get("order_payment_method"),
            "order_shipping_method": obj.get("order_shipping_method"),
            "order_status": obj.get("order_status"),
            "prices_inc_tax": obj.get("prices_inc_tax") if obj.get("prices_inc_tax") is not None else False,
            "send_admin_notifications": obj.get("send_admin_notifications") if obj.get("send_admin_notifications") is not None else False,
            "send_notifications": obj.get("send_notifications") if obj.get("send_notifications") is not None else False,
            "shipp_address_1": obj.get("shipp_address_1"),
            "shipp_address_2": obj.get("shipp_address_2"),
            "shipp_city": obj.get("shipp_city"),
            "shipp_company": obj.get("shipp_company"),
            "shipp_country": obj.get("shipp_country"),
            "shipp_fax": obj.get("shipp_fax"),
            "shipp_first_name": obj.get("shipp_first_name"),
            "shipp_last_name": obj.get("shipp_last_name"),
            "shipp_phone": obj.get("shipp_phone"),
            "shipp_postcode": obj.get("shipp_postcode"),
            "shipp_state": obj.get("shipp_state"),
            "shipping_price": obj.get("shipping_price") if obj.get("shipping_price") is not None else 0,
            "shipping_tax": obj.get("shipping_tax"),
            "store_id": obj.get("store_id"),
            "subtotal_price": obj.get("subtotal_price"),
            "tags": obj.get("tags"),
            "tax_price": obj.get("tax_price") if obj.get("tax_price") is not None else 0,
            "total_paid": obj.get("total_paid"),
            "total_price": obj.get("total_price"),
            "total_weight": obj.get("total_weight"),
            "transaction_id": obj.get("transaction_id")
        })
        return _obj



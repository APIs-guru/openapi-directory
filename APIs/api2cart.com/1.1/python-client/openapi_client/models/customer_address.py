# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.country import Country
from openapi_client.models.state import State
from typing import Optional, Set
from typing_extensions import Self

class CustomerAddress(BaseModel):
    """
    CustomerAddress
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    address1: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    company: Optional[StrictStr] = None
    country: Optional[Country] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default: Optional[StrictBool] = None
    fax: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    identification_number: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    phone_mobile: Optional[StrictStr] = None
    postcode: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    state: Optional[State] = None
    tax_id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "address1", "address2", "city", "company", "country", "custom_fields", "default", "fax", "first_name", "gender", "id", "identification_number", "last_name", "phone", "phone_mobile", "postcode", "region", "state", "tax_id", "type", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "company": obj.get("company"),
            "country": Country.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "default": obj.get("default"),
            "fax": obj.get("fax"),
            "first_name": obj.get("first_name"),
            "gender": obj.get("gender"),
            "id": obj.get("id"),
            "identification_number": obj.get("identification_number"),
            "last_name": obj.get("last_name"),
            "phone": obj.get("phone"),
            "phone_mobile": obj.get("phone_mobile"),
            "postcode": obj.get("postcode"),
            "region": obj.get("region"),
            "state": State.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "tax_id": obj.get("tax_id"),
            "type": obj.get("type"),
            "website": obj.get("website")
        })
        return _obj



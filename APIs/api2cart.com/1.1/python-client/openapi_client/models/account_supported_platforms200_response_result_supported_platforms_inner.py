# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_supported_platforms200_response_result_supported_platforms_inner_params import AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams
from typing import Optional, Set
from typing_extensions import Self

class AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner(BaseModel):
    """
    AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner
    """ # noqa: E501
    cart_id: Optional[StrictStr] = None
    cart_method: Optional[StrictStr] = None
    cart_name: Optional[StrictStr] = None
    cart_versions: Optional[StrictStr] = None
    params: Optional[AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams] = None
    __properties: ClassVar[List[str]] = ["cart_id", "cart_method", "cart_name", "cart_versions", "params"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of params
        if self.params:
            _dict['params'] = self.params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSupportedPlatforms200ResponseResultSupportedPlatformsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cart_id": obj.get("cart_id"),
            "cart_method": obj.get("cart_method"),
            "cart_name": obj.get("cart_name"),
            "cart_versions": obj.get("cart_versions"),
            "params": AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams.from_dict(obj["params"]) if obj.get("params") is not None else None
        })
        return _obj



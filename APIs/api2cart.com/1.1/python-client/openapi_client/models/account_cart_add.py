# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.account_cart_add_hybris_websites_inner import AccountCartAddHybrisWebsitesInner
from typing import Optional, Set
from typing_extensions import Self

class AccountCartAdd(BaseModel):
    """
    AccountCartAdd
    """ # noqa: E501
    var_3dcart_access_token: Optional[StrictStr] = Field(default=None, description="3DCart Token", alias="3dcart_access_token")
    var_3dcart_private_key: Optional[StrictStr] = Field(default=None, description="3DCart Private Key", alias="3dcart_private_key")
    var_3dcartapi_api_key: Optional[StrictStr] = Field(default=None, description="3DCart API Key", alias="3dcartapi_api_key")
    amazon_access_key_id: Optional[StrictStr] = Field(default=None, description="Amazon Secret Key Id")
    amazon_access_token: Optional[StrictStr] = Field(default=None, description="MWS Auth Token. Access token authorizing the app to access resources on behalf of a user")
    amazon_marketplaces_ids: Optional[StrictStr] = Field(default=None, description="Amazon Marketplace IDs comma separated string")
    amazon_secret_key: Optional[StrictStr] = Field(default=None, description="Amazon Secret Key")
    amazon_seller_id: Optional[StrictStr] = Field(default=None, description="Amazon Seller ID (Merchant token)")
    amazon_sp_api_environment: Optional[StrictStr] = Field(default='production', description="Amazon SP API environment")
    amazon_sp_aws_region: StrictStr = Field(description="Amazon AWS Region")
    amazon_sp_aws_role_arn: StrictStr = Field(description="Amazon AWS Role ARN")
    amazon_sp_aws_user_key_id: StrictStr = Field(description="Amazon AWS user access key ID")
    amazon_sp_aws_user_secret: StrictStr = Field(description="Amazon AWS user secret access key")
    amazon_sp_client_id: StrictStr = Field(description="Amazon SP API app client id")
    amazon_sp_client_secret: StrictStr = Field(description="Amazon SP API app client secret")
    amazon_sp_refresh_token: StrictStr = Field(description="Amazon SP API OAuth refresh token")
    aspdotnetstorefront_api_pass: Optional[StrictStr] = Field(default=None, description="AspDotNetStorefront API Password")
    aspdotnetstorefront_api_user: Optional[StrictStr] = Field(default=None, description="It's a AspDotNetStorefront account for which API is available")
    bigcommerceapi_access_token: Optional[StrictStr] = Field(default=None, description="Access token authorizing the app to access resources on behalf of a user")
    bigcommerceapi_admin_account: Optional[StrictStr] = Field(default=None, description="It's a BigCommerce account for which API is enabled")
    bigcommerceapi_api_key: Optional[StrictStr] = Field(default=None, description="Bigcommerce API Key")
    bigcommerceapi_api_path: Optional[StrictStr] = Field(default=None, description="BigCommerce API URL")
    bigcommerceapi_client_id: Optional[StrictStr] = Field(default=None, description="Client ID of the requesting app")
    bigcommerceapi_context: Optional[StrictStr] = Field(default=None, description="API Path section unique to the store")
    bridge_url: Optional[StrictStr] = Field(default=None, description="This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)")
    cart_id: StrictStr = Field(description="Storeâ€™s identifier which you can get from cart_list method")
    commercehq_api_key: Optional[StrictStr] = Field(default=None, description="CommerceHQ api key")
    commercehq_api_password: Optional[StrictStr] = Field(default=None, description="CommerceHQ api password")
    db_tables_prefix: Optional[StrictStr] = Field(default=None, description="DB tables prefix")
    demandware_api_password: Optional[StrictStr] = Field(default=None, description="Demandware api password")
    demandware_client_id: Optional[StrictStr] = Field(default=None, description="Demandware client id")
    demandware_user_name: Optional[StrictStr] = Field(default=None, description="Demandware user name")
    demandware_user_password: Optional[StrictStr] = Field(default=None, description="Demandware user password")
    ebay_access_token: Optional[StrictStr] = Field(default=None, description="Used to authenticate API requests.")
    ebay_client_id: Optional[StrictStr] = Field(default=None, description="Application ID (AppID).")
    ebay_client_secret: Optional[StrictStr] = Field(default=None, description="Shared Secret from eBay application")
    ebay_environment: Optional[StrictStr] = Field(default='production', description="eBay environment")
    ebay_refresh_token: Optional[StrictStr] = Field(default=None, description="Used to renew the access token.")
    ebay_runame: Optional[StrictStr] = Field(default=None, description="The RuName value that eBay assigns to your application.")
    ebay_site_id: Optional[StrictInt] = Field(default=0, description="eBay global ID")
    ecwid_acess_token: Optional[StrictStr] = Field(default=None, description="Access token authorizing the app to access resources on behalf of a user")
    ecwid_store_id: Optional[StrictStr] = Field(default=None, description="Store Id")
    etsy_access_token: Optional[StrictStr] = Field(default=None, description="Access token authorizing the app to access resources on behalf of a user")
    etsy_client_id: StrictStr = Field(description="Etsy Client Id")
    etsy_keystring: Optional[StrictStr] = Field(default=None, description="Etsy keystring")
    etsy_refresh_token: StrictStr = Field(description="Etsy Refresh token")
    etsy_shared_secret: Optional[StrictStr] = Field(default=None, description="Etsy shared secret")
    etsy_token_secret: Optional[StrictStr] = Field(default=None, description="Secret token authorizing the app to access resources on behalf of a user")
    ftp_host: Optional[StrictStr] = Field(default=None, description="FTP connection host")
    ftp_password: Optional[StrictStr] = Field(default=None, description="FTP Password")
    ftp_port: Optional[StrictInt] = Field(default=None, description="FTP Port")
    ftp_store_dir: Optional[StrictStr] = Field(default=None, description="FTP Store dir")
    ftp_user: Optional[StrictStr] = Field(default=None, description="FTP User")
    hybris_client_id: Optional[StrictStr] = Field(default=None, description="Omni Commerce Connector Client ID")
    hybris_client_secret: Optional[StrictStr] = Field(default=None, description="Omni Commerce Connector Client Secret")
    hybris_password: Optional[StrictStr] = Field(default=None, description="User password")
    hybris_username: Optional[StrictStr] = Field(default=None, description="User Name")
    hybris_websites: Optional[Annotated[List[AccountCartAddHybrisWebsitesInner], Field(min_length=1)]] = Field(default=None, description="Websites to stores mapping data")
    lightspeed_api_key: Optional[StrictStr] = Field(default=None, description="LightSpeed api key")
    lightspeed_api_secret: Optional[StrictStr] = Field(default=None, description="LightSpeed api secret")
    magento_access_token: Optional[StrictStr] = Field(default=None, description="Magento Access Token")
    magento_consumer_key: Optional[StrictStr] = Field(default=None, description="Magento Consumer Key")
    magento_consumer_secret: Optional[StrictStr] = Field(default=None, description="Magento Consumer Secret")
    magento_token_secret: Optional[StrictStr] = Field(default=None, description="Magento Token Secret")
    mercado_libre_app_id: Optional[StrictStr] = Field(default=None, description="Mercado Libre App ID")
    mercado_libre_app_secret_key: Optional[StrictStr] = Field(default=None, description="Mercado Libre App Secret Key")
    mercado_libre_refresh_token: Optional[StrictStr] = Field(default=None, description="Mercado Libre Refresh Token")
    neto_api_key: Optional[StrictStr] = Field(default=None, description="Neto API Key")
    neto_api_username: Optional[StrictStr] = Field(default=None, description="Neto User Name")
    prestashop_webservice_key: Optional[StrictStr] = Field(default=None, description="Prestashop webservice key")
    shopify_access_token: Optional[StrictStr] = Field(default=None, description="Access token authorizing the app to access resources on behalf of a user")
    shopify_api_key: Optional[StrictStr] = Field(default=None, description="Shopify API Key")
    shopify_api_password: Optional[StrictStr] = Field(default=None, description="Shopify API Password")
    shopify_shared_secret: Optional[StrictStr] = Field(default=None, description="Shared secret")
    shopware_access_key: Optional[StrictStr] = Field(default=None, description="Shopware access key")
    shopware_api_key: Optional[StrictStr] = Field(default=None, description="Shopware api key")
    shopware_api_secret: Optional[StrictStr] = Field(default=None, description="Shopware client secret access key")
    squarespace_api_key: Optional[StrictStr] = Field(default=None, description="Squarespace API Key")
    store_key: Optional[StrictStr] = Field(default=None, description="Set this parameter if bridge is already uploaded to store")
    store_root: Optional[StrictStr] = Field(default=None, description="Absolute path to the store root directory (used with \"bridge_url\" parameter)")
    store_url: StrictStr = Field(description="A web address of a store that you would like to connect to API2Cart")
    validate_version: Optional[StrictBool] = Field(default=False, description="Specify if api2cart should validate cart version")
    verify: Optional[StrictBool] = Field(default=True, description="Enables or disables cart's verification")
    volusion_login: Optional[StrictStr] = Field(default=None, description="It's a Volusion account for which API is enabled")
    volusion_password: Optional[StrictStr] = Field(default=None, description="Volusion API Password")
    walmart_channel_type: Optional[StrictStr] = Field(default=None, description="Walmart WM_CONSUMER.CHANNEL.TYPE header")
    walmart_client_id: Optional[StrictStr] = Field(default=None, description="Walmart client ID")
    walmart_client_secret: Optional[StrictStr] = Field(default=None, description="Walmart client secret")
    walmart_environment: Optional[StrictStr] = Field(default='production', description="Walmart environment")
    wc_consumer_key: Optional[StrictStr] = Field(default=None, description="Woocommerce consumer key")
    wc_consumer_secret: Optional[StrictStr] = Field(default=None, description="Woocommerce consumer secret")
    wix_app_id: Optional[StrictStr] = Field(default=None, description="Wix App ID")
    wix_app_secret_key: Optional[StrictStr] = Field(default=None, description="Wix App Secret Key")
    wix_refresh_token: Optional[StrictStr] = Field(default=None, description="Wix refresh token")
    zid_access_token: Optional[StrictStr] = Field(default=None, description="Zid Access Token")
    zid_authorization: Optional[StrictStr] = Field(default=None, description="Zid Authorization")
    zid_client_id: Optional[StrictInt] = Field(default=None, description="Zid Client ID")
    zid_client_secret: Optional[StrictStr] = Field(default=None, description="Zid Client Secret")
    zid_refresh_token: Optional[StrictStr] = Field(default=None, description="Zid refresh token")
    __properties: ClassVar[List[str]] = ["3dcart_access_token", "3dcart_private_key", "3dcartapi_api_key", "amazon_access_key_id", "amazon_access_token", "amazon_marketplaces_ids", "amazon_secret_key", "amazon_seller_id", "amazon_sp_api_environment", "amazon_sp_aws_region", "amazon_sp_aws_role_arn", "amazon_sp_aws_user_key_id", "amazon_sp_aws_user_secret", "amazon_sp_client_id", "amazon_sp_client_secret", "amazon_sp_refresh_token", "aspdotnetstorefront_api_pass", "aspdotnetstorefront_api_user", "bigcommerceapi_access_token", "bigcommerceapi_admin_account", "bigcommerceapi_api_key", "bigcommerceapi_api_path", "bigcommerceapi_client_id", "bigcommerceapi_context", "bridge_url", "cart_id", "commercehq_api_key", "commercehq_api_password", "db_tables_prefix", "demandware_api_password", "demandware_client_id", "demandware_user_name", "demandware_user_password", "ebay_access_token", "ebay_client_id", "ebay_client_secret", "ebay_environment", "ebay_refresh_token", "ebay_runame", "ebay_site_id", "ecwid_acess_token", "ecwid_store_id", "etsy_access_token", "etsy_client_id", "etsy_keystring", "etsy_refresh_token", "etsy_shared_secret", "etsy_token_secret", "ftp_host", "ftp_password", "ftp_port", "ftp_store_dir", "ftp_user", "hybris_client_id", "hybris_client_secret", "hybris_password", "hybris_username", "hybris_websites", "lightspeed_api_key", "lightspeed_api_secret", "magento_access_token", "magento_consumer_key", "magento_consumer_secret", "magento_token_secret", "mercado_libre_app_id", "mercado_libre_app_secret_key", "mercado_libre_refresh_token", "neto_api_key", "neto_api_username", "prestashop_webservice_key", "shopify_access_token", "shopify_api_key", "shopify_api_password", "shopify_shared_secret", "shopware_access_key", "shopware_api_key", "shopware_api_secret", "squarespace_api_key", "store_key", "store_root", "store_url", "validate_version", "verify", "volusion_login", "volusion_password", "walmart_channel_type", "walmart_client_id", "walmart_client_secret", "walmart_environment", "wc_consumer_key", "wc_consumer_secret", "wix_app_id", "wix_app_secret_key", "wix_refresh_token", "zid_access_token", "zid_authorization", "zid_client_id", "zid_client_secret", "zid_refresh_token"]

    @field_validator('amazon_sp_aws_region')
    def amazon_sp_aws_region_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['eu-west-1', 'us-east-1', 'us-west-2']):
            raise ValueError("must be one of enum values ('eu-west-1', 'us-east-1', 'us-west-2')")
        return value

    @field_validator('cart_id')
    def cart_id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['3DCart', '3DCartApi', 'AceShop', 'AmazonSP', 'Amazon', 'AspDotNetStorefront', 'BigcommerceApi', 'Creloaded', 'CommerceHQ', 'Cscart', 'Cubecart', 'Demandware', 'EBay', 'Ecwid', 'Etsy', 'EtsyAPIv3', 'Gambio', 'JooCart', 'Magento1212', 'Magento2Api', 'MijoShop', 'Neto', 'Opencart14', 'LightSpeed', 'Oscmax2', 'Oscommerce22ms2', 'Oxid', 'Pinnacle', 'Prestashop', 'PrestashopApi', 'SSPremium', 'Shopify', 'Squarespace', 'Shopware', 'ShopwareApi', 'Tomatocart', 'Ubercart', 'Virtuemart', 'Volusion', 'WPecommerce', 'Walmart', 'WebAsyst', 'Woocommerce', 'WoocommerceApi', 'Wix', 'Xcart', 'Xtcommerce', 'XtcommerceVeyton', 'Zencart137', 'Hybris', 'MercadoLibre', 'Zid', 'Zoey']):
            raise ValueError("must be one of enum values ('3DCart', '3DCartApi', 'AceShop', 'AmazonSP', 'Amazon', 'AspDotNetStorefront', 'BigcommerceApi', 'Creloaded', 'CommerceHQ', 'Cscart', 'Cubecart', 'Demandware', 'EBay', 'Ecwid', 'Etsy', 'EtsyAPIv3', 'Gambio', 'JooCart', 'Magento1212', 'Magento2Api', 'MijoShop', 'Neto', 'Opencart14', 'LightSpeed', 'Oscmax2', 'Oscommerce22ms2', 'Oxid', 'Pinnacle', 'Prestashop', 'PrestashopApi', 'SSPremium', 'Shopify', 'Squarespace', 'Shopware', 'ShopwareApi', 'Tomatocart', 'Ubercart', 'Virtuemart', 'Volusion', 'WPecommerce', 'Walmart', 'WebAsyst', 'Woocommerce', 'WoocommerceApi', 'Wix', 'Xcart', 'Xtcommerce', 'XtcommerceVeyton', 'Zencart137', 'Hybris', 'MercadoLibre', 'Zid', 'Zoey')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountCartAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hybris_websites (list)
        _items = []
        if self.hybris_websites:
            for _item_hybris_websites in self.hybris_websites:
                if _item_hybris_websites:
                    _items.append(_item_hybris_websites.to_dict())
            _dict['hybris_websites'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountCartAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "3dcart_access_token": obj.get("3dcart_access_token"),
            "3dcart_private_key": obj.get("3dcart_private_key"),
            "3dcartapi_api_key": obj.get("3dcartapi_api_key"),
            "amazon_access_key_id": obj.get("amazon_access_key_id"),
            "amazon_access_token": obj.get("amazon_access_token"),
            "amazon_marketplaces_ids": obj.get("amazon_marketplaces_ids"),
            "amazon_secret_key": obj.get("amazon_secret_key"),
            "amazon_seller_id": obj.get("amazon_seller_id"),
            "amazon_sp_api_environment": obj.get("amazon_sp_api_environment") if obj.get("amazon_sp_api_environment") is not None else 'production',
            "amazon_sp_aws_region": obj.get("amazon_sp_aws_region"),
            "amazon_sp_aws_role_arn": obj.get("amazon_sp_aws_role_arn"),
            "amazon_sp_aws_user_key_id": obj.get("amazon_sp_aws_user_key_id"),
            "amazon_sp_aws_user_secret": obj.get("amazon_sp_aws_user_secret"),
            "amazon_sp_client_id": obj.get("amazon_sp_client_id"),
            "amazon_sp_client_secret": obj.get("amazon_sp_client_secret"),
            "amazon_sp_refresh_token": obj.get("amazon_sp_refresh_token"),
            "aspdotnetstorefront_api_pass": obj.get("aspdotnetstorefront_api_pass"),
            "aspdotnetstorefront_api_user": obj.get("aspdotnetstorefront_api_user"),
            "bigcommerceapi_access_token": obj.get("bigcommerceapi_access_token"),
            "bigcommerceapi_admin_account": obj.get("bigcommerceapi_admin_account"),
            "bigcommerceapi_api_key": obj.get("bigcommerceapi_api_key"),
            "bigcommerceapi_api_path": obj.get("bigcommerceapi_api_path"),
            "bigcommerceapi_client_id": obj.get("bigcommerceapi_client_id"),
            "bigcommerceapi_context": obj.get("bigcommerceapi_context"),
            "bridge_url": obj.get("bridge_url"),
            "cart_id": obj.get("cart_id"),
            "commercehq_api_key": obj.get("commercehq_api_key"),
            "commercehq_api_password": obj.get("commercehq_api_password"),
            "db_tables_prefix": obj.get("db_tables_prefix"),
            "demandware_api_password": obj.get("demandware_api_password"),
            "demandware_client_id": obj.get("demandware_client_id"),
            "demandware_user_name": obj.get("demandware_user_name"),
            "demandware_user_password": obj.get("demandware_user_password"),
            "ebay_access_token": obj.get("ebay_access_token"),
            "ebay_client_id": obj.get("ebay_client_id"),
            "ebay_client_secret": obj.get("ebay_client_secret"),
            "ebay_environment": obj.get("ebay_environment") if obj.get("ebay_environment") is not None else 'production',
            "ebay_refresh_token": obj.get("ebay_refresh_token"),
            "ebay_runame": obj.get("ebay_runame"),
            "ebay_site_id": obj.get("ebay_site_id") if obj.get("ebay_site_id") is not None else 0,
            "ecwid_acess_token": obj.get("ecwid_acess_token"),
            "ecwid_store_id": obj.get("ecwid_store_id"),
            "etsy_access_token": obj.get("etsy_access_token"),
            "etsy_client_id": obj.get("etsy_client_id"),
            "etsy_keystring": obj.get("etsy_keystring"),
            "etsy_refresh_token": obj.get("etsy_refresh_token"),
            "etsy_shared_secret": obj.get("etsy_shared_secret"),
            "etsy_token_secret": obj.get("etsy_token_secret"),
            "ftp_host": obj.get("ftp_host"),
            "ftp_password": obj.get("ftp_password"),
            "ftp_port": obj.get("ftp_port"),
            "ftp_store_dir": obj.get("ftp_store_dir"),
            "ftp_user": obj.get("ftp_user"),
            "hybris_client_id": obj.get("hybris_client_id"),
            "hybris_client_secret": obj.get("hybris_client_secret"),
            "hybris_password": obj.get("hybris_password"),
            "hybris_username": obj.get("hybris_username"),
            "hybris_websites": [AccountCartAddHybrisWebsitesInner.from_dict(_item) for _item in obj["hybris_websites"]] if obj.get("hybris_websites") is not None else None,
            "lightspeed_api_key": obj.get("lightspeed_api_key"),
            "lightspeed_api_secret": obj.get("lightspeed_api_secret"),
            "magento_access_token": obj.get("magento_access_token"),
            "magento_consumer_key": obj.get("magento_consumer_key"),
            "magento_consumer_secret": obj.get("magento_consumer_secret"),
            "magento_token_secret": obj.get("magento_token_secret"),
            "mercado_libre_app_id": obj.get("mercado_libre_app_id"),
            "mercado_libre_app_secret_key": obj.get("mercado_libre_app_secret_key"),
            "mercado_libre_refresh_token": obj.get("mercado_libre_refresh_token"),
            "neto_api_key": obj.get("neto_api_key"),
            "neto_api_username": obj.get("neto_api_username"),
            "prestashop_webservice_key": obj.get("prestashop_webservice_key"),
            "shopify_access_token": obj.get("shopify_access_token"),
            "shopify_api_key": obj.get("shopify_api_key"),
            "shopify_api_password": obj.get("shopify_api_password"),
            "shopify_shared_secret": obj.get("shopify_shared_secret"),
            "shopware_access_key": obj.get("shopware_access_key"),
            "shopware_api_key": obj.get("shopware_api_key"),
            "shopware_api_secret": obj.get("shopware_api_secret"),
            "squarespace_api_key": obj.get("squarespace_api_key"),
            "store_key": obj.get("store_key"),
            "store_root": obj.get("store_root"),
            "store_url": obj.get("store_url"),
            "validate_version": obj.get("validate_version") if obj.get("validate_version") is not None else False,
            "verify": obj.get("verify") if obj.get("verify") is not None else True,
            "volusion_login": obj.get("volusion_login"),
            "volusion_password": obj.get("volusion_password"),
            "walmart_channel_type": obj.get("walmart_channel_type"),
            "walmart_client_id": obj.get("walmart_client_id"),
            "walmart_client_secret": obj.get("walmart_client_secret"),
            "walmart_environment": obj.get("walmart_environment") if obj.get("walmart_environment") is not None else 'production',
            "wc_consumer_key": obj.get("wc_consumer_key"),
            "wc_consumer_secret": obj.get("wc_consumer_secret"),
            "wix_app_id": obj.get("wix_app_id"),
            "wix_app_secret_key": obj.get("wix_app_secret_key"),
            "wix_refresh_token": obj.get("wix_refresh_token"),
            "zid_access_token": obj.get("zid_access_token"),
            "zid_authorization": obj.get("zid_authorization"),
            "zid_client_id": obj.get("zid_client_id"),
            "zid_client_secret": obj.get("zid_client_secret"),
            "zid_refresh_token": obj.get("zid_refresh_token")
        })
        return _obj



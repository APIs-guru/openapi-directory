# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ProductUpdate(BaseModel):
    """
    ProductUpdate
    """ # noqa: E501
    backorder_status: Optional[StrictStr] = Field(default=None, description="Set backorder status")
    barcode: Optional[StrictStr] = Field(default=None, description="A barcode is a unique code composed of numbers used as a product identifier.")
    categories_ids: Optional[StrictStr] = Field(default=None, description="Defines product add that is specified by comma-separated categories id")
    clear_cache: Optional[StrictBool] = Field(default=True, description="Is cache clear required")
    cost_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's cost price")
    country_of_origin: Optional[StrictStr] = Field(default=None, description="The country where the inventory item was made")
    description: Optional[StrictStr] = Field(default=None, description="Defines new product's description")
    disable_report_cache: Optional[StrictBool] = Field(default=False, description="Disable report cache for current request")
    gtin: Optional[StrictStr] = Field(default=None, description="Global Trade Item Number. An GTIN is an identifier for trade items.")
    harmonized_system_code: Optional[StrictStr] = Field(default=None, description="Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's height")
    id: Optional[StrictStr] = Field(default=None, description="Defines product id that has to be updated")
    in_stock: Optional[StrictBool] = Field(default=None, description="Set stock status")
    increase_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines the incremental changes in product quantity")
    lang_id: Optional[StrictStr] = Field(default=None, description="Language id")
    length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's length")
    manage_stock: Optional[StrictBool] = Field(default=None, description="Defines inventory tracking for product")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Defines product's manufacturer")
    manufacturer_id: Optional[StrictStr] = Field(default=None, description="Defines product's manufacturer by manufacturer_id")
    meta_description: Optional[StrictStr] = Field(default=None, description="Defines unique meta description of a entity")
    meta_keywords: Optional[StrictStr] = Field(default=None, description="Defines unique meta keywords for each entity")
    meta_title: Optional[StrictStr] = Field(default=None, description="Defines unique meta title for each entity")
    model: Optional[StrictStr] = Field(default=None, description="Defines product model that has to be updated")
    name: Optional[StrictStr] = Field(default=None, description="Defines product's name that has to be updated")
    old_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's old price")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's price")
    product_class: Optional[StrictStr] = Field(default=None, description="A categorization for the product")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's quantity")
    reduce_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines the decrement changes in product quantity")
    reindex: Optional[StrictBool] = Field(default=True, description="Is reindex required")
    report_request_id: Optional[StrictStr] = Field(default=None, description="Report request id")
    reserve_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This parameter allows to reserve/unreserve product quantity.")
    retail_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's retail price")
    search_keywords: Optional[StrictStr] = Field(default=None, description="Defines unique search keywords")
    seo_url: Optional[StrictStr] = Field(default=None, description="Defines unique URL for SEO")
    short_description: Optional[StrictStr] = Field(default=None, description="Defines short description")
    sku: Optional[StrictStr] = Field(default=None, description="Defines new product's sku")
    special_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines new product's special price")
    sprice_create: Optional[StrictStr] = Field(default=None, description="Defines the date of special price creation")
    sprice_expire: Optional[StrictStr] = Field(default=None, description="Defines the term of special price offer duration")
    status: Optional[StrictStr] = Field(default=None, description="Defines product's status")
    store_id: Optional[StrictStr] = Field(default=None, description="Defines store id where the product should be found")
    tags: Optional[StrictStr] = Field(default=None, description="Product tags")
    taxable: Optional[StrictBool] = Field(default=True, description="Specifies whether a tax is charged")
    visible: Optional[StrictStr] = Field(default=None, description="Set visibility status")
    warehouse_id: Optional[StrictStr] = Field(default=None, description="This parameter is used for selecting a warehouse where you need to set/modify a product quantity.")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weight")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines product's width")
    __properties: ClassVar[List[str]] = ["backorder_status", "barcode", "categories_ids", "clear_cache", "cost_price", "country_of_origin", "description", "disable_report_cache", "gtin", "harmonized_system_code", "height", "id", "in_stock", "increase_quantity", "lang_id", "length", "manage_stock", "manufacturer", "manufacturer_id", "meta_description", "meta_keywords", "meta_title", "model", "name", "old_price", "price", "product_class", "quantity", "reduce_quantity", "reindex", "report_request_id", "reserve_quantity", "retail_price", "search_keywords", "seo_url", "short_description", "sku", "special_price", "sprice_create", "sprice_expire", "status", "store_id", "tags", "taxable", "visible", "warehouse_id", "weight", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backorder_status": obj.get("backorder_status"),
            "barcode": obj.get("barcode"),
            "categories_ids": obj.get("categories_ids"),
            "clear_cache": obj.get("clear_cache") if obj.get("clear_cache") is not None else True,
            "cost_price": obj.get("cost_price"),
            "country_of_origin": obj.get("country_of_origin"),
            "description": obj.get("description"),
            "disable_report_cache": obj.get("disable_report_cache") if obj.get("disable_report_cache") is not None else False,
            "gtin": obj.get("gtin"),
            "harmonized_system_code": obj.get("harmonized_system_code"),
            "height": obj.get("height"),
            "id": obj.get("id"),
            "in_stock": obj.get("in_stock"),
            "increase_quantity": obj.get("increase_quantity"),
            "lang_id": obj.get("lang_id"),
            "length": obj.get("length"),
            "manage_stock": obj.get("manage_stock"),
            "manufacturer": obj.get("manufacturer"),
            "manufacturer_id": obj.get("manufacturer_id"),
            "meta_description": obj.get("meta_description"),
            "meta_keywords": obj.get("meta_keywords"),
            "meta_title": obj.get("meta_title"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "old_price": obj.get("old_price"),
            "price": obj.get("price"),
            "product_class": obj.get("product_class"),
            "quantity": obj.get("quantity"),
            "reduce_quantity": obj.get("reduce_quantity"),
            "reindex": obj.get("reindex") if obj.get("reindex") is not None else True,
            "report_request_id": obj.get("report_request_id"),
            "reserve_quantity": obj.get("reserve_quantity"),
            "retail_price": obj.get("retail_price"),
            "search_keywords": obj.get("search_keywords"),
            "seo_url": obj.get("seo_url"),
            "short_description": obj.get("short_description"),
            "sku": obj.get("sku"),
            "special_price": obj.get("special_price"),
            "sprice_create": obj.get("sprice_create"),
            "sprice_expire": obj.get("sprice_expire"),
            "status": obj.get("status"),
            "store_id": obj.get("store_id"),
            "tags": obj.get("tags"),
            "taxable": obj.get("taxable") if obj.get("taxable") is not None else True,
            "visible": obj.get("visible"),
            "warehouse_id": obj.get("warehouse_id"),
            "weight": obj.get("weight"),
            "width": obj.get("width")
        })
        return _obj



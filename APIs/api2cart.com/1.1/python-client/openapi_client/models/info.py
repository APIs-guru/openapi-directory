# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Info(BaseModel):
    """
    Info
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    city: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, Any]] = None
    email: Optional[StrictStr] = None
    owner: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    state_code: Optional[StrictStr] = None
    street_address: Optional[StrictStr] = None
    street_address_line_2: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "city", "country", "custom_fields", "email", "owner", "phone", "state", "state_code", "street_address", "street_address_line_2", "zip_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Info from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Info from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "custom_fields": obj.get("custom_fields"),
            "email": obj.get("email"),
            "owner": obj.get("owner"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "state_code": obj.get("state_code"),
            "street_address": obj.get("street_address"),
            "street_address_line_2": obj.get("street_address_line_2"),
            "zip_code": obj.get("zip_code")
        })
        return _obj



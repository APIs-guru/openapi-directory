# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.order_preestimate_shipping_list_order_item_inner_order_item_option_inner import OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner
from typing import Optional, Set
from typing_extensions import Self

class OrderPreestimateShippingListOrderItemInner(BaseModel):
    """
    OrderPreestimateShippingListOrderItemInner
    """ # noqa: E501
    order_item_id: StrictStr = Field(description="Defines orders specified by order item id")
    order_item_model: Optional[StrictStr] = Field(default=None, description="Defines orders specified by order item model")
    order_item_option: Optional[List[OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner]] = None
    order_item_quantity: StrictInt = Field(description="Defines orders specified by order item quantity")
    order_item_variant_id: Optional[StrictStr] = Field(default=None, description="Ordered product variant. Where x is order item ID")
    order_item_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines orders specified by order item weight")
    __properties: ClassVar[List[str]] = ["order_item_id", "order_item_model", "order_item_option", "order_item_quantity", "order_item_variant_id", "order_item_weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderPreestimateShippingListOrderItemInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_item_option (list)
        _items = []
        if self.order_item_option:
            for _item_order_item_option in self.order_item_option:
                if _item_order_item_option:
                    _items.append(_item_order_item_option.to_dict())
            _dict['order_item_option'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderPreestimateShippingListOrderItemInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "order_item_id": obj.get("order_item_id"),
            "order_item_model": obj.get("order_item_model"),
            "order_item_option": [OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner.from_dict(_item) for _item in obj["order_item_option"]] if obj.get("order_item_option") is not None else None,
            "order_item_quantity": obj.get("order_item_quantity"),
            "order_item_variant_id": obj.get("order_item_variant_id"),
            "order_item_weight": obj.get("order_item_weight")
        })
        return _obj



# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CartCouponAdd(BaseModel):
    """
    CartCouponAdd
    """ # noqa: E501
    action_amount: Union[StrictFloat, StrictInt] = Field(description="Defines the discount amount value.")
    action_apply_to: StrictStr = Field(description="Defines where discount should be applied")
    action_condition_entity: Optional[StrictStr] = Field(default=None, description="Defines entity for action condition.")
    action_condition_key: Optional[StrictStr] = Field(default=None, description="Defines entity attribute code for action condition.")
    action_condition_operator: Optional[StrictStr] = Field(default=None, description="Defines condition operator.")
    action_condition_value: Optional[StrictStr] = Field(default=None, description="Defines condition attribute value/s. Can be comma separated string.")
    action_scope: StrictStr = Field(description="Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.")
    action_type: StrictStr = Field(description="Coupon discount type")
    code: StrictStr = Field(description="Coupon code")
    codes: Optional[List[StrictStr]] = Field(default=None, description="Entity codes")
    date_end: Optional[StrictStr] = Field(default=None, description="Defines when discount code will be expired.")
    date_start: Optional[StrictStr] = Field(default='now', description="Defines when discount code will be available.")
    name: Optional[StrictStr] = Field(default=None, description="Coupon name")
    store_id: Optional[StrictStr] = Field(default=None, description="Store Id")
    usage_limit: Optional[StrictInt] = Field(default=None, description="Usage limit for coupon.")
    usage_limit_per_customer: Optional[StrictInt] = Field(default=None, description="Usage limit per customer.")
    __properties: ClassVar[List[str]] = ["action_amount", "action_apply_to", "action_condition_entity", "action_condition_key", "action_condition_operator", "action_condition_value", "action_scope", "action_type", "code", "codes", "date_end", "date_start", "name", "store_id", "usage_limit", "usage_limit_per_customer"]

    @field_validator('action_apply_to')
    def action_apply_to_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['order_total', 'item_price', 'shipping']):
            raise ValueError("must be one of enum values ('order_total', 'item_price', 'shipping')")
        return value

    @field_validator('action_scope')
    def action_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['order', 'matching_items']):
            raise ValueError("must be one of enum values ('order', 'matching_items')")
        return value

    @field_validator('action_type')
    def action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['percent', 'fixed']):
            raise ValueError("must be one of enum values ('percent', 'fixed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CartCouponAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CartCouponAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_amount": obj.get("action_amount"),
            "action_apply_to": obj.get("action_apply_to"),
            "action_condition_entity": obj.get("action_condition_entity"),
            "action_condition_key": obj.get("action_condition_key"),
            "action_condition_operator": obj.get("action_condition_operator"),
            "action_condition_value": obj.get("action_condition_value"),
            "action_scope": obj.get("action_scope"),
            "action_type": obj.get("action_type"),
            "code": obj.get("code"),
            "codes": obj.get("codes"),
            "date_end": obj.get("date_end"),
            "date_start": obj.get("date_start") if obj.get("date_start") is not None else 'now',
            "name": obj.get("name"),
            "store_id": obj.get("store_id"),
            "usage_limit": obj.get("usage_limit"),
            "usage_limit_per_customer": obj.get("usage_limit_per_customer")
        })
        return _obj



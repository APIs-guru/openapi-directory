# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.a2_c_date_time import A2CDateTime
from openapi_client.models.base_customer import BaseCustomer
from openapi_client.models.currency import Currency
from openapi_client.models.customer_address import CustomerAddress
from openapi_client.models.order_item import OrderItem
from openapi_client.models.order_payment_method import OrderPaymentMethod
from openapi_client.models.order_refund import OrderRefund
from openapi_client.models.order_shipping_method import OrderShippingMethod
from openapi_client.models.order_status import OrderStatus
from openapi_client.models.order_total import OrderTotal
from openapi_client.models.order_totals import OrderTotals
from openapi_client.models.order_totals_new_discount import OrderTotalsNewDiscount
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    basket_id: Optional[StrictStr] = None
    billing_address: Optional[CustomerAddress] = None
    bundles: Optional[List[OrderItem]] = None
    channel_id: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    create_at: Optional[A2CDateTime] = None
    currency: Optional[Currency] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer: Optional[BaseCustomer] = None
    discounts: Optional[List[OrderTotalsNewDiscount]] = None
    finished_time: Optional[A2CDateTime] = None
    gift_message: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    modified_at: Optional[A2CDateTime] = None
    order_details_url: Optional[StrictStr] = None
    order_id: Optional[StrictStr] = None
    order_products: Optional[List[OrderItem]] = None
    payment_method: Optional[OrderPaymentMethod] = None
    refunds: Optional[List[OrderRefund]] = None
    shipping_address: Optional[CustomerAddress] = None
    shipping_method: Optional[OrderShippingMethod] = None
    shipping_methods: Optional[List[OrderShippingMethod]] = None
    status: Optional[OrderStatus] = None
    store_id: Optional[StrictStr] = None
    total: Optional[OrderTotal] = None
    totals: Optional[OrderTotals] = None
    warehouses_ids: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "basket_id", "billing_address", "bundles", "channel_id", "comment", "create_at", "currency", "custom_fields", "customer", "discounts", "finished_time", "gift_message", "id", "modified_at", "order_details_url", "order_id", "order_products", "payment_method", "refunds", "shipping_address", "shipping_method", "shipping_methods", "status", "store_id", "total", "totals", "warehouses_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billing_address'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bundles (list)
        _items = []
        if self.bundles:
            for _item_bundles in self.bundles:
                if _item_bundles:
                    _items.append(_item_bundles.to_dict())
            _dict['bundles'] = _items
        # override the default output from pydantic by calling `to_dict()` of create_at
        if self.create_at:
            _dict['create_at'] = self.create_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of finished_time
        if self.finished_time:
            _dict['finished_time'] = self.finished_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_at
        if self.modified_at:
            _dict['modified_at'] = self.modified_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_products (list)
        _items = []
        if self.order_products:
            for _item_order_products in self.order_products:
                if _item_order_products:
                    _items.append(_item_order_products.to_dict())
            _dict['order_products'] = _items
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['payment_method'] = self.payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in refunds (list)
        _items = []
        if self.refunds:
            for _item_refunds in self.refunds:
                if _item_refunds:
                    _items.append(_item_refunds.to_dict())
            _dict['refunds'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_method
        if self.shipping_method:
            _dict['shipping_method'] = self.shipping_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_methods (list)
        _items = []
        if self.shipping_methods:
            for _item_shipping_methods in self.shipping_methods:
                if _item_shipping_methods:
                    _items.append(_item_shipping_methods.to_dict())
            _dict['shipping_methods'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totals
        if self.totals:
            _dict['totals'] = self.totals.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "basket_id": obj.get("basket_id"),
            "billing_address": CustomerAddress.from_dict(obj["billing_address"]) if obj.get("billing_address") is not None else None,
            "bundles": [OrderItem.from_dict(_item) for _item in obj["bundles"]] if obj.get("bundles") is not None else None,
            "channel_id": obj.get("channel_id"),
            "comment": obj.get("comment"),
            "create_at": A2CDateTime.from_dict(obj["create_at"]) if obj.get("create_at") is not None else None,
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "customer": BaseCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "discounts": [OrderTotalsNewDiscount.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "finished_time": A2CDateTime.from_dict(obj["finished_time"]) if obj.get("finished_time") is not None else None,
            "gift_message": obj.get("gift_message"),
            "id": obj.get("id"),
            "modified_at": A2CDateTime.from_dict(obj["modified_at"]) if obj.get("modified_at") is not None else None,
            "order_details_url": obj.get("order_details_url"),
            "order_id": obj.get("order_id"),
            "order_products": [OrderItem.from_dict(_item) for _item in obj["order_products"]] if obj.get("order_products") is not None else None,
            "payment_method": OrderPaymentMethod.from_dict(obj["payment_method"]) if obj.get("payment_method") is not None else None,
            "refunds": [OrderRefund.from_dict(_item) for _item in obj["refunds"]] if obj.get("refunds") is not None else None,
            "shipping_address": CustomerAddress.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "shipping_method": OrderShippingMethod.from_dict(obj["shipping_method"]) if obj.get("shipping_method") is not None else None,
            "shipping_methods": [OrderShippingMethod.from_dict(_item) for _item in obj["shipping_methods"]] if obj.get("shipping_methods") is not None else None,
            "status": OrderStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "store_id": obj.get("store_id"),
            "total": OrderTotal.from_dict(obj["total"]) if obj.get("total") is not None else None,
            "totals": OrderTotals.from_dict(obj["totals"]) if obj.get("totals") is not None else None,
            "warehouses_ids": obj.get("warehouses_ids")
        })
        return _obj



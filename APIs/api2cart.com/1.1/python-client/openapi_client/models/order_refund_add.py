# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.order_refund_add_items_inner import OrderRefundAddItemsInner
from typing import Optional, Set
from typing_extensions import Self

class OrderRefundAdd(BaseModel):
    """
    OrderRefundAdd
    """ # noqa: E501
    var_date: Optional[StrictStr] = Field(default=None, description="Specifies an order creation date in format Y-m-d H:i:s", alias="date")
    fee_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Specifies refund's fee price")
    is_online: Optional[StrictBool] = Field(default=False, description="Indicates whether refund type is online")
    item_restock: Optional[StrictBool] = Field(default=False, description="Boolean, whether or not to add the line items back to the store inventory.")
    items: Optional[List[OrderRefundAddItemsInner]] = Field(default=None, description="Defines items in the order that will be refunded")
    message: Optional[StrictStr] = Field(default=None, description="Refund reason, or some else message which assigned to refund.")
    order_id: Optional[StrictStr] = Field(default=None, description="Defines the order for which the refund will be created.")
    send_notifications: Optional[StrictBool] = Field(default=False, description="Send notifications to customer after refund was created")
    shipping_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines refund shipping amount.")
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Defines order refund amount.")
    __properties: ClassVar[List[str]] = ["date", "fee_price", "is_online", "item_restock", "items", "message", "order_id", "send_notifications", "shipping_price", "total_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderRefundAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderRefundAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "fee_price": obj.get("fee_price"),
            "is_online": obj.get("is_online") if obj.get("is_online") is not None else False,
            "item_restock": obj.get("item_restock") if obj.get("item_restock") is not None else False,
            "items": [OrderRefundAddItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "message": obj.get("message"),
            "order_id": obj.get("order_id"),
            "send_notifications": obj.get("send_notifications") if obj.get("send_notifications") is not None else False,
            "shipping_price": obj.get("shipping_price"),
            "total_price": obj.get("total_price")
        })
        return _obj



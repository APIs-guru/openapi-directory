# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProductVariantImageAdd(BaseModel):
    """
    ProductVariantImageAdd
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="Content(body) encoded in base64 of image file")
    image_name: StrictStr = Field(description="Defines image's name")
    label: Optional[StrictStr] = Field(default=None, description="Defines alternative text that has to be attached to the picture")
    mime: Optional[StrictStr] = Field(default=None, description="Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.")
    option_id: Optional[StrictStr] = Field(default=None, description="Defines option id of the product variant for which the image will be added")
    position: Optional[StrictInt] = Field(default=0, description="Defines imageâ€™s position in the list")
    product_id: Optional[StrictStr] = Field(default=None, description="Defines product id where the variant image has to be added")
    product_variant_id: StrictInt = Field(description="Defines product's variants specified by variant id")
    store_id: Optional[StrictStr] = Field(default=None, description="Store Id")
    type: StrictStr = Field(description="Defines image's types that are specified by comma-separated list")
    url: Optional[StrictStr] = Field(default=None, description="Defines URL of the image that has to be added")
    __properties: ClassVar[List[str]] = ["content", "image_name", "label", "mime", "option_id", "position", "product_id", "product_variant_id", "store_id", "type", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['small', 'base', 'additional', 'thumbnail']):
            raise ValueError("must be one of enum values ('small', 'base', 'additional', 'thumbnail')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductVariantImageAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductVariantImageAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "image_name": obj.get("image_name"),
            "label": obj.get("label"),
            "mime": obj.get("mime"),
            "option_id": obj.get("option_id"),
            "position": obj.get("position") if obj.get("position") is not None else 0,
            "product_id": obj.get("product_id"),
            "product_variant_id": obj.get("product_variant_id"),
            "store_id": obj.get("store_id"),
            "type": obj.get("type") if obj.get("type") is not None else 'base',
            "url": obj.get("url")
        })
        return _obj



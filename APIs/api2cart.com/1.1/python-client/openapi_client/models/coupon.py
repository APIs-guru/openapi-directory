# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.a2_c_date_time import A2CDateTime
from openapi_client.models.coupon_action import CouponAction
from openapi_client.models.coupon_code import CouponCode
from openapi_client.models.coupon_condition import CouponCondition
from openapi_client.models.coupon_history import CouponHistory
from typing import Optional, Set
from typing_extensions import Self

class Coupon(BaseModel):
    """
    Coupon
    """ # noqa: E501
    actions: Optional[List[CouponAction]] = None
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[StrictBool] = None
    code: Optional[StrictStr] = None
    codes: Optional[List[CouponCode]] = None
    conditions: Optional[List[CouponCondition]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    date_end: Optional[A2CDateTime] = None
    date_start: Optional[A2CDateTime] = None
    description: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    logic_operator: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    priority: Optional[StrictInt] = None
    usage_history: Optional[List[CouponHistory]] = None
    usage_limit: Optional[StrictInt] = None
    usage_limit_per_customer: Optional[StrictInt] = None
    used_times: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["actions", "additional_fields", "avail", "code", "codes", "conditions", "custom_fields", "date_end", "date_start", "description", "id", "logic_operator", "name", "priority", "usage_history", "usage_limit", "usage_limit_per_customer", "used_times"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Coupon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in codes (list)
        _items = []
        if self.codes:
            for _item_codes in self.codes:
                if _item_codes:
                    _items.append(_item_codes.to_dict())
            _dict['codes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of date_end
        if self.date_end:
            _dict['date_end'] = self.date_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_start
        if self.date_start:
            _dict['date_start'] = self.date_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in usage_history (list)
        _items = []
        if self.usage_history:
            for _item_usage_history in self.usage_history:
                if _item_usage_history:
                    _items.append(_item_usage_history.to_dict())
            _dict['usage_history'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Coupon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [CouponAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "additional_fields": obj.get("additional_fields"),
            "avail": obj.get("avail"),
            "code": obj.get("code"),
            "codes": [CouponCode.from_dict(_item) for _item in obj["codes"]] if obj.get("codes") is not None else None,
            "conditions": [CouponCondition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "custom_fields": obj.get("custom_fields"),
            "date_end": A2CDateTime.from_dict(obj["date_end"]) if obj.get("date_end") is not None else None,
            "date_start": A2CDateTime.from_dict(obj["date_start"]) if obj.get("date_start") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "logic_operator": obj.get("logic_operator"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "usage_history": [CouponHistory.from_dict(_item) for _item in obj["usage_history"]] if obj.get("usage_history") is not None else None,
            "usage_limit": obj.get("usage_limit"),
            "usage_limit_per_customer": obj.get("usage_limit_per_customer"),
            "used_times": obj.get("used_times")
        })
        return _obj



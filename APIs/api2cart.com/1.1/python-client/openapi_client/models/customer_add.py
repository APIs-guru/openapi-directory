# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customer_add_address_inner import CustomerAddAddressInner
from typing import Optional, Set
from typing_extensions import Self

class CustomerAdd(BaseModel):
    """
    CustomerAdd
    """ # noqa: E501
    address: Optional[List[CustomerAddAddressInner]] = None
    birth_day: Optional[StrictStr] = Field(default=None, description="Defines customer's birthday")
    company: Optional[StrictStr] = Field(default=None, description="Defines customer's company")
    created_time: Optional[StrictStr] = Field(default=None, description="Entity's date creation")
    email: StrictStr = Field(description="Defines customer's email")
    fax: Optional[StrictStr] = Field(default=None, description="Defines customer's fax")
    first_name: StrictStr = Field(description="Defines customer's first name")
    gender: Optional[StrictStr] = Field(default=None, description="Defines customer's gender")
    group: Optional[StrictStr] = Field(default=None, description="Defines the group where the customer")
    last_login: Optional[StrictStr] = Field(default=None, description="Defines customer's last login time")
    last_name: StrictStr = Field(description="Defines customer's last name")
    login: Optional[StrictStr] = Field(default=None, description="Specifies customer's login name")
    modified_time: Optional[StrictStr] = Field(default=None, description="Entity's date modification")
    news_letter_subscription: Optional[StrictBool] = Field(default=False, description="Defines whether the newsletter subscription is available for the user")
    password: Optional[StrictStr] = Field(default=None, description="Defines customer's unique password")
    phone: Optional[StrictStr] = Field(default=None, description="Defines customer's phone number")
    status: Optional[StrictStr] = Field(default='enabled', description="Defines customer's status")
    store_id: Optional[StrictStr] = Field(default=None, description="Store Id")
    website: Optional[StrictStr] = Field(default=None, description="Link to customer website")
    __properties: ClassVar[List[str]] = ["address", "birth_day", "company", "created_time", "email", "fax", "first_name", "gender", "group", "last_login", "last_name", "login", "modified_time", "news_letter_subscription", "password", "phone", "status", "store_id", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerAdd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address (list)
        _items = []
        if self.address:
            for _item_address in self.address:
                if _item_address:
                    _items.append(_item_address.to_dict())
            _dict['address'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerAdd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": [CustomerAddAddressInner.from_dict(_item) for _item in obj["address"]] if obj.get("address") is not None else None,
            "birth_day": obj.get("birth_day"),
            "company": obj.get("company"),
            "created_time": obj.get("created_time"),
            "email": obj.get("email"),
            "fax": obj.get("fax"),
            "first_name": obj.get("first_name"),
            "gender": obj.get("gender"),
            "group": obj.get("group"),
            "last_login": obj.get("last_login"),
            "last_name": obj.get("last_name"),
            "login": obj.get("login"),
            "modified_time": obj.get("modified_time"),
            "news_letter_subscription": obj.get("news_letter_subscription") if obj.get("news_letter_subscription") is not None else False,
            "password": obj.get("password"),
            "phone": obj.get("phone"),
            "status": obj.get("status") if obj.get("status") is not None else 'enabled',
            "store_id": obj.get("store_id"),
            "website": obj.get("website")
        })
        return _obj



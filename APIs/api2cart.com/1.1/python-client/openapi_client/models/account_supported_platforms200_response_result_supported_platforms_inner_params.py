# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_supported_platforms200_response_result_supported_platforms_inner_params_additional_inner import AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsAdditionalInner
from typing import Optional, Set
from typing_extensions import Self

class AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams(BaseModel):
    """
    AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams
    """ # noqa: E501
    additional: Optional[List[AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsAdditionalInner]] = None
    required: Optional[List[List[AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsAdditionalInner]]] = None
    __properties: ClassVar[List[str]] = ["additional", "required"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional (list)
        _items = []
        if self.additional:
            for _item_additional in self.additional:
                if _item_additional:
                    _items.append(_item_additional.to_dict())
            _dict['additional'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in required (list of list)
        _items = []
        if self.required:
            for _item_required in self.required:
                if _item_required:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item_required if _inner_item is not None]
                    )
            _dict['required'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional": [AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsAdditionalInner.from_dict(_item) for _item in obj["additional"]] if obj.get("additional") is not None else None,
            "required": [
                    [AccountSupportedPlatforms200ResponseResultSupportedPlatformsInnerParamsAdditionalInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["required"]
                ] if obj.get("required") is not None else None
        })
        return _obj



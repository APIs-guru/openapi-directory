# coding: utf-8

"""
    Swagger API2Cart

    API2Cart

    The version of the OpenAPI document: 1.1
    Contact: contact@api2cart.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cart_shipping_zone import CartShippingZone
from openapi_client.models.cart_store_info import CartStoreInfo
from openapi_client.models.cart_warehouse import CartWarehouse
from typing import Optional, Set
from typing_extensions import Self

class Cart(BaseModel):
    """
    Cart
    """ # noqa: E501
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    db_prefix: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    shipping_zones: Optional[List[CartShippingZone]] = None
    stores_info: Optional[List[CartStoreInfo]] = None
    url: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    warehouses: Optional[List[CartWarehouse]] = None
    __properties: ClassVar[List[str]] = ["additional_fields", "custom_fields", "db_prefix", "name", "shipping_zones", "stores_info", "url", "version", "warehouses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_zones (list)
        _items = []
        if self.shipping_zones:
            for _item_shipping_zones in self.shipping_zones:
                if _item_shipping_zones:
                    _items.append(_item_shipping_zones.to_dict())
            _dict['shipping_zones'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stores_info (list)
        _items = []
        if self.stores_info:
            for _item_stores_info in self.stores_info:
                if _item_stores_info:
                    _items.append(_item_stores_info.to_dict())
            _dict['stores_info'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warehouses (list)
        _items = []
        if self.warehouses:
            for _item_warehouses in self.warehouses:
                if _item_warehouses:
                    _items.append(_item_warehouses.to_dict())
            _dict['warehouses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_fields": obj.get("additional_fields"),
            "custom_fields": obj.get("custom_fields"),
            "db_prefix": obj.get("db_prefix"),
            "name": obj.get("name"),
            "shipping_zones": [CartShippingZone.from_dict(_item) for _item in obj["shipping_zones"]] if obj.get("shipping_zones") is not None else None,
            "stores_info": [CartStoreInfo.from_dict(_item) for _item in obj["stores_info"]] if obj.get("stores_info") is not None else None,
            "url": obj.get("url"),
            "version": obj.get("version"),
            "warehouses": [CartWarehouse.from_dict(_item) for _item in obj["warehouses"]] if obj.get("warehouses") is not None else None
        })
        return _obj



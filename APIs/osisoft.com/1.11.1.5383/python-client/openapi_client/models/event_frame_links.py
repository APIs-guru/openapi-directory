# coding: utf-8

"""
    PI Web API 2018 SP1 Swagger Spec

    Swagger Spec file that describes PI Web API

    The version of the OpenAPI document: 1.11.1.5383
    Contact: techsupport@osisoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventFrameLinks(BaseModel):
    """
    EventFrameLinks
    """ # noqa: E501
    annotations: Optional[StrictStr] = Field(default=None, alias="Annotations")
    attributes: Optional[StrictStr] = Field(default=None, alias="Attributes")
    categories: Optional[StrictStr] = Field(default=None, alias="Categories")
    database: Optional[StrictStr] = Field(default=None, alias="Database")
    default_attribute: Optional[StrictStr] = Field(default=None, alias="DefaultAttribute")
    end_value: Optional[StrictStr] = Field(default=None, alias="EndValue")
    event_frames: Optional[StrictStr] = Field(default=None, alias="EventFrames")
    interpolated_data: Optional[StrictStr] = Field(default=None, alias="InterpolatedData")
    parent: Optional[StrictStr] = Field(default=None, alias="Parent")
    plot_data: Optional[StrictStr] = Field(default=None, alias="PlotData")
    primary_referenced_element: Optional[StrictStr] = Field(default=None, alias="PrimaryReferencedElement")
    recorded_data: Optional[StrictStr] = Field(default=None, alias="RecordedData")
    referenced_elements: Optional[StrictStr] = Field(default=None, alias="ReferencedElements")
    security: Optional[StrictStr] = Field(default=None, alias="Security")
    security_entries: Optional[StrictStr] = Field(default=None, alias="SecurityEntries")
    var_self: Optional[StrictStr] = Field(default=None, alias="Self")
    summary_data: Optional[StrictStr] = Field(default=None, alias="SummaryData")
    template: Optional[StrictStr] = Field(default=None, alias="Template")
    value: Optional[StrictStr] = Field(default=None, alias="Value")
    __properties: ClassVar[List[str]] = ["Annotations", "Attributes", "Categories", "Database", "DefaultAttribute", "EndValue", "EventFrames", "InterpolatedData", "Parent", "PlotData", "PrimaryReferencedElement", "RecordedData", "ReferencedElements", "Security", "SecurityEntries", "Self", "SummaryData", "Template", "Value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventFrameLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventFrameLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Annotations": obj.get("Annotations"),
            "Attributes": obj.get("Attributes"),
            "Categories": obj.get("Categories"),
            "Database": obj.get("Database"),
            "DefaultAttribute": obj.get("DefaultAttribute"),
            "EndValue": obj.get("EndValue"),
            "EventFrames": obj.get("EventFrames"),
            "InterpolatedData": obj.get("InterpolatedData"),
            "Parent": obj.get("Parent"),
            "PlotData": obj.get("PlotData"),
            "PrimaryReferencedElement": obj.get("PrimaryReferencedElement"),
            "RecordedData": obj.get("RecordedData"),
            "ReferencedElements": obj.get("ReferencedElements"),
            "Security": obj.get("Security"),
            "SecurityEntries": obj.get("SecurityEntries"),
            "Self": obj.get("Self"),
            "SummaryData": obj.get("SummaryData"),
            "Template": obj.get("Template"),
            "Value": obj.get("Value")
        })
        return _obj



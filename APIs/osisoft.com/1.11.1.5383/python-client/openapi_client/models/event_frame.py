# coding: utf-8

"""
    PI Web API 2018 SP1 Swagger Spec

    Swagger Spec file that describes PI Web API

    The version of the OpenAPI document: 1.11.1.5383
    Contact: techsupport@osisoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_frame_links import EventFrameLinks
from openapi_client.models.security import Security
from openapi_client.models.value import Value
from openapi_client.models.web_exception import WebException
from typing import Optional, Set
from typing_extensions import Self

class EventFrame(BaseModel):
    """
    EventFrame
    """ # noqa: E501
    acknowledged_by: Optional[StrictStr] = Field(default=None, alias="AcknowledgedBy")
    acknowledged_date: Optional[datetime] = Field(default=None, alias="AcknowledgedDate")
    are_values_captured: Optional[StrictBool] = Field(default=None, alias="AreValuesCaptured")
    can_be_acknowledged: Optional[StrictBool] = Field(default=None, alias="CanBeAcknowledged")
    category_names: Optional[List[StrictStr]] = Field(default=None, alias="CategoryNames")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    end_time: Optional[datetime] = Field(default=None, alias="EndTime")
    extended_properties: Optional[Dict[str, Value]] = Field(default=None, alias="ExtendedProperties")
    has_children: Optional[StrictBool] = Field(default=None, alias="HasChildren")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    is_acknowledged: Optional[StrictBool] = Field(default=None, alias="IsAcknowledged")
    is_annotated: Optional[StrictBool] = Field(default=None, alias="IsAnnotated")
    is_locked: Optional[StrictBool] = Field(default=None, alias="IsLocked")
    links: Optional[EventFrameLinks] = Field(default=None, alias="Links")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    path: Optional[StrictStr] = Field(default=None, alias="Path")
    ref_element_web_ids: Optional[List[StrictStr]] = Field(default=None, alias="RefElementWebIds")
    security: Optional[Security] = Field(default=None, alias="Security")
    severity: Optional[StrictStr] = Field(default=None, alias="Severity")
    start_time: Optional[datetime] = Field(default=None, alias="StartTime")
    template_name: Optional[StrictStr] = Field(default=None, alias="TemplateName")
    web_exception: Optional[WebException] = Field(default=None, alias="WebException")
    web_id: Optional[StrictStr] = Field(default=None, alias="WebId")
    __properties: ClassVar[List[str]] = ["AcknowledgedBy", "AcknowledgedDate", "AreValuesCaptured", "CanBeAcknowledged", "CategoryNames", "Description", "EndTime", "ExtendedProperties", "HasChildren", "Id", "IsAcknowledged", "IsAnnotated", "IsLocked", "Links", "Name", "Path", "RefElementWebIds", "Security", "Severity", "StartTime", "TemplateName", "WebException", "WebId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventFrame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in extended_properties (dict)
        _field_dict = {}
        if self.extended_properties:
            for _key_extended_properties in self.extended_properties:
                if self.extended_properties[_key_extended_properties]:
                    _field_dict[_key_extended_properties] = self.extended_properties[_key_extended_properties].to_dict()
            _dict['ExtendedProperties'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['Links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security
        if self.security:
            _dict['Security'] = self.security.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_exception
        if self.web_exception:
            _dict['WebException'] = self.web_exception.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventFrame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AcknowledgedBy": obj.get("AcknowledgedBy"),
            "AcknowledgedDate": obj.get("AcknowledgedDate"),
            "AreValuesCaptured": obj.get("AreValuesCaptured"),
            "CanBeAcknowledged": obj.get("CanBeAcknowledged"),
            "CategoryNames": obj.get("CategoryNames"),
            "Description": obj.get("Description"),
            "EndTime": obj.get("EndTime"),
            "ExtendedProperties": dict(
                (_k, Value.from_dict(_v))
                for _k, _v in obj["ExtendedProperties"].items()
            )
            if obj.get("ExtendedProperties") is not None
            else None,
            "HasChildren": obj.get("HasChildren"),
            "Id": obj.get("Id"),
            "IsAcknowledged": obj.get("IsAcknowledged"),
            "IsAnnotated": obj.get("IsAnnotated"),
            "IsLocked": obj.get("IsLocked"),
            "Links": EventFrameLinks.from_dict(obj["Links"]) if obj.get("Links") is not None else None,
            "Name": obj.get("Name"),
            "Path": obj.get("Path"),
            "RefElementWebIds": obj.get("RefElementWebIds"),
            "Security": Security.from_dict(obj["Security"]) if obj.get("Security") is not None else None,
            "Severity": obj.get("Severity"),
            "StartTime": obj.get("StartTime"),
            "TemplateName": obj.get("TemplateName"),
            "WebException": WebException.from_dict(obj["WebException"]) if obj.get("WebException") is not None else None,
            "WebId": obj.get("WebId")
        })
        return _obj



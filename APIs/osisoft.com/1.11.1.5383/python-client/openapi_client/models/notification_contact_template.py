# coding: utf-8

"""
    PI Web API 2018 SP1 Swagger Spec

    Swagger Spec file that describes PI Web API

    The version of the OpenAPI document: 1.11.1.5383
    Contact: techsupport@osisoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.notification_contact_template_links import NotificationContactTemplateLinks
from openapi_client.models.web_exception import WebException
from typing import Optional, Set
from typing_extensions import Self

class NotificationContactTemplate(BaseModel):
    """
    NotificationContactTemplate
    """ # noqa: E501
    available: Optional[StrictBool] = Field(default=None, alias="Available")
    config_string: Optional[StrictStr] = Field(default=None, alias="ConfigString")
    contact_type: Optional[StrictStr] = Field(default=None, alias="ContactType")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    escalation_timeout: Optional[StrictStr] = Field(default=None, alias="EscalationTimeout")
    has_children: Optional[StrictBool] = Field(default=None, alias="HasChildren")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    links: Optional[NotificationContactTemplateLinks] = Field(default=None, alias="Links")
    maximum_retries: Optional[StrictInt] = Field(default=None, alias="MaximumRetries")
    minimum_acknowledgements: Optional[StrictInt] = Field(default=None, alias="MinimumAcknowledgements")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    notify_when_instance_ended: Optional[StrictBool] = Field(default=None, alias="NotifyWhenInstanceEnded")
    path: Optional[StrictStr] = Field(default=None, alias="Path")
    plug_in_name: Optional[StrictStr] = Field(default=None, alias="PlugInName")
    retry_interval: Optional[StrictStr] = Field(default=None, alias="RetryInterval")
    web_exception: Optional[WebException] = Field(default=None, alias="WebException")
    web_id: Optional[StrictStr] = Field(default=None, alias="WebId")
    __properties: ClassVar[List[str]] = ["Available", "ConfigString", "ContactType", "Description", "EscalationTimeout", "HasChildren", "Id", "Links", "MaximumRetries", "MinimumAcknowledgements", "Name", "NotifyWhenInstanceEnded", "Path", "PlugInName", "RetryInterval", "WebException", "WebId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationContactTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['Links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_exception
        if self.web_exception:
            _dict['WebException'] = self.web_exception.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationContactTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Available": obj.get("Available"),
            "ConfigString": obj.get("ConfigString"),
            "ContactType": obj.get("ContactType"),
            "Description": obj.get("Description"),
            "EscalationTimeout": obj.get("EscalationTimeout"),
            "HasChildren": obj.get("HasChildren"),
            "Id": obj.get("Id"),
            "Links": NotificationContactTemplateLinks.from_dict(obj["Links"]) if obj.get("Links") is not None else None,
            "MaximumRetries": obj.get("MaximumRetries"),
            "MinimumAcknowledgements": obj.get("MinimumAcknowledgements"),
            "Name": obj.get("Name"),
            "NotifyWhenInstanceEnded": obj.get("NotifyWhenInstanceEnded"),
            "Path": obj.get("Path"),
            "PlugInName": obj.get("PlugInName"),
            "RetryInterval": obj.get("RetryInterval"),
            "WebException": WebException.from_dict(obj["WebException"]) if obj.get("WebException") is not None else None,
            "WebId": obj.get("WebId")
        })
        return _obj



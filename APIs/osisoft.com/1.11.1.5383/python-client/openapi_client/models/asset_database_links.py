# coding: utf-8

"""
    PI Web API 2018 SP1 Swagger Spec

    Swagger Spec file that describes PI Web API

    The version of the OpenAPI document: 1.11.1.5383
    Contact: techsupport@osisoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AssetDatabaseLinks(BaseModel):
    """
    AssetDatabaseLinks
    """ # noqa: E501
    analysis_categories: Optional[StrictStr] = Field(default=None, alias="AnalysisCategories")
    analysis_templates: Optional[StrictStr] = Field(default=None, alias="AnalysisTemplates")
    asset_server: Optional[StrictStr] = Field(default=None, alias="AssetServer")
    attribute_categories: Optional[StrictStr] = Field(default=None, alias="AttributeCategories")
    element_categories: Optional[StrictStr] = Field(default=None, alias="ElementCategories")
    element_templates: Optional[StrictStr] = Field(default=None, alias="ElementTemplates")
    elements: Optional[StrictStr] = Field(default=None, alias="Elements")
    enumeration_sets: Optional[StrictStr] = Field(default=None, alias="EnumerationSets")
    event_frames: Optional[StrictStr] = Field(default=None, alias="EventFrames")
    security: Optional[StrictStr] = Field(default=None, alias="Security")
    security_entries: Optional[StrictStr] = Field(default=None, alias="SecurityEntries")
    var_self: Optional[StrictStr] = Field(default=None, alias="Self")
    table_categories: Optional[StrictStr] = Field(default=None, alias="TableCategories")
    tables: Optional[StrictStr] = Field(default=None, alias="Tables")
    __properties: ClassVar[List[str]] = ["AnalysisCategories", "AnalysisTemplates", "AssetServer", "AttributeCategories", "ElementCategories", "ElementTemplates", "Elements", "EnumerationSets", "EventFrames", "Security", "SecurityEntries", "Self", "TableCategories", "Tables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetDatabaseLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetDatabaseLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AnalysisCategories": obj.get("AnalysisCategories"),
            "AnalysisTemplates": obj.get("AnalysisTemplates"),
            "AssetServer": obj.get("AssetServer"),
            "AttributeCategories": obj.get("AttributeCategories"),
            "ElementCategories": obj.get("ElementCategories"),
            "ElementTemplates": obj.get("ElementTemplates"),
            "Elements": obj.get("Elements"),
            "EnumerationSets": obj.get("EnumerationSets"),
            "EventFrames": obj.get("EventFrames"),
            "Security": obj.get("Security"),
            "SecurityEntries": obj.get("SecurityEntries"),
            "Self": obj.get("Self"),
            "TableCategories": obj.get("TableCategories"),
            "Tables": obj.get("Tables")
        })
        return _obj



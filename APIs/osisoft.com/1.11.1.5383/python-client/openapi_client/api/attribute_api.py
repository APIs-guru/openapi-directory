# coding: utf-8

"""
    PI Web API 2018 SP1 Swagger Spec

    Swagger Spec file that describes PI Web API

    The version of the OpenAPI document: 1.11.1.5383
    Contact: techsupport@osisoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.attribute import Attribute
from openapi_client.models.items_attribute import ItemsAttribute
from openapi_client.models.items_attribute_category import ItemsAttributeCategory
from openapi_client.models.items_item_attribute import ItemsItemAttribute
from openapi_client.models.timed_value import TimedValue

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AttributeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def attribute_create_attribute(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the parent attribute on which to create the attribute.")],
        attribute: Annotated[Attribute, Field(description="The definition of the new attribute.")],
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a new attribute as a child of the specified attribute.


        :param web_id: The ID of the parent attribute on which to create the attribute. (required)
        :type web_id: str
        :param attribute: The definition of the new attribute. (required)
        :type attribute: Attribute
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_create_attribute_serialize(
            web_id=web_id,
            attribute=attribute,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_create_attribute_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the parent attribute on which to create the attribute.")],
        attribute: Annotated[Attribute, Field(description="The definition of the new attribute.")],
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a new attribute as a child of the specified attribute.


        :param web_id: The ID of the parent attribute on which to create the attribute. (required)
        :type web_id: str
        :param attribute: The definition of the new attribute. (required)
        :type attribute: Attribute
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_create_attribute_serialize(
            web_id=web_id,
            attribute=attribute,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_create_attribute_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the parent attribute on which to create the attribute.")],
        attribute: Annotated[Attribute, Field(description="The definition of the new attribute.")],
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new attribute as a child of the specified attribute.


        :param web_id: The ID of the parent attribute on which to create the attribute. (required)
        :type web_id: str
        :param attribute: The definition of the new attribute. (required)
        :type attribute: Attribute
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_create_attribute_serialize(
            web_id=web_id,
            attribute=attribute,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_create_attribute_serialize(
        self,
        web_id,
        attribute,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if attribute is not None:
            _body_params = attribute



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/attributes/{webId}/attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_create_config(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create or update an attribute's DataReference configuration (Create/Update PI point for PI Point DataReference).


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_create_config_serialize(
            web_id=web_id,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_create_config_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create or update an attribute's DataReference configuration (Create/Update PI point for PI Point DataReference).


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_create_config_serialize(
            web_id=web_id,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_create_config_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create or update an attribute's DataReference configuration (Create/Update PI point for PI Point DataReference).


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_create_config_serialize(
            web_id=web_id,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_create_config_serialize(
        self,
        web_id,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/attributes/{webId}/config',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_delete(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an attribute.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_delete_serialize(
            web_id=web_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_delete_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an attribute.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_delete_serialize(
            web_id=web_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_delete_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an attribute.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_delete_serialize(
            web_id=web_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_delete_serialize(
        self,
        web_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/attributes/{webId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_get(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Attribute:
        """Retrieve an attribute.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_serialize(
            web_id=web_id,
            associations=associations,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_get_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Attribute]:
        """Retrieve an attribute.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_serialize(
            web_id=web_id,
            associations=associations,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_get_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve an attribute.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_serialize(
            web_id=web_id,
            associations=associations,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_get_serialize(
        self,
        web_id,
        associations,
        selected_fields,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        if associations is not None:
            
            _query_params.append(('associations', associations))
            
        if selected_fields is not None:
            
            _query_params.append(('selectedFields', selected_fields))
            
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json', 
                    'text/html', 
                    'application/x-ms-application'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/attributes/{webId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_get_attributes(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the parent attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        category_name: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes must have this category. The default is no category filter.")] = None,
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to be returned per call (page size). The default is 1000.")] = None,
        name_filter: Annotated[Optional[StrictStr], Field(description="The name query string used for finding attributes. The default is no filter.")] = None,
        search_full_hierarchy: Annotated[Optional[StrictBool], Field(description="Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        show_excluded: Annotated[Optional[StrictBool], Field(description="Specified if the search should include attributes with the Excluded property set. The default is 'false'.")] = None,
        show_hidden: Annotated[Optional[StrictBool], Field(description="Specified if the search should include attributes with the Hidden property set. The default is 'false'.")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field or property of the object used to sort the returned collection. The default is 'Name'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order that the returned collection is sorted. The default is 'Ascending'.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index (zero based) of the items to be returned. The default is 0.")] = None,
        template_name: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes must be members of this template. The default is no template filter.")] = None,
        trait: Annotated[Optional[List[StrictStr]], Field(description="The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.")] = None,
        trait_category: Annotated[Optional[List[StrictStr]], Field(description="The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.")] = None,
        value_type: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes' value type must be the given value type. The default is no value type filter.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemsAttribute:
        """Get the child attributes of the specified attribute.


        :param web_id: The ID of the parent attribute. (required)
        :type web_id: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param category_name: Specify that returned attributes must have this category. The default is no category filter.
        :type category_name: str
        :param max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :type max_count: int
        :param name_filter: The name query string used for finding attributes. The default is no filter.
        :type name_filter: str
        :param search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :type search_full_hierarchy: bool
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :type show_excluded: bool
        :param show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :type show_hidden: bool
        :param sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :type sort_field: str
        :param sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :type sort_order: str
        :param start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :type start_index: int
        :param template_name: Specify that returned attributes must be members of this template. The default is no template filter.
        :type template_name: str
        :param trait: The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.
        :type trait: List[str]
        :param trait_category: The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.
        :type trait_category: List[str]
        :param value_type: Specify that returned attributes' value type must be the given value type. The default is no value type filter.
        :type value_type: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_attributes_serialize(
            web_id=web_id,
            associations=associations,
            category_name=category_name,
            max_count=max_count,
            name_filter=name_filter,
            search_full_hierarchy=search_full_hierarchy,
            selected_fields=selected_fields,
            show_excluded=show_excluded,
            show_hidden=show_hidden,
            sort_field=sort_field,
            sort_order=sort_order,
            start_index=start_index,
            template_name=template_name,
            trait=trait,
            trait_category=trait_category,
            value_type=value_type,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_get_attributes_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the parent attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        category_name: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes must have this category. The default is no category filter.")] = None,
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to be returned per call (page size). The default is 1000.")] = None,
        name_filter: Annotated[Optional[StrictStr], Field(description="The name query string used for finding attributes. The default is no filter.")] = None,
        search_full_hierarchy: Annotated[Optional[StrictBool], Field(description="Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        show_excluded: Annotated[Optional[StrictBool], Field(description="Specified if the search should include attributes with the Excluded property set. The default is 'false'.")] = None,
        show_hidden: Annotated[Optional[StrictBool], Field(description="Specified if the search should include attributes with the Hidden property set. The default is 'false'.")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field or property of the object used to sort the returned collection. The default is 'Name'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order that the returned collection is sorted. The default is 'Ascending'.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index (zero based) of the items to be returned. The default is 0.")] = None,
        template_name: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes must be members of this template. The default is no template filter.")] = None,
        trait: Annotated[Optional[List[StrictStr]], Field(description="The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.")] = None,
        trait_category: Annotated[Optional[List[StrictStr]], Field(description="The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.")] = None,
        value_type: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes' value type must be the given value type. The default is no value type filter.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemsAttribute]:
        """Get the child attributes of the specified attribute.


        :param web_id: The ID of the parent attribute. (required)
        :type web_id: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param category_name: Specify that returned attributes must have this category. The default is no category filter.
        :type category_name: str
        :param max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :type max_count: int
        :param name_filter: The name query string used for finding attributes. The default is no filter.
        :type name_filter: str
        :param search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :type search_full_hierarchy: bool
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :type show_excluded: bool
        :param show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :type show_hidden: bool
        :param sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :type sort_field: str
        :param sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :type sort_order: str
        :param start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :type start_index: int
        :param template_name: Specify that returned attributes must be members of this template. The default is no template filter.
        :type template_name: str
        :param trait: The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.
        :type trait: List[str]
        :param trait_category: The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.
        :type trait_category: List[str]
        :param value_type: Specify that returned attributes' value type must be the given value type. The default is no value type filter.
        :type value_type: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_attributes_serialize(
            web_id=web_id,
            associations=associations,
            category_name=category_name,
            max_count=max_count,
            name_filter=name_filter,
            search_full_hierarchy=search_full_hierarchy,
            selected_fields=selected_fields,
            show_excluded=show_excluded,
            show_hidden=show_hidden,
            sort_field=sort_field,
            sort_order=sort_order,
            start_index=start_index,
            template_name=template_name,
            trait=trait,
            trait_category=trait_category,
            value_type=value_type,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_get_attributes_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the parent attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        category_name: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes must have this category. The default is no category filter.")] = None,
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to be returned per call (page size). The default is 1000.")] = None,
        name_filter: Annotated[Optional[StrictStr], Field(description="The name query string used for finding attributes. The default is no filter.")] = None,
        search_full_hierarchy: Annotated[Optional[StrictBool], Field(description="Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        show_excluded: Annotated[Optional[StrictBool], Field(description="Specified if the search should include attributes with the Excluded property set. The default is 'false'.")] = None,
        show_hidden: Annotated[Optional[StrictBool], Field(description="Specified if the search should include attributes with the Hidden property set. The default is 'false'.")] = None,
        sort_field: Annotated[Optional[StrictStr], Field(description="The field or property of the object used to sort the returned collection. The default is 'Name'.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order that the returned collection is sorted. The default is 'Ascending'.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index (zero based) of the items to be returned. The default is 0.")] = None,
        template_name: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes must be members of this template. The default is no template filter.")] = None,
        trait: Annotated[Optional[List[StrictStr]], Field(description="The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.")] = None,
        trait_category: Annotated[Optional[List[StrictStr]], Field(description="The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.")] = None,
        value_type: Annotated[Optional[StrictStr], Field(description="Specify that returned attributes' value type must be the given value type. The default is no value type filter.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the child attributes of the specified attribute.


        :param web_id: The ID of the parent attribute. (required)
        :type web_id: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param category_name: Specify that returned attributes must have this category. The default is no category filter.
        :type category_name: str
        :param max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :type max_count: int
        :param name_filter: The name query string used for finding attributes. The default is no filter.
        :type name_filter: str
        :param search_full_hierarchy: Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
        :type search_full_hierarchy: bool
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param show_excluded: Specified if the search should include attributes with the Excluded property set. The default is 'false'.
        :type show_excluded: bool
        :param show_hidden: Specified if the search should include attributes with the Hidden property set. The default is 'false'.
        :type show_hidden: bool
        :param sort_field: The field or property of the object used to sort the returned collection. The default is 'Name'.
        :type sort_field: str
        :param sort_order: The order that the returned collection is sorted. The default is 'Ascending'.
        :type sort_order: str
        :param start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :type start_index: int
        :param template_name: Specify that returned attributes must be members of this template. The default is no template filter.
        :type template_name: str
        :param trait: The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.
        :type trait: List[str]
        :param trait_category: The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.
        :type trait_category: List[str]
        :param value_type: Specify that returned attributes' value type must be the given value type. The default is no value type filter.
        :type value_type: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_attributes_serialize(
            web_id=web_id,
            associations=associations,
            category_name=category_name,
            max_count=max_count,
            name_filter=name_filter,
            search_full_hierarchy=search_full_hierarchy,
            selected_fields=selected_fields,
            show_excluded=show_excluded,
            show_hidden=show_hidden,
            sort_field=sort_field,
            sort_order=sort_order,
            start_index=start_index,
            template_name=template_name,
            trait=trait,
            trait_category=trait_category,
            value_type=value_type,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_get_attributes_serialize(
        self,
        web_id,
        associations,
        category_name,
        max_count,
        name_filter,
        search_full_hierarchy,
        selected_fields,
        show_excluded,
        show_hidden,
        sort_field,
        sort_order,
        start_index,
        template_name,
        trait,
        trait_category,
        value_type,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'trait': 'multi',
            'traitCategory': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        if associations is not None:
            
            _query_params.append(('associations', associations))
            
        if category_name is not None:
            
            _query_params.append(('categoryName', category_name))
            
        if max_count is not None:
            
            _query_params.append(('maxCount', max_count))
            
        if name_filter is not None:
            
            _query_params.append(('nameFilter', name_filter))
            
        if search_full_hierarchy is not None:
            
            _query_params.append(('searchFullHierarchy', search_full_hierarchy))
            
        if selected_fields is not None:
            
            _query_params.append(('selectedFields', selected_fields))
            
        if show_excluded is not None:
            
            _query_params.append(('showExcluded', show_excluded))
            
        if show_hidden is not None:
            
            _query_params.append(('showHidden', show_hidden))
            
        if sort_field is not None:
            
            _query_params.append(('sortField', sort_field))
            
        if sort_order is not None:
            
            _query_params.append(('sortOrder', sort_order))
            
        if start_index is not None:
            
            _query_params.append(('startIndex', start_index))
            
        if template_name is not None:
            
            _query_params.append(('templateName', template_name))
            
        if trait is not None:
            
            _query_params.append(('trait', trait))
            
        if trait_category is not None:
            
            _query_params.append(('traitCategory', trait_category))
            
        if value_type is not None:
            
            _query_params.append(('valueType', value_type))
            
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json', 
                    'text/html', 
                    'application/x-ms-application'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/attributes/{webId}/attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_get_attributes_query(
        self,
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        database_web_id: Annotated[Optional[StrictStr], Field(description="The ID of the asset database to use as the root of the query.")] = None,
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to be returned per call (page size). The default is 1000.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \"query=Element:{ Name:='MyElement' } Type:=Int32\".")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index (zero based) of the items to be returned. The default is 0.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemsAttribute:
        """Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string.


        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param database_web_id: The ID of the asset database to use as the root of the query.
        :type database_web_id: str
        :param max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :type max_count: int
        :param query: The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \"query=Element:{ Name:='MyElement' } Type:=Int32\".
        :type query: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :type start_index: int
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_attributes_query_serialize(
            associations=associations,
            database_web_id=database_web_id,
            max_count=max_count,
            query=query,
            selected_fields=selected_fields,
            start_index=start_index,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_get_attributes_query_with_http_info(
        self,
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        database_web_id: Annotated[Optional[StrictStr], Field(description="The ID of the asset database to use as the root of the query.")] = None,
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to be returned per call (page size). The default is 1000.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \"query=Element:{ Name:='MyElement' } Type:=Int32\".")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index (zero based) of the items to be returned. The default is 0.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemsAttribute]:
        """Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string.


        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param database_web_id: The ID of the asset database to use as the root of the query.
        :type database_web_id: str
        :param max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :type max_count: int
        :param query: The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \"query=Element:{ Name:='MyElement' } Type:=Int32\".
        :type query: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :type start_index: int
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_attributes_query_serialize(
            associations=associations,
            database_web_id=database_web_id,
            max_count=max_count,
            query=query,
            selected_fields=selected_fields,
            start_index=start_index,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_get_attributes_query_without_preload_content(
        self,
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        database_web_id: Annotated[Optional[StrictStr], Field(description="The ID of the asset database to use as the root of the query.")] = None,
        max_count: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to be returned per call (page size). The default is 1000.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \"query=Element:{ Name:='MyElement' } Type:=Int32\".")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        start_index: Annotated[Optional[StrictInt], Field(description="The starting index (zero based) of the items to be returned. The default is 0.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string.


        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param database_web_id: The ID of the asset database to use as the root of the query.
        :type database_web_id: str
        :param max_count: The maximum number of objects to be returned per call (page size). The default is 1000.
        :type max_count: int
        :param query: The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \"query=Element:{ Name:='MyElement' } Type:=Int32\".
        :type query: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param start_index: The starting index (zero based) of the items to be returned. The default is 0.
        :type start_index: int
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_attributes_query_serialize(
            associations=associations,
            database_web_id=database_web_id,
            max_count=max_count,
            query=query,
            selected_fields=selected_fields,
            start_index=start_index,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_get_attributes_query_serialize(
        self,
        associations,
        database_web_id,
        max_count,
        query,
        selected_fields,
        start_index,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if associations is not None:
            
            _query_params.append(('associations', associations))
            
        if database_web_id is not None:
            
            _query_params.append(('databaseWebId', database_web_id))
            
        if max_count is not None:
            
            _query_params.append(('maxCount', max_count))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if selected_fields is not None:
            
            _query_params.append(('selectedFields', selected_fields))
            
        if start_index is not None:
            
            _query_params.append(('startIndex', start_index))
            
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json', 
                    'text/html', 
                    'application/x-ms-application'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/attributes/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_get_by_path(
        self,
        path: Annotated[StrictStr, Field(description="The path to the attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Attribute:
        """Retrieve an attribute by path.

        This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.

        :param path: The path to the attribute. (required)
        :type path: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_by_path_serialize(
            path=path,
            associations=associations,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_get_by_path_with_http_info(
        self,
        path: Annotated[StrictStr, Field(description="The path to the attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Attribute]:
        """Retrieve an attribute by path.

        This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.

        :param path: The path to the attribute. (required)
        :type path: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_by_path_serialize(
            path=path,
            associations=associations,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_get_by_path_without_preload_content(
        self,
        path: Annotated[StrictStr, Field(description="The path to the attribute.")],
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve an attribute by path.

        This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.

        :param path: The path to the attribute. (required)
        :type path: str
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_by_path_serialize(
            path=path,
            associations=associations,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_get_by_path_serialize(
        self,
        path,
        associations,
        selected_fields,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if path is not None:
            
            _query_params.append(('path', path))
            
        if associations is not None:
            
            _query_params.append(('associations', associations))
            
        if selected_fields is not None:
            
            _query_params.append(('selectedFields', selected_fields))
            
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json', 
                    'text/html', 
                    'application/x-ms-application'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/attributes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_get_categories(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemsAttributeCategory:
        """Get an attribute's categories.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_categories_serialize(
            web_id=web_id,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttributeCategory",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_get_categories_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemsAttributeCategory]:
        """Get an attribute's categories.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_categories_serialize(
            web_id=web_id,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttributeCategory",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_get_categories_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an attribute's categories.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_categories_serialize(
            web_id=web_id,
            selected_fields=selected_fields,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsAttributeCategory",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_get_categories_serialize(
        self,
        web_id,
        selected_fields,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        if selected_fields is not None:
            
            _query_params.append(('selectedFields', selected_fields))
            
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json', 
                    'text/html', 
                    'application/x-ms-application'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/attributes/{webId}/categories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_get_multiple(
        self,
        as_parallel: Annotated[Optional[StrictBool], Field(description="Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.")] = None,
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        include_mode: Annotated[Optional[StrictStr], Field(description="The include mode for the return list. The default is 'All'.")] = None,
        path: Annotated[Optional[List[StrictStr]], Field(description="The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id: Annotated[Optional[List[StrictStr]], Field(description="The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemsItemAttribute:
        """Retrieve multiple attributes by web id or path.


        :param as_parallel: Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
        :type as_parallel: bool
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param include_mode: The include mode for the return list. The default is 'All'.
        :type include_mode: str
        :param path: The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
        :type path: List[str]
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id: The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
        :type web_id: List[str]
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_multiple_serialize(
            as_parallel=as_parallel,
            associations=associations,
            include_mode=include_mode,
            path=path,
            selected_fields=selected_fields,
            web_id=web_id,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsItemAttribute",
            '207': "ItemsItemAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_get_multiple_with_http_info(
        self,
        as_parallel: Annotated[Optional[StrictBool], Field(description="Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.")] = None,
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        include_mode: Annotated[Optional[StrictStr], Field(description="The include mode for the return list. The default is 'All'.")] = None,
        path: Annotated[Optional[List[StrictStr]], Field(description="The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id: Annotated[Optional[List[StrictStr]], Field(description="The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemsItemAttribute]:
        """Retrieve multiple attributes by web id or path.


        :param as_parallel: Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
        :type as_parallel: bool
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param include_mode: The include mode for the return list. The default is 'All'.
        :type include_mode: str
        :param path: The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
        :type path: List[str]
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id: The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
        :type web_id: List[str]
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_multiple_serialize(
            as_parallel=as_parallel,
            associations=associations,
            include_mode=include_mode,
            path=path,
            selected_fields=selected_fields,
            web_id=web_id,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsItemAttribute",
            '207': "ItemsItemAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_get_multiple_without_preload_content(
        self,
        as_parallel: Annotated[Optional[StrictBool], Field(description="Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.")] = None,
        associations: Annotated[Optional[StrictStr], Field(description="Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.")] = None,
        include_mode: Annotated[Optional[StrictStr], Field(description="The include mode for the return list. The default is 'All'.")] = None,
        path: Annotated[Optional[List[StrictStr]], Field(description="The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.")] = None,
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        web_id: Annotated[Optional[List[StrictStr]], Field(description="The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.")] = None,
        web_id_type: Annotated[Optional[StrictStr], Field(description="Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve multiple attributes by web id or path.


        :param as_parallel: Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
        :type as_parallel: bool
        :param associations: Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
        :type associations: str
        :param include_mode: The include mode for the return list. The default is 'All'.
        :type include_mode: str
        :param path: The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
        :type path: List[str]
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param web_id: The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
        :type web_id: List[str]
        :param web_id_type: Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
        :type web_id_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_multiple_serialize(
            as_parallel=as_parallel,
            associations=associations,
            include_mode=include_mode,
            path=path,
            selected_fields=selected_fields,
            web_id=web_id,
            web_id_type=web_id_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsItemAttribute",
            '207': "ItemsItemAttribute",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_get_multiple_serialize(
        self,
        as_parallel,
        associations,
        include_mode,
        path,
        selected_fields,
        web_id,
        web_id_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'path': 'multi',
            'webId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if as_parallel is not None:
            
            _query_params.append(('asParallel', as_parallel))
            
        if associations is not None:
            
            _query_params.append(('associations', associations))
            
        if include_mode is not None:
            
            _query_params.append(('includeMode', include_mode))
            
        if path is not None:
            
            _query_params.append(('path', path))
            
        if selected_fields is not None:
            
            _query_params.append(('selectedFields', selected_fields))
            
        if web_id is not None:
            
            _query_params.append(('webId', web_id))
            
        if web_id_type is not None:
            
            _query_params.append(('webIdType', web_id_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json', 
                    'text/html', 
                    'application/x-ms-application'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/attributes/multiple',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_get_value(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimedValue:
        """Get the attribute's value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_value_serialize(
            web_id=web_id,
            selected_fields=selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimedValue",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_get_value_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimedValue]:
        """Get the attribute's value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_value_serialize(
            web_id=web_id,
            selected_fields=selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimedValue",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_get_value_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        selected_fields: Annotated[Optional[StrictStr], Field(description="List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the attribute's value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.


        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param selected_fields: List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
        :type selected_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_get_value_serialize(
            web_id=web_id,
            selected_fields=selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimedValue",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_get_value_serialize(
        self,
        web_id,
        selected_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        if selected_fields is not None:
            
            _query_params.append(('selectedFields', selected_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json', 
                    'text/html', 
                    'application/x-ms-application'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/attributes/{webId}/value',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_set_value(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        value: Annotated[TimedValue, Field(description="The value to write.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.

        Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.

        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param value: The value to write. (required)
        :type value: TimedValue
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_set_value_serialize(
            web_id=web_id,
            value=value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_set_value_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        value: Annotated[TimedValue, Field(description="The value to write.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.

        Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.

        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param value: The value to write. (required)
        :type value: TimedValue
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_set_value_serialize(
            web_id=web_id,
            value=value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_set_value_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        value: Annotated[TimedValue, Field(description="The value to write.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.

        Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.

        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param value: The value to write. (required)
        :type value: TimedValue
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_set_value_serialize(
            web_id=web_id,
            value=value,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_set_value_serialize(
        self,
        web_id,
        value,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if value is not None:
            _body_params = value



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/attributes/{webId}/value',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def attribute_update(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        attribute: Annotated[Attribute, Field(description="A partial attribute containing the desired changes.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update an attribute by replacing items in its definition.

        If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template's design. Once a template is applied to an attribute, it can not be changed.

        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param attribute: A partial attribute containing the desired changes. (required)
        :type attribute: Attribute
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_update_serialize(
            web_id=web_id,
            attribute=attribute,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def attribute_update_with_http_info(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        attribute: Annotated[Attribute, Field(description="A partial attribute containing the desired changes.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update an attribute by replacing items in its definition.

        If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template's design. Once a template is applied to an attribute, it can not be changed.

        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param attribute: A partial attribute containing the desired changes. (required)
        :type attribute: Attribute
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_update_serialize(
            web_id=web_id,
            attribute=attribute,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def attribute_update_without_preload_content(
        self,
        web_id: Annotated[StrictStr, Field(description="The ID of the attribute.")],
        attribute: Annotated[Attribute, Field(description="A partial attribute containing the desired changes.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an attribute by replacing items in its definition.

        If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template's design. Once a template is applied to an attribute, it can not be changed.

        :param web_id: The ID of the attribute. (required)
        :type web_id: str
        :param attribute: A partial attribute containing the desired changes. (required)
        :type attribute: Attribute
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._attribute_update_serialize(
            web_id=web_id,
            attribute=attribute,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _attribute_update_serialize(
        self,
        web_id,
        attribute,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if web_id is not None:
            _path_params['webId'] = web_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if attribute is not None:
            _body_params = attribute



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'text/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/attributes/{webId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



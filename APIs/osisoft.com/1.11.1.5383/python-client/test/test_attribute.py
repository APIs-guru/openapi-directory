# coding: utf-8

"""
    PI Web API 2018 SP1 Swagger Spec

    Swagger Spec file that describes PI Web API

    The version of the OpenAPI document: 1.11.1.5383
    Contact: techsupport@osisoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.attribute import Attribute

class TestAttribute(unittest.TestCase):
    """Attribute unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Attribute:
        """Test Attribute
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Attribute`
        """
        model = Attribute()
        if include_optional:
            return Attribute(
                category_names = [Energy Savings Targets],
                config_string = 'SELECT [Water Use] FROM [Energy Use 2008] WHERE [Asset ID] = '%Element%'',
                data_reference = openapi_client.models.data_reference.DataReference(
                    pi_point = openapi_client.models.pi_point_data_reference.PIPointDataReference(
                        descriptor = '12 Hour Sine Wave', 
                        digital_set_name = '', 
                        display_digits = -5, 
                        engineering_units = '', 
                        future = False, 
                        id = 82, 
                        name = 'PointName', 
                        path = '\\MyPIServer\PointName', 
                        point_class = 'classic', 
                        point_type = 'Float32', 
                        span = 100.0, 
                        step = False, 
                        web_id = 'I1DPa70Wf0zBA06CLkV9ovNQgQCAAAAA', 
                        zero = 0.0, ), 
                    type = 'PI Point', 
                    web_exception = openapi_client.models.web_exception.WebException(
                        errors = [An error has occurred.], 
                        status_code = 500, ), ),
                data_reference_plug_in = 'Table Lookup',
                default_units_name = 'liter',
                default_units_name_abbreviation = 'L',
                description = '2008 Water Use',
                display_digits = -5,
                has_children = False,
                id = '75de231b-b591-49b1-b138-e725a77165c2',
                is_configuration_item = False,
                is_excluded = False,
                is_hidden = False,
                is_manual_data_entry = False,
                links = openapi_client.models.attribute_links.AttributeLinks(
                    attributes = '', 
                    categories = '', 
                    element = '', 
                    end_value = '', 
                    enumeration_set = '', 
                    enumeration_values = '', 
                    event_frame = '', 
                    interpolated_data = '', 
                    parent = '', 
                    plot_data = '', 
                    point = '', 
                    recorded_data = '', 
                    self = '', 
                    summary_data = '', 
                    template = '', 
                    trait = '', 
                    value = '', ),
                name = 'Water',
                path = '\\MyAssetServer\MyDatabase\CityName\EngineeringProcess\Equipment\MachineName|Water(2008)',
                paths = [\\MyAssetServer\MyDatabase\MyElement|MyAttribute, \\MyAssetServer\MyDatabase\ReferencingElement\MyElement|MyAttribute],
                span = 100.0,
                step = False,
                trait_name = 'LimitLoLo',
                type = 'Int32',
                type_qualifier = '',
                web_exception = openapi_client.models.web_exception.WebException(
                    errors = [An error has occurred.], 
                    status_code = 500, ),
                web_id = 'I1AbEDqD5loBNH0erqeqJodtALAYIKyyz2F5BGAxQAVXYRDBAGyPedZG1sUmxOOclp3Flwg',
                zero = 0.0
            )
        else:
            return Attribute(
        )
        """

    def testAttribute(self):
        """Test Attribute"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

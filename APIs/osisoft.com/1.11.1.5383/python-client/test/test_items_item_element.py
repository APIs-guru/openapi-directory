# coding: utf-8

"""
    PI Web API 2018 SP1 Swagger Spec

    Swagger Spec file that describes PI Web API

    The version of the OpenAPI document: 1.11.1.5383
    Contact: techsupport@osisoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.items_item_element import ItemsItemElement

class TestItemsItemElement(unittest.TestCase):
    """ItemsItemElement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ItemsItemElement:
        """Test ItemsItemElement
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ItemsItemElement`
        """
        model = ItemsItemElement()
        if include_optional:
            return ItemsItemElement(
                items = [
                    openapi_client.models.item[element].Item[Element](
                        exception = openapi_client.models.errors.Errors(
                            errors = [An error has occurred.], ), 
                        identifier = '\\server\path', 
                        identifier_type = 'Path', 
                        object = openapi_client.models.element.Element(
                            category_names = [Equipment Assets], 
                            description = 'Manufacturing Equipment MachineName', 
                            extended_properties = {
                                'key' : openapi_client.models.value.Value(
                                    value = 12.3, 
                                    web_exception = openapi_client.models.web_exception.WebException(
                                        status_code = 500, ), )
                                }, 
                            has_children = False, 
                            id = 'cbb28260-853d-11e4-80c5-00155d844304', 
                            links = openapi_client.models.element_links.ElementLinks(
                                analyses = '', 
                                attributes = '', 
                                categories = '', 
                                database = '', 
                                default_attribute = '', 
                                elements = '', 
                                end_value = '', 
                                event_frames = '', 
                                interpolated_data = '', 
                                notification_rules = '', 
                                parent = '', 
                                plot_data = '', 
                                recorded_data = '', 
                                security = '', 
                                security_entries = '', 
                                self = '', 
                                summary_data = '', 
                                template = '', ), 
                            name = 'MachineName', 
                            path = '\\MyAssetServer\MyDatabase\CityName\EngineeringProcess\Equipment\MachineName', 
                            paths = [
                                ''
                                ], 
                            template_name = 'MachineName', 
                            web_exception = openapi_client.models.web_exception.WebException(
                                status_code = 500, ), 
                            web_id = 'I1EmDqD5loBNH0erqeqJodtALAYIKyyz2F5BGAxQAVXYRDBA', ), )
                    ],
                links = openapi_client.models.pagination_links.PaginationLinks(
                    first = '', 
                    last = '', 
                    next = '', 
                    previous = '', )
            )
        else:
            return ItemsItemElement(
        )
        """

    def testItemsItemElement(self):
        """Test ItemsItemElement"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

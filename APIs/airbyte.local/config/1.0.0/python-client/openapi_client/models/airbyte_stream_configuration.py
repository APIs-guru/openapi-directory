# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.destination_sync_mode import DestinationSyncMode
from openapi_client.models.selected_field_info import SelectedFieldInfo
from openapi_client.models.sync_mode import SyncMode
from typing import Optional, Set
from typing_extensions import Self

class AirbyteStreamConfiguration(BaseModel):
    """
    the mutable part of the stream to configure the destination
    """ # noqa: E501
    alias_name: Optional[StrictStr] = Field(default=None, description="Alias name to the stream to be used in the destination", alias="aliasName")
    cursor_field: Optional[List[StrictStr]] = Field(default=None, description="Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.", alias="cursorField")
    destination_sync_mode: DestinationSyncMode = Field(alias="destinationSyncMode")
    field_selection_enabled: Optional[StrictBool] = Field(default=None, description="Whether field selection should be enabled. If this is true, only the properties in `selectedFields` will be included.", alias="fieldSelectionEnabled")
    primary_key: Optional[List[List[StrictStr]]] = Field(default=None, description="Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.", alias="primaryKey")
    selected: Optional[StrictBool] = Field(default=None, description="If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not")
    selected_fields: Optional[List[SelectedFieldInfo]] = Field(default=None, description="Paths to the fields that will be included in the configured catalog. This must be set if `fieldSelectedEnabled` is set. An empty list indicates that no properties will be included.", alias="selectedFields")
    suggested: Optional[StrictBool] = Field(default=None, description="Does the connector suggest that this stream be enabled by default?")
    sync_mode: SyncMode = Field(alias="syncMode")
    __properties: ClassVar[List[str]] = ["aliasName", "cursorField", "destinationSyncMode", "fieldSelectionEnabled", "primaryKey", "selected", "selectedFields", "suggested", "syncMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AirbyteStreamConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in selected_fields (list)
        _items = []
        if self.selected_fields:
            for _item_selected_fields in self.selected_fields:
                if _item_selected_fields:
                    _items.append(_item_selected_fields.to_dict())
            _dict['selectedFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AirbyteStreamConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aliasName": obj.get("aliasName"),
            "cursorField": obj.get("cursorField"),
            "destinationSyncMode": obj.get("destinationSyncMode"),
            "fieldSelectionEnabled": obj.get("fieldSelectionEnabled"),
            "primaryKey": obj.get("primaryKey"),
            "selected": obj.get("selected"),
            "selectedFields": [SelectedFieldInfo.from_dict(_item) for _item in obj["selectedFields"]] if obj.get("selectedFields") is not None else None,
            "suggested": obj.get("suggested"),
            "syncMode": obj.get("syncMode")
        })
        return _obj



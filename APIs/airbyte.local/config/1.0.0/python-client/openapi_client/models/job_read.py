# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_config_type import JobConfigType
from openapi_client.models.job_status import JobStatus
from openapi_client.models.reset_config import ResetConfig
from typing import Optional, Set
from typing_extensions import Self

class JobRead(BaseModel):
    """
    JobRead
    """ # noqa: E501
    config_id: StrictStr = Field(alias="configId")
    config_type: JobConfigType = Field(alias="configType")
    created_at: StrictInt = Field(alias="createdAt")
    id: StrictInt
    reset_config: Optional[ResetConfig] = Field(default=None, alias="resetConfig")
    started_at: Optional[StrictInt] = Field(default=None, alias="startedAt")
    status: JobStatus
    updated_at: StrictInt = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["configId", "configType", "createdAt", "id", "resetConfig", "startedAt", "status", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reset_config
        if self.reset_config:
            _dict['resetConfig'] = self.reset_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configId": obj.get("configId"),
            "configType": obj.get("configType"),
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id"),
            "resetConfig": ResetConfig.from_dict(obj["resetConfig"]) if obj.get("resetConfig") is not None else None,
            "startedAt": obj.get("startedAt"),
            "status": obj.get("status"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.airbyte_catalog import AirbyteCatalog
from openapi_client.models.connection_schedule import ConnectionSchedule
from openapi_client.models.connection_schedule_data import ConnectionScheduleData
from openapi_client.models.connection_schedule_type import ConnectionScheduleType
from openapi_client.models.connection_status import ConnectionStatus
from openapi_client.models.geography import Geography
from openapi_client.models.namespace_definition_type import NamespaceDefinitionType
from openapi_client.models.non_breaking_changes_preference import NonBreakingChangesPreference
from openapi_client.models.resource_requirements import ResourceRequirements
from openapi_client.models.web_backend_operation_create_or_update import WebBackendOperationCreateOrUpdate
from typing import Optional, Set
from typing_extensions import Self

class WebBackendConnectionUpdate(BaseModel):
    """
    Used to apply a patch-style update to a connection, which means that null properties remain unchanged
    """ # noqa: E501
    connection_id: StrictStr = Field(alias="connectionId")
    geography: Optional[Geography] = None
    name: Optional[StrictStr] = Field(default=None, description="Name that will be set to the connection")
    namespace_definition: Optional[NamespaceDefinitionType] = Field(default=None, alias="namespaceDefinition")
    namespace_format: Optional[StrictStr] = Field(default=None, description="Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If \"${SOURCE_NAMESPACE}\" then behaves like namespaceDefinition = 'source'.", alias="namespaceFormat")
    non_breaking_changes_preference: Optional[NonBreakingChangesPreference] = Field(default=None, alias="nonBreakingChangesPreference")
    notify_schema_changes: Optional[StrictBool] = Field(default=None, alias="notifySchemaChanges")
    operations: Optional[List[WebBackendOperationCreateOrUpdate]] = None
    prefix: Optional[StrictStr] = Field(default=None, description="Prefix that will be prepended to the name of each stream when it is written to the destination.")
    resource_requirements: Optional[ResourceRequirements] = Field(default=None, alias="resourceRequirements")
    schedule: Optional[ConnectionSchedule] = None
    schedule_data: Optional[ConnectionScheduleData] = Field(default=None, alias="scheduleData")
    schedule_type: Optional[ConnectionScheduleType] = Field(default=None, alias="scheduleType")
    skip_reset: Optional[StrictBool] = Field(default=None, alias="skipReset")
    source_catalog_id: Optional[StrictStr] = Field(default=None, alias="sourceCatalogId")
    status: Optional[ConnectionStatus] = None
    sync_catalog: Optional[AirbyteCatalog] = Field(default=None, alias="syncCatalog")
    __properties: ClassVar[List[str]] = ["connectionId", "geography", "name", "namespaceDefinition", "namespaceFormat", "nonBreakingChangesPreference", "notifySchemaChanges", "operations", "prefix", "resourceRequirements", "schedule", "scheduleData", "scheduleType", "skipReset", "sourceCatalogId", "status", "syncCatalog"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebBackendConnectionUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item_operations in self.operations:
                if _item_operations:
                    _items.append(_item_operations.to_dict())
            _dict['operations'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_requirements
        if self.resource_requirements:
            _dict['resourceRequirements'] = self.resource_requirements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_data
        if self.schedule_data:
            _dict['scheduleData'] = self.schedule_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sync_catalog
        if self.sync_catalog:
            _dict['syncCatalog'] = self.sync_catalog.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebBackendConnectionUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionId": obj.get("connectionId"),
            "geography": obj.get("geography"),
            "name": obj.get("name"),
            "namespaceDefinition": obj.get("namespaceDefinition"),
            "namespaceFormat": obj.get("namespaceFormat"),
            "nonBreakingChangesPreference": obj.get("nonBreakingChangesPreference"),
            "notifySchemaChanges": obj.get("notifySchemaChanges"),
            "operations": [WebBackendOperationCreateOrUpdate.from_dict(_item) for _item in obj["operations"]] if obj.get("operations") is not None else None,
            "prefix": obj.get("prefix"),
            "resourceRequirements": ResourceRequirements.from_dict(obj["resourceRequirements"]) if obj.get("resourceRequirements") is not None else None,
            "schedule": ConnectionSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "scheduleData": ConnectionScheduleData.from_dict(obj["scheduleData"]) if obj.get("scheduleData") is not None else None,
            "scheduleType": obj.get("scheduleType"),
            "skipReset": obj.get("skipReset"),
            "sourceCatalogId": obj.get("sourceCatalogId"),
            "status": obj.get("status"),
            "syncCatalog": AirbyteCatalog.from_dict(obj["syncCatalog"]) if obj.get("syncCatalog") is not None else None
        })
        return _obj



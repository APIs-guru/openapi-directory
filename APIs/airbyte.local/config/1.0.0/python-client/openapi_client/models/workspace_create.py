# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.geography import Geography
from openapi_client.models.notification import Notification
from openapi_client.models.webhook_config_write import WebhookConfigWrite
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceCreate(BaseModel):
    """
    WorkspaceCreate
    """ # noqa: E501
    anonymous_data_collection: Optional[StrictBool] = Field(default=None, alias="anonymousDataCollection")
    default_geography: Optional[Geography] = Field(default=None, alias="defaultGeography")
    display_setup_wizard: Optional[StrictBool] = Field(default=None, alias="displaySetupWizard")
    email: Optional[StrictStr] = None
    name: StrictStr
    news: Optional[StrictBool] = None
    notifications: Optional[List[Notification]] = None
    security_updates: Optional[StrictBool] = Field(default=None, alias="securityUpdates")
    webhook_configs: Optional[List[WebhookConfigWrite]] = Field(default=None, alias="webhookConfigs")
    __properties: ClassVar[List[str]] = ["anonymousDataCollection", "defaultGeography", "displaySetupWizard", "email", "name", "news", "notifications", "securityUpdates", "webhookConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item_notifications in self.notifications:
                if _item_notifications:
                    _items.append(_item_notifications.to_dict())
            _dict['notifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in webhook_configs (list)
        _items = []
        if self.webhook_configs:
            for _item_webhook_configs in self.webhook_configs:
                if _item_webhook_configs:
                    _items.append(_item_webhook_configs.to_dict())
            _dict['webhookConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anonymousDataCollection": obj.get("anonymousDataCollection"),
            "defaultGeography": obj.get("defaultGeography"),
            "displaySetupWizard": obj.get("displaySetupWizard"),
            "email": obj.get("email"),
            "name": obj.get("name"),
            "news": obj.get("news"),
            "notifications": [Notification.from_dict(_item) for _item in obj["notifications"]] if obj.get("notifications") is not None else None,
            "securityUpdates": obj.get("securityUpdates"),
            "webhookConfigs": [WebhookConfigWrite.from_dict(_item) for _item in obj["webhookConfigs"]] if obj.get("webhookConfigs") is not None else None
        })
        return _obj



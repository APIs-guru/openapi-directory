# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_debug_info_read import JobDebugInfoRead

class TestJobDebugInfoRead(unittest.TestCase):
    """JobDebugInfoRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobDebugInfoRead:
        """Test JobDebugInfoRead
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobDebugInfoRead`
        """
        model = JobDebugInfoRead()
        if include_optional:
            return JobDebugInfoRead(
                attempts = [
                    openapi_client.models.attempt_info_read.AttemptInfoRead(
                        attempt = openapi_client.models.attempt_read.AttemptRead(
                            bytes_synced = 56, 
                            created_at = 56, 
                            ended_at = 56, 
                            failure_summary = openapi_client.models.attempt_failure_summary.AttemptFailureSummary(
                                failures = [
                                    openapi_client.models.attempt_failure_reason.AttemptFailureReason(
                                        external_message = '', 
                                        failure_origin = 'source', 
                                        failure_type = 'config_error', 
                                        internal_message = '', 
                                        retryable = True, 
                                        stacktrace = '', 
                                        timestamp = 56, )
                                    ], 
                                partial_success = True, ), 
                            id = 56, 
                            records_synced = 56, 
                            status = 'running', 
                            stream_stats = [
                                openapi_client.models.attempt_stream_stats.AttemptStreamStats(
                                    stats = openapi_client.models.attempt_stats.AttemptStats(
                                        bytes_emitted = 56, 
                                        estimated_bytes = 56, 
                                        estimated_records = 56, 
                                        records_committed = 56, 
                                        records_emitted = 56, 
                                        state_messages_emitted = 56, ), 
                                    stream_name = '', 
                                    stream_namespace = '', )
                                ], 
                            total_stats = openapi_client.models.attempt_stats.AttemptStats(
                                bytes_emitted = 56, 
                                estimated_bytes = 56, 
                                estimated_records = 56, 
                                records_committed = 56, 
                                records_emitted = 56, 
                                state_messages_emitted = 56, ), 
                            updated_at = 56, ), 
                        logs = openapi_client.models.log_read.LogRead(
                            log_lines = [
                                ''
                                ], ), )
                    ],
                job = openapi_client.models.job_debug_read.JobDebugRead(
                    airbyte_version = '', 
                    config_id = '', 
                    config_type = 'check_connection_source', 
                    destination_definition = openapi_client.models.destination_definition_read.DestinationDefinitionRead(
                        destination_definition_id = '', 
                        docker_image_tag = '', 
                        docker_repository = '', 
                        documentation_url = '', 
                        icon = '', 
                        name = '', 
                        normalization_config = openapi_client.models.normalization_destination_definition_config.NormalizationDestinationDefinitionConfig(
                            normalization_integration_type = '', 
                            normalization_repository = '', 
                            normalization_tag = '', 
                            supported = True, ), 
                        protocol_version = '', 
                        release_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        release_stage = 'alpha', 
                        resource_requirements = openapi_client.models.actor_definition_resource_requirements.ActorDefinitionResourceRequirements(
                            default = openapi_client.models.resource_requirements.ResourceRequirements(
                                cpu_limit = '', 
                                cpu_request = '', 
                                memory_limit = '', 
                                memory_request = '', ), 
                            job_specific = [
                                openapi_client.models.job_type_resource_limit.JobTypeResourceLimit(
                                    job_type = 'get_spec', 
                                    resource_requirements = openapi_client.models.resource_requirements.ResourceRequirements(
                                        cpu_limit = '', 
                                        cpu_request = '', 
                                        memory_limit = '', 
                                        memory_request = '', ), )
                                ], ), 
                        supports_dbt = True, ), 
                    id = 56, 
                    source_definition = openapi_client.models.source_definition_read.SourceDefinitionRead(
                        docker_image_tag = '', 
                        docker_repository = '', 
                        documentation_url = '', 
                        icon = '', 
                        name = '', 
                        protocol_version = '', 
                        release_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        source_definition_id = '', 
                        source_type = 'api', ), 
                    status = 'pending', ),
                workflow_state = openapi_client.models.workflow_state_read.WorkflowStateRead(
                    running = True, )
            )
        else:
            return JobDebugInfoRead(
                attempts = [
                    openapi_client.models.attempt_info_read.AttemptInfoRead(
                        attempt = openapi_client.models.attempt_read.AttemptRead(
                            bytes_synced = 56, 
                            created_at = 56, 
                            ended_at = 56, 
                            failure_summary = openapi_client.models.attempt_failure_summary.AttemptFailureSummary(
                                failures = [
                                    openapi_client.models.attempt_failure_reason.AttemptFailureReason(
                                        external_message = '', 
                                        failure_origin = 'source', 
                                        failure_type = 'config_error', 
                                        internal_message = '', 
                                        retryable = True, 
                                        stacktrace = '', 
                                        timestamp = 56, )
                                    ], 
                                partial_success = True, ), 
                            id = 56, 
                            records_synced = 56, 
                            status = 'running', 
                            stream_stats = [
                                openapi_client.models.attempt_stream_stats.AttemptStreamStats(
                                    stats = openapi_client.models.attempt_stats.AttemptStats(
                                        bytes_emitted = 56, 
                                        estimated_bytes = 56, 
                                        estimated_records = 56, 
                                        records_committed = 56, 
                                        records_emitted = 56, 
                                        state_messages_emitted = 56, ), 
                                    stream_name = '', 
                                    stream_namespace = '', )
                                ], 
                            total_stats = openapi_client.models.attempt_stats.AttemptStats(
                                bytes_emitted = 56, 
                                estimated_bytes = 56, 
                                estimated_records = 56, 
                                records_committed = 56, 
                                records_emitted = 56, 
                                state_messages_emitted = 56, ), 
                            updated_at = 56, ), 
                        logs = openapi_client.models.log_read.LogRead(
                            log_lines = [
                                ''
                                ], ), )
                    ],
                job = openapi_client.models.job_debug_read.JobDebugRead(
                    airbyte_version = '', 
                    config_id = '', 
                    config_type = 'check_connection_source', 
                    destination_definition = openapi_client.models.destination_definition_read.DestinationDefinitionRead(
                        destination_definition_id = '', 
                        docker_image_tag = '', 
                        docker_repository = '', 
                        documentation_url = '', 
                        icon = '', 
                        name = '', 
                        normalization_config = openapi_client.models.normalization_destination_definition_config.NormalizationDestinationDefinitionConfig(
                            normalization_integration_type = '', 
                            normalization_repository = '', 
                            normalization_tag = '', 
                            supported = True, ), 
                        protocol_version = '', 
                        release_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        release_stage = 'alpha', 
                        resource_requirements = openapi_client.models.actor_definition_resource_requirements.ActorDefinitionResourceRequirements(
                            default = openapi_client.models.resource_requirements.ResourceRequirements(
                                cpu_limit = '', 
                                cpu_request = '', 
                                memory_limit = '', 
                                memory_request = '', ), 
                            job_specific = [
                                openapi_client.models.job_type_resource_limit.JobTypeResourceLimit(
                                    job_type = 'get_spec', 
                                    resource_requirements = openapi_client.models.resource_requirements.ResourceRequirements(
                                        cpu_limit = '', 
                                        cpu_request = '', 
                                        memory_limit = '', 
                                        memory_request = '', ), )
                                ], ), 
                        supports_dbt = True, ), 
                    id = 56, 
                    source_definition = openapi_client.models.source_definition_read.SourceDefinitionRead(
                        docker_image_tag = '', 
                        docker_repository = '', 
                        documentation_url = '', 
                        icon = '', 
                        name = '', 
                        protocol_version = '', 
                        release_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        source_definition_id = '', 
                        source_type = 'api', ), 
                    status = 'pending', ),
        )
        """

    def testJobDebugInfoRead(self):
        """Test JobDebugInfoRead"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

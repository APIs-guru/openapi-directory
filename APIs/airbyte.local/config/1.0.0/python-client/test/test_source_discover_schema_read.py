# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.source_discover_schema_read import SourceDiscoverSchemaRead

class TestSourceDiscoverSchemaRead(unittest.TestCase):
    """SourceDiscoverSchemaRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SourceDiscoverSchemaRead:
        """Test SourceDiscoverSchemaRead
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SourceDiscoverSchemaRead`
        """
        model = SourceDiscoverSchemaRead()
        if include_optional:
            return SourceDiscoverSchemaRead(
                breaking_change = True,
                catalog = openapi_client.models.airbyte_catalog.AirbyteCatalog(
                    streams = [
                        openapi_client.models.airbyte_stream_and_configuration.AirbyteStreamAndConfiguration(
                            config = openapi_client.models.airbyte_stream_configuration.AirbyteStreamConfiguration(
                                alias_name = '', 
                                cursor_field = [
                                    ''
                                    ], 
                                destination_sync_mode = 'append', 
                                field_selection_enabled = True, 
                                primary_key = [
                                    [
                                        ''
                                        ]
                                    ], 
                                selected = True, 
                                selected_fields = [
                                    openapi_client.models.selected_field_info.SelectedFieldInfo(
                                        field_path = [
                                            ''
                                            ], )
                                    ], 
                                suggested = True, 
                                sync_mode = 'full_refresh', ), 
                            stream = openapi_client.models.airbyte_stream.AirbyteStream(
                                default_cursor_field = [
                                    ''
                                    ], 
                                json_schema = openapi_client.models.stream_json_schema.StreamJsonSchema(), 
                                name = '', 
                                namespace = '', 
                                source_defined_cursor = True, 
                                source_defined_primary_key = [
                                    [
                                        ''
                                        ]
                                    ], 
                                supported_sync_modes = [
                                    'full_refresh'
                                    ], ), )
                        ], ),
                catalog_diff = openapi_client.models.catalog_diff.CatalogDiff(
                    transforms = [
                        openapi_client.models.stream_transform.StreamTransform(
                            stream_descriptor = openapi_client.models.stream_descriptor.StreamDescriptor(
                                name = '', 
                                namespace = '', ), 
                            transform_type = 'add_stream', 
                            update_stream = [
                                openapi_client.models.field_transform.FieldTransform(
                                    add_field = openapi_client.models.field_add.FieldAdd(
                                        schema = openapi_client.models.field_schema.FieldSchema(), ), 
                                    breaking = True, 
                                    field_name = [
                                        ''
                                        ], 
                                    remove_field = openapi_client.models.field_remove.FieldRemove(
                                        schema = openapi_client.models.field_schema.FieldSchema(), ), 
                                    transform_type = 'add_field', 
                                    update_field_schema = openapi_client.models.field_schema_update.FieldSchemaUpdate(
                                        new_schema = openapi_client.models.field_schema.FieldSchema(), 
                                        old_schema = openapi_client.models.field_schema.FieldSchema(), ), )
                                ], )
                        ], ),
                catalog_id = '',
                connection_status = 'active',
                job_info = openapi_client.models.synchronous_job_read.SynchronousJobRead(
                    config_id = '', 
                    config_type = 'check_connection_source', 
                    connector_configuration_updated = True, 
                    created_at = 56, 
                    ended_at = 56, 
                    id = '', 
                    logs = openapi_client.models.log_read.LogRead(
                        log_lines = [
                            ''
                            ], ), 
                    succeeded = True, )
            )
        else:
            return SourceDiscoverSchemaRead(
                job_info = openapi_client.models.synchronous_job_read.SynchronousJobRead(
                    config_id = '', 
                    config_type = 'check_connection_source', 
                    connector_configuration_updated = True, 
                    created_at = 56, 
                    ended_at = 56, 
                    id = '', 
                    logs = openapi_client.models.log_read.LogRead(
                        log_lines = [
                            ''
                            ], ), 
                    succeeded = True, ),
        )
        """

    def testSourceDiscoverSchemaRead(self):
        """Test SourceDiscoverSchemaRead"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

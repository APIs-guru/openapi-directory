# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.web_backend_api import WebBackendApi


class TestWebBackendApi(unittest.TestCase):
    """WebBackendApi unit test stubs"""

    def setUp(self) -> None:
        self.api = WebBackendApi()

    def tearDown(self) -> None:
        pass

    def test_get_state_type(self) -> None:
        """Test case for get_state_type

        Fetch the current state type for a connection.
        """
        pass

    def test_web_backend_check_updates(self) -> None:
        """Test case for web_backend_check_updates

        Returns a summary of source and destination definitions that could be updated.
        """
        pass

    def test_web_backend_create_connection(self) -> None:
        """Test case for web_backend_create_connection

        Create a connection
        """
        pass

    def test_web_backend_get_connection(self) -> None:
        """Test case for web_backend_get_connection

        Get a connection
        """
        pass

    def test_web_backend_get_workspace_state(self) -> None:
        """Test case for web_backend_get_workspace_state

        Returns the current state of a workspace
        """
        pass

    def test_web_backend_list_connections_for_workspace(self) -> None:
        """Test case for web_backend_list_connections_for_workspace

        Returns all non-deleted connections for a workspace.
        """
        pass

    def test_web_backend_list_geographies(self) -> None:
        """Test case for web_backend_list_geographies

        Returns available geographies can be selected to run data syncs in a particular geography. The 'auto' entry indicates that the sync will be automatically assigned to a geography according to the platform default behavior. Entries other than 'auto' are two-letter country codes that follow the ISO 3166-1 alpha-2 standard. 
        """
        pass

    def test_web_backend_update_connection(self) -> None:
        """Test case for web_backend_update_connection

        Update a connection
        """
        pass


if __name__ == '__main__':
    unittest.main()

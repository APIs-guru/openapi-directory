# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.web_backend_connection_read import WebBackendConnectionRead

class TestWebBackendConnectionRead(unittest.TestCase):
    """WebBackendConnectionRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebBackendConnectionRead:
        """Test WebBackendConnectionRead
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebBackendConnectionRead`
        """
        model = WebBackendConnectionRead()
        if include_optional:
            return WebBackendConnectionRead(
                catalog_diff = openapi_client.models.catalog_diff.CatalogDiff(
                    transforms = [
                        openapi_client.models.stream_transform.StreamTransform(
                            stream_descriptor = openapi_client.models.stream_descriptor.StreamDescriptor(
                                name = '', 
                                namespace = '', ), 
                            transform_type = 'add_stream', 
                            update_stream = [
                                openapi_client.models.field_transform.FieldTransform(
                                    add_field = openapi_client.models.field_add.FieldAdd(
                                        schema = openapi_client.models.field_schema.FieldSchema(), ), 
                                    breaking = True, 
                                    field_name = [
                                        ''
                                        ], 
                                    remove_field = openapi_client.models.field_remove.FieldRemove(
                                        schema = openapi_client.models.field_schema.FieldSchema(), ), 
                                    transform_type = 'add_field', 
                                    update_field_schema = openapi_client.models.field_schema_update.FieldSchemaUpdate(
                                        new_schema = openapi_client.models.field_schema.FieldSchema(), 
                                        old_schema = openapi_client.models.field_schema.FieldSchema(), ), )
                                ], )
                        ], ),
                catalog_id = '',
                connection_id = '',
                destination = openapi_client.models.destination_read.DestinationRead(
                    connection_configuration = {"user":"charles"}, 
                    destination_definition_id = '', 
                    destination_id = '', 
                    destination_name = '', 
                    icon = '', 
                    name = '', 
                    workspace_id = '', ),
                destination_id = '',
                geography = 'auto',
                is_syncing = True,
                latest_sync_job_created_at = 56,
                latest_sync_job_status = 'pending',
                name = '',
                namespace_definition = 'source',
                namespace_format = '${SOURCE_NAMESPACE}',
                non_breaking_changes_preference = 'ignore',
                notify_schema_changes = True,
                operation_ids = [
                    ''
                    ],
                operations = [
                    openapi_client.models.operation_read.OperationRead(
                        name = '', 
                        operation_id = '', 
                        operator_configuration = openapi_client.models.operator_configuration.OperatorConfiguration(
                            dbt = openapi_client.models.operator_dbt.OperatorDbt(
                                dbt_arguments = '', 
                                docker_image = '', 
                                git_repo_branch = '', 
                                git_repo_url = '', ), 
                            normalization = openapi_client.models.operator_normalization.OperatorNormalization(
                                option = 'basic', ), 
                            operator_type = 'normalization', 
                            webhook = openapi_client.models.operator_webhook.OperatorWebhook(
                                dbt_cloud = openapi_client.models.operator_webhook_dbt_cloud.OperatorWebhook_dbtCloud(
                                    account_id = 56, 
                                    job_id = 56, ), 
                                execution_body = '', 
                                execution_url = '', 
                                webhook_config_id = '', 
                                webhook_type = 'dbtCloud', ), ), 
                        workspace_id = '', )
                    ],
                prefix = '',
                resource_requirements = openapi_client.models.resource_requirements.ResourceRequirements(
                    cpu_limit = '', 
                    cpu_request = '', 
                    memory_limit = '', 
                    memory_request = '', ),
                schedule = openapi_client.models.connection_schedule.ConnectionSchedule(
                    time_unit = 'minutes', 
                    units = 56, ),
                schedule_data = openapi_client.models.connection_schedule_data.ConnectionScheduleData(
                    basic_schedule = openapi_client.models.connection_schedule_data_basic_schedule.ConnectionScheduleData_basicSchedule(
                        time_unit = 'minutes', 
                        units = 56, ), 
                    cron = openapi_client.models.connection_schedule_data_cron.ConnectionScheduleData_cron(
                        cron_expression = '', 
                        cron_time_zone = '', ), ),
                schedule_type = 'manual',
                schema_change = 'no_change',
                source = openapi_client.models.source_read.SourceRead(
                    connection_configuration = {"user":"charles"}, 
                    icon = '', 
                    name = '', 
                    source_definition_id = '', 
                    source_id = '', 
                    source_name = '', 
                    workspace_id = '', ),
                source_id = '',
                status = 'active',
                sync_catalog = openapi_client.models.airbyte_catalog.AirbyteCatalog(
                    streams = [
                        openapi_client.models.airbyte_stream_and_configuration.AirbyteStreamAndConfiguration(
                            config = openapi_client.models.airbyte_stream_configuration.AirbyteStreamConfiguration(
                                alias_name = '', 
                                cursor_field = [
                                    ''
                                    ], 
                                destination_sync_mode = 'append', 
                                field_selection_enabled = True, 
                                primary_key = [
                                    [
                                        ''
                                        ]
                                    ], 
                                selected = True, 
                                selected_fields = [
                                    openapi_client.models.selected_field_info.SelectedFieldInfo(
                                        field_path = [
                                            ''
                                            ], )
                                    ], 
                                suggested = True, 
                                sync_mode = 'full_refresh', ), 
                            stream = openapi_client.models.airbyte_stream.AirbyteStream(
                                default_cursor_field = [
                                    ''
                                    ], 
                                json_schema = openapi_client.models.stream_json_schema.StreamJsonSchema(), 
                                name = '', 
                                namespace = '', 
                                source_defined_cursor = True, 
                                source_defined_primary_key = [
                                    [
                                        ''
                                        ]
                                    ], 
                                supported_sync_modes = [
                                    'full_refresh'
                                    ], ), )
                        ], )
            )
        else:
            return WebBackendConnectionRead(
                connection_id = '',
                destination = openapi_client.models.destination_read.DestinationRead(
                    connection_configuration = {"user":"charles"}, 
                    destination_definition_id = '', 
                    destination_id = '', 
                    destination_name = '', 
                    icon = '', 
                    name = '', 
                    workspace_id = '', ),
                destination_id = '',
                is_syncing = True,
                name = '',
                non_breaking_changes_preference = 'ignore',
                notify_schema_changes = True,
                schema_change = 'no_change',
                source = openapi_client.models.source_read.SourceRead(
                    connection_configuration = {"user":"charles"}, 
                    icon = '', 
                    name = '', 
                    source_definition_id = '', 
                    source_id = '', 
                    source_name = '', 
                    workspace_id = '', ),
                source_id = '',
                status = 'active',
                sync_catalog = openapi_client.models.airbyte_catalog.AirbyteCatalog(
                    streams = [
                        openapi_client.models.airbyte_stream_and_configuration.AirbyteStreamAndConfiguration(
                            config = openapi_client.models.airbyte_stream_configuration.AirbyteStreamConfiguration(
                                alias_name = '', 
                                cursor_field = [
                                    ''
                                    ], 
                                destination_sync_mode = 'append', 
                                field_selection_enabled = True, 
                                primary_key = [
                                    [
                                        ''
                                        ]
                                    ], 
                                selected = True, 
                                selected_fields = [
                                    openapi_client.models.selected_field_info.SelectedFieldInfo(
                                        field_path = [
                                            ''
                                            ], )
                                    ], 
                                suggested = True, 
                                sync_mode = 'full_refresh', ), 
                            stream = openapi_client.models.airbyte_stream.AirbyteStream(
                                default_cursor_field = [
                                    ''
                                    ], 
                                json_schema = openapi_client.models.stream_json_schema.StreamJsonSchema(), 
                                name = '', 
                                namespace = '', 
                                source_defined_cursor = True, 
                                source_defined_primary_key = [
                                    [
                                        ''
                                        ]
                                    ], 
                                supported_sync_modes = [
                                    'full_refresh'
                                    ], ), )
                        ], ),
        )
        """

    def testWebBackendConnectionRead(self):
        """Test WebBackendConnectionRead"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.source_definition_specification_read import SourceDefinitionSpecificationRead

class TestSourceDefinitionSpecificationRead(unittest.TestCase):
    """SourceDefinitionSpecificationRead unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SourceDefinitionSpecificationRead:
        """Test SourceDefinitionSpecificationRead
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SourceDefinitionSpecificationRead`
        """
        model = SourceDefinitionSpecificationRead()
        if include_optional:
            return SourceDefinitionSpecificationRead(
                advanced_auth = openapi_client.models.advanced_auth.AdvancedAuth(
                    auth_flow_type = 'oauth2.0', 
                    oauth_config_specification = openapi_client.models.o_auth_config_specification.OAuthConfigSpecification(
                        complete_o_auth_output_specification = null, 
                        complete_o_auth_server_input_specification = null, 
                        complete_o_auth_server_output_specification = null, 
                        oauth_user_input_from_connector_config_specification = null, ), 
                    predicate_key = [
                        ''
                        ], 
                    predicate_value = '', ),
                auth_specification = openapi_client.models.auth_specification.AuthSpecification(
                    auth_type = 'oauth2.0', 
                    oauth2_specification = openapi_client.models.o_auth2_specification.OAuth2Specification(
                        oauth_flow_init_parameters = [
                            [
                                ''
                                ]
                            ], 
                        oauth_flow_output_parameters = [
                            [
                                ''
                                ]
                            ], 
                        root_object = ["path",1], ), ),
                connection_specification = {"user":{"type":"string"}},
                documentation_url = '',
                job_info = openapi_client.models.synchronous_job_read.SynchronousJobRead(
                    config_id = '', 
                    config_type = 'check_connection_source', 
                    connector_configuration_updated = True, 
                    created_at = 56, 
                    ended_at = 56, 
                    id = '', 
                    logs = openapi_client.models.log_read.LogRead(
                        log_lines = [
                            ''
                            ], ), 
                    succeeded = True, ),
                source_definition_id = ''
            )
        else:
            return SourceDefinitionSpecificationRead(
                job_info = openapi_client.models.synchronous_job_read.SynchronousJobRead(
                    config_id = '', 
                    config_type = 'check_connection_source', 
                    connector_configuration_updated = True, 
                    created_at = 56, 
                    ended_at = 56, 
                    id = '', 
                    logs = openapi_client.models.log_read.LogRead(
                        log_lines = [
                            ''
                            ], ), 
                    succeeded = True, ),
                source_definition_id = '',
        )
        """

    def testSourceDefinitionSpecificationRead(self):
        """Test SourceDefinitionSpecificationRead"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

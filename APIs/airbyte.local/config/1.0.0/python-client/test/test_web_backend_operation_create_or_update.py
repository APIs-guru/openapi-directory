# coding: utf-8

"""
    Airbyte Configuration API

    Airbyte Configuration API [https://airbyte.io](https://airbyte.io).  This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.  Here are some conventions that this API follows: * All endpoints are http POST methods. * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params. * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`. * For all `update` methods, the whole object must be passed in, even the fields that did not change.  Authentication (OSS): * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"` 

    The version of the OpenAPI document: 1.0.0
    Contact: contact@airbyte.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.web_backend_operation_create_or_update import WebBackendOperationCreateOrUpdate

class TestWebBackendOperationCreateOrUpdate(unittest.TestCase):
    """WebBackendOperationCreateOrUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebBackendOperationCreateOrUpdate:
        """Test WebBackendOperationCreateOrUpdate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebBackendOperationCreateOrUpdate`
        """
        model = WebBackendOperationCreateOrUpdate()
        if include_optional:
            return WebBackendOperationCreateOrUpdate(
                name = '',
                operation_id = '',
                operator_configuration = openapi_client.models.operator_configuration.OperatorConfiguration(
                    dbt = openapi_client.models.operator_dbt.OperatorDbt(
                        dbt_arguments = '', 
                        docker_image = '', 
                        git_repo_branch = '', 
                        git_repo_url = '', ), 
                    normalization = openapi_client.models.operator_normalization.OperatorNormalization(
                        option = 'basic', ), 
                    operator_type = 'normalization', 
                    webhook = openapi_client.models.operator_webhook.OperatorWebhook(
                        dbt_cloud = openapi_client.models.operator_webhook_dbt_cloud.OperatorWebhook_dbtCloud(
                            account_id = 56, 
                            job_id = 56, ), 
                        execution_body = '', 
                        execution_url = '', 
                        webhook_config_id = '', 
                        webhook_type = 'dbtCloud', ), ),
                workspace_id = ''
            )
        else:
            return WebBackendOperationCreateOrUpdate(
                name = '',
                operator_configuration = openapi_client.models.operator_configuration.OperatorConfiguration(
                    dbt = openapi_client.models.operator_dbt.OperatorDbt(
                        dbt_arguments = '', 
                        docker_image = '', 
                        git_repo_branch = '', 
                        git_repo_url = '', ), 
                    normalization = openapi_client.models.operator_normalization.OperatorNormalization(
                        option = 'basic', ), 
                    operator_type = 'normalization', 
                    webhook = openapi_client.models.operator_webhook.OperatorWebhook(
                        dbt_cloud = openapi_client.models.operator_webhook_dbt_cloud.OperatorWebhook_dbtCloud(
                            account_id = 56, 
                            job_id = 56, ), 
                        execution_body = '', 
                        execution_url = '', 
                        webhook_config_id = '', 
                        webhook_type = 'dbtCloud', ), ),
                workspace_id = '',
        )
        """

    def testWebBackendOperationCreateOrUpdate(self):
        """Test WebBackendOperationCreateOrUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

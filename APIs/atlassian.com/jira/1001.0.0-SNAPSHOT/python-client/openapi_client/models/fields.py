# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.issue_type_details import IssueTypeDetails
from openapi_client.models.priority import Priority
from openapi_client.models.status_details import StatusDetails
from openapi_client.models.time_tracking_details import TimeTrackingDetails
from openapi_client.models.user_details import UserDetails
from typing import Optional, Set
from typing_extensions import Self

class Fields(BaseModel):
    """
    Key fields from the linked issue.
    """ # noqa: E501
    assignee: Optional[UserDetails] = Field(default=None, description="The assignee of the linked issue.")
    issue_type: Optional[IssueTypeDetails] = Field(default=None, description="The type of the linked issue.", alias="issueType")
    issuetype: Optional[IssueTypeDetails] = None
    priority: Optional[Priority] = Field(default=None, description="The priority of the linked issue.")
    status: Optional[StatusDetails] = Field(default=None, description="The status of the linked issue.")
    summary: Optional[StrictStr] = Field(default=None, description="The summary description of the linked issue.")
    timetracking: Optional[TimeTrackingDetails] = Field(default=None, description="The time tracking of the linked issue.")
    __properties: ClassVar[List[str]] = ["assignee", "issueType", "issuetype", "priority", "status", "summary", "timetracking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Fields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "assignee",
            "issue_type",
            "priority",
            "status",
            "summary",
            "timetracking",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue_type
        if self.issue_type:
            _dict['issueType'] = self.issue_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issuetype
        if self.issuetype:
            _dict['issuetype'] = self.issuetype.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timetracking
        if self.timetracking:
            _dict['timetracking'] = self.timetracking.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Fields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignee": UserDetails.from_dict(obj["assignee"]) if obj.get("assignee") is not None else None,
            "issueType": IssueTypeDetails.from_dict(obj["issueType"]) if obj.get("issueType") is not None else None,
            "issuetype": IssueTypeDetails.from_dict(obj["issuetype"]) if obj.get("issuetype") is not None else None,
            "priority": Priority.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "status": StatusDetails.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "summary": obj.get("summary"),
            "timetracking": TimeTrackingDetails.from_dict(obj["timetracking"]) if obj.get("timetracking") is not None else None
        })
        return _obj



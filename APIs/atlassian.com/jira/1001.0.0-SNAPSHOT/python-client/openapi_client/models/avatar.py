# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Avatar(BaseModel):
    """
    Details of an avatar.
    """ # noqa: E501
    file_name: Optional[StrictStr] = Field(default=None, description="The file name of the avatar icon. Returned for system avatars.", alias="fileName")
    id: StrictStr = Field(description="The ID of the avatar.")
    is_deletable: Optional[StrictBool] = Field(default=None, description="Whether the avatar can be deleted.", alias="isDeletable")
    is_selected: Optional[StrictBool] = Field(default=None, description="Whether the avatar is used in Jira. For example, shown as a project's avatar.", alias="isSelected")
    is_system_avatar: Optional[StrictBool] = Field(default=None, description="Whether the avatar is a system avatar.", alias="isSystemAvatar")
    owner: Optional[StrictStr] = Field(default=None, description="The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.")
    urls: Optional[Dict[str, StrictStr]] = Field(default=None, description="The list of avatar icon URLs.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["fileName", "id", "isDeletable", "isSelected", "isSystemAvatar", "owner", "urls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Avatar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "file_name",
            "is_deletable",
            "is_selected",
            "is_system_avatar",
            "owner",
            "urls",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Avatar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileName": obj.get("fileName"),
            "id": obj.get("id"),
            "isDeletable": obj.get("isDeletable"),
            "isSelected": obj.get("isSelected"),
            "isSystemAvatar": obj.get("isSystemAvatar"),
            "owner": obj.get("owner"),
            "urls": obj.get("urls")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



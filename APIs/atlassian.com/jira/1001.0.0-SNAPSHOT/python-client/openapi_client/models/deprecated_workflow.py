# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.scope import Scope
from typing import Optional, Set
from typing_extensions import Self

class DeprecatedWorkflow(BaseModel):
    """
    Details about a workflow.
    """ # noqa: E501
    default: Optional[StrictBool] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the workflow.")
    last_modified_date: Optional[StrictStr] = Field(default=None, description="The datetime the workflow was last modified.", alias="lastModifiedDate")
    last_modified_user: Optional[StrictStr] = Field(default=None, description="This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.", alias="lastModifiedUser")
    last_modified_user_account_id: Optional[StrictStr] = Field(default=None, description="The account ID of the user that last modified the workflow.", alias="lastModifiedUserAccountId")
    name: Optional[StrictStr] = Field(default=None, description="The name of the workflow.")
    scope: Optional[Scope] = Field(default=None, description="The scope where this workflow applies")
    steps: Optional[StrictInt] = Field(default=None, description="The number of steps included in the workflow.")
    __properties: ClassVar[List[str]] = ["default", "description", "lastModifiedDate", "lastModifiedUser", "lastModifiedUserAccountId", "name", "scope", "steps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeprecatedWorkflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "last_modified_date",
            "last_modified_user",
            "last_modified_user_account_id",
            "name",
            "scope",
            "steps",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeprecatedWorkflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": obj.get("default"),
            "description": obj.get("description"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "lastModifiedUser": obj.get("lastModifiedUser"),
            "lastModifiedUserAccountId": obj.get("lastModifiedUserAccountId"),
            "name": obj.get("name"),
            "scope": Scope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "steps": obj.get("steps")
        })
        return _obj



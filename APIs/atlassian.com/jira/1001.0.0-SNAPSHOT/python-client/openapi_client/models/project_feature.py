# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProjectFeature(BaseModel):
    """
    Details of a project feature.
    """ # noqa: E501
    feature: Optional[StrictStr] = Field(default=None, description="The key of the feature.")
    image_uri: Optional[StrictStr] = Field(default=None, description="URI for the image representing the feature.", alias="imageUri")
    localised_description: Optional[StrictStr] = Field(default=None, description="Localized display description for the feature.", alias="localisedDescription")
    localised_name: Optional[StrictStr] = Field(default=None, description="Localized display name for the feature.", alias="localisedName")
    prerequisites: Optional[List[StrictStr]] = Field(default=None, description="List of keys of the features required to enable the feature.")
    project_id: Optional[StrictInt] = Field(default=None, description="The ID of the project.", alias="projectId")
    state: Optional[StrictStr] = Field(default=None, description="The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values")
    toggle_locked: Optional[StrictBool] = Field(default=None, description="Whether the state of the feature can be updated.", alias="toggleLocked")
    __properties: ClassVar[List[str]] = ["feature", "imageUri", "localisedDescription", "localisedName", "prerequisites", "projectId", "state", "toggleLocked"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENABLED', 'DISABLED', 'COMING_SOON']):
            raise ValueError("must be one of enum values ('ENABLED', 'DISABLED', 'COMING_SOON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feature": obj.get("feature"),
            "imageUri": obj.get("imageUri"),
            "localisedDescription": obj.get("localisedDescription"),
            "localisedName": obj.get("localisedName"),
            "prerequisites": obj.get("prerequisites"),
            "projectId": obj.get("projectId"),
            "state": obj.get("state"),
            "toggleLocked": obj.get("toggleLocked")
        })
        return _obj



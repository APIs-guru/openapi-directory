# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.workflow_id import WorkflowId
from typing import Optional, Set
from typing_extensions import Self

class WorkflowTransitionRulesUpdateErrorDetails(BaseModel):
    """
    Details of any errors encountered while updating workflow transition rules for a workflow.
    """ # noqa: E501
    rule_update_errors: Dict[str, List[StrictStr]] = Field(description="A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.", alias="ruleUpdateErrors")
    update_errors: List[StrictStr] = Field(description="The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.", alias="updateErrors")
    workflow_id: WorkflowId = Field(alias="workflowId")
    __properties: ClassVar[List[str]] = ["ruleUpdateErrors", "updateErrors", "workflowId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowTransitionRulesUpdateErrorDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of workflow_id
        if self.workflow_id:
            _dict['workflowId'] = self.workflow_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowTransitionRulesUpdateErrorDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ruleUpdateErrors": obj.get("ruleUpdateErrors"),
            "updateErrors": obj.get("updateErrors"),
            "workflowId": WorkflowId.from_dict(obj["workflowId"]) if obj.get("workflowId") is not None else None
        })
        return _obj



# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.security_level import SecurityLevel
from typing import Optional, Set
from typing_extensions import Self

class SecurityScheme(BaseModel):
    """
    Details about a security scheme.
    """ # noqa: E501
    default_security_level_id: Optional[StrictInt] = Field(default=None, description="The ID of the default security level.", alias="defaultSecurityLevelId")
    description: Optional[StrictStr] = Field(default=None, description="The description of the issue security scheme.")
    id: Optional[StrictInt] = Field(default=None, description="The ID of the issue security scheme.")
    levels: Optional[List[SecurityLevel]] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the issue security scheme.")
    var_self: Optional[StrictStr] = Field(default=None, description="The URL of the issue security scheme.", alias="self")
    __properties: ClassVar[List[str]] = ["defaultSecurityLevelId", "description", "id", "levels", "name", "self"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityScheme from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "default_security_level_id",
            "description",
            "id",
            "name",
            "var_self",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in levels (list)
        _items = []
        if self.levels:
            for _item_levels in self.levels:
                if _item_levels:
                    _items.append(_item_levels.to_dict())
            _dict['levels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityScheme from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultSecurityLevelId": obj.get("defaultSecurityLevelId"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "levels": [SecurityLevel.from_dict(_item) for _item in obj["levels"]] if obj.get("levels") is not None else None,
            "name": obj.get("name"),
            "self": obj.get("self")
        })
        return _obj



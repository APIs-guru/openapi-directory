# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.jira_expressions_analysis import JiraExpressionsAnalysis

class TestJiraExpressionsAnalysis(unittest.TestCase):
    """JiraExpressionsAnalysis unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JiraExpressionsAnalysis:
        """Test JiraExpressionsAnalysis
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JiraExpressionsAnalysis`
        """
        model = JiraExpressionsAnalysis()
        if include_optional:
            return JiraExpressionsAnalysis(
                results = [
                    openapi_client.models.jira_expression_analysis.JiraExpressionAnalysis(
                        complexity = openapi_client.models.jira_expression_complexity.JiraExpressionComplexity(
                            expensive_operations = '', 
                            variables = {
                                'key' : ''
                                }, ), 
                        errors = [
                            openapi_client.models.jira_expression_validation_error.JiraExpressionValidationError(
                                column = 56, 
                                expression = '', 
                                line = 56, 
                                message = '!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.', 
                                type = 'syntax', )
                            ], 
                        expression = '', 
                        type = '', 
                        valid = True, )
                    ]
            )
        else:
            return JiraExpressionsAnalysis(
                results = [
                    openapi_client.models.jira_expression_analysis.JiraExpressionAnalysis(
                        complexity = openapi_client.models.jira_expression_complexity.JiraExpressionComplexity(
                            expensive_operations = '', 
                            variables = {
                                'key' : ''
                                }, ), 
                        errors = [
                            openapi_client.models.jira_expression_validation_error.JiraExpressionValidationError(
                                column = 56, 
                                expression = '', 
                                line = 56, 
                                message = '!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.', 
                                type = 'syntax', )
                            ], 
                        expression = '', 
                        type = '', 
                        valid = True, )
                    ],
        )
        """

    def testJiraExpressionsAnalysis(self):
        """Test JiraExpressionsAnalysis"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

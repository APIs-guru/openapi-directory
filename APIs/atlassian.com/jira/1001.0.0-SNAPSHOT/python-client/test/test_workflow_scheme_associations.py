# coding: utf-8

"""
    The Jira Cloud platform REST API

    Jira Cloud platform REST API documentation

    The version of the OpenAPI document: 1001.0.0-SNAPSHOT
    Contact: ecosystem@atlassian.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.workflow_scheme_associations import WorkflowSchemeAssociations

class TestWorkflowSchemeAssociations(unittest.TestCase):
    """WorkflowSchemeAssociations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkflowSchemeAssociations:
        """Test WorkflowSchemeAssociations
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkflowSchemeAssociations`
        """
        model = WorkflowSchemeAssociations()
        if include_optional:
            return WorkflowSchemeAssociations(
                project_ids = [
                    ''
                    ],
                workflow_scheme = openapi_client.models.workflow_scheme.WorkflowScheme(
                    default_workflow = '', 
                    description = '', 
                    draft = True, 
                    id = 56, 
                    issue_type_mappings = {
                        'key' : ''
                        }, 
                    issue_types = {
                        'key' : openapi_client.models.issue_type_details.IssueTypeDetails(
                            avatar_id = 56, 
                            description = '', 
                            entity_id = '', 
                            hierarchy_level = 56, 
                            icon_url = '', 
                            id = '', 
                            name = '', 
                            scope = null, 
                            self = '', 
                            subtask = True, )
                        }, 
                    last_modified = '', 
                    last_modified_user = null, 
                    name = '', 
                    original_default_workflow = '', 
                    original_issue_type_mappings = {
                        'key' : ''
                        }, 
                    self = '', 
                    update_draft_if_needed = True, )
            )
        else:
            return WorkflowSchemeAssociations(
                project_ids = [
                    ''
                    ],
                workflow_scheme = openapi_client.models.workflow_scheme.WorkflowScheme(
                    default_workflow = '', 
                    description = '', 
                    draft = True, 
                    id = 56, 
                    issue_type_mappings = {
                        'key' : ''
                        }, 
                    issue_types = {
                        'key' : openapi_client.models.issue_type_details.IssueTypeDetails(
                            avatar_id = 56, 
                            description = '', 
                            entity_id = '', 
                            hierarchy_level = 56, 
                            icon_url = '', 
                            id = '', 
                            name = '', 
                            scope = null, 
                            self = '', 
                            subtask = True, )
                        }, 
                    last_modified = '', 
                    last_modified_user = null, 
                    name = '', 
                    original_default_workflow = '', 
                    original_issue_type_mappings = {
                        'key' : ''
                        }, 
                    self = '', 
                    update_draft_if_needed = True, ),
        )
        """

    def testWorkflowSchemeAssociations(self):
        """Test WorkflowSchemeAssociations"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

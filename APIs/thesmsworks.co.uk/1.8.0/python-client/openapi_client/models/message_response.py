# coding: utf-8

"""
    The SMS Works API

    The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.

    The version of the OpenAPI document: 1.8.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.message_response_failurereason import MessageResponseFailurereason
from typing import Optional, Set
from typing_extensions import Self

class MessageResponse(BaseModel):
    """
    MessageResponse
    """ # noqa: E501
    batchid: Optional[StrictStr] = None
    content: StrictStr
    created: StrictStr
    customerid: StrictStr
    deliveryreporturl: Optional[StrictStr] = None
    destination: Union[StrictFloat, StrictInt]
    failurereason: Optional[MessageResponseFailurereason] = None
    id: Optional[StrictStr] = None
    identifier: Optional[StrictStr] = None
    keyword: Optional[StrictStr] = None
    messageid: StrictStr
    modified: StrictStr
    schedule: StrictStr
    sender: StrictStr
    status: StrictStr
    tag: StrictStr
    __properties: ClassVar[List[str]] = ["batchid", "content", "created", "customerid", "deliveryreporturl", "destination", "failurereason", "id", "identifier", "keyword", "messageid", "modified", "schedule", "sender", "status", "tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failurereason
        if self.failurereason:
            _dict['failurereason'] = self.failurereason.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchid": obj.get("batchid"),
            "content": obj.get("content"),
            "created": obj.get("created"),
            "customerid": obj.get("customerid"),
            "deliveryreporturl": obj.get("deliveryreporturl"),
            "destination": obj.get("destination"),
            "failurereason": MessageResponseFailurereason.from_dict(obj["failurereason"]) if obj.get("failurereason") is not None else None,
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "keyword": obj.get("keyword"),
            "messageid": obj.get("messageid"),
            "modified": obj.get("modified"),
            "schedule": obj.get("schedule"),
            "sender": obj.get("sender"),
            "status": obj.get("status"),
            "tag": obj.get("tag")
        })
        return _obj



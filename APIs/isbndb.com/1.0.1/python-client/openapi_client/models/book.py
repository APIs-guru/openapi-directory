# coding: utf-8

"""
    ISBNdb API

    Definition of ISBNdb.com API

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Book(BaseModel):
    """
    Describes a book in the book's database
    """ # noqa: E501
    authors: Optional[List[StrictStr]] = None
    date_published: Optional[datetime] = None
    dewey_decimal: Optional[StrictStr] = None
    dimensions: Optional[StrictStr] = None
    edition: Optional[StrictStr] = None
    excerpt: Optional[StrictStr] = None
    format: Optional[StrictStr] = None
    isbn: Optional[StrictStr] = None
    isbn13: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    overview: Optional[StrictStr] = None
    pages: Optional[StrictInt] = None
    publisher: Optional[StrictStr] = None
    reviews: Optional[List[StrictStr]] = None
    subjects: Optional[List[StrictStr]] = None
    synopsys: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    title_long: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["authors", "date_published", "dewey_decimal", "dimensions", "edition", "excerpt", "format", "isbn", "isbn13", "language", "overview", "pages", "publisher", "reviews", "subjects", "synopsys", "title", "title_long"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Book from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Book from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authors": obj.get("authors"),
            "date_published": obj.get("date_published"),
            "dewey_decimal": obj.get("dewey_decimal"),
            "dimensions": obj.get("dimensions"),
            "edition": obj.get("edition"),
            "excerpt": obj.get("excerpt"),
            "format": obj.get("format"),
            "isbn": obj.get("isbn"),
            "isbn13": obj.get("isbn13"),
            "language": obj.get("language"),
            "overview": obj.get("overview"),
            "pages": obj.get("pages"),
            "publisher": obj.get("publisher"),
            "reviews": obj.get("reviews"),
            "subjects": obj.get("subjects"),
            "synopsys": obj.get("synopsys"),
            "title": obj.get("title"),
            "title_long": obj.get("title_long")
        })
        return _obj



# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FindPlacesModel(BaseModel):
    """
    FindPlacesModel
    """ # noqa: E501
    adm_area1: Optional[StrictStr] = Field(default='England', description="first-level administrative area (a US state, for example)")
    adm_area2: Optional[StrictStr] = Field(default='Greater London', description="second-level administrative area (a US county, for example)")
    country: Optional[StrictStr] = Field(default='United Kingdom', description="name of the country")
    lat: Optional[StrictStr] = Field(default='23.2N', description="Latitude of the point, always in the format \\<float><N/S>, for example ``23.5S``")
    lon: Optional[StrictStr] = Field(default='15.3E', description="Longitude of the point, always in format \\<float><E/W>, for example ``23.5W``")
    name: Optional[StrictStr] = Field(default='London', description="name of the place")
    place_id: Optional[StrictStr] = Field(default='london', description="unique identifier of the place, which can be used in /point and /map endpoints")
    timezone: Optional[StrictStr] = Field(default='Europe/London', description="Timezone of the point in tzinfo format.")
    type: Optional[StrictStr] = Field(default='settlement', description="The character of the place. May be one of the following values:  * administrative areas (states, counties, districts...): ``administrative_area`` * country: ``country`` * a different political entity from a country (for example, a dependent teritory): ``political_entity`` * villages, towns and cities: ``settlement`` * air industry locations: ``airbase``, ``airfield``, ``heliport``, ``airport``, ``airport_terminal`` * places related to water: ``bay``, ``channel``, ``fjord``, ``lake``, ``pond``, ``falls``, ``gulf``,     ``harbor``, ``reservoir``, ``sea``, ``dam``, ``cape``, ``island``, ``peninsula`` * places related to mountain areas: ``hill``, ``mountain``, ``peak``, ``valley``, ``volcano``, ``canyon`` * other places related to nature: ``park``, ``reserve``, ``resort``, ``desert`` * places based on postcodes: ``postcode``         ")
    __properties: ClassVar[List[str]] = ["adm_area1", "adm_area2", "country", "lat", "lon", "name", "place_id", "timezone", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindPlacesModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindPlacesModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adm_area1": obj.get("adm_area1") if obj.get("adm_area1") is not None else 'England',
            "adm_area2": obj.get("adm_area2") if obj.get("adm_area2") is not None else 'Greater London',
            "country": obj.get("country") if obj.get("country") is not None else 'United Kingdom',
            "lat": obj.get("lat") if obj.get("lat") is not None else '23.2N',
            "lon": obj.get("lon") if obj.get("lon") is not None else '15.3E',
            "name": obj.get("name") if obj.get("name") is not None else 'London',
            "place_id": obj.get("place_id") if obj.get("place_id") is not None else 'london',
            "timezone": obj.get("timezone") if obj.get("timezone") is not None else 'Europe/London',
            "type": obj.get("type") if obj.get("type") is not None else 'settlement'
        })
        return _obj



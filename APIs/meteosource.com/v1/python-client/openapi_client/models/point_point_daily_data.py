# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from openapi_client.models.point_point_daily_afternoon_data import PointPointDailyAfternoonData
from openapi_client.models.point_point_daily_all_day_data import PointPointDailyAllDayData
from openapi_client.models.point_point_daily_astro_data import PointPointDailyAstroData
from openapi_client.models.point_point_daily_evening_data import PointPointDailyEveningData
from openapi_client.models.point_point_daily_morning_data import PointPointDailyMorningData
from openapi_client.models.point_point_daily_stats_data import PointPointDailyStatsData
from typing import Optional, Set
from typing_extensions import Self

class PointPointDailyData(BaseModel):
    """
    PointPointDailyData
    """ # noqa: E501
    afternoon: Optional[PointPointDailyAfternoonData] = None
    all_day: PointPointDailyAllDayData
    astro: PointPointDailyAstroData
    day: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="Datetime in YYYY-MM-DDTHH:MM:SS format.")
    evening: Optional[PointPointDailyEveningData] = None
    icon: Optional[StrictInt] = Field(default=None, description="Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: icon")
    morning: Optional[PointPointDailyMorningData] = None
    predictability: Optional[StrictInt] = Field(default=None, description="Weather predictability. Values from 1 (very high predictability) to 5 (very low predictability). Unit: 1-5")
    statistics: PointPointDailyStatsData
    summary: Optional[StrictStr] = Field(default=None, description="Short text summary of the weather, e.g. `Light rain`.")
    weather: Optional[StrictStr] = Field(default=None, description="All day string identifier of the weather icon, e.g. `light_rain`.")
    __properties: ClassVar[List[str]] = ["afternoon", "all_day", "astro", "day", "evening", "icon", "morning", "predictability", "statistics", "summary", "weather"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PointPointDailyData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of afternoon
        if self.afternoon:
            _dict['afternoon'] = self.afternoon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of all_day
        if self.all_day:
            _dict['all_day'] = self.all_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of astro
        if self.astro:
            _dict['astro'] = self.astro.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evening
        if self.evening:
            _dict['evening'] = self.evening.to_dict()
        # override the default output from pydantic by calling `to_dict()` of morning
        if self.morning:
            _dict['morning'] = self.morning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PointPointDailyData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "afternoon": PointPointDailyAfternoonData.from_dict(obj["afternoon"]) if obj.get("afternoon") is not None else None,
            "all_day": PointPointDailyAllDayData.from_dict(obj["all_day"]) if obj.get("all_day") is not None else None,
            "astro": PointPointDailyAstroData.from_dict(obj["astro"]) if obj.get("astro") is not None else None,
            "day": obj.get("day"),
            "evening": PointPointDailyEveningData.from_dict(obj["evening"]) if obj.get("evening") is not None else None,
            "icon": obj.get("icon"),
            "morning": PointPointDailyMorningData.from_dict(obj["morning"]) if obj.get("morning") is not None else None,
            "predictability": obj.get("predictability"),
            "statistics": PointPointDailyStatsData.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None,
            "summary": obj.get("summary"),
            "weather": obj.get("weather")
        })
        return _obj



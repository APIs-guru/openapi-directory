# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.point_point_alerts import PointPointAlerts
from openapi_client.models.point_point_current_data import PointPointCurrentData
from openapi_client.models.point_point_daily import PointPointDaily
from openapi_client.models.point_point_hourly import PointPointHourly
from openapi_client.models.point_point_minutely import PointPointMinutely
from typing import Optional, Set
from typing_extensions import Self

class PointPointData(BaseModel):
    """
    PointPointData
    """ # noqa: E501
    alerts: PointPointAlerts
    current: Optional[PointPointCurrentData] = None
    daily: Optional[PointPointDaily] = None
    elevation: StrictInt = Field(description="Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')")
    hourly: Optional[PointPointHourly] = None
    lat: StrictStr = Field(description="Latitude of the point, always in the format <float><N/S>, for example ``23.5S``")
    lon: StrictStr = Field(description="Longitude of the point, always in the format <float><E/W>, for example ``23.5W``")
    minutely: Optional[PointPointMinutely] = None
    timezone: Optional[StrictStr] = Field(default=None, description="Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID.")
    units: StrictStr = Field(description="Unit system (metric, uk, ca or us)")
    __properties: ClassVar[List[str]] = ["alerts", "current", "daily", "elevation", "hourly", "lat", "lon", "minutely", "timezone", "units"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PointPointData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alerts
        if self.alerts:
            _dict['alerts'] = self.alerts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current
        if self.current:
            _dict['current'] = self.current.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daily
        if self.daily:
            _dict['daily'] = self.daily.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hourly
        if self.hourly:
            _dict['hourly'] = self.hourly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minutely
        if self.minutely:
            _dict['minutely'] = self.minutely.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PointPointData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alerts": PointPointAlerts.from_dict(obj["alerts"]) if obj.get("alerts") is not None else None,
            "current": PointPointCurrentData.from_dict(obj["current"]) if obj.get("current") is not None else None,
            "daily": PointPointDaily.from_dict(obj["daily"]) if obj.get("daily") is not None else None,
            "elevation": obj.get("elevation"),
            "hourly": PointPointHourly.from_dict(obj["hourly"]) if obj.get("hourly") is not None else None,
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "minutely": PointPointMinutely.from_dict(obj["minutely"]) if obj.get("minutely") is not None else None,
            "timezone": obj.get("timezone"),
            "units": obj.get("units")
        })
        return _obj



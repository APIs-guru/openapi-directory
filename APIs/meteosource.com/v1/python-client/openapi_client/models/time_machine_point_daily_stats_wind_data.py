# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from typing import Optional, Set
from typing_extensions import Self

class TimeMachinePointDailyStatsWindData(BaseModel):
    """
    TimeMachinePointDailyStatsWindData
    """ # noqa: E501
    avg_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Long-term average wind angle. Unit: deg")
    avg_dir: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="Long-term average wind direction in 'N', 'NNE', 'NE', ... 'NNW' format. Unit: 16dir")
    avg_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Long-term average wind speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h")
    max_gust: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Historical daily maximum wind gust speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h")
    max_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Historical daily maximum wind speed. Units: metric = m/s, us = mph, uk = mph, ca = km/h")
    __properties: ClassVar[List[str]] = ["avg_angle", "avg_dir", "avg_speed", "max_gust", "max_speed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeMachinePointDailyStatsWindData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeMachinePointDailyStatsWindData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avg_angle": obj.get("avg_angle"),
            "avg_dir": obj.get("avg_dir"),
            "avg_speed": obj.get("avg_speed"),
            "max_gust": obj.get("max_gust"),
            "max_speed": obj.get("max_speed")
        })
        return _obj



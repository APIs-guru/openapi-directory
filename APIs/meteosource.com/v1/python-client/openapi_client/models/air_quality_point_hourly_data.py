# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AirQualityPointHourlyData(BaseModel):
    """
    AirQualityPointHourlyData
    """ # noqa: E501
    aerosol_550: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total aerosol optical depth at 550 nm. Unit: dimensionless")
    air_quality: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Air quality index. The following values can appear:  * 1 - Very good * 2 - Good * 3 - Medium * 4 - Poor * 5 - Very poor * 6 - Extremely poor  Unit: index")
    co_surface: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Carbon monoxide at surface level. Unit: µg/m3")
    var_date: Optional[datetime] = Field(default=None, description="Datetime in YYYY-MM-DDTHH:MM:SS format.", alias="date")
    dust_550nm: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dust aerosol optical depth at 550 nm. Unit: dimensionless")
    dust_mixing_ratio_05: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dust aerosol (0.55 - 0.9 µm) mixing ratio. Unit: kg/kg")
    no2_surface: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Nitrogen dioxide at surface level. Unit: µg/m3")
    no_surface: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Nitrogen monoxide at surface level. Unit: µg/m3")
    ozone_surface: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ozone. Unit: µg/m3")
    ozone_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total column ozone. Unit: Dobson")
    pm10: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Particulate matter d < 10 µm (PM10). Unit: µg/m3")
    pm25: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Particulate matter d < 2.5 µm (PM2.5). Unit: µg/m3")
    so2_surface: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sulphur dioxide at surface level. Unit: µg/m3")
    __properties: ClassVar[List[str]] = ["aerosol_550", "air_quality", "co_surface", "date", "dust_550nm", "dust_mixing_ratio_05", "no2_surface", "no_surface", "ozone_surface", "ozone_total", "pm10", "pm25", "so2_surface"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AirQualityPointHourlyData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AirQualityPointHourlyData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aerosol_550": obj.get("aerosol_550"),
            "air_quality": obj.get("air_quality"),
            "co_surface": obj.get("co_surface"),
            "date": obj.get("date"),
            "dust_550nm": obj.get("dust_550nm"),
            "dust_mixing_ratio_05": obj.get("dust_mixing_ratio_05"),
            "no2_surface": obj.get("no2_surface"),
            "no_surface": obj.get("no_surface"),
            "ozone_surface": obj.get("ozone_surface"),
            "ozone_total": obj.get("ozone_total"),
            "pm10": obj.get("pm10"),
            "pm25": obj.get("pm25"),
            "so2_surface": obj.get("so2_surface")
        })
        return _obj



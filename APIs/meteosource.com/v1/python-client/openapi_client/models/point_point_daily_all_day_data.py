# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.point_point_daily_all_day_cloud_cover_data import PointPointDailyAllDayCloudCoverData
from openapi_client.models.point_point_daily_all_day_precipitation_data import PointPointDailyAllDayPrecipitationData
from openapi_client.models.point_point_daily_all_day_prob_data import PointPointDailyAllDayProbData
from openapi_client.models.point_point_daily_all_day_wind_data import PointPointDailyAllDayWindData
from typing import Optional, Set
from typing_extensions import Self

class PointPointDailyAllDayData(BaseModel):
    """
    PointPointDailyAllDayData
    """ # noqa: E501
    cloud_cover: PointPointDailyAllDayCloudCoverData
    dew_point: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    dew_point_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    dew_point_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    feels_like: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    feels_like_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    feels_like_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    humidity: Optional[StrictInt] = Field(default=None, description="Relative humidity. (allday avg) Unit: \\%")
    icon: Optional[StrictInt] = Field(default=None, description="Numeric identifier of the weather icon. The following values can appear:  * 1 - Not available * 2 - Sunny * 3 - Mostly sunny * 4 - Partly sunny * 5 - Mostly cloudy * 6 - Cloudy * 7 - Overcast * 8 - Overcast with low clouds * 9 - Fog * 10 - Light rain * 11 - Rain * 12 - Possible rain * 13 - Rain shower * 14 - Thunderstorm * 15 - Local thunderstorms * 16 - Light snow * 17 - Snow * 18 - Possible snow * 19 - Snow shower * 20 - Rain and snow * 21 - Possible rain and snow * 22 - Rain and snow * 23 - Freezing rain * 24 - Possible freezing rain * 25 - Hail * 26 - Clear (night) * 27 - Mostly clear (night) * 28 - Partly clear (night) * 29 - Mostly cloudy (night) * 30 - Cloudy (night) * 31 - Overcast with low clouds (night) * 32 - Rain shower (night) * 33 - Local thunderstorms (night) * 34 - Snow shower (night) * 35 - Rain and snow (night) * 36 - Possible freezing rain (night)  Unit: icon")
    ozone: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total column of ozone. (allday avg) Unit: Dobson")
    precipitation: PointPointDailyAllDayPrecipitationData
    pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Atmospheric pressure at mean sea level. (allday avg) Units: metric = hPa, us = Hg, uk = hPa, ca = kPa")
    probability: PointPointDailyAllDayProbData
    snow_depth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Snow depth. (allday avg) Units: metric = cm, us = inch, uk = cm, ca = cm")
    soil_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    soil_temperature_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    soil_temperature_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    surface_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    surface_temperature_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    surface_temperature_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Temperature 2 metres above ground. (allday avg) Units: metric = °C, us = °F, uk = °C, ca = °C")
    temperature_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    temperature_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    visibility: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Visibility. (allday avg) Units: metric = km, us = mi, uk = mi, ca = km")
    weather: Optional[StrictStr] = Field(default=None, description="All day string identifier of the weather icon, e.g. `light_rain`.")
    wind: PointPointDailyAllDayWindData
    wind_chill: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Temperature 2 metres above ground. (allday avg) Units: metric = °C, us = °F, uk = °C, ca = °C")
    wind_chill_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    wind_chill_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Units: metric = °C, us = °F, uk = °C, ca = °C")
    __properties: ClassVar[List[str]] = ["cloud_cover", "dew_point", "dew_point_max", "dew_point_min", "feels_like", "feels_like_max", "feels_like_min", "humidity", "icon", "ozone", "precipitation", "pressure", "probability", "snow_depth", "soil_temperature", "soil_temperature_max", "soil_temperature_min", "surface_temperature", "surface_temperature_max", "surface_temperature_min", "temperature", "temperature_max", "temperature_min", "visibility", "weather", "wind", "wind_chill", "wind_chill_max", "wind_chill_min"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PointPointDailyAllDayData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_cover
        if self.cloud_cover:
            _dict['cloud_cover'] = self.cloud_cover.to_dict()
        # override the default output from pydantic by calling `to_dict()` of precipitation
        if self.precipitation:
            _dict['precipitation'] = self.precipitation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of probability
        if self.probability:
            _dict['probability'] = self.probability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wind
        if self.wind:
            _dict['wind'] = self.wind.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PointPointDailyAllDayData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloud_cover": PointPointDailyAllDayCloudCoverData.from_dict(obj["cloud_cover"]) if obj.get("cloud_cover") is not None else None,
            "dew_point": obj.get("dew_point"),
            "dew_point_max": obj.get("dew_point_max"),
            "dew_point_min": obj.get("dew_point_min"),
            "feels_like": obj.get("feels_like"),
            "feels_like_max": obj.get("feels_like_max"),
            "feels_like_min": obj.get("feels_like_min"),
            "humidity": obj.get("humidity"),
            "icon": obj.get("icon"),
            "ozone": obj.get("ozone"),
            "precipitation": PointPointDailyAllDayPrecipitationData.from_dict(obj["precipitation"]) if obj.get("precipitation") is not None else None,
            "pressure": obj.get("pressure"),
            "probability": PointPointDailyAllDayProbData.from_dict(obj["probability"]) if obj.get("probability") is not None else None,
            "snow_depth": obj.get("snow_depth"),
            "soil_temperature": obj.get("soil_temperature"),
            "soil_temperature_max": obj.get("soil_temperature_max"),
            "soil_temperature_min": obj.get("soil_temperature_min"),
            "surface_temperature": obj.get("surface_temperature"),
            "surface_temperature_max": obj.get("surface_temperature_max"),
            "surface_temperature_min": obj.get("surface_temperature_min"),
            "temperature": obj.get("temperature"),
            "temperature_max": obj.get("temperature_max"),
            "temperature_min": obj.get("temperature_min"),
            "visibility": obj.get("visibility"),
            "weather": obj.get("weather"),
            "wind": PointPointDailyAllDayWindData.from_dict(obj["wind"]) if obj.get("wind") is not None else None,
            "wind_chill": obj.get("wind_chill"),
            "wind_chill_max": obj.get("wind_chill_max"),
            "wind_chill_min": obj.get("wind_chill_min")
        })
        return _obj



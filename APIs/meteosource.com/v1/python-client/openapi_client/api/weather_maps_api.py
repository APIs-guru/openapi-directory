# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class WeatherMapsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def map_map_get(
        self,
        variable: Annotated[StrictStr, Field(description="Name of the variable for your map. Available values are:  * `temperature`: Temperature 2 metres above ground * `feels_like_temperature`: Feels like temperature * `clouds`: Percentage of sky covered by clouds * `precipitation`: Total precipitation amount accumulated since last hour * `wind_speed`: Wind speed 10 metres above the ground * `wind_gust`: Wind gust speed * `pressure`: Atmospheric pressure at mean sea level * `humidity`: Relative humidity * `wave_height`: Wave height * `wave_period`: Wave period * `sea_temperature`: Sea temperature (available only for +-24 hours) * `air_quality`: Air quality index * `ozone_surface`: Ozone at surface level * `ozone_total`: Total column ozone * `no2`: Nitrogen dioxide at surface level * `pm2.5`: Particulate matter d < 2.5 µm (PM2.5) ")],
        datetime: Annotated[StrictStr, Field(description="There are two ways to specify date and time for your map:  1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00` 2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days` ")],
        tile_x: Annotated[Optional[StrictInt], Field(description="The X coordinate of Google Maps tile")] = None,
        tile_y: Annotated[Optional[StrictInt], Field(description="The Y coordinate of Google Maps tile")] = None,
        tile_zoom: Annotated[Optional[StrictInt], Field(description="The zoom level of Google Maps tile")] = None,
        min_lat: Annotated[Optional[StrictStr], Field(description="Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2 ")] = None,
        min_lon: Annotated[Optional[StrictStr], Field(description="Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 ")] = None,
        max_lat: Annotated[Optional[StrictStr], Field(description="Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2. ")] = None,
        max_lon: Annotated[Optional[StrictStr], Field(description="Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Returns PNG weather map for given area and variable

        ## PNG weather forecast maps for given area and variable  ### Area specification There are two ways to specify geographical area you need for your map: 1. Specify `X` and `Y` coordinates and zoom level `Z` of desired tile in <a href=\"https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\" rel=\"nofollow\" target=\"_blank\">Google Maps Tile notation</a>. 2. Specify latitude and longitude bounds of the area you want to cover.  ### Notes * The resulting PNG maps are **always** in <a href=\"https://epsg.io/3857\" rel=\"nofollow\" target=\"_blank\">Google Mercator projection (EPSG:3857)</a>. * As Meteosource only covers areas between latitudes 80° and -80°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent. * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses. * Weather maps are only supported for forecasts, not for archive data.

        :param variable: Name of the variable for your map. Available values are:  * `temperature`: Temperature 2 metres above ground * `feels_like_temperature`: Feels like temperature * `clouds`: Percentage of sky covered by clouds * `precipitation`: Total precipitation amount accumulated since last hour * `wind_speed`: Wind speed 10 metres above the ground * `wind_gust`: Wind gust speed * `pressure`: Atmospheric pressure at mean sea level * `humidity`: Relative humidity * `wave_height`: Wave height * `wave_period`: Wave period * `sea_temperature`: Sea temperature (available only for +-24 hours) * `air_quality`: Air quality index * `ozone_surface`: Ozone at surface level * `ozone_total`: Total column ozone * `no2`: Nitrogen dioxide at surface level * `pm2.5`: Particulate matter d < 2.5 µm (PM2.5)  (required)
        :type variable: str
        :param datetime: There are two ways to specify date and time for your map:  1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00` 2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days`  (required)
        :type datetime: str
        :param tile_x: The X coordinate of Google Maps tile
        :type tile_x: int
        :param tile_y: The Y coordinate of Google Maps tile
        :type tile_y: int
        :param tile_zoom: The zoom level of Google Maps tile
        :type tile_zoom: int
        :param min_lat: Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2 
        :type min_lat: str
        :param min_lon: Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
        :type min_lon: str
        :param max_lat: Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2. 
        :type max_lat: str
        :param max_lon: Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
        :type max_lon: str
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_map_get_serialize(
            variable=variable,
            datetime=datetime,
            tile_x=tile_x,
            tile_y=tile_y,
            tile_zoom=tile_zoom,
            min_lat=min_lat,
            min_lon=min_lon,
            max_lat=max_lat,
            max_lon=max_lon,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_map_get_with_http_info(
        self,
        variable: Annotated[StrictStr, Field(description="Name of the variable for your map. Available values are:  * `temperature`: Temperature 2 metres above ground * `feels_like_temperature`: Feels like temperature * `clouds`: Percentage of sky covered by clouds * `precipitation`: Total precipitation amount accumulated since last hour * `wind_speed`: Wind speed 10 metres above the ground * `wind_gust`: Wind gust speed * `pressure`: Atmospheric pressure at mean sea level * `humidity`: Relative humidity * `wave_height`: Wave height * `wave_period`: Wave period * `sea_temperature`: Sea temperature (available only for +-24 hours) * `air_quality`: Air quality index * `ozone_surface`: Ozone at surface level * `ozone_total`: Total column ozone * `no2`: Nitrogen dioxide at surface level * `pm2.5`: Particulate matter d < 2.5 µm (PM2.5) ")],
        datetime: Annotated[StrictStr, Field(description="There are two ways to specify date and time for your map:  1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00` 2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days` ")],
        tile_x: Annotated[Optional[StrictInt], Field(description="The X coordinate of Google Maps tile")] = None,
        tile_y: Annotated[Optional[StrictInt], Field(description="The Y coordinate of Google Maps tile")] = None,
        tile_zoom: Annotated[Optional[StrictInt], Field(description="The zoom level of Google Maps tile")] = None,
        min_lat: Annotated[Optional[StrictStr], Field(description="Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2 ")] = None,
        min_lon: Annotated[Optional[StrictStr], Field(description="Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 ")] = None,
        max_lat: Annotated[Optional[StrictStr], Field(description="Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2. ")] = None,
        max_lon: Annotated[Optional[StrictStr], Field(description="Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Returns PNG weather map for given area and variable

        ## PNG weather forecast maps for given area and variable  ### Area specification There are two ways to specify geographical area you need for your map: 1. Specify `X` and `Y` coordinates and zoom level `Z` of desired tile in <a href=\"https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\" rel=\"nofollow\" target=\"_blank\">Google Maps Tile notation</a>. 2. Specify latitude and longitude bounds of the area you want to cover.  ### Notes * The resulting PNG maps are **always** in <a href=\"https://epsg.io/3857\" rel=\"nofollow\" target=\"_blank\">Google Mercator projection (EPSG:3857)</a>. * As Meteosource only covers areas between latitudes 80° and -80°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent. * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses. * Weather maps are only supported for forecasts, not for archive data.

        :param variable: Name of the variable for your map. Available values are:  * `temperature`: Temperature 2 metres above ground * `feels_like_temperature`: Feels like temperature * `clouds`: Percentage of sky covered by clouds * `precipitation`: Total precipitation amount accumulated since last hour * `wind_speed`: Wind speed 10 metres above the ground * `wind_gust`: Wind gust speed * `pressure`: Atmospheric pressure at mean sea level * `humidity`: Relative humidity * `wave_height`: Wave height * `wave_period`: Wave period * `sea_temperature`: Sea temperature (available only for +-24 hours) * `air_quality`: Air quality index * `ozone_surface`: Ozone at surface level * `ozone_total`: Total column ozone * `no2`: Nitrogen dioxide at surface level * `pm2.5`: Particulate matter d < 2.5 µm (PM2.5)  (required)
        :type variable: str
        :param datetime: There are two ways to specify date and time for your map:  1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00` 2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days`  (required)
        :type datetime: str
        :param tile_x: The X coordinate of Google Maps tile
        :type tile_x: int
        :param tile_y: The Y coordinate of Google Maps tile
        :type tile_y: int
        :param tile_zoom: The zoom level of Google Maps tile
        :type tile_zoom: int
        :param min_lat: Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2 
        :type min_lat: str
        :param min_lon: Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
        :type min_lon: str
        :param max_lat: Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2. 
        :type max_lat: str
        :param max_lon: Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
        :type max_lon: str
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_map_get_serialize(
            variable=variable,
            datetime=datetime,
            tile_x=tile_x,
            tile_y=tile_y,
            tile_zoom=tile_zoom,
            min_lat=min_lat,
            min_lon=min_lon,
            max_lat=max_lat,
            max_lon=max_lon,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_map_get_without_preload_content(
        self,
        variable: Annotated[StrictStr, Field(description="Name of the variable for your map. Available values are:  * `temperature`: Temperature 2 metres above ground * `feels_like_temperature`: Feels like temperature * `clouds`: Percentage of sky covered by clouds * `precipitation`: Total precipitation amount accumulated since last hour * `wind_speed`: Wind speed 10 metres above the ground * `wind_gust`: Wind gust speed * `pressure`: Atmospheric pressure at mean sea level * `humidity`: Relative humidity * `wave_height`: Wave height * `wave_period`: Wave period * `sea_temperature`: Sea temperature (available only for +-24 hours) * `air_quality`: Air quality index * `ozone_surface`: Ozone at surface level * `ozone_total`: Total column ozone * `no2`: Nitrogen dioxide at surface level * `pm2.5`: Particulate matter d < 2.5 µm (PM2.5) ")],
        datetime: Annotated[StrictStr, Field(description="There are two ways to specify date and time for your map:  1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00` 2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days` ")],
        tile_x: Annotated[Optional[StrictInt], Field(description="The X coordinate of Google Maps tile")] = None,
        tile_y: Annotated[Optional[StrictInt], Field(description="The Y coordinate of Google Maps tile")] = None,
        tile_zoom: Annotated[Optional[StrictInt], Field(description="The zoom level of Google Maps tile")] = None,
        min_lat: Annotated[Optional[StrictStr], Field(description="Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2 ")] = None,
        min_lon: Annotated[Optional[StrictStr], Field(description="Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 ")] = None,
        max_lat: Annotated[Optional[StrictStr], Field(description="Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2. ")] = None,
        max_lon: Annotated[Optional[StrictStr], Field(description="Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns PNG weather map for given area and variable

        ## PNG weather forecast maps for given area and variable  ### Area specification There are two ways to specify geographical area you need for your map: 1. Specify `X` and `Y` coordinates and zoom level `Z` of desired tile in <a href=\"https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\" rel=\"nofollow\" target=\"_blank\">Google Maps Tile notation</a>. 2. Specify latitude and longitude bounds of the area you want to cover.  ### Notes * The resulting PNG maps are **always** in <a href=\"https://epsg.io/3857\" rel=\"nofollow\" target=\"_blank\">Google Mercator projection (EPSG:3857)</a>. * As Meteosource only covers areas between latitudes 80° and -80°, you can only request maps within these bounds, when specifying the latitude and longitude boundaries. When specifying the area using Google Maps Tile notation, the regions outside our supported latitudes will be fully transparent. * The finest resolution is not available for maps covering very large regions. The resulting map will be automatically downscaled in this case, to guarantee high-speed responses. * Weather maps are only supported for forecasts, not for archive data.

        :param variable: Name of the variable for your map. Available values are:  * `temperature`: Temperature 2 metres above ground * `feels_like_temperature`: Feels like temperature * `clouds`: Percentage of sky covered by clouds * `precipitation`: Total precipitation amount accumulated since last hour * `wind_speed`: Wind speed 10 metres above the ground * `wind_gust`: Wind gust speed * `pressure`: Atmospheric pressure at mean sea level * `humidity`: Relative humidity * `wave_height`: Wave height * `wave_period`: Wave period * `sea_temperature`: Sea temperature (available only for +-24 hours) * `air_quality`: Air quality index * `ozone_surface`: Ozone at surface level * `ozone_total`: Total column ozone * `no2`: Nitrogen dioxide at surface level * `pm2.5`: Particulate matter d < 2.5 µm (PM2.5)  (required)
        :type variable: str
        :param datetime: There are two ways to specify date and time for your map:  1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00` 2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days`  (required)
        :type datetime: str
        :param tile_x: The X coordinate of Google Maps tile
        :type tile_x: int
        :param tile_y: The Y coordinate of Google Maps tile
        :type tile_y: int
        :param tile_zoom: The zoom level of Google Maps tile
        :type tile_zoom: int
        :param min_lat: Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2 
        :type min_lat: str
        :param min_lon: Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
        :type min_lon: str
        :param max_lat: Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2. 
        :type max_lat: str
        :param max_lon: Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2 
        :type max_lon: str
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_map_get_serialize(
            variable=variable,
            datetime=datetime,
            tile_x=tile_x,
            tile_y=tile_y,
            tile_zoom=tile_zoom,
            min_lat=min_lat,
            min_lon=min_lon,
            max_lat=max_lat,
            max_lon=max_lon,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_map_get_serialize(
        self,
        variable,
        datetime,
        tile_x,
        tile_y,
        tile_zoom,
        min_lat,
        min_lon,
        max_lat,
        max_lon,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tile_x is not None:
            
            _query_params.append(('tile_x', tile_x))
            
        if tile_y is not None:
            
            _query_params.append(('tile_y', tile_y))
            
        if tile_zoom is not None:
            
            _query_params.append(('tile_zoom', tile_zoom))
            
        if min_lat is not None:
            
            _query_params.append(('min_lat', min_lat))
            
        if min_lon is not None:
            
            _query_params.append(('min_lon', min_lon))
            
        if max_lat is not None:
            
            _query_params.append(('max_lat', max_lat))
            
        if max_lon is not None:
            
            _query_params.append(('max_lon', max_lon))
            
        if variable is not None:
            
            _query_params.append(('variable', variable))
            
        if datetime is not None:
            
            _query_params.append(('datetime', datetime))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'image/png', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



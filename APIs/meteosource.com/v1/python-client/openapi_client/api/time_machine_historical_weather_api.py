# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictStr
from typing import Any, Optional
from typing_extensions import Annotated
from openapi_client.models.time_machine_time_machine import TimeMachineTimeMachine

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class TimeMachineHistoricalWeatherApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def time_machine_time_machine_get(
        self,
        var_date: Annotated[date, Field(description="The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`. ")],
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        units: Annotated[Optional[Any], Field(description="Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`째C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`째F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimeMachineTimeMachine:
        """Returns weather data for a single location and given day in the past

        ## Actual weather data for a single location and day in the past  The output contains actual weather data for each day up to 20 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.  ### Location specification The location of the weather data must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*

        :param var_date: The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`.  (required)
        :type var_date: date
        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param units: Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`째C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`째F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. 
        :type units: Units
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_machine_time_machine_get_serialize(
            var_date=var_date,
            place_id=place_id,
            lat=lat,
            lon=lon,
            timezone=timezone,
            units=units,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeMachineTimeMachine",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def time_machine_time_machine_get_with_http_info(
        self,
        var_date: Annotated[date, Field(description="The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`. ")],
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        units: Annotated[Optional[Any], Field(description="Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`째C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`째F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimeMachineTimeMachine]:
        """Returns weather data for a single location and given day in the past

        ## Actual weather data for a single location and day in the past  The output contains actual weather data for each day up to 20 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.  ### Location specification The location of the weather data must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*

        :param var_date: The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`.  (required)
        :type var_date: date
        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param units: Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`째C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`째F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. 
        :type units: Units
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_machine_time_machine_get_serialize(
            var_date=var_date,
            place_id=place_id,
            lat=lat,
            lon=lon,
            timezone=timezone,
            units=units,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeMachineTimeMachine",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def time_machine_time_machine_get_without_preload_content(
        self,
        var_date: Annotated[date, Field(description="The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`. ")],
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        units: Annotated[Optional[Any], Field(description="Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`째C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`째F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns weather data for a single location and given day in the past

        ## Actual weather data for a single location and day in the past  The output contains actual weather data for each day up to 20 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.  ### Location specification The location of the weather data must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*

        :param var_date: The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`.  (required)
        :type var_date: date
        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param units: Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`째C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`째F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. 
        :type units: Units
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._time_machine_time_machine_get_serialize(
            var_date=var_date,
            place_id=place_id,
            lat=lat,
            lon=lon,
            timezone=timezone,
            units=units,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeMachineTimeMachine",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _time_machine_time_machine_get_serialize(
        self,
        var_date,
        place_id,
        lat,
        lon,
        timezone,
        units,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if place_id is not None:
            
            _query_params.append(('place_id', place_id))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if var_date is not None:
            if isinstance(var_date, date):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        if timezone is not None:
            
            _query_params.append(('timezone', timezone))
            
        if units is not None:
            
            _query_params.append(('units', units.value))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/time_machine',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



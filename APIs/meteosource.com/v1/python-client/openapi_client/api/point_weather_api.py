# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, Optional
from typing_extensions import Annotated
from openapi_client.models.air_quality_point_data import AirQualityPointData
from openapi_client.models.point_point_data import PointPointData

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PointWeatherApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def air_quality_air_quality_get(
        self,
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AirQualityPointData:
        """Returns air quality data for a single point (geographic name or GPS)

        ## Air quality forecast for a single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  ### Notes * **For a detailed description of variables, please consult ⚠️ <a href=\"https://www.meteosource.com/documentation#description_aq\" target=\"_blank\">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).** * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request. * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`).

        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._air_quality_air_quality_get_serialize(
            place_id=place_id,
            lat=lat,
            lon=lon,
            timezone=timezone,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AirQualityPointData",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def air_quality_air_quality_get_with_http_info(
        self,
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AirQualityPointData]:
        """Returns air quality data for a single point (geographic name or GPS)

        ## Air quality forecast for a single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  ### Notes * **For a detailed description of variables, please consult ⚠️ <a href=\"https://www.meteosource.com/documentation#description_aq\" target=\"_blank\">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).** * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request. * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`).

        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._air_quality_air_quality_get_serialize(
            place_id=place_id,
            lat=lat,
            lon=lon,
            timezone=timezone,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AirQualityPointData",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def air_quality_air_quality_get_without_preload_content(
        self,
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns air quality data for a single point (geographic name or GPS)

        ## Air quality forecast for a single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  ### Notes * **For a detailed description of variables, please consult ⚠️ <a href=\"https://www.meteosource.com/documentation#description_aq\" target=\"_blank\">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).** * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request. * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`).

        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._air_quality_air_quality_get_serialize(
            place_id=place_id,
            lat=lat,
            lon=lon,
            timezone=timezone,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AirQualityPointData",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _air_quality_air_quality_get_serialize(
        self,
        place_id,
        lat,
        lon,
        timezone,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if place_id is not None:
            
            _query_params.append(('place_id', place_id))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if timezone is not None:
            
            _query_params.append(('timezone', timezone))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/air_quality',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def point_point_get(
        self,
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        sections: Annotated[Optional[StrictStr], Field(description="Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * ``current``: Current weather situation * ``daily``: Forecasts for each whole day, without the daily parts * ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * ``hourly``: Forecasts with hourly resolution * ``minutely``: Precipitation forecast with 1 minute resolution * ``alerts``: The weather alerts * ``all``: All sections ")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        language: Annotated[Optional[Any], Field(description="The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech ")] = None,
        units: Annotated[Optional[Any], Field(description="Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PointPointData:
        """Returns weather data for a single point (geographic name or GPS)

        ## Current weather and forecast for single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*  ### Sections The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:  * Current weather situation * Hourly forecast (for 24/48/96/168 hours, depending on the tier) * Daily forecast (for 7/10/30 days, depending on the tier) * Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers) * Weather alerts (only for higher tiers)  By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.  ### Notes * **For a detailed description of variables (e.g. icons), please consult ⚠️ <a href=\"https://www.meteosource.com/documentation#description\" target=\"_blank\">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).** * Variables can be instantaneous, averaged, or accumulated over certain time. For example, `precipitation` forecast provides the precipitation accumulated until the next hour (data with timestamp as `12:00:00` is rain accumulated from `12:00:00` to `13:00:00`). * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request. * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`). * The detailed description of weather alerts is only available in English. The alert category is translated into selected language.

        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param sections: Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * ``current``: Current weather situation * ``daily``: Forecasts for each whole day, without the daily parts * ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * ``hourly``: Forecasts with hourly resolution * ``minutely``: Precipitation forecast with 1 minute resolution * ``alerts``: The weather alerts * ``all``: All sections 
        :type sections: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param language: The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech 
        :type language: Language
        :param units: Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. 
        :type units: Units
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._point_point_get_serialize(
            place_id=place_id,
            lat=lat,
            lon=lon,
            sections=sections,
            timezone=timezone,
            language=language,
            units=units,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PointPointData",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def point_point_get_with_http_info(
        self,
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        sections: Annotated[Optional[StrictStr], Field(description="Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * ``current``: Current weather situation * ``daily``: Forecasts for each whole day, without the daily parts * ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * ``hourly``: Forecasts with hourly resolution * ``minutely``: Precipitation forecast with 1 minute resolution * ``alerts``: The weather alerts * ``all``: All sections ")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        language: Annotated[Optional[Any], Field(description="The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech ")] = None,
        units: Annotated[Optional[Any], Field(description="Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PointPointData]:
        """Returns weather data for a single point (geographic name or GPS)

        ## Current weather and forecast for single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*  ### Sections The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:  * Current weather situation * Hourly forecast (for 24/48/96/168 hours, depending on the tier) * Daily forecast (for 7/10/30 days, depending on the tier) * Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers) * Weather alerts (only for higher tiers)  By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.  ### Notes * **For a detailed description of variables (e.g. icons), please consult ⚠️ <a href=\"https://www.meteosource.com/documentation#description\" target=\"_blank\">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).** * Variables can be instantaneous, averaged, or accumulated over certain time. For example, `precipitation` forecast provides the precipitation accumulated until the next hour (data with timestamp as `12:00:00` is rain accumulated from `12:00:00` to `13:00:00`). * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request. * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`). * The detailed description of weather alerts is only available in English. The alert category is translated into selected language.

        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param sections: Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * ``current``: Current weather situation * ``daily``: Forecasts for each whole day, without the daily parts * ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * ``hourly``: Forecasts with hourly resolution * ``minutely``: Precipitation forecast with 1 minute resolution * ``alerts``: The weather alerts * ``all``: All sections 
        :type sections: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param language: The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech 
        :type language: Language
        :param units: Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. 
        :type units: Units
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._point_point_get_serialize(
            place_id=place_id,
            lat=lat,
            lon=lon,
            sections=sections,
            timezone=timezone,
            language=language,
            units=units,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PointPointData",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def point_point_get_without_preload_content(
        self,
        place_id: Annotated[Optional[StrictStr], Field(description="Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4")] = None,
        lon: Annotated[Optional[StrictStr], Field(description="Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4")] = None,
        sections: Annotated[Optional[StrictStr], Field(description="Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * ``current``: Current weather situation * ``daily``: Forecasts for each whole day, without the daily parts * ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * ``hourly``: Forecasts with hourly resolution * ``minutely``: Precipitation forecast with 1 minute resolution * ``alerts``: The weather alerts * ``all``: All sections ")] = None,
        timezone: Annotated[Optional[StrictStr], Field(description="Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). ")] = None,
        language: Annotated[Optional[Any], Field(description="The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech ")] = None,
        units: Annotated[Optional[Any], Field(description="Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. ")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns weather data for a single point (geographic name or GPS)

        ## Current weather and forecast for single location  ### Location specification The location of the weather data is the only parameter that is required and must be specified. There are two ways to do this: 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`. 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).  *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive forecasts for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*  ### Sections The endpoint can return multiple sections of data. To obtain the best performance, we advise only requesting the sections you actually need. The available sections are as follows:  * Current weather situation * Hourly forecast (for 24/48/96/168 hours, depending on the tier) * Daily forecast (for 7/10/30 days, depending on the tier) * Minutely precipitation forecast (for 60 minutes in the following hour, only for higher tiers) * Weather alerts (only for higher tiers)  By default, only the current and hourly sections are returned. The division into daily parts (morning, afternoon and evening) is only available for the first 7 days of the forecast. For details regarding available parameters, see the parameter description below.  ### Notes * **For a detailed description of variables (e.g. icons), please consult ⚠️ <a href=\"https://www.meteosource.com/documentation#description\" target=\"_blank\">description of variables</a> ⚠️ in Documentation or `Schema` of the response (link next to Example value in the Responses section below).** * Variables can be instantaneous, averaged, or accumulated over certain time. For example, `precipitation` forecast provides the precipitation accumulated until the next hour (data with timestamp as `12:00:00` is rain accumulated from `12:00:00` to `13:00:00`). * Do **not** make any assumptions about the number and ordering of the variables. New variables and sections may be introduced in the future. Always check the data are present before you try to use them. * The response contains an `Expires` header, which defines the point at which the API response will not change for the same request. We highly recommend using this to avoid unnecessary requests and **increase the performance of your app**. * Meteosource API supports HTTP compression. To enable it, simply add an `Accept-Encoding: gzip` header to your request. * When daylight saving time starts, one hourly record will be missing (typically `2:00:00 AM`). When daylight saving time ends, the hourly forecast will contain two records with duplicate times (typically `2:00:00 AM`). * The detailed description of weather alerts is only available in English. The alert category is translated into selected language.

        :param place_id: Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        :type place_id: str
        :param lat: Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
        :type lat: str
        :param lon: Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
        :type lon: str
        :param sections: Sections to be included in the response. You can specify more section by separating the values with a comma. The available values are:  * ``current``: Current weather situation * ``daily``: Forecasts for each whole day, without the daily parts * ``daily-parts``: Forecasts for each whole day, morning, afternoon and evening     * Important: forecast for the morning, afternoon and evening is available only for the first       7 days in the forecast * ``hourly``: Forecasts with hourly resolution * ``minutely``: Precipitation forecast with 1 minute resolution * ``alerts``: The weather alerts * ``all``: All sections 
        :type sections: str
        :param timezone: Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value ``auto`` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
        :type timezone: str
        :param language: The language of text summaries and place names (variable names are never translated). Available languages are:     * ``en``: English    * ``es``: Spanish    * ``fr``: French    * ``de``: German    * ``pl``: Polish    * ``pt``: Portuguese    * ``cs``: Czech 
        :type language: Language
        :param units: Unit system to be used. The available values are:  * `auto`: Select the system automatically, based on the forecast location. * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`). * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`). * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`. * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`. 
        :type units: Units
        :param key: Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._point_point_get_serialize(
            place_id=place_id,
            lat=lat,
            lon=lon,
            sections=sections,
            timezone=timezone,
            language=language,
            units=units,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PointPointData",
            '400': "GeneralRequestError",
            '402': "GeneralRequestError",
            '403': "GeneralRequestError",
            '422': "HTTPValidationError",
            '429': "GeneralRequestError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _point_point_get_serialize(
        self,
        place_id,
        lat,
        lon,
        sections,
        timezone,
        language,
        units,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if place_id is not None:
            
            _query_params.append(('place_id', place_id))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if sections is not None:
            
            _query_params.append(('sections', sections))
            
        if timezone is not None:
            
            _query_params.append(('timezone', timezone))
            
        if language is not None:
            
            _query_params.append(('language', language.value))
            
        if units is not None:
            
            _query_params.append(('units', units.value))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/point',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



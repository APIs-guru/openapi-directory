# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.point_point_daily_astro_data import PointPointDailyAstroData

class TestPointPointDailyAstroData(unittest.TestCase):
    """PointPointDailyAstroData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PointPointDailyAstroData:
        """Test PointPointDailyAstroData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PointPointDailyAstroData`
        """
        model = PointPointDailyAstroData()
        if include_optional:
            return PointPointDailyAstroData(
                moon = openapi_client.models.point_point_daily_moon_data.Point_PointDailyMoonData(
                    always_down = True, 
                    always_up = True, 
                    phase = bytes(b'blah'), 
                    rise = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    set = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                sun = openapi_client.models.point_point_daily_sun_data.Point_PointDailySunData(
                    always_down = True, 
                    always_up = True, 
                    rise = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    set = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return PointPointDailyAstroData(
                moon = openapi_client.models.point_point_daily_moon_data.Point_PointDailyMoonData(
                    always_down = True, 
                    always_up = True, 
                    phase = bytes(b'blah'), 
                    rise = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    set = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                sun = openapi_client.models.point_point_daily_sun_data.Point_PointDailySunData(
                    always_down = True, 
                    always_up = True, 
                    rise = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    set = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testPointPointDailyAstroData(self):
        """Test PointPointDailyAstroData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

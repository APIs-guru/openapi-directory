# coding: utf-8

"""
    Interactive documentation for your Premium plan

      This interactive documentation is using your API key which is filled in automatically, you can find and change this in [your dashboard](https://www.meteosource.com/client).  Using the `GET` button, open your selected endpoint and read the introduction. You will find a detailed description of available parameters. You can complete the `Parameters` section and hit `Execute` to view a full API response. You can then inspect the JSON response, copy the `curl` command to run it on your machine, or obtain a URL of the request. In this way, you can easily build request command for the data you need. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.point_point_daily_afternoon_data import PointPointDailyAfternoonData

class TestPointPointDailyAfternoonData(unittest.TestCase):
    """PointPointDailyAfternoonData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PointPointDailyAfternoonData:
        """Test PointPointDailyAfternoonData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PointPointDailyAfternoonData`
        """
        model = PointPointDailyAfternoonData()
        if include_optional:
            return PointPointDailyAfternoonData(
                cloud_cover = openapi_client.models.point_point_daily_afternoon_cloud_cover_data.Point_PointDailyAfternoonCloudCoverData(
                    high = 1.337, 
                    low = 1.337, 
                    middle = 1.337, 
                    total = 1.337, ),
                dew_point = 1.337,
                feels_like = 1.337,
                humidity = 56,
                icon = 56,
                ozone = 1.337,
                precipitation = openapi_client.models.point_point_daily_afternoon_precipitation_data.Point_PointDailyAfternoonPrecipitationData(
                    total = 1.337, 
                    type = bytes(b'blah'), ),
                pressure = 1.337,
                probability = openapi_client.models.point_point_daily_afternoon_prob_data.Point_PointDailyAfternoonProbData(
                    freeze = 1.337, 
                    precipitation = 56, 
                    storm = 1.337, ),
                snow_depth = 1.337,
                soil_temperature = 1.337,
                surface_temperature = 1.337,
                temperature = 1.337,
                visibility = 1.337,
                weather = '',
                wind = openapi_client.models.point_point_daily_afternoon_wind_data.Point_PointDailyAfternoonWindData(
                    angle = 1.337, 
                    dir = bytes(b'blah'), 
                    gusts = 1.337, 
                    speed = 1.337, ),
                wind_chill = 1.337
            )
        else:
            return PointPointDailyAfternoonData(
                cloud_cover = openapi_client.models.point_point_daily_afternoon_cloud_cover_data.Point_PointDailyAfternoonCloudCoverData(
                    high = 1.337, 
                    low = 1.337, 
                    middle = 1.337, 
                    total = 1.337, ),
                precipitation = openapi_client.models.point_point_daily_afternoon_precipitation_data.Point_PointDailyAfternoonPrecipitationData(
                    total = 1.337, 
                    type = bytes(b'blah'), ),
                probability = openapi_client.models.point_point_daily_afternoon_prob_data.Point_PointDailyAfternoonProbData(
                    freeze = 1.337, 
                    precipitation = 56, 
                    storm = 1.337, ),
                wind = openapi_client.models.point_point_daily_afternoon_wind_data.Point_PointDailyAfternoonWindData(
                    angle = 1.337, 
                    dir = bytes(b'blah'), 
                    gusts = 1.337, 
                    speed = 1.337, ),
        )
        """

    def testPointPointDailyAfternoonData(self):
        """Test PointPointDailyAfternoonData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

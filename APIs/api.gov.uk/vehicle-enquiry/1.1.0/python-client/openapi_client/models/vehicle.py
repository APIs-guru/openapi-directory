# coding: utf-8

"""
    Vehicle Enquiry API

    Interface specification for the DVLA Vehicle Enquiry API

    The version of the OpenAPI document: 1.1.0
    Contact: DvlaAPIAccess@dvla.gov.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Vehicle(BaseModel):
    """
    Vehicle
    """ # noqa: E501
    art_end_date: Optional[date] = Field(default=None, description="Additional Rate of Tax End Date, format: YYYY-MM-DD", alias="artEndDate")
    co2_emissions: Optional[StrictInt] = Field(default=None, description="Carbon Dioxide emissions in grams per kilometre", alias="co2Emissions")
    colour: Optional[StrictStr] = Field(default=None, description="Vehicle colour")
    date_of_last_v5_c_issued: Optional[date] = Field(default=None, description="Date of last V5C issued", alias="dateOfLastV5CIssued")
    engine_capacity: Optional[StrictInt] = Field(default=None, description="Engine capacity in cubic centimetres", alias="engineCapacity")
    euro_status: Optional[StrictStr] = Field(default=None, description="Euro Status (Dealer / Customer Provided (new vehicles))", alias="euroStatus")
    fuel_type: Optional[StrictStr] = Field(default=None, description="Fuel type (Method of Propulsion)", alias="fuelType")
    make: Optional[StrictStr] = Field(default=None, description="Vehicle make")
    marked_for_export: Optional[StrictBool] = Field(default=None, description="True only if vehicle has been export marked", alias="markedForExport")
    month_of_first_dvla_registration: Optional[date] = Field(default=None, description="Month of First DVLA Registration", alias="monthOfFirstDvlaRegistration")
    month_of_first_registration: Optional[date] = Field(default=None, description="Month of First Registration", alias="monthOfFirstRegistration")
    mot_expiry_date: Optional[date] = Field(default=None, description="Mot Expiry Date", alias="motExpiryDate")
    mot_status: Optional[StrictStr] = Field(default=None, description="MOT Status of the vehicle", alias="motStatus")
    real_driving_emissions: Optional[StrictStr] = Field(default=None, description="Real Driving Emissions value", alias="realDrivingEmissions")
    registration_number: StrictStr = Field(description="Registration number of the vehicle", alias="registrationNumber")
    revenue_weight: Optional[StrictInt] = Field(default=None, description="Revenue weight in kilograms", alias="revenueWeight")
    tax_due_date: Optional[date] = Field(default=None, description="Date of tax liablity, Used in calculating licence information presented to user", alias="taxDueDate")
    tax_status: Optional[StrictStr] = Field(default=None, description="Tax status of the vehicle", alias="taxStatus")
    type_approval: Optional[StrictStr] = Field(default=None, description="Vehicle Type Approval Category", alias="typeApproval")
    wheelplan: Optional[StrictStr] = Field(default=None, description="Vehicle wheel plan")
    year_of_manufacture: Optional[StrictInt] = Field(default=None, description="Year of Manufacture", alias="yearOfManufacture")
    __properties: ClassVar[List[str]] = ["artEndDate", "co2Emissions", "colour", "dateOfLastV5CIssued", "engineCapacity", "euroStatus", "fuelType", "make", "markedForExport", "monthOfFirstDvlaRegistration", "monthOfFirstRegistration", "motExpiryDate", "motStatus", "realDrivingEmissions", "registrationNumber", "revenueWeight", "taxDueDate", "taxStatus", "typeApproval", "wheelplan", "yearOfManufacture"]

    @field_validator('mot_status')
    def mot_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['No details held by DVLA', 'No results returned', 'Not valid', 'Valid']):
            raise ValueError("must be one of enum values ('No details held by DVLA', 'No results returned', 'Not valid', 'Valid')")
        return value

    @field_validator('tax_status')
    def tax_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Not Taxed for on Road Use', 'SORN', 'Taxed', 'Untaxed']):
            raise ValueError("must be one of enum values ('Not Taxed for on Road Use', 'SORN', 'Taxed', 'Untaxed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Vehicle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Vehicle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artEndDate": obj.get("artEndDate"),
            "co2Emissions": obj.get("co2Emissions"),
            "colour": obj.get("colour"),
            "dateOfLastV5CIssued": obj.get("dateOfLastV5CIssued"),
            "engineCapacity": obj.get("engineCapacity"),
            "euroStatus": obj.get("euroStatus"),
            "fuelType": obj.get("fuelType"),
            "make": obj.get("make"),
            "markedForExport": obj.get("markedForExport"),
            "monthOfFirstDvlaRegistration": obj.get("monthOfFirstDvlaRegistration"),
            "monthOfFirstRegistration": obj.get("monthOfFirstRegistration"),
            "motExpiryDate": obj.get("motExpiryDate"),
            "motStatus": obj.get("motStatus"),
            "realDrivingEmissions": obj.get("realDrivingEmissions"),
            "registrationNumber": obj.get("registrationNumber"),
            "revenueWeight": obj.get("revenueWeight"),
            "taxDueDate": obj.get("taxDueDate"),
            "taxStatus": obj.get("taxStatus"),
            "typeApproval": obj.get("typeApproval"),
            "wheelplan": obj.get("wheelplan"),
            "yearOfManufacture": obj.get("yearOfManufacture")
        })
        return _obj



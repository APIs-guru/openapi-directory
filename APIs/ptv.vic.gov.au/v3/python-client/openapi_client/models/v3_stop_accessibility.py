# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v3_stop_accessibility_wheelchair import V3StopAccessibilityWheelchair
from typing import Optional, Set
from typing_extensions import Self

class V3StopAccessibility(BaseModel):
    """
    V3StopAccessibility
    """ # noqa: E501
    audio_customer_information: Optional[StrictBool] = Field(default=None, description="Indicates if there is at least one audio customer information at the stop/platform")
    escalator: Optional[StrictBool] = Field(default=None, description="Indicates if there is at least one accessible escalator at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)")
    hearing_loop: Optional[StrictBool] = Field(default=None, description="Indicates if there is a hearing loop facility at the stop/platform")
    lift: Optional[StrictBool] = Field(default=None, description="Indicates if there is an elevator at the stop/platform")
    lighting: Optional[StrictBool] = Field(default=None, description="Indicates if there is lighting at the stop")
    platform_number: Optional[StrictInt] = Field(default=None, description="Indicates the platform number for xivic information (Platform 0 indicates general stop facilities)")
    stairs: Optional[StrictBool] = Field(default=None, description="Indicates if there are stairs available in the stop")
    stop_accessible: Optional[StrictBool] = Field(default=None, description="Indicates if the stop is accessible")
    tactile_ground_surface_indicator: Optional[StrictBool] = Field(default=None, description="Indicates if there are tactile tiles (also known as tactile ground surface indicators, or TGSIs) at the stop")
    waiting_room: Optional[StrictBool] = Field(default=None, description="Indicates if there is a general waiting area at the stop")
    wheelchair: Optional[V3StopAccessibilityWheelchair] = None
    __properties: ClassVar[List[str]] = ["audio_customer_information", "escalator", "hearing_loop", "lift", "lighting", "platform_number", "stairs", "stop_accessible", "tactile_ground_surface_indicator", "waiting_room", "wheelchair"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V3StopAccessibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wheelchair
        if self.wheelchair:
            _dict['wheelchair'] = self.wheelchair.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V3StopAccessibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio_customer_information": obj.get("audio_customer_information"),
            "escalator": obj.get("escalator"),
            "hearing_loop": obj.get("hearing_loop"),
            "lift": obj.get("lift"),
            "lighting": obj.get("lighting"),
            "platform_number": obj.get("platform_number"),
            "stairs": obj.get("stairs"),
            "stop_accessible": obj.get("stop_accessible"),
            "tactile_ground_surface_indicator": obj.get("tactile_ground_surface_indicator"),
            "waiting_room": obj.get("waiting_room"),
            "wheelchair": V3StopAccessibilityWheelchair.from_dict(obj["wheelchair"]) if obj.get("wheelchair") is not None else None
        })
        return _obj



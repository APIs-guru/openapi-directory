# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.v3_stop_response import V3StopResponse
from openapi_client.models.v3_stops_by_distance_response import V3StopsByDistanceResponse
from openapi_client.models.v3_stops_on_route_response import V3StopsOnRouteResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class StopsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def stops_stop_details(
        self,
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API")],
        route_type: Annotated[StrictInt, Field(description="Number identifying transport mode; values returned via RouteTypes API")],
        stop_location: Annotated[Optional[StrictBool], Field(description="Indicates if stop location information will be returned (default = false)")] = None,
        stop_amenities: Annotated[Optional[StrictBool], Field(description="Indicates if stop amenity information will be returned (default = false)")] = None,
        stop_accessibility: Annotated[Optional[StrictBool], Field(description="Indicates if stop accessibility information will be returned (default = false)")] = None,
        stop_contact: Annotated[Optional[StrictBool], Field(description="Indicates if stop contact information will be returned (default = false)")] = None,
        stop_ticket: Annotated[Optional[StrictBool], Field(description="Indicates if stop ticket information will be returned (default = false)")] = None,
        gtfs: Annotated[Optional[StrictBool], Field(description="Incdicates whether the stop_id is a GTFS ID or not")] = None,
        stop_staffing: Annotated[Optional[StrictBool], Field(description="Indicates if stop staffing information will be returned (default = false)")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3StopResponse:
        """View facilities at a specific stop (Metro and V/Line stations only)


        :param stop_id: Identifier of stop; values returned by Stops API (required)
        :type stop_id: int
        :param route_type: Number identifying transport mode; values returned via RouteTypes API (required)
        :type route_type: int
        :param stop_location: Indicates if stop location information will be returned (default = false)
        :type stop_location: bool
        :param stop_amenities: Indicates if stop amenity information will be returned (default = false)
        :type stop_amenities: bool
        :param stop_accessibility: Indicates if stop accessibility information will be returned (default = false)
        :type stop_accessibility: bool
        :param stop_contact: Indicates if stop contact information will be returned (default = false)
        :type stop_contact: bool
        :param stop_ticket: Indicates if stop ticket information will be returned (default = false)
        :type stop_ticket: bool
        :param gtfs: Incdicates whether the stop_id is a GTFS ID or not
        :type gtfs: bool
        :param stop_staffing: Indicates if stop staffing information will be returned (default = false)
        :type stop_staffing: bool
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stop_details_serialize(
            stop_id=stop_id,
            route_type=route_type,
            stop_location=stop_location,
            stop_amenities=stop_amenities,
            stop_accessibility=stop_accessibility,
            stop_contact=stop_contact,
            stop_ticket=stop_ticket,
            gtfs=gtfs,
            stop_staffing=stop_staffing,
            stop_disruptions=stop_disruptions,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stops_stop_details_with_http_info(
        self,
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API")],
        route_type: Annotated[StrictInt, Field(description="Number identifying transport mode; values returned via RouteTypes API")],
        stop_location: Annotated[Optional[StrictBool], Field(description="Indicates if stop location information will be returned (default = false)")] = None,
        stop_amenities: Annotated[Optional[StrictBool], Field(description="Indicates if stop amenity information will be returned (default = false)")] = None,
        stop_accessibility: Annotated[Optional[StrictBool], Field(description="Indicates if stop accessibility information will be returned (default = false)")] = None,
        stop_contact: Annotated[Optional[StrictBool], Field(description="Indicates if stop contact information will be returned (default = false)")] = None,
        stop_ticket: Annotated[Optional[StrictBool], Field(description="Indicates if stop ticket information will be returned (default = false)")] = None,
        gtfs: Annotated[Optional[StrictBool], Field(description="Incdicates whether the stop_id is a GTFS ID or not")] = None,
        stop_staffing: Annotated[Optional[StrictBool], Field(description="Indicates if stop staffing information will be returned (default = false)")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3StopResponse]:
        """View facilities at a specific stop (Metro and V/Line stations only)


        :param stop_id: Identifier of stop; values returned by Stops API (required)
        :type stop_id: int
        :param route_type: Number identifying transport mode; values returned via RouteTypes API (required)
        :type route_type: int
        :param stop_location: Indicates if stop location information will be returned (default = false)
        :type stop_location: bool
        :param stop_amenities: Indicates if stop amenity information will be returned (default = false)
        :type stop_amenities: bool
        :param stop_accessibility: Indicates if stop accessibility information will be returned (default = false)
        :type stop_accessibility: bool
        :param stop_contact: Indicates if stop contact information will be returned (default = false)
        :type stop_contact: bool
        :param stop_ticket: Indicates if stop ticket information will be returned (default = false)
        :type stop_ticket: bool
        :param gtfs: Incdicates whether the stop_id is a GTFS ID or not
        :type gtfs: bool
        :param stop_staffing: Indicates if stop staffing information will be returned (default = false)
        :type stop_staffing: bool
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stop_details_serialize(
            stop_id=stop_id,
            route_type=route_type,
            stop_location=stop_location,
            stop_amenities=stop_amenities,
            stop_accessibility=stop_accessibility,
            stop_contact=stop_contact,
            stop_ticket=stop_ticket,
            gtfs=gtfs,
            stop_staffing=stop_staffing,
            stop_disruptions=stop_disruptions,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stops_stop_details_without_preload_content(
        self,
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API")],
        route_type: Annotated[StrictInt, Field(description="Number identifying transport mode; values returned via RouteTypes API")],
        stop_location: Annotated[Optional[StrictBool], Field(description="Indicates if stop location information will be returned (default = false)")] = None,
        stop_amenities: Annotated[Optional[StrictBool], Field(description="Indicates if stop amenity information will be returned (default = false)")] = None,
        stop_accessibility: Annotated[Optional[StrictBool], Field(description="Indicates if stop accessibility information will be returned (default = false)")] = None,
        stop_contact: Annotated[Optional[StrictBool], Field(description="Indicates if stop contact information will be returned (default = false)")] = None,
        stop_ticket: Annotated[Optional[StrictBool], Field(description="Indicates if stop ticket information will be returned (default = false)")] = None,
        gtfs: Annotated[Optional[StrictBool], Field(description="Incdicates whether the stop_id is a GTFS ID or not")] = None,
        stop_staffing: Annotated[Optional[StrictBool], Field(description="Indicates if stop staffing information will be returned (default = false)")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View facilities at a specific stop (Metro and V/Line stations only)


        :param stop_id: Identifier of stop; values returned by Stops API (required)
        :type stop_id: int
        :param route_type: Number identifying transport mode; values returned via RouteTypes API (required)
        :type route_type: int
        :param stop_location: Indicates if stop location information will be returned (default = false)
        :type stop_location: bool
        :param stop_amenities: Indicates if stop amenity information will be returned (default = false)
        :type stop_amenities: bool
        :param stop_accessibility: Indicates if stop accessibility information will be returned (default = false)
        :type stop_accessibility: bool
        :param stop_contact: Indicates if stop contact information will be returned (default = false)
        :type stop_contact: bool
        :param stop_ticket: Indicates if stop ticket information will be returned (default = false)
        :type stop_ticket: bool
        :param gtfs: Incdicates whether the stop_id is a GTFS ID or not
        :type gtfs: bool
        :param stop_staffing: Indicates if stop staffing information will be returned (default = false)
        :type stop_staffing: bool
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stop_details_serialize(
            stop_id=stop_id,
            route_type=route_type,
            stop_location=stop_location,
            stop_amenities=stop_amenities,
            stop_accessibility=stop_accessibility,
            stop_contact=stop_contact,
            stop_ticket=stop_ticket,
            gtfs=gtfs,
            stop_staffing=stop_staffing,
            stop_disruptions=stop_disruptions,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stops_stop_details_serialize(
        self,
        stop_id,
        route_type,
        stop_location,
        stop_amenities,
        stop_accessibility,
        stop_contact,
        stop_ticket,
        gtfs,
        stop_staffing,
        stop_disruptions,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if stop_id is not None:
            _path_params['stop_id'] = stop_id
        if route_type is not None:
            _path_params['route_type'] = route_type
        # process the query parameters
        if stop_location is not None:
            
            _query_params.append(('stop_location', stop_location))
            
        if stop_amenities is not None:
            
            _query_params.append(('stop_amenities', stop_amenities))
            
        if stop_accessibility is not None:
            
            _query_params.append(('stop_accessibility', stop_accessibility))
            
        if stop_contact is not None:
            
            _query_params.append(('stop_contact', stop_contact))
            
        if stop_ticket is not None:
            
            _query_params.append(('stop_ticket', stop_ticket))
            
        if gtfs is not None:
            
            _query_params.append(('gtfs', gtfs))
            
        if stop_staffing is not None:
            
            _query_params.append(('stop_staffing', stop_staffing))
            
        if stop_disruptions is not None:
            
            _query_params.append(('stop_disruptions', stop_disruptions))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/stops/{stop_id}/route_type/{route_type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stops_stops_by_geolocation(
        self,
        latitude: Annotated[Union[StrictFloat, StrictInt], Field(description="Geographic coordinate of latitude")],
        longitude: Annotated[Union[StrictFloat, StrictInt], Field(description="Geographic coordinate of longitude")],
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API")] = None,
        max_results: Annotated[Optional[StrictInt], Field(description="Maximum number of results returned (default = 30)")] = None,
        max_distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3StopsByDistanceResponse:
        """View all stops near a specific location


        :param latitude: Geographic coordinate of latitude (required)
        :type latitude: float
        :param longitude: Geographic coordinate of longitude (required)
        :type longitude: float
        :param route_types: Filter by route_type; values returned via RouteTypes API
        :type route_types: List[int]
        :param max_results: Maximum number of results returned (default = 30)
        :type max_results: int
        :param max_distance: Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)
        :type max_distance: float
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stops_by_geolocation_serialize(
            latitude=latitude,
            longitude=longitude,
            route_types=route_types,
            max_results=max_results,
            max_distance=max_distance,
            stop_disruptions=stop_disruptions,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopsByDistanceResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stops_stops_by_geolocation_with_http_info(
        self,
        latitude: Annotated[Union[StrictFloat, StrictInt], Field(description="Geographic coordinate of latitude")],
        longitude: Annotated[Union[StrictFloat, StrictInt], Field(description="Geographic coordinate of longitude")],
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API")] = None,
        max_results: Annotated[Optional[StrictInt], Field(description="Maximum number of results returned (default = 30)")] = None,
        max_distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3StopsByDistanceResponse]:
        """View all stops near a specific location


        :param latitude: Geographic coordinate of latitude (required)
        :type latitude: float
        :param longitude: Geographic coordinate of longitude (required)
        :type longitude: float
        :param route_types: Filter by route_type; values returned via RouteTypes API
        :type route_types: List[int]
        :param max_results: Maximum number of results returned (default = 30)
        :type max_results: int
        :param max_distance: Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)
        :type max_distance: float
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stops_by_geolocation_serialize(
            latitude=latitude,
            longitude=longitude,
            route_types=route_types,
            max_results=max_results,
            max_distance=max_distance,
            stop_disruptions=stop_disruptions,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopsByDistanceResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stops_stops_by_geolocation_without_preload_content(
        self,
        latitude: Annotated[Union[StrictFloat, StrictInt], Field(description="Geographic coordinate of latitude")],
        longitude: Annotated[Union[StrictFloat, StrictInt], Field(description="Geographic coordinate of longitude")],
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API")] = None,
        max_results: Annotated[Optional[StrictInt], Field(description="Maximum number of results returned (default = 30)")] = None,
        max_distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View all stops near a specific location


        :param latitude: Geographic coordinate of latitude (required)
        :type latitude: float
        :param longitude: Geographic coordinate of longitude (required)
        :type longitude: float
        :param route_types: Filter by route_type; values returned via RouteTypes API
        :type route_types: List[int]
        :param max_results: Maximum number of results returned (default = 30)
        :type max_results: int
        :param max_distance: Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)
        :type max_distance: float
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stops_by_geolocation_serialize(
            latitude=latitude,
            longitude=longitude,
            route_types=route_types,
            max_results=max_results,
            max_distance=max_distance,
            stop_disruptions=stop_disruptions,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopsByDistanceResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stops_stops_by_geolocation_serialize(
        self,
        latitude,
        longitude,
        route_types,
        max_results,
        max_distance,
        stop_disruptions,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'route_types': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if latitude is not None:
            _path_params['latitude'] = latitude
        if longitude is not None:
            _path_params['longitude'] = longitude
        # process the query parameters
        if route_types is not None:
            
            _query_params.append(('route_types', route_types))
            
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if max_distance is not None:
            
            _query_params.append(('max_distance', max_distance))
            
        if stop_disruptions is not None:
            
            _query_params.append(('stop_disruptions', stop_disruptions))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/stops/location/{latitude},{longitude}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stops_stops_for_route(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        route_type: Annotated[StrictInt, Field(description="Number identifying transport mode; values returned via RouteTypes API")],
        direction_id: Annotated[Optional[StrictInt], Field(description="An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        include_geopath: Annotated[Optional[StrictBool], Field(description="Indicates if geopath data will be returned (default = false)")] = None,
        geopath_utc: Annotated[Optional[datetime], Field(description="Filter geopaths by date (ISO 8601 UTC format) (default = current date)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3StopsOnRouteResponse:
        """View all stops on a specific route


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param route_type: Number identifying transport mode; values returned via RouteTypes API (required)
        :type route_type: int
        :param direction_id: An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.
        :type direction_id: int
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param include_geopath: Indicates if geopath data will be returned (default = false)
        :type include_geopath: bool
        :param geopath_utc: Filter geopaths by date (ISO 8601 UTC format) (default = current date)
        :type geopath_utc: datetime
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stops_for_route_serialize(
            route_id=route_id,
            route_type=route_type,
            direction_id=direction_id,
            stop_disruptions=stop_disruptions,
            include_geopath=include_geopath,
            geopath_utc=geopath_utc,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopsOnRouteResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stops_stops_for_route_with_http_info(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        route_type: Annotated[StrictInt, Field(description="Number identifying transport mode; values returned via RouteTypes API")],
        direction_id: Annotated[Optional[StrictInt], Field(description="An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        include_geopath: Annotated[Optional[StrictBool], Field(description="Indicates if geopath data will be returned (default = false)")] = None,
        geopath_utc: Annotated[Optional[datetime], Field(description="Filter geopaths by date (ISO 8601 UTC format) (default = current date)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3StopsOnRouteResponse]:
        """View all stops on a specific route


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param route_type: Number identifying transport mode; values returned via RouteTypes API (required)
        :type route_type: int
        :param direction_id: An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.
        :type direction_id: int
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param include_geopath: Indicates if geopath data will be returned (default = false)
        :type include_geopath: bool
        :param geopath_utc: Filter geopaths by date (ISO 8601 UTC format) (default = current date)
        :type geopath_utc: datetime
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stops_for_route_serialize(
            route_id=route_id,
            route_type=route_type,
            direction_id=direction_id,
            stop_disruptions=stop_disruptions,
            include_geopath=include_geopath,
            geopath_utc=geopath_utc,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopsOnRouteResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stops_stops_for_route_without_preload_content(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        route_type: Annotated[StrictInt, Field(description="Number identifying transport mode; values returned via RouteTypes API")],
        direction_id: Annotated[Optional[StrictInt], Field(description="An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.")] = None,
        stop_disruptions: Annotated[Optional[StrictBool], Field(description="Indicates if stop disruption information will be returned (default = false)")] = None,
        include_geopath: Annotated[Optional[StrictBool], Field(description="Indicates if geopath data will be returned (default = false)")] = None,
        geopath_utc: Annotated[Optional[datetime], Field(description="Filter geopaths by date (ISO 8601 UTC format) (default = current date)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View all stops on a specific route


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param route_type: Number identifying transport mode; values returned via RouteTypes API (required)
        :type route_type: int
        :param direction_id: An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.
        :type direction_id: int
        :param stop_disruptions: Indicates if stop disruption information will be returned (default = false)
        :type stop_disruptions: bool
        :param include_geopath: Indicates if geopath data will be returned (default = false)
        :type include_geopath: bool
        :param geopath_utc: Filter geopaths by date (ISO 8601 UTC format) (default = current date)
        :type geopath_utc: datetime
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stops_stops_for_route_serialize(
            route_id=route_id,
            route_type=route_type,
            direction_id=direction_id,
            stop_disruptions=stop_disruptions,
            include_geopath=include_geopath,
            geopath_utc=geopath_utc,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3StopsOnRouteResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stops_stops_for_route_serialize(
        self,
        route_id,
        route_type,
        direction_id,
        stop_disruptions,
        include_geopath,
        geopath_utc,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if route_id is not None:
            _path_params['route_id'] = route_id
        if route_type is not None:
            _path_params['route_type'] = route_type
        # process the query parameters
        if direction_id is not None:
            
            _query_params.append(('direction_id', direction_id))
            
        if stop_disruptions is not None:
            
            _query_params.append(('stop_disruptions', stop_disruptions))
            
        if include_geopath is not None:
            
            _query_params.append(('include_geopath', include_geopath))
            
        if geopath_utc is not None:
            if isinstance(geopath_utc, datetime):
                _query_params.append(
                    (
                        'geopath_utc',
                        geopath_utc.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geopath_utc', geopath_utc))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/stops/route/{route_id}/route_type/{route_type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



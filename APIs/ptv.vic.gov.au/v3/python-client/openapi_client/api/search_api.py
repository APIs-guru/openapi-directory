# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.v3_search_result import V3SearchResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_search(
        self,
        search_term: Annotated[StrictStr, Field(description="Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)")],
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by geographic coordinate of latitude")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by geographic coordinate of longitude")] = None,
        max_distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum distance (in metres) from location specified via latitude and longitude parameters")] = None,
        include_addresses: Annotated[Optional[StrictBool], Field(description="Placeholder for future development; currently unavailable")] = None,
        include_outlets: Annotated[Optional[StrictBool], Field(description="Indicates if outlets will be returned in response (default = true)")] = None,
        match_stop_by_suburb: Annotated[Optional[StrictBool], Field(description="Indicates whether to find stops by suburbs in the search term (default = true)")] = None,
        match_route_by_suburb: Annotated[Optional[StrictBool], Field(description="Indicates whether to find routes by suburbs in the search term (default = true)")] = None,
        match_stop_by_gtfs_stop_id: Annotated[Optional[StrictBool], Field(description="Indicates whether to search for stops according to a metlink stop ID (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3SearchResult:
        """View stops, routes and myki ticket outlets that match the search term


        :param search_term: Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
        :type search_term: str
        :param route_types: Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
        :type route_types: List[int]
        :param latitude: Filter by geographic coordinate of latitude
        :type latitude: float
        :param longitude: Filter by geographic coordinate of longitude
        :type longitude: float
        :param max_distance: Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
        :type max_distance: float
        :param include_addresses: Placeholder for future development; currently unavailable
        :type include_addresses: bool
        :param include_outlets: Indicates if outlets will be returned in response (default = true)
        :type include_outlets: bool
        :param match_stop_by_suburb: Indicates whether to find stops by suburbs in the search term (default = true)
        :type match_stop_by_suburb: bool
        :param match_route_by_suburb: Indicates whether to find routes by suburbs in the search term (default = true)
        :type match_route_by_suburb: bool
        :param match_stop_by_gtfs_stop_id: Indicates whether to search for stops according to a metlink stop ID (default = false)
        :type match_stop_by_gtfs_stop_id: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_search_serialize(
            search_term=search_term,
            route_types=route_types,
            latitude=latitude,
            longitude=longitude,
            max_distance=max_distance,
            include_addresses=include_addresses,
            include_outlets=include_outlets,
            match_stop_by_suburb=match_stop_by_suburb,
            match_route_by_suburb=match_route_by_suburb,
            match_stop_by_gtfs_stop_id=match_stop_by_gtfs_stop_id,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3SearchResult",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_search_with_http_info(
        self,
        search_term: Annotated[StrictStr, Field(description="Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)")],
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by geographic coordinate of latitude")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by geographic coordinate of longitude")] = None,
        max_distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum distance (in metres) from location specified via latitude and longitude parameters")] = None,
        include_addresses: Annotated[Optional[StrictBool], Field(description="Placeholder for future development; currently unavailable")] = None,
        include_outlets: Annotated[Optional[StrictBool], Field(description="Indicates if outlets will be returned in response (default = true)")] = None,
        match_stop_by_suburb: Annotated[Optional[StrictBool], Field(description="Indicates whether to find stops by suburbs in the search term (default = true)")] = None,
        match_route_by_suburb: Annotated[Optional[StrictBool], Field(description="Indicates whether to find routes by suburbs in the search term (default = true)")] = None,
        match_stop_by_gtfs_stop_id: Annotated[Optional[StrictBool], Field(description="Indicates whether to search for stops according to a metlink stop ID (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3SearchResult]:
        """View stops, routes and myki ticket outlets that match the search term


        :param search_term: Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
        :type search_term: str
        :param route_types: Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
        :type route_types: List[int]
        :param latitude: Filter by geographic coordinate of latitude
        :type latitude: float
        :param longitude: Filter by geographic coordinate of longitude
        :type longitude: float
        :param max_distance: Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
        :type max_distance: float
        :param include_addresses: Placeholder for future development; currently unavailable
        :type include_addresses: bool
        :param include_outlets: Indicates if outlets will be returned in response (default = true)
        :type include_outlets: bool
        :param match_stop_by_suburb: Indicates whether to find stops by suburbs in the search term (default = true)
        :type match_stop_by_suburb: bool
        :param match_route_by_suburb: Indicates whether to find routes by suburbs in the search term (default = true)
        :type match_route_by_suburb: bool
        :param match_stop_by_gtfs_stop_id: Indicates whether to search for stops according to a metlink stop ID (default = false)
        :type match_stop_by_gtfs_stop_id: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_search_serialize(
            search_term=search_term,
            route_types=route_types,
            latitude=latitude,
            longitude=longitude,
            max_distance=max_distance,
            include_addresses=include_addresses,
            include_outlets=include_outlets,
            match_stop_by_suburb=match_stop_by_suburb,
            match_route_by_suburb=match_route_by_suburb,
            match_stop_by_gtfs_stop_id=match_stop_by_gtfs_stop_id,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3SearchResult",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_search_without_preload_content(
        self,
        search_term: Annotated[StrictStr, Field(description="Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)")],
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by geographic coordinate of latitude")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by geographic coordinate of longitude")] = None,
        max_distance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter by maximum distance (in metres) from location specified via latitude and longitude parameters")] = None,
        include_addresses: Annotated[Optional[StrictBool], Field(description="Placeholder for future development; currently unavailable")] = None,
        include_outlets: Annotated[Optional[StrictBool], Field(description="Indicates if outlets will be returned in response (default = true)")] = None,
        match_stop_by_suburb: Annotated[Optional[StrictBool], Field(description="Indicates whether to find stops by suburbs in the search term (default = true)")] = None,
        match_route_by_suburb: Annotated[Optional[StrictBool], Field(description="Indicates whether to find routes by suburbs in the search term (default = true)")] = None,
        match_stop_by_gtfs_stop_id: Annotated[Optional[StrictBool], Field(description="Indicates whether to search for stops according to a metlink stop ID (default = false)")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View stops, routes and myki ticket outlets that match the search term


        :param search_term: Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes) (required)
        :type search_term: str
        :param route_types: Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
        :type route_types: List[int]
        :param latitude: Filter by geographic coordinate of latitude
        :type latitude: float
        :param longitude: Filter by geographic coordinate of longitude
        :type longitude: float
        :param max_distance: Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
        :type max_distance: float
        :param include_addresses: Placeholder for future development; currently unavailable
        :type include_addresses: bool
        :param include_outlets: Indicates if outlets will be returned in response (default = true)
        :type include_outlets: bool
        :param match_stop_by_suburb: Indicates whether to find stops by suburbs in the search term (default = true)
        :type match_stop_by_suburb: bool
        :param match_route_by_suburb: Indicates whether to find routes by suburbs in the search term (default = true)
        :type match_route_by_suburb: bool
        :param match_stop_by_gtfs_stop_id: Indicates whether to search for stops according to a metlink stop ID (default = false)
        :type match_stop_by_gtfs_stop_id: bool
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_search_serialize(
            search_term=search_term,
            route_types=route_types,
            latitude=latitude,
            longitude=longitude,
            max_distance=max_distance,
            include_addresses=include_addresses,
            include_outlets=include_outlets,
            match_stop_by_suburb=match_stop_by_suburb,
            match_route_by_suburb=match_route_by_suburb,
            match_stop_by_gtfs_stop_id=match_stop_by_gtfs_stop_id,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3SearchResult",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_search_serialize(
        self,
        search_term,
        route_types,
        latitude,
        longitude,
        max_distance,
        include_addresses,
        include_outlets,
        match_stop_by_suburb,
        match_route_by_suburb,
        match_stop_by_gtfs_stop_id,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'route_types': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if search_term is not None:
            _path_params['search_term'] = search_term
        # process the query parameters
        if route_types is not None:
            
            _query_params.append(('route_types', route_types))
            
        if latitude is not None:
            
            _query_params.append(('latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('longitude', longitude))
            
        if max_distance is not None:
            
            _query_params.append(('max_distance', max_distance))
            
        if include_addresses is not None:
            
            _query_params.append(('include_addresses', include_addresses))
            
        if include_outlets is not None:
            
            _query_params.append(('include_outlets', include_outlets))
            
        if match_stop_by_suburb is not None:
            
            _query_params.append(('match_stop_by_suburb', match_stop_by_suburb))
            
        if match_route_by_suburb is not None:
            
            _query_params.append(('match_route_by_suburb', match_route_by_suburb))
            
        if match_stop_by_gtfs_stop_id is not None:
            
            _query_params.append(('match_stop_by_gtfs_stop_id', match_stop_by_gtfs_stop_id))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/search/{search_term}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    PTV Timetable API - Version 3

    The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.    Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.  

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.v3_disruption_modes_response import V3DisruptionModesResponse
from openapi_client.models.v3_disruption_response import V3DisruptionResponse
from openapi_client.models.v3_disruptions_response import V3DisruptionsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DisruptionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def disruptions_get_all_disruptions(
        self,
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API")] = None,
        disruption_modes: Annotated[Optional[List[StrictInt]], Field(description="Filter by disruption_mode; values returned via v3/disruptions/modes API")] = None,
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3DisruptionsResponse:
        """View all disruptions for all route types


        :param route_types: Filter by route_type; values returned via RouteTypes API
        :type route_types: List[int]
        :param disruption_modes: Filter by disruption_mode; values returned via v3/disruptions/modes API
        :type disruption_modes: List[int]
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_all_disruptions_serialize(
            route_types=route_types,
            disruption_modes=disruption_modes,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disruptions_get_all_disruptions_with_http_info(
        self,
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API")] = None,
        disruption_modes: Annotated[Optional[List[StrictInt]], Field(description="Filter by disruption_mode; values returned via v3/disruptions/modes API")] = None,
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3DisruptionsResponse]:
        """View all disruptions for all route types


        :param route_types: Filter by route_type; values returned via RouteTypes API
        :type route_types: List[int]
        :param disruption_modes: Filter by disruption_mode; values returned via v3/disruptions/modes API
        :type disruption_modes: List[int]
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_all_disruptions_serialize(
            route_types=route_types,
            disruption_modes=disruption_modes,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disruptions_get_all_disruptions_without_preload_content(
        self,
        route_types: Annotated[Optional[List[StrictInt]], Field(description="Filter by route_type; values returned via RouteTypes API")] = None,
        disruption_modes: Annotated[Optional[List[StrictInt]], Field(description="Filter by disruption_mode; values returned via v3/disruptions/modes API")] = None,
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View all disruptions for all route types


        :param route_types: Filter by route_type; values returned via RouteTypes API
        :type route_types: List[int]
        :param disruption_modes: Filter by disruption_mode; values returned via v3/disruptions/modes API
        :type disruption_modes: List[int]
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_all_disruptions_serialize(
            route_types=route_types,
            disruption_modes=disruption_modes,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disruptions_get_all_disruptions_serialize(
        self,
        route_types,
        disruption_modes,
        disruption_status,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'route_types': 'multi',
            'disruption_modes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if route_types is not None:
            
            _query_params.append(('route_types', route_types))
            
        if disruption_modes is not None:
            
            _query_params.append(('disruption_modes', disruption_modes))
            
        if disruption_status is not None:
            
            _query_params.append(('disruption_status', disruption_status))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/disruptions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disruptions_get_disruption_by_id(
        self,
        disruption_id: Annotated[StrictInt, Field(description="Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}")],
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3DisruptionResponse:
        """View a specific disruption


        :param disruption_id: Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} (required)
        :type disruption_id: int
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruption_by_id_serialize(
            disruption_id=disruption_id,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disruptions_get_disruption_by_id_with_http_info(
        self,
        disruption_id: Annotated[StrictInt, Field(description="Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}")],
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3DisruptionResponse]:
        """View a specific disruption


        :param disruption_id: Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} (required)
        :type disruption_id: int
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruption_by_id_serialize(
            disruption_id=disruption_id,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disruptions_get_disruption_by_id_without_preload_content(
        self,
        disruption_id: Annotated[StrictInt, Field(description="Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id}")],
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View a specific disruption


        :param disruption_id: Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} (required)
        :type disruption_id: int
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruption_by_id_serialize(
            disruption_id=disruption_id,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disruptions_get_disruption_by_id_serialize(
        self,
        disruption_id,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if disruption_id is not None:
            _path_params['disruption_id'] = disruption_id
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/disruptions/{disruption_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disruptions_get_disruption_modes(
        self,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3DisruptionModesResponse:
        """Get all disruption modes


        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruption_modes_serialize(
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionModesResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disruptions_get_disruption_modes_with_http_info(
        self,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3DisruptionModesResponse]:
        """Get all disruption modes


        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruption_modes_serialize(
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionModesResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disruptions_get_disruption_modes_without_preload_content(
        self,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all disruption modes


        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruption_modes_serialize(
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionModesResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disruptions_get_disruption_modes_serialize(
        self,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/disruptions/modes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disruptions_get_disruptions_by_route(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3DisruptionsResponse:
        """View all disruptions for a particular route


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_route_serialize(
            route_id=route_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disruptions_get_disruptions_by_route_with_http_info(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3DisruptionsResponse]:
        """View all disruptions for a particular route


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_route_serialize(
            route_id=route_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disruptions_get_disruptions_by_route_without_preload_content(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View all disruptions for a particular route


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_route_serialize(
            route_id=route_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disruptions_get_disruptions_by_route_serialize(
        self,
        route_id,
        disruption_status,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if route_id is not None:
            _path_params['route_id'] = route_id
        # process the query parameters
        if disruption_status is not None:
            
            _query_params.append(('disruption_status', disruption_status))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/disruptions/route/{route_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disruptions_get_disruptions_by_route_and_stop(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API - v3/stops")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3DisruptionsResponse:
        """View all disruptions for a particular route and stop


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param stop_id: Identifier of stop; values returned by Stops API - v3/stops (required)
        :type stop_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_route_and_stop_serialize(
            route_id=route_id,
            stop_id=stop_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disruptions_get_disruptions_by_route_and_stop_with_http_info(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API - v3/stops")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3DisruptionsResponse]:
        """View all disruptions for a particular route and stop


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param stop_id: Identifier of stop; values returned by Stops API - v3/stops (required)
        :type stop_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_route_and_stop_serialize(
            route_id=route_id,
            stop_id=stop_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disruptions_get_disruptions_by_route_and_stop_without_preload_content(
        self,
        route_id: Annotated[StrictInt, Field(description="Identifier of route; values returned by Routes API - v3/routes")],
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API - v3/stops")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View all disruptions for a particular route and stop


        :param route_id: Identifier of route; values returned by Routes API - v3/routes (required)
        :type route_id: int
        :param stop_id: Identifier of stop; values returned by Stops API - v3/stops (required)
        :type stop_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_route_and_stop_serialize(
            route_id=route_id,
            stop_id=stop_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disruptions_get_disruptions_by_route_and_stop_serialize(
        self,
        route_id,
        stop_id,
        disruption_status,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if route_id is not None:
            _path_params['route_id'] = route_id
        if stop_id is not None:
            _path_params['stop_id'] = stop_id
        # process the query parameters
        if disruption_status is not None:
            
            _query_params.append(('disruption_status', disruption_status))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/disruptions/route/{route_id}/stop/{stop_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disruptions_get_disruptions_by_stop(
        self,
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API - v3/stops")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> V3DisruptionsResponse:
        """View all disruptions for a particular stop


        :param stop_id: Identifier of stop; values returned by Stops API - v3/stops (required)
        :type stop_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_stop_serialize(
            stop_id=stop_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disruptions_get_disruptions_by_stop_with_http_info(
        self,
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API - v3/stops")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[V3DisruptionsResponse]:
        """View all disruptions for a particular stop


        :param stop_id: Identifier of stop; values returned by Stops API - v3/stops (required)
        :type stop_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_stop_serialize(
            stop_id=stop_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disruptions_get_disruptions_by_stop_without_preload_content(
        self,
        stop_id: Annotated[StrictInt, Field(description="Identifier of stop; values returned by Stops API - v3/stops")],
        disruption_status: Annotated[Optional[StrictStr], Field(description="Filter by status of disruption")] = None,
        token: Annotated[Optional[StrictStr], Field(description="Please ignore")] = None,
        devid: Annotated[Optional[StrictStr], Field(description="Your developer id")] = None,
        signature: Annotated[Optional[StrictStr], Field(description="Authentication signature for request")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View all disruptions for a particular stop


        :param stop_id: Identifier of stop; values returned by Stops API - v3/stops (required)
        :type stop_id: int
        :param disruption_status: Filter by status of disruption
        :type disruption_status: str
        :param token: Please ignore
        :type token: str
        :param devid: Your developer id
        :type devid: str
        :param signature: Authentication signature for request
        :type signature: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disruptions_get_disruptions_by_stop_serialize(
            stop_id=stop_id,
            disruption_status=disruption_status,
            token=token,
            devid=devid,
            signature=signature,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "V3DisruptionsResponse",
            '400': "V3ErrorResponse",
            '403': "V3ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disruptions_get_disruptions_by_stop_serialize(
        self,
        stop_id,
        disruption_status,
        token,
        devid,
        signature,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if stop_id is not None:
            _path_params['stop_id'] = stop_id
        # process the query parameters
        if disruption_status is not None:
            
            _query_params.append(('disruption_status', disruption_status))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        if devid is not None:
            
            _query_params.append(('devid', devid))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/html', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v3/disruptions/stop/{stop_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



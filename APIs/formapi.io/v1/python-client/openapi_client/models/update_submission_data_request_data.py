# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSubmissionDataRequestData(BaseModel):
    """
    UpdateSubmissionDataRequestData
    """ # noqa: E501
    auth_phone_number_hash: Optional[StrictStr] = None
    auth_provider: Optional[StrictStr] = None
    auth_second_factor_type: Optional[StrictStr] = None
    auth_session_id_hash: Optional[StrictStr] = None
    auth_session_started_at: Optional[StrictStr] = None
    auth_type: Optional[StrictStr] = None
    auth_user_id_hash: Optional[StrictStr] = None
    auth_username_hash: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    fields: Optional[List[StrictStr]] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[StrictStr] = None
    order: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["auth_phone_number_hash", "auth_provider", "auth_second_factor_type", "auth_session_id_hash", "auth_session_started_at", "auth_type", "auth_user_id_hash", "auth_username_hash", "email", "fields", "metadata", "name", "order"]

    @field_validator('auth_second_factor_type')
    def auth_second_factor_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'phone_number', 'totp', 'mobile_push', 'security_key', 'fingerprint']):
            raise ValueError("must be one of enum values ('none', 'phone_number', 'totp', 'mobile_push', 'security_key', 'fingerprint')")
        return value

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'password', 'oauth', 'email_link', 'phone_number', 'ldap', 'saml']):
            raise ValueError("must be one of enum values ('none', 'password', 'oauth', 'email_link', 'phone_number', 'ldap', 'saml')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSubmissionDataRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if auth_phone_number_hash (nullable) is None
        # and model_fields_set contains the field
        if self.auth_phone_number_hash is None and "auth_phone_number_hash" in self.model_fields_set:
            _dict['auth_phone_number_hash'] = None

        # set to None if auth_provider (nullable) is None
        # and model_fields_set contains the field
        if self.auth_provider is None and "auth_provider" in self.model_fields_set:
            _dict['auth_provider'] = None

        # set to None if auth_session_id_hash (nullable) is None
        # and model_fields_set contains the field
        if self.auth_session_id_hash is None and "auth_session_id_hash" in self.model_fields_set:
            _dict['auth_session_id_hash'] = None

        # set to None if auth_session_started_at (nullable) is None
        # and model_fields_set contains the field
        if self.auth_session_started_at is None and "auth_session_started_at" in self.model_fields_set:
            _dict['auth_session_started_at'] = None

        # set to None if auth_user_id_hash (nullable) is None
        # and model_fields_set contains the field
        if self.auth_user_id_hash is None and "auth_user_id_hash" in self.model_fields_set:
            _dict['auth_user_id_hash'] = None

        # set to None if auth_username_hash (nullable) is None
        # and model_fields_set contains the field
        if self.auth_username_hash is None and "auth_username_hash" in self.model_fields_set:
            _dict['auth_username_hash'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSubmissionDataRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_phone_number_hash": obj.get("auth_phone_number_hash"),
            "auth_provider": obj.get("auth_provider"),
            "auth_second_factor_type": obj.get("auth_second_factor_type"),
            "auth_session_id_hash": obj.get("auth_session_id_hash"),
            "auth_session_started_at": obj.get("auth_session_started_at"),
            "auth_type": obj.get("auth_type"),
            "auth_user_id_hash": obj.get("auth_user_id_hash"),
            "auth_username_hash": obj.get("auth_username_hash"),
            "email": obj.get("email"),
            "fields": obj.get("fields"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "order": obj.get("order")
        })
        return _obj



# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.submission_action import SubmissionAction
from openapi_client.models.submission_data_request import SubmissionDataRequest
from typing import Optional, Set
from typing_extensions import Self

class Submission(BaseModel):
    """
    Submission
    """ # noqa: E501
    actions: Optional[List[SubmissionAction]] = None
    batch_id: Optional[StrictStr] = None
    data: Optional[Dict[str, Any]] = None
    data_requests: Optional[List[SubmissionDataRequest]] = None
    download_url: Optional[StrictStr] = None
    editable: Optional[StrictBool] = None
    expired: StrictBool
    expires_at: Optional[StrictStr] = None
    id: StrictStr
    metadata: Optional[Dict[str, Any]] = None
    pdf_hash: Optional[StrictStr] = None
    permanent_download_url: Optional[StrictStr] = None
    processed_at: Optional[StrictStr] = None
    referrer: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    state: StrictStr
    template_id: Optional[StrictStr] = None
    test: StrictBool
    truncated_text: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["actions", "batch_id", "data", "data_requests", "download_url", "editable", "expired", "expires_at", "id", "metadata", "pdf_hash", "permanent_download_url", "processed_at", "referrer", "source", "state", "template_id", "test", "truncated_text"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'processed', 'invalid_data', 'error', 'image_download_failed', 'image_processing_failed', 'waiting_for_data_requests', 'syntax_error', 'account_suspended', 'license_revoked', 'accidental']):
            raise ValueError("must be one of enum values ('pending', 'processed', 'invalid_data', 'error', 'image_download_failed', 'image_processing_failed', 'waiting_for_data_requests', 'syntax_error', 'account_suspended', 'license_revoked', 'accidental')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Submission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_requests (list)
        _items = []
        if self.data_requests:
            for _item_data_requests in self.data_requests:
                if _item_data_requests:
                    _items.append(_item_data_requests.to_dict())
            _dict['data_requests'] = _items
        # set to None if batch_id (nullable) is None
        # and model_fields_set contains the field
        if self.batch_id is None and "batch_id" in self.model_fields_set:
            _dict['batch_id'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if download_url (nullable) is None
        # and model_fields_set contains the field
        if self.download_url is None and "download_url" in self.model_fields_set:
            _dict['download_url'] = None

        # set to None if editable (nullable) is None
        # and model_fields_set contains the field
        if self.editable is None and "editable" in self.model_fields_set:
            _dict['editable'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if pdf_hash (nullable) is None
        # and model_fields_set contains the field
        if self.pdf_hash is None and "pdf_hash" in self.model_fields_set:
            _dict['pdf_hash'] = None

        # set to None if permanent_download_url (nullable) is None
        # and model_fields_set contains the field
        if self.permanent_download_url is None and "permanent_download_url" in self.model_fields_set:
            _dict['permanent_download_url'] = None

        # set to None if processed_at (nullable) is None
        # and model_fields_set contains the field
        if self.processed_at is None and "processed_at" in self.model_fields_set:
            _dict['processed_at'] = None

        # set to None if referrer (nullable) is None
        # and model_fields_set contains the field
        if self.referrer is None and "referrer" in self.model_fields_set:
            _dict['referrer'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Submission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [SubmissionAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "batch_id": obj.get("batch_id"),
            "data": obj.get("data"),
            "data_requests": [SubmissionDataRequest.from_dict(_item) for _item in obj["data_requests"]] if obj.get("data_requests") is not None else None,
            "download_url": obj.get("download_url"),
            "editable": obj.get("editable"),
            "expired": obj.get("expired"),
            "expires_at": obj.get("expires_at"),
            "id": obj.get("id"),
            "metadata": obj.get("metadata"),
            "pdf_hash": obj.get("pdf_hash"),
            "permanent_download_url": obj.get("permanent_download_url"),
            "processed_at": obj.get("processed_at"),
            "referrer": obj.get("referrer"),
            "source": obj.get("source"),
            "state": obj.get("state"),
            "template_id": obj.get("template_id"),
            "test": obj.get("test"),
            "truncated_text": obj.get("truncated_text")
        })
        return _obj



# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubmissionAction(BaseModel):
    """
    SubmissionAction
    """ # noqa: E501
    action_category: StrictStr
    action_type: StrictStr
    id: StrictStr
    integration_id: Optional[StrictStr]
    result_data: Dict[str, Any]
    state: StrictStr
    __properties: ClassVar[List[str]] = ["action_category", "action_type", "id", "integration_id", "result_data", "state"]

    @field_validator('action_category')
    def action_category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['notification', 'file_upload']):
            raise ValueError("must be one of enum values ('notification', 'file_upload')")
        return value

    @field_validator('action_type')
    def action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['webhook', 'slack_webhook', 'email', 'aws_s3_upload']):
            raise ValueError("must be one of enum values ('webhook', 'slack_webhook', 'email', 'aws_s3_upload')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'processed', 'failed', 'error']):
            raise ValueError("must be one of enum values ('pending', 'processed', 'failed', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if integration_id (nullable) is None
        # and model_fields_set contains the field
        if self.integration_id is None and "integration_id" in self.model_fields_set:
            _dict['integration_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_category": obj.get("action_category"),
            "action_type": obj.get("action_type"),
            "id": obj.get("id"),
            "integration_id": obj.get("integration_id"),
            "result_data": obj.get("result_data"),
            "state": obj.get("state")
        })
        return _obj



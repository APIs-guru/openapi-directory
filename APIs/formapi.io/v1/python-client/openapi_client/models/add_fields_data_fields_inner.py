# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AddFieldsDataFieldsInner(BaseModel):
    """
    AddFieldsDataFieldsInner
    """ # noqa: E501
    alignment: Optional[StrictStr] = None
    auto_calculate_max_length: Optional[StrictBool] = Field(default=None, alias="autoCalculateMaxLength")
    background_color: Optional[StrictStr] = Field(default=None, alias="backgroundColor")
    background_color_field_name: Optional[StrictStr] = Field(default=None, alias="backgroundColorFieldName")
    background_color_field_required: Optional[StrictBool] = Field(default=None, alias="backgroundColorFieldRequired")
    barcode_symbology: Optional[StrictStr] = Field(default=None, alias="barcodeSymbology")
    bold: Optional[StrictBool] = None
    character_spacing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="characterSpacing")
    check_character: Optional[StrictStr] = Field(default=None, alias="checkCharacter")
    check_color: Optional[StrictStr] = Field(default=None, alias="checkColor")
    check_color_field_name: Optional[StrictStr] = Field(default=None, alias="checkColorFieldName")
    check_color_field_required: Optional[StrictBool] = Field(default=None, alias="checkColorFieldRequired")
    color: Optional[StrictStr] = None
    color_field_name: Optional[StrictStr] = Field(default=None, alias="colorFieldName")
    color_field_required: Optional[StrictBool] = Field(default=None, alias="colorFieldRequired")
    comb: Optional[StrictBool] = None
    comb_number_of_cells: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, alias="combNumberOfCells")
    comb_value_offset: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="combValueOffset")
    combined_field_format: Optional[StrictStr] = Field(default=None, alias="combinedFieldFormat")
    combined_field_names: Optional[StrictStr] = Field(default=None, alias="combinedFieldNames")
    combined_field_separator: Optional[StrictStr] = Field(default=None, alias="combinedFieldSeparator")
    combined_field_type: Optional[StrictStr] = Field(default=None, alias="combinedFieldType")
    condition: Optional[StrictStr] = None
    currency: Optional[StrictBool] = None
    date_time_format: Optional[StrictStr] = Field(default=None, alias="dateTimeFormat")
    decimal_places: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, alias="decimalPlaces")
    default: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    display_type: Optional[StrictStr] = Field(default=None, alias="displayType")
    exclusive_maximum: Optional[StrictBool] = Field(default=None, alias="exclusiveMaximum")
    exclusive_minimum: Optional[StrictBool] = Field(default=None, alias="exclusiveMinimum")
    false_text: Optional[StrictStr] = Field(default=None, alias="falseText")
    font_size: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, alias="fontSize")
    height: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    hidden: Optional[StrictBool] = None
    id: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    image_gravity: Optional[StrictStr] = Field(default=None, alias="imageGravity")
    image_scale_type: Optional[StrictStr] = Field(default=None, alias="imageScaleType")
    include_time: Optional[StrictBool] = Field(default=None, alias="includeTime")
    integer: Optional[StrictBool] = None
    invert_boolean_condition: Optional[StrictBool] = Field(default=None, alias="invertBooleanCondition")
    max_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxLength")
    maximum: Optional[Union[StrictFloat, StrictInt]] = None
    metadata: Optional[StrictStr] = None
    min_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minLength")
    minimum: Optional[Union[StrictFloat, StrictInt]] = None
    multiline: Optional[StrictBool] = None
    multiline_lines: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, alias="multilineLines")
    name: StrictStr
    number_condition_range_exclusive_max: Optional[StrictBool] = Field(default=None, alias="numberConditionRangeExclusiveMax")
    number_condition_range_exclusive_min: Optional[StrictBool] = Field(default=None, alias="numberConditionRangeExclusiveMin")
    number_condition_range_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numberConditionRangeMax")
    number_condition_range_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numberConditionRangeMin")
    number_condition_type: Optional[StrictStr] = Field(default=None, alias="numberConditionType")
    opacity: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = None
    option_list: Optional[StrictStr] = Field(default=None, alias="optionList")
    overflow: Optional[StrictStr] = None
    page: Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]
    placeholder: Optional[StrictStr] = None
    qrcode_color: Optional[StrictStr] = Field(default=None, alias="qrcodeColor")
    qrcode_color_field_name: Optional[StrictStr] = Field(default=None, alias="qrcodeColorFieldName")
    qrcode_color_field_required: Optional[StrictBool] = Field(default=None, alias="qrcodeColorFieldRequired")
    required: Optional[StrictBool] = None
    rotation: Optional[Union[Annotated[float, Field(le=360, strict=True, ge=0)], Annotated[int, Field(le=360, strict=True, ge=0)]]] = None
    shape_border_color: Optional[StrictStr] = Field(default=None, alias="shapeBorderColor")
    shape_border_color_field_name: Optional[StrictStr] = Field(default=None, alias="shapeBorderColorFieldName")
    shape_border_color_field_required: Optional[StrictBool] = Field(default=None, alias="shapeBorderColorFieldRequired")
    shape_border_width: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, alias="shapeBorderWidth")
    shape_fill_color: Optional[StrictStr] = Field(default=None, alias="shapeFillColor")
    shape_fill_color_field_name: Optional[StrictStr] = Field(default=None, alias="shapeFillColorFieldName")
    shape_fill_color_field_required: Optional[StrictBool] = Field(default=None, alias="shapeFillColorFieldRequired")
    shape_type: Optional[StrictStr] = Field(default=None, alias="shapeType")
    signature_allow_draw: Optional[StrictBool] = Field(default=None, alias="signatureAllowDraw")
    signature_allow_type: Optional[StrictBool] = Field(default=None, alias="signatureAllowType")
    static: Optional[StrictBool] = None
    strikethrough: Optional[StrictBool] = None
    string_condition_type: Optional[StrictStr] = Field(default=None, alias="stringConditionType")
    title: Optional[StrictStr] = None
    true_text: Optional[StrictStr] = Field(default=None, alias="trueText")
    type: Optional[StrictStr] = None
    typeface: Optional[StrictStr] = None
    uppercase: Optional[StrictBool] = None
    v_alignment: Optional[StrictStr] = Field(default=None, alias="vAlignment")
    width: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    x: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    y: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = None
    __properties: ClassVar[List[str]] = ["alignment", "autoCalculateMaxLength", "backgroundColor", "backgroundColorFieldName", "backgroundColorFieldRequired", "barcodeSymbology", "bold", "characterSpacing", "checkCharacter", "checkColor", "checkColorFieldName", "checkColorFieldRequired", "color", "colorFieldName", "colorFieldRequired", "comb", "combNumberOfCells", "combValueOffset", "combinedFieldFormat", "combinedFieldNames", "combinedFieldSeparator", "combinedFieldType", "condition", "currency", "dateTimeFormat", "decimalPlaces", "default", "description", "displayType", "exclusiveMaximum", "exclusiveMinimum", "falseText", "fontSize", "height", "hidden", "id", "imageGravity", "imageScaleType", "includeTime", "integer", "invertBooleanCondition", "maxLength", "maximum", "metadata", "minLength", "minimum", "multiline", "multilineLines", "name", "numberConditionRangeExclusiveMax", "numberConditionRangeExclusiveMin", "numberConditionRangeMax", "numberConditionRangeMin", "numberConditionType", "opacity", "optionList", "overflow", "page", "placeholder", "qrcodeColor", "qrcodeColorFieldName", "qrcodeColorFieldRequired", "required", "rotation", "shapeBorderColor", "shapeBorderColorFieldName", "shapeBorderColorFieldRequired", "shapeBorderWidth", "shapeFillColor", "shapeFillColorFieldName", "shapeFillColorFieldRequired", "shapeType", "signatureAllowDraw", "signatureAllowType", "static", "strikethrough", "stringConditionType", "title", "trueText", "type", "typeface", "uppercase", "vAlignment", "width", "x", "y"]

    @field_validator('alignment')
    def alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['left', 'center', 'right']):
            raise ValueError("must be one of enum values ('left', 'center', 'right')")
        return value

    @field_validator('check_character')
    def check_character_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['&#10003;', '&#10004;', '&#10006;', '&#10007;', '&#10008;']):
            raise ValueError("must be one of enum values ('&#10003;', '&#10004;', '&#10006;', '&#10007;', '&#10008;')")
        return value

    @field_validator('display_type')
    def display_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'check', 'qrcode', 'barcode', 'image', 'shape']):
            raise ValueError("must be one of enum values ('text', 'check', 'qrcode', 'barcode', 'image', 'shape')")
        return value

    @field_validator('image_gravity')
    def image_gravity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NorthWest', 'North', 'NorthEast', 'West', 'Center', 'East', 'SouthWest', 'South', 'SouthEast']):
            raise ValueError("must be one of enum values ('NorthWest', 'North', 'NorthEast', 'West', 'Center', 'East', 'SouthWest', 'South', 'SouthEast')")
        return value

    @field_validator('image_scale_type')
    def image_scale_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fit', 'fill', 'stretch']):
            raise ValueError("must be one of enum values ('fit', 'fill', 'stretch')")
        return value

    @field_validator('number_condition_type')
    def number_condition_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['equals', 'range', 'gte', 'gt', 'lte', 'lt']):
            raise ValueError("must be one of enum values ('equals', 'range', 'gte', 'gt', 'lte', 'lt')")
        return value

    @field_validator('overflow')
    def overflow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['shrink_to_fit', 'truncate']):
            raise ValueError("must be one of enum values ('shrink_to_fit', 'truncate')")
        return value

    @field_validator('shape_type')
    def shape_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['square', 'rectangle', 'circle', 'ellipse']):
            raise ValueError("must be one of enum values ('square', 'rectangle', 'circle', 'ellipse')")
        return value

    @field_validator('string_condition_type')
    def string_condition_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['equals', 'contains', 'starts_with', 'ends_with', 'regex']):
            raise ValueError("must be one of enum values ('equals', 'contains', 'starts_with', 'ends_with', 'regex')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['string', 'number', 'boolean', 'date', 'address', 'country', 'email', 'url', 'image', 'signature', 'barcode', 'combined']):
            raise ValueError("must be one of enum values ('string', 'number', 'boolean', 'date', 'address', 'country', 'email', 'url', 'image', 'signature', 'barcode', 'combined')")
        return value

    @field_validator('v_alignment')
    def v_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bottom', 'center', 'top']):
            raise ValueError("must be one of enum values ('bottom', 'center', 'top')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddFieldsDataFieldsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddFieldsDataFieldsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignment": obj.get("alignment"),
            "autoCalculateMaxLength": obj.get("autoCalculateMaxLength"),
            "backgroundColor": obj.get("backgroundColor"),
            "backgroundColorFieldName": obj.get("backgroundColorFieldName"),
            "backgroundColorFieldRequired": obj.get("backgroundColorFieldRequired"),
            "barcodeSymbology": obj.get("barcodeSymbology"),
            "bold": obj.get("bold"),
            "characterSpacing": obj.get("characterSpacing"),
            "checkCharacter": obj.get("checkCharacter"),
            "checkColor": obj.get("checkColor"),
            "checkColorFieldName": obj.get("checkColorFieldName"),
            "checkColorFieldRequired": obj.get("checkColorFieldRequired"),
            "color": obj.get("color"),
            "colorFieldName": obj.get("colorFieldName"),
            "colorFieldRequired": obj.get("colorFieldRequired"),
            "comb": obj.get("comb"),
            "combNumberOfCells": obj.get("combNumberOfCells"),
            "combValueOffset": obj.get("combValueOffset"),
            "combinedFieldFormat": obj.get("combinedFieldFormat"),
            "combinedFieldNames": obj.get("combinedFieldNames"),
            "combinedFieldSeparator": obj.get("combinedFieldSeparator"),
            "combinedFieldType": obj.get("combinedFieldType"),
            "condition": obj.get("condition"),
            "currency": obj.get("currency"),
            "dateTimeFormat": obj.get("dateTimeFormat"),
            "decimalPlaces": obj.get("decimalPlaces"),
            "default": obj.get("default"),
            "description": obj.get("description"),
            "displayType": obj.get("displayType"),
            "exclusiveMaximum": obj.get("exclusiveMaximum"),
            "exclusiveMinimum": obj.get("exclusiveMinimum"),
            "falseText": obj.get("falseText"),
            "fontSize": obj.get("fontSize"),
            "height": obj.get("height"),
            "hidden": obj.get("hidden"),
            "id": obj.get("id"),
            "imageGravity": obj.get("imageGravity"),
            "imageScaleType": obj.get("imageScaleType"),
            "includeTime": obj.get("includeTime"),
            "integer": obj.get("integer"),
            "invertBooleanCondition": obj.get("invertBooleanCondition"),
            "maxLength": obj.get("maxLength"),
            "maximum": obj.get("maximum"),
            "metadata": obj.get("metadata"),
            "minLength": obj.get("minLength"),
            "minimum": obj.get("minimum"),
            "multiline": obj.get("multiline"),
            "multilineLines": obj.get("multilineLines"),
            "name": obj.get("name"),
            "numberConditionRangeExclusiveMax": obj.get("numberConditionRangeExclusiveMax"),
            "numberConditionRangeExclusiveMin": obj.get("numberConditionRangeExclusiveMin"),
            "numberConditionRangeMax": obj.get("numberConditionRangeMax"),
            "numberConditionRangeMin": obj.get("numberConditionRangeMin"),
            "numberConditionType": obj.get("numberConditionType"),
            "opacity": obj.get("opacity"),
            "optionList": obj.get("optionList"),
            "overflow": obj.get("overflow"),
            "page": obj.get("page"),
            "placeholder": obj.get("placeholder"),
            "qrcodeColor": obj.get("qrcodeColor"),
            "qrcodeColorFieldName": obj.get("qrcodeColorFieldName"),
            "qrcodeColorFieldRequired": obj.get("qrcodeColorFieldRequired"),
            "required": obj.get("required"),
            "rotation": obj.get("rotation"),
            "shapeBorderColor": obj.get("shapeBorderColor"),
            "shapeBorderColorFieldName": obj.get("shapeBorderColorFieldName"),
            "shapeBorderColorFieldRequired": obj.get("shapeBorderColorFieldRequired"),
            "shapeBorderWidth": obj.get("shapeBorderWidth"),
            "shapeFillColor": obj.get("shapeFillColor"),
            "shapeFillColorFieldName": obj.get("shapeFillColorFieldName"),
            "shapeFillColorFieldRequired": obj.get("shapeFillColorFieldRequired"),
            "shapeType": obj.get("shapeType"),
            "signatureAllowDraw": obj.get("signatureAllowDraw"),
            "signatureAllowType": obj.get("signatureAllowType"),
            "static": obj.get("static"),
            "strikethrough": obj.get("strikethrough"),
            "stringConditionType": obj.get("stringConditionType"),
            "title": obj.get("title"),
            "trueText": obj.get("trueText"),
            "type": obj.get("type"),
            "typeface": obj.get("typeface"),
            "uppercase": obj.get("uppercase"),
            "vAlignment": obj.get("vAlignment"),
            "width": obj.get("width"),
            "x": obj.get("x"),
            "y": obj.get("y")
        })
        return _obj



# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Template(BaseModel):
    """
    Template
    """ # noqa: E501
    allow_additional_properties: StrictBool
    description: Optional[StrictStr]
    document_url: Optional[StrictStr]
    editable_submissions: StrictBool
    expiration_interval: StrictStr
    expire_after: Union[StrictFloat, StrictInt]
    expire_submissions: StrictBool
    id: StrictStr
    locked: StrictBool
    name: Optional[StrictStr]
    page_dimensions: Optional[List[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=2, max_length=2)]]]
    parent_folder_id: Optional[StrictStr]
    path: StrictStr
    permanent_document_url: Optional[StrictStr]
    public_submissions: StrictBool
    public_web_form: StrictBool
    redirect_url: Optional[StrictStr]
    slack_webhook_url: Optional[StrictStr]
    template_type: StrictStr
    webhook_url: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["allow_additional_properties", "description", "document_url", "editable_submissions", "expiration_interval", "expire_after", "expire_submissions", "id", "locked", "name", "page_dimensions", "parent_folder_id", "path", "permanent_document_url", "public_submissions", "public_web_form", "redirect_url", "slack_webhook_url", "template_type", "webhook_url"]

    @field_validator('expiration_interval')
    def expiration_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['minutes', 'hours', 'days']):
            raise ValueError("must be one of enum values ('minutes', 'hours', 'days')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if document_url (nullable) is None
        # and model_fields_set contains the field
        if self.document_url is None and "document_url" in self.model_fields_set:
            _dict['document_url'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if page_dimensions (nullable) is None
        # and model_fields_set contains the field
        if self.page_dimensions is None and "page_dimensions" in self.model_fields_set:
            _dict['page_dimensions'] = None

        # set to None if parent_folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_folder_id is None and "parent_folder_id" in self.model_fields_set:
            _dict['parent_folder_id'] = None

        # set to None if permanent_document_url (nullable) is None
        # and model_fields_set contains the field
        if self.permanent_document_url is None and "permanent_document_url" in self.model_fields_set:
            _dict['permanent_document_url'] = None

        # set to None if redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_url is None and "redirect_url" in self.model_fields_set:
            _dict['redirect_url'] = None

        # set to None if slack_webhook_url (nullable) is None
        # and model_fields_set contains the field
        if self.slack_webhook_url is None and "slack_webhook_url" in self.model_fields_set:
            _dict['slack_webhook_url'] = None

        # set to None if webhook_url (nullable) is None
        # and model_fields_set contains the field
        if self.webhook_url is None and "webhook_url" in self.model_fields_set:
            _dict['webhook_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_additional_properties": obj.get("allow_additional_properties"),
            "description": obj.get("description"),
            "document_url": obj.get("document_url"),
            "editable_submissions": obj.get("editable_submissions"),
            "expiration_interval": obj.get("expiration_interval"),
            "expire_after": obj.get("expire_after"),
            "expire_submissions": obj.get("expire_submissions"),
            "id": obj.get("id"),
            "locked": obj.get("locked"),
            "name": obj.get("name"),
            "page_dimensions": obj.get("page_dimensions"),
            "parent_folder_id": obj.get("parent_folder_id"),
            "path": obj.get("path"),
            "permanent_document_url": obj.get("permanent_document_url"),
            "public_submissions": obj.get("public_submissions"),
            "public_web_form": obj.get("public_web_form"),
            "redirect_url": obj.get("redirect_url"),
            "slack_webhook_url": obj.get("slack_webhook_url"),
            "template_type": obj.get("template_type"),
            "webhook_url": obj.get("webhook_url")
        })
        return _obj



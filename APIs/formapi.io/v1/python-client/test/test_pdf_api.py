# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.pdf_api import PDFApi


class TestPDFApi(unittest.TestCase):
    """PDFApi unit test stubs"""

    def setUp(self) -> None:
        self.api = PDFApi()

    def tearDown(self) -> None:
        pass

    def test_add_fields_to_template(self) -> None:
        """Test case for add_fields_to_template

        Add new fields to a Template
        """
        pass

    def test_batch_generate_pdf_v1(self) -> None:
        """Test case for batch_generate_pdf_v1

        Generates multiple PDFs
        """
        pass

    def test_batch_generate_pdfs(self) -> None:
        """Test case for batch_generate_pdfs

        Generates multiple PDFs
        """
        pass

    def test_combine_pdfs(self) -> None:
        """Test case for combine_pdfs

        Merge submission PDFs, template PDFs, or custom files
        """
        pass

    def test_combine_submissions(self) -> None:
        """Test case for combine_submissions

        Merge generated PDFs together
        """
        pass

    def test_copy_template(self) -> None:
        """Test case for copy_template

        Copy a Template
        """
        pass

    def test_create_custom_file_from_upload(self) -> None:
        """Test case for create_custom_file_from_upload

        Create a new custom file from a cached presign upload
        """
        pass

    def test_create_data_request_token(self) -> None:
        """Test case for create_data_request_token

        Creates a new data request token for form authentication
        """
        pass

    def test_create_folder(self) -> None:
        """Test case for create_folder

        Create a folder
        """
        pass

    def test_create_html_template(self) -> None:
        """Test case for create_html_template

        Create a new HTML template
        """
        pass

    def test_create_pdf_template(self) -> None:
        """Test case for create_pdf_template

        Create a new PDF template with a form POST file upload
        """
        pass

    def test_create_pdf_template_from_upload(self) -> None:
        """Test case for create_pdf_template_from_upload

        Create a new PDF template from a cached presign upload
        """
        pass

    def test_delete_folder(self) -> None:
        """Test case for delete_folder

        Delete a folder
        """
        pass

    def test_expire_combined_submission(self) -> None:
        """Test case for expire_combined_submission

        Expire a combined submission
        """
        pass

    def test_expire_submission(self) -> None:
        """Test case for expire_submission

        Expire a PDF submission
        """
        pass

    def test_generate_pdf(self) -> None:
        """Test case for generate_pdf

        Generates a new PDF
        """
        pass

    def test_get_combined_submission(self) -> None:
        """Test case for get_combined_submission

        Check the status of a combined submission (merged PDFs)
        """
        pass

    def test_get_data_request(self) -> None:
        """Test case for get_data_request

        Look up a submission data request
        """
        pass

    def test_get_full_template(self) -> None:
        """Test case for get_full_template

        Fetch the full template attributes
        """
        pass

    def test_get_presign_url(self) -> None:
        """Test case for get_presign_url

        Get a presigned URL so that you can upload a file to our AWS S3 bucket
        """
        pass

    def test_get_submission(self) -> None:
        """Test case for get_submission

        Check the status of a PDF
        """
        pass

    def test_get_submission_batch(self) -> None:
        """Test case for get_submission_batch

        Check the status of a submission batch job
        """
        pass

    def test_get_template(self) -> None:
        """Test case for get_template

        Check the status of an uploaded template
        """
        pass

    def test_get_template_schema(self) -> None:
        """Test case for get_template_schema

        Fetch the JSON schema for a template
        """
        pass

    def test_list_combined_submissions(self) -> None:
        """Test case for list_combined_submissions

        Get a list of all combined submissions
        """
        pass

    def test_list_folders(self) -> None:
        """Test case for list_folders

        Get a list of all folders
        """
        pass

    def test_list_submissions(self) -> None:
        """Test case for list_submissions

        List all submissions
        """
        pass

    def test_list_templates(self) -> None:
        """Test case for list_templates

        Get a list of all templates
        """
        pass

    def test_move_folder_to_folder(self) -> None:
        """Test case for move_folder_to_folder

        Move a folder
        """
        pass

    def test_move_template_to_folder(self) -> None:
        """Test case for move_template_to_folder

        Move Template to folder
        """
        pass

    def test_rename_folder(self) -> None:
        """Test case for rename_folder

        Rename a folder
        """
        pass

    def test_templates_template_id_submissions_get(self) -> None:
        """Test case for templates_template_id_submissions_get

        List all submissions for a given template
        """
        pass

    def test_test_authentication(self) -> None:
        """Test case for test_authentication

        Test Authentication
        """
        pass

    def test_update_data_request(self) -> None:
        """Test case for update_data_request

        Update a submission data request
        """
        pass

    def test_update_template(self) -> None:
        """Test case for update_template

        Update a Template
        """
        pass


if __name__ == '__main__':
    unittest.main()

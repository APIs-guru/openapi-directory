# coding: utf-8

"""
    Cloud-RF API

    Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key

    The version of the OpenAPI document: 2.0.0
    Contact: support@cloudrf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Transmitter(BaseModel):
    """
    Transmitter
    """ # noqa: E501
    alt: Optional[Union[Annotated[float, Field(le=60000, strict=True, ge=0.1)], Annotated[int, Field(le=60000, strict=True, ge=1)]]] = Field(default=1, description="Altitude above ground level in metres OR feet")
    bwi: Optional[Union[Annotated[float, Field(le=100, strict=True, ge=0.1)], Annotated[int, Field(le=100, strict=True, ge=1)]]] = Field(default=0.1, description="Bandwidth in MHz. 1MHz has a noise floor of -114dBm. 10MHz = -104dBm, 20MHz = -101dBm")
    frq: Optional[Union[Annotated[float, Field(le=100000, strict=True, ge=1)], Annotated[int, Field(le=100000, strict=True, ge=1)]]] = Field(default=868, description="Centre frequency in megahertz")
    lat: Optional[Union[Annotated[float, Field(le=89, strict=True, ge=-89)], Annotated[int, Field(le=89, strict=True, ge=-89)]]] = Field(default=38.916, description="Latitude in decimal degrees")
    lon: Optional[Union[Annotated[float, Field(le=180, strict=True, ge=-180)], Annotated[int, Field(le=180, strict=True, ge=-180)]]] = Field(default=1.448, description="Longitude in decimal degrees")
    txw: Optional[Union[Annotated[float, Field(le=2000000, strict=True, ge=0.001)], Annotated[int, Field(le=2000000, strict=True, ge=1)]]] = Field(default=0.1, description="Transmitter power in watts before the antenna")
    __properties: ClassVar[List[str]] = ["alt", "bwi", "frq", "lat", "lon", "txw"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transmitter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transmitter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alt": obj.get("alt") if obj.get("alt") is not None else 1,
            "bwi": obj.get("bwi") if obj.get("bwi") is not None else 0.1,
            "frq": obj.get("frq") if obj.get("frq") is not None else 868,
            "lat": obj.get("lat") if obj.get("lat") is not None else 38.916,
            "lon": obj.get("lon") if obj.get("lon") is not None else 1.448,
            "txw": obj.get("txw") if obj.get("txw") is not None else 0.1
        })
        return _obj



# coding: utf-8

"""
    Cloud-RF API

    Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key

    The version of the OpenAPI document: 2.0.0
    Contact: support@cloudrf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Antenna(BaseModel):
    """
    Antenna
    """ # noqa: E501
    ant: Optional[StrictInt] = Field(default=1, description="Antenna pattern code. 1=Vertical dipole (Omni-directional)")
    azi: Optional[Annotated[int, Field(le=360, strict=True, ge=0)]] = Field(default=0, description="Antenna azimuth in degrees north")
    hbw: Optional[Annotated[int, Field(le=360, strict=True, ge=0)]] = Field(default=0, description="Custom antenna horizontal beamwidth in degrees. For use only with ant=0")
    pol: Optional[StrictStr] = Field(default='v', description="Antenna polarization as either h or v")
    tlt: Optional[Union[Annotated[float, Field(le=90, strict=True, ge=-10)], Annotated[int, Field(le=90, strict=True, ge=-10)]]] = Field(default=0, description="Antenna tilt in degrees below the horizon (inverted)")
    txg: Optional[Union[Annotated[float, Field(le=60, strict=True, ge=-10)], Annotated[int, Field(le=60, strict=True, ge=-10)]]] = Field(default=2.15, description="Transmitter antenna gain in dBi")
    txl: Optional[Union[Annotated[float, Field(le=60, strict=True, ge=0)], Annotated[int, Field(le=60, strict=True, ge=0)]]] = Field(default=0, description="Feeder loss in dB")
    vbw: Optional[Annotated[int, Field(le=360, strict=True, ge=0)]] = Field(default=0, description="Custom antenna vertical beamwidth in degrees. For use only with ant=0")
    __properties: ClassVar[List[str]] = ["ant", "azi", "hbw", "pol", "tlt", "txg", "txl", "vbw"]

    @field_validator('pol')
    def pol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['h', 'v']):
            raise ValueError("must be one of enum values ('h', 'v')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Antenna from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Antenna from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ant": obj.get("ant") if obj.get("ant") is not None else 1,
            "azi": obj.get("azi") if obj.get("azi") is not None else 0,
            "hbw": obj.get("hbw") if obj.get("hbw") is not None else 0,
            "pol": obj.get("pol") if obj.get("pol") is not None else 'v',
            "tlt": obj.get("tlt") if obj.get("tlt") is not None else 0,
            "txg": obj.get("txg") if obj.get("txg") is not None else 2.15,
            "txl": obj.get("txl") if obj.get("txl") is not None else 0,
            "vbw": obj.get("vbw") if obj.get("vbw") is not None else 0
        })
        return _obj



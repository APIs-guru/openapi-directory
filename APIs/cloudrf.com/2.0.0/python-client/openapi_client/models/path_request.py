# coding: utf-8

"""
    Cloud-RF API

    Use this JSON API to build and test radio links for any radio, anywhere. Authenticate with your API2.0 key in the request header as key

    The version of the OpenAPI document: 2.0.0
    Contact: support@cloudrf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.antenna import Antenna
from openapi_client.models.environment import Environment
from openapi_client.models.model import Model
from openapi_client.models.output import Output
from openapi_client.models.receiver import Receiver
from openapi_client.models.transmitter import Transmitter
from typing import Optional, Set
from typing_extensions import Self

class PathRequest(BaseModel):
    """
    PathRequest
    """ # noqa: E501
    antenna: Optional[Antenna] = None
    environment: Optional[Environment] = None
    model: Optional[Model] = None
    network: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=24)]] = Field(default='Testing', description="Network name/group")
    output: Optional[Output] = None
    receiver: Optional[Receiver] = None
    site: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=24)]] = Field(default='Link', description="Site name")
    transmitter: Optional[Transmitter] = None
    __properties: ClassVar[List[str]] = ["antenna", "environment", "model", "network", "output", "receiver", "site", "transmitter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PathRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of antenna
        if self.antenna:
            _dict['antenna'] = self.antenna.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict['receiver'] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transmitter
        if self.transmitter:
            _dict['transmitter'] = self.transmitter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PathRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "antenna": Antenna.from_dict(obj["antenna"]) if obj.get("antenna") is not None else None,
            "environment": Environment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "model": Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "network": obj.get("network") if obj.get("network") is not None else 'Testing',
            "output": Output.from_dict(obj["output"]) if obj.get("output") is not None else None,
            "receiver": Receiver.from_dict(obj["receiver"]) if obj.get("receiver") is not None else None,
            "site": obj.get("site") if obj.get("site") is not None else 'Link',
            "transmitter": Transmitter.from_dict(obj["transmitter"]) if obj.get("transmitter") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Api Documentation

    Api Documentation

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="The city of address")
    company_description: Optional[StrictStr] = Field(default=None, description="The company Description", alias="companyDescription")
    company_name: StrictStr = Field(description="The company name of customer", alias="companyName")
    country: Optional[StrictStr] = Field(default=None, description="The country of address")
    face_recognition_type: StrictStr = Field(description="The facial recognition type of customer", alias="faceRecognitionType")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of customer", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of customer", alias="lastName")
    password: StrictStr = Field(description="The password of customer")
    phone: Optional[StrictStr] = Field(default=None, description="The mobile number")
    state: Optional[StrictStr] = Field(default=None, description="The state of customer")
    street_address: Optional[StrictStr] = Field(default=None, description="The street of address", alias="streetAddress")
    username: StrictStr = Field(description="The username of customer nothing but an email")
    zip: Optional[StrictStr] = Field(default=None, description="The zip code of address")
    __properties: ClassVar[List[str]] = ["city", "companyDescription", "companyName", "country", "faceRecognitionType", "firstName", "lastName", "password", "phone", "state", "streetAddress", "username", "zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "companyDescription": obj.get("companyDescription"),
            "companyName": obj.get("companyName"),
            "country": obj.get("country"),
            "faceRecognitionType": obj.get("faceRecognitionType"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "password": obj.get("password"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "streetAddress": obj.get("streetAddress"),
            "username": obj.get("username"),
            "zip": obj.get("zip")
        })
        return _obj



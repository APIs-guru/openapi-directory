# coding: utf-8

"""
    Patchman-engine API

    API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)

    The version of the OpenAPI document: v1.15.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.controllers_list_meta import ControllersListMeta

class TestControllersListMeta(unittest.TestCase):
    """ControllersListMeta unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ControllersListMeta:
        """Test ControllersListMeta
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ControllersListMeta`
        """
        model = ControllersListMeta()
        if include_optional:
            return ControllersListMeta(
                filter = {
                    'key' : openapi_client.models.controllers/filter_data.controllers.FilterData(
                        op = '', 
                        values = [
                            ''
                            ], )
                    },
                limit = 56,
                offset = 56,
                search = '',
                sort = [
                    ''
                    ],
                subtotals = {
                    'key' : 56
                    },
                total_items = 56
            )
        else:
            return ControllersListMeta(
        )
        """

    def testControllersListMeta(self):
        """Test ControllersListMeta"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

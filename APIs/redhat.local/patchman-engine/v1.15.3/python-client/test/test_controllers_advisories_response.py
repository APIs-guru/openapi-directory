# coding: utf-8

"""
    Patchman-engine API

    API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)

    The version of the OpenAPI document: v1.15.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.controllers_advisories_response import ControllersAdvisoriesResponse

class TestControllersAdvisoriesResponse(unittest.TestCase):
    """ControllersAdvisoriesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ControllersAdvisoriesResponse:
        """Test ControllersAdvisoriesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ControllersAdvisoriesResponse`
        """
        model = ControllersAdvisoriesResponse()
        if include_optional:
            return ControllersAdvisoriesResponse(
                data = [
                    openapi_client.models.controllers/advisory_item.controllers.AdvisoryItem(
                        attributes = openapi_client.models.controllers/advisory_item_attributes.controllers.AdvisoryItemAttributes(
                            advisory_type = 56, 
                            applicable_systems = 56, 
                            cve_count = 56, 
                            description = '', 
                            public_date = '', 
                            severity = 56, 
                            synopsis = '', ), 
                        id = '', 
                        type = '', )
                    ],
                links = openapi_client.models.controllers/links.controllers.Links(
                    first = '', 
                    last = '', 
                    next = '', 
                    previous = '', ),
                meta = openapi_client.models.controllers/list_meta.controllers.ListMeta(
                    filter = {
                        'key' : openapi_client.models.controllers/filter_data.controllers.FilterData(
                            op = '', 
                            values = [
                                ''
                                ], )
                        }, 
                    limit = 56, 
                    offset = 56, 
                    search = '', 
                    sort = [
                        ''
                        ], 
                    subtotals = {
                        'key' : 56
                        }, 
                    total_items = 56, )
            )
        else:
            return ControllersAdvisoriesResponse(
        )
        """

    def testControllersAdvisoriesResponse(self):
        """Test ControllersAdvisoriesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

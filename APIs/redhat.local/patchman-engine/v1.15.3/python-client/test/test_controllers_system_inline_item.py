# coding: utf-8

"""
    Patchman-engine API

    API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)

    The version of the OpenAPI document: v1.15.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.controllers_system_inline_item import ControllersSystemInlineItem

class TestControllersSystemInlineItem(unittest.TestCase):
    """ControllersSystemInlineItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ControllersSystemInlineItem:
        """Test ControllersSystemInlineItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ControllersSystemInlineItem`
        """
        model = ControllersSystemInlineItem()
        if include_optional:
            return ControllersSystemInlineItem(
                created = '',
                culled_timestamp = '',
                display_name = '',
                id = '',
                insights_id = '',
                last_evaluation = '',
                last_upload = '',
                os_major = '',
                os_minor = '',
                os_name = '',
                other_count = 56,
                packages_installed = 56,
                packages_updatable = 56,
                rhba_count = 56,
                rhea_count = 56,
                rhsa_count = 56,
                rhsm = '',
                stale = True,
                stale_timestamp = '',
                stale_warning_timestamp = '',
                third_party = True
            )
        else:
            return ControllersSystemInlineItem(
        )
        """

    def testControllersSystemInlineItem(self):
        """Test ControllersSystemInlineItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

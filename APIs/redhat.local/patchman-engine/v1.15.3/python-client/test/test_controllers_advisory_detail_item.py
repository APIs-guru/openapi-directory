# coding: utf-8

"""
    Patchman-engine API

    API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)

    The version of the OpenAPI document: v1.15.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.controllers_advisory_detail_item import ControllersAdvisoryDetailItem

class TestControllersAdvisoryDetailItem(unittest.TestCase):
    """ControllersAdvisoryDetailItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ControllersAdvisoryDetailItem:
        """Test ControllersAdvisoryDetailItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ControllersAdvisoryDetailItem`
        """
        model = ControllersAdvisoryDetailItem()
        if include_optional:
            return ControllersAdvisoryDetailItem(
                attributes = openapi_client.models.controllers/advisory_detail_attributes.controllers.AdvisoryDetailAttributes(
                    cves = [
                        ''
                        ], 
                    description = '', 
                    fixes = '', 
                    modified_date = '', 
                    packages = {
                        'key' : ''
                        }, 
                    public_date = '', 
                    references = [
                        ''
                        ], 
                    severity = 56, 
                    solution = '', 
                    synopsis = '', 
                    topic = '', ),
                id = '',
                type = ''
            )
        else:
            return ControllersAdvisoryDetailItem(
        )
        """

    def testControllersAdvisoryDetailItem(self):
        """Test ControllersAdvisoryDetailItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

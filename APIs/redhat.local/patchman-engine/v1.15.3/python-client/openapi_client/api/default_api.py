# coding: utf-8

"""
    Patchman-engine API

    API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)

    The version of the OpenAPI document: v1.15.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.controllers_advisories_response import ControllersAdvisoriesResponse
from openapi_client.models.controllers_advisories_systems_response import ControllersAdvisoriesSystemsResponse
from openapi_client.models.controllers_advisory_detail_response import ControllersAdvisoryDetailResponse
from openapi_client.models.controllers_advisory_inline_item import ControllersAdvisoryInlineItem
from openapi_client.models.controllers_advisory_systems_response import ControllersAdvisorySystemsResponse
from openapi_client.models.controllers_package_detail_response import ControllersPackageDetailResponse
from openapi_client.models.controllers_package_item import ControllersPackageItem
from openapi_client.models.controllers_package_system_item import ControllersPackageSystemItem
from openapi_client.models.controllers_package_systems_response import ControllersPackageSystemsResponse
from openapi_client.models.controllers_package_versions_response import ControllersPackageVersionsResponse
from openapi_client.models.controllers_packages_response import ControllersPackagesResponse
from openapi_client.models.controllers_system_advisories_db_lookup import ControllersSystemAdvisoriesDBLookup
from openapi_client.models.controllers_system_advisories_response import ControllersSystemAdvisoriesResponse
from openapi_client.models.controllers_system_detail_response import ControllersSystemDetailResponse
from openapi_client.models.controllers_system_inline_item import ControllersSystemInlineItem
from openapi_client.models.controllers_system_package_inline import ControllersSystemPackageInline
from openapi_client.models.controllers_system_package_response import ControllersSystemPackageResponse
from openapi_client.models.controllers_systems_advisories_request import ControllersSystemsAdvisoriesRequest
from openapi_client.models.controllers_systems_advisories_response import ControllersSystemsAdvisoriesResponse
from openapi_client.models.controllers_systems_response import ControllersSystemsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def deletesystem(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete system by inventory id

        Delete system by inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletesystem_serialize(
            inventory_id=inventory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deletesystem_with_http_info(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete system by inventory id

        Delete system by inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletesystem_serialize(
            inventory_id=inventory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deletesystem_without_preload_content(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete system by inventory id

        Delete system by inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletesystem_serialize(
            inventory_id=inventory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deletesystem_serialize(
        self,
        inventory_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if inventory_id is not None:
            _path_params['inventory_id'] = inventory_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/patch/v1/systems/{inventory_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def detail_advisory(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersAdvisoryDetailResponse:
        """Show me details an advisory by given advisory name

        Show me details an advisory by given advisory name

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detail_advisory_serialize(
            advisory_id=advisory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoryDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def detail_advisory_with_http_info(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersAdvisoryDetailResponse]:
        """Show me details an advisory by given advisory name

        Show me details an advisory by given advisory name

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detail_advisory_serialize(
            advisory_id=advisory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoryDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def detail_advisory_without_preload_content(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me details an advisory by given advisory name

        Show me details an advisory by given advisory name

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detail_advisory_serialize(
            advisory_id=advisory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoryDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _detail_advisory_serialize(
        self,
        advisory_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if advisory_id is not None:
            _path_params['advisory_id'] = advisory_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/advisories/{advisory_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def detail_system(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersSystemDetailResponse:
        """Show me details about a system by given inventory id

        Show me details about a system by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detail_system_serialize(
            inventory_id=inventory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def detail_system_with_http_info(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersSystemDetailResponse]:
        """Show me details about a system by given inventory id

        Show me details about a system by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detail_system_serialize(
            inventory_id=inventory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def detail_system_without_preload_content(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me details about a system by given inventory id

        Show me details about a system by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._detail_system_serialize(
            inventory_id=inventory_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _detail_system_serialize(
        self,
        inventory_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if inventory_id is not None:
            _path_params['inventory_id'] = inventory_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/systems/{inventory_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def export_advisories(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_applicable_systems: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ControllersAdvisoryInlineItem]:
        """Export applicable advisories for all my systems

        Export applicable advisories for all my systems

        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param filter_applicable_systems: Filter
        :type filter_applicable_systems: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_advisories_serialize(
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            filter_applicable_systems=filter_applicable_systems,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersAdvisoryInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_advisories_with_http_info(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_applicable_systems: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ControllersAdvisoryInlineItem]]:
        """Export applicable advisories for all my systems

        Export applicable advisories for all my systems

        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param filter_applicable_systems: Filter
        :type filter_applicable_systems: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_advisories_serialize(
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            filter_applicable_systems=filter_applicable_systems,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersAdvisoryInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_advisories_without_preload_content(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_applicable_systems: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export applicable advisories for all my systems

        Export applicable advisories for all my systems

        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param filter_applicable_systems: Filter
        :type filter_applicable_systems: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_advisories_serialize(
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            filter_applicable_systems=filter_applicable_systems,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersAdvisoryInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_advisories_serialize(
        self,
        search,
        filter_id,
        filter_description,
        filter_public_date,
        filter_synopsis,
        filter_advisory_type,
        filter_severity,
        filter_applicable_systems,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_description is not None:
            
            _query_params.append(('filter[description]', filter_description))
            
        if filter_public_date is not None:
            
            _query_params.append(('filter[public_date]', filter_public_date))
            
        if filter_synopsis is not None:
            
            _query_params.append(('filter[synopsis]', filter_synopsis))
            
        if filter_advisory_type is not None:
            
            _query_params.append(('filter[advisory_type]', filter_advisory_type))
            
        if filter_severity is not None:
            
            _query_params.append(('filter[severity]', filter_severity))
            
        if filter_applicable_systems is not None:
            
            _query_params.append(('filter[applicable_systems]', filter_applicable_systems))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/export/advisories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def export_advisory_systems(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ControllersSystemInlineItem]:
        """Export systems for my account

        Export systems for my account

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_advisory_systems_serialize(
            advisory_id=advisory_id,
            search=search,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_advisory_systems_with_http_info(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ControllersSystemInlineItem]]:
        """Export systems for my account

        Export systems for my account

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_advisory_systems_serialize(
            advisory_id=advisory_id,
            search=search,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_advisory_systems_without_preload_content(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export systems for my account

        Export systems for my account

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_advisory_systems_serialize(
            advisory_id=advisory_id,
            search=search,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_advisory_systems_serialize(
        self,
        advisory_id,
        search,
        filter_id,
        filter_display_name,
        filter_last_evaluation,
        filter_last_upload,
        filter_rhsa_count,
        filter_rhba_count,
        filter_rhea_count,
        filter_other_count,
        filter_stale,
        filter_packages_installed,
        filter_packages_updatable,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[system_profile][sap_sids][in]': 'multi',
            'tags': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if advisory_id is not None:
            _path_params['advisory_id'] = advisory_id
        # process the query parameters
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_display_name is not None:
            
            _query_params.append(('filter[display_name]', filter_display_name))
            
        if filter_last_evaluation is not None:
            
            _query_params.append(('filter[last_evaluation]', filter_last_evaluation))
            
        if filter_last_upload is not None:
            
            _query_params.append(('filter[last_upload]', filter_last_upload))
            
        if filter_rhsa_count is not None:
            
            _query_params.append(('filter[rhsa_count]', filter_rhsa_count))
            
        if filter_rhba_count is not None:
            
            _query_params.append(('filter[rhba_count]', filter_rhba_count))
            
        if filter_rhea_count is not None:
            
            _query_params.append(('filter[rhea_count]', filter_rhea_count))
            
        if filter_other_count is not None:
            
            _query_params.append(('filter[other_count]', filter_other_count))
            
        if filter_stale is not None:
            
            _query_params.append(('filter[stale]', filter_stale))
            
        if filter_packages_installed is not None:
            
            _query_params.append(('filter[packages_installed]', filter_packages_installed))
            
        if filter_packages_updatable is not None:
            
            _query_params.append(('filter[packages_updatable]', filter_packages_updatable))
            
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/export/advisories/{advisory_id}/systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def export_package_systems(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ControllersPackageSystemItem]:
        """Show me all my systems which have a package installed

        Show me all my systems which have a package installed

        :param package_name: Package name (required)
        :type package_name: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_package_systems_serialize(
            package_name=package_name,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersPackageSystemItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_package_systems_with_http_info(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ControllersPackageSystemItem]]:
        """Show me all my systems which have a package installed

        Show me all my systems which have a package installed

        :param package_name: Package name (required)
        :type package_name: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_package_systems_serialize(
            package_name=package_name,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersPackageSystemItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_package_systems_without_preload_content(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me all my systems which have a package installed

        Show me all my systems which have a package installed

        :param package_name: Package name (required)
        :type package_name: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_package_systems_serialize(
            package_name=package_name,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersPackageSystemItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_package_systems_serialize(
        self,
        package_name,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[system_profile][sap_sids][in]': 'multi',
            'tags': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if package_name is not None:
            _path_params['package_name'] = package_name
        # process the query parameters
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/export/packages/{package_name}/systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def export_packages(
        self,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ControllersPackageItem]:
        """Show me all installed packages across my systems

        Show me all installed packages across my systems

        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_systems_installed: Filter
        :type filter_systems_installed: str
        :param filter_systems_updatable: Filter
        :type filter_systems_updatable: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_packages_serialize(
            sort=sort,
            search=search,
            filter_name=filter_name,
            filter_systems_installed=filter_systems_installed,
            filter_systems_updatable=filter_systems_updatable,
            filter_summary=filter_summary,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersPackageItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_packages_with_http_info(
        self,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ControllersPackageItem]]:
        """Show me all installed packages across my systems

        Show me all installed packages across my systems

        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_systems_installed: Filter
        :type filter_systems_installed: str
        :param filter_systems_updatable: Filter
        :type filter_systems_updatable: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_packages_serialize(
            sort=sort,
            search=search,
            filter_name=filter_name,
            filter_systems_installed=filter_systems_installed,
            filter_systems_updatable=filter_systems_updatable,
            filter_summary=filter_summary,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersPackageItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_packages_without_preload_content(
        self,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me all installed packages across my systems

        Show me all installed packages across my systems

        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_systems_installed: Filter
        :type filter_systems_installed: str
        :param filter_systems_updatable: Filter
        :type filter_systems_updatable: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_packages_serialize(
            sort=sort,
            search=search,
            filter_name=filter_name,
            filter_systems_installed=filter_systems_installed,
            filter_systems_updatable=filter_systems_updatable,
            filter_summary=filter_summary,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersPackageItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_packages_serialize(
        self,
        sort,
        search,
        filter_name,
        filter_systems_installed,
        filter_systems_updatable,
        filter_summary,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_name is not None:
            
            _query_params.append(('filter[name]', filter_name))
            
        if filter_systems_installed is not None:
            
            _query_params.append(('filter[systems_installed]', filter_systems_installed))
            
        if filter_systems_updatable is not None:
            
            _query_params.append(('filter[systems_updatable]', filter_systems_updatable))
            
        if filter_summary is not None:
            
            _query_params.append(('filter[summary]', filter_summary))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/export/packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def export_system_advisories(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ControllersSystemAdvisoriesDBLookup]:
        """Export applicable advisories for all my systems

        Export applicable advisories for all my systems

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_system_advisories_serialize(
            inventory_id=inventory_id,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemAdvisoriesDBLookup]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_system_advisories_with_http_info(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ControllersSystemAdvisoriesDBLookup]]:
        """Export applicable advisories for all my systems

        Export applicable advisories for all my systems

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_system_advisories_serialize(
            inventory_id=inventory_id,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemAdvisoriesDBLookup]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_system_advisories_without_preload_content(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export applicable advisories for all my systems

        Export applicable advisories for all my systems

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_system_advisories_serialize(
            inventory_id=inventory_id,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemAdvisoriesDBLookup]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_system_advisories_serialize(
        self,
        inventory_id,
        search,
        filter_id,
        filter_description,
        filter_public_date,
        filter_synopsis,
        filter_advisory_type,
        filter_severity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if inventory_id is not None:
            _path_params['inventory_id'] = inventory_id
        # process the query parameters
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_description is not None:
            
            _query_params.append(('filter[description]', filter_description))
            
        if filter_public_date is not None:
            
            _query_params.append(('filter[public_date]', filter_public_date))
            
        if filter_synopsis is not None:
            
            _query_params.append(('filter[synopsis]', filter_synopsis))
            
        if filter_advisory_type is not None:
            
            _query_params.append(('filter[advisory_type]', filter_advisory_type))
            
        if filter_severity is not None:
            
            _query_params.append(('filter[severity]', filter_severity))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/export/systems/{inventory_id}/advisories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def export_system_packages(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_evra: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_updatable: Annotated[Optional[StrictBool], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ControllersSystemPackageInline]:
        """Show me details about a system packages by given inventory id

        Show me details about a system packages by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_evra: Filter
        :type filter_evra: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param filter_updatable: Filter
        :type filter_updatable: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_system_packages_serialize(
            inventory_id=inventory_id,
            search=search,
            filter_name=filter_name,
            filter_description=filter_description,
            filter_evra=filter_evra,
            filter_summary=filter_summary,
            filter_updatable=filter_updatable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemPackageInline]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_system_packages_with_http_info(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_evra: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_updatable: Annotated[Optional[StrictBool], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ControllersSystemPackageInline]]:
        """Show me details about a system packages by given inventory id

        Show me details about a system packages by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_evra: Filter
        :type filter_evra: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param filter_updatable: Filter
        :type filter_updatable: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_system_packages_serialize(
            inventory_id=inventory_id,
            search=search,
            filter_name=filter_name,
            filter_description=filter_description,
            filter_evra=filter_evra,
            filter_summary=filter_summary,
            filter_updatable=filter_updatable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemPackageInline]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_system_packages_without_preload_content(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_evra: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_updatable: Annotated[Optional[StrictBool], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me details about a system packages by given inventory id

        Show me details about a system packages by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_evra: Filter
        :type filter_evra: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param filter_updatable: Filter
        :type filter_updatable: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_system_packages_serialize(
            inventory_id=inventory_id,
            search=search,
            filter_name=filter_name,
            filter_description=filter_description,
            filter_evra=filter_evra,
            filter_summary=filter_summary,
            filter_updatable=filter_updatable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemPackageInline]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_system_packages_serialize(
        self,
        inventory_id,
        search,
        filter_name,
        filter_description,
        filter_evra,
        filter_summary,
        filter_updatable,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if inventory_id is not None:
            _path_params['inventory_id'] = inventory_id
        # process the query parameters
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_name is not None:
            
            _query_params.append(('filter[name]', filter_name))
            
        if filter_description is not None:
            
            _query_params.append(('filter[description]', filter_description))
            
        if filter_evra is not None:
            
            _query_params.append(('filter[evra]', filter_evra))
            
        if filter_summary is not None:
            
            _query_params.append(('filter[summary]', filter_summary))
            
        if filter_updatable is not None:
            
            _query_params.append(('filter[updatable]', filter_updatable))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/export/systems/{inventory_id}/packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def export_systems(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ControllersSystemInlineItem]:
        """Export systems for my account

        Export systems for my account

        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_systems_serialize(
            search=search,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_systems_with_http_info(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ControllersSystemInlineItem]]:
        """Export systems for my account

        Export systems for my account

        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_systems_serialize(
            search=search,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_systems_without_preload_content(
        self,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export systems for my account

        Export systems for my account

        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param tags: Tag filter
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_systems_serialize(
            search=search,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ControllersSystemInlineItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_systems_serialize(
        self,
        search,
        filter_id,
        filter_display_name,
        filter_last_evaluation,
        filter_last_upload,
        filter_rhsa_count,
        filter_rhba_count,
        filter_rhea_count,
        filter_other_count,
        filter_stale,
        filter_packages_installed,
        filter_packages_updatable,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filter[system_profile][sap_sids][in]': 'multi',
            'tags': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_display_name is not None:
            
            _query_params.append(('filter[display_name]', filter_display_name))
            
        if filter_last_evaluation is not None:
            
            _query_params.append(('filter[last_evaluation]', filter_last_evaluation))
            
        if filter_last_upload is not None:
            
            _query_params.append(('filter[last_upload]', filter_last_upload))
            
        if filter_rhsa_count is not None:
            
            _query_params.append(('filter[rhsa_count]', filter_rhsa_count))
            
        if filter_rhba_count is not None:
            
            _query_params.append(('filter[rhba_count]', filter_rhba_count))
            
        if filter_rhea_count is not None:
            
            _query_params.append(('filter[rhea_count]', filter_rhea_count))
            
        if filter_other_count is not None:
            
            _query_params.append(('filter[other_count]', filter_other_count))
            
        if filter_stale is not None:
            
            _query_params.append(('filter[stale]', filter_stale))
            
        if filter_packages_installed is not None:
            
            _query_params.append(('filter[packages_installed]', filter_packages_installed))
            
        if filter_packages_updatable is not None:
            
            _query_params.append(('filter[packages_updatable]', filter_packages_updatable))
            
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/export/systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def latest_package(
        self,
        package_name: Annotated[StrictStr, Field(description="package_name - latest, nevra - exact version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersPackageDetailResponse:
        """Show me metadata of selected package

        Show me metadata of selected package

        :param package_name: package_name - latest, nevra - exact version (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._latest_package_serialize(
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def latest_package_with_http_info(
        self,
        package_name: Annotated[StrictStr, Field(description="package_name - latest, nevra - exact version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersPackageDetailResponse]:
        """Show me metadata of selected package

        Show me metadata of selected package

        :param package_name: package_name - latest, nevra - exact version (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._latest_package_serialize(
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def latest_package_without_preload_content(
        self,
        package_name: Annotated[StrictStr, Field(description="package_name - latest, nevra - exact version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me metadata of selected package

        Show me metadata of selected package

        :param package_name: package_name - latest, nevra - exact version (required)
        :type package_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._latest_package_serialize(
            package_name=package_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageDetailResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _latest_package_serialize(
        self,
        package_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if package_name is not None:
            _path_params['package_name'] = package_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/packages/{package_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_advisories(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter ")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_applicable_systems: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersAdvisoriesResponse:
        """Show me all applicable advisories for all my systems

        Show me all applicable advisories for all my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter 
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param filter_applicable_systems: Filter
        :type filter_applicable_systems: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_advisories_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            filter_applicable_systems=filter_applicable_systems,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_advisories_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter ")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_applicable_systems: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersAdvisoriesResponse]:
        """Show me all applicable advisories for all my systems

        Show me all applicable advisories for all my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter 
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param filter_applicable_systems: Filter
        :type filter_applicable_systems: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_advisories_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            filter_applicable_systems=filter_applicable_systems,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_advisories_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter ")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_applicable_systems: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me all applicable advisories for all my systems

        Show me all applicable advisories for all my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter 
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param filter_applicable_systems: Filter
        :type filter_applicable_systems: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_advisories_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            filter_applicable_systems=filter_applicable_systems,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_advisories_serialize(
        self,
        limit,
        offset,
        sort,
        search,
        filter_id,
        filter_description,
        filter_public_date,
        filter_synopsis,
        filter_advisory_type,
        filter_severity,
        filter_applicable_systems,
        tags,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'multi',
            'filter[system_profile][sap_sids][in]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_description is not None:
            
            _query_params.append(('filter[description]', filter_description))
            
        if filter_public_date is not None:
            
            _query_params.append(('filter[public_date]', filter_public_date))
            
        if filter_synopsis is not None:
            
            _query_params.append(('filter[synopsis]', filter_synopsis))
            
        if filter_advisory_type is not None:
            
            _query_params.append(('filter[advisory_type]', filter_advisory_type))
            
        if filter_severity is not None:
            
            _query_params.append(('filter[severity]', filter_severity))
            
        if filter_applicable_systems is not None:
            
            _query_params.append(('filter[applicable_systems]', filter_applicable_systems))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/advisories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_advisory_systems(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_insights_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_warning_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_culled_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_created: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersAdvisorySystemsResponse:
        """Show me systems on which the given advisory is applicable

        Show me systems on which the given advisory is applicable

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_insights_id: Filter
        :type filter_insights_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_stale_timestamp: Filter
        :type filter_stale_timestamp: str
        :param filter_stale_warning_timestamp: Filter
        :type filter_stale_warning_timestamp: str
        :param filter_culled_timestamp: Filter
        :type filter_culled_timestamp: str
        :param filter_created: Filter
        :type filter_created: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_advisory_systems_serialize(
            advisory_id=advisory_id,
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_insights_id=filter_insights_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_stale_timestamp=filter_stale_timestamp,
            filter_stale_warning_timestamp=filter_stale_warning_timestamp,
            filter_culled_timestamp=filter_culled_timestamp,
            filter_created=filter_created,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisorySystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_advisory_systems_with_http_info(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_insights_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_warning_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_culled_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_created: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersAdvisorySystemsResponse]:
        """Show me systems on which the given advisory is applicable

        Show me systems on which the given advisory is applicable

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_insights_id: Filter
        :type filter_insights_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_stale_timestamp: Filter
        :type filter_stale_timestamp: str
        :param filter_stale_warning_timestamp: Filter
        :type filter_stale_warning_timestamp: str
        :param filter_culled_timestamp: Filter
        :type filter_culled_timestamp: str
        :param filter_created: Filter
        :type filter_created: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_advisory_systems_serialize(
            advisory_id=advisory_id,
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_insights_id=filter_insights_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_stale_timestamp=filter_stale_timestamp,
            filter_stale_warning_timestamp=filter_stale_warning_timestamp,
            filter_culled_timestamp=filter_culled_timestamp,
            filter_created=filter_created,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisorySystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_advisory_systems_without_preload_content(
        self,
        advisory_id: Annotated[StrictStr, Field(description="Advisory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_insights_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_warning_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_culled_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_created: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me systems on which the given advisory is applicable

        Show me systems on which the given advisory is applicable

        :param advisory_id: Advisory ID (required)
        :type advisory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_insights_id: Filter
        :type filter_insights_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_stale_timestamp: Filter
        :type filter_stale_timestamp: str
        :param filter_stale_warning_timestamp: Filter
        :type filter_stale_warning_timestamp: str
        :param filter_culled_timestamp: Filter
        :type filter_culled_timestamp: str
        :param filter_created: Filter
        :type filter_created: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_advisory_systems_serialize(
            advisory_id=advisory_id,
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_insights_id=filter_insights_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_stale_timestamp=filter_stale_timestamp,
            filter_stale_warning_timestamp=filter_stale_warning_timestamp,
            filter_culled_timestamp=filter_culled_timestamp,
            filter_created=filter_created,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisorySystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_advisory_systems_serialize(
        self,
        advisory_id,
        limit,
        offset,
        sort,
        search,
        filter_id,
        filter_insights_id,
        filter_display_name,
        filter_last_evaluation,
        filter_last_upload,
        filter_rhsa_count,
        filter_rhba_count,
        filter_rhea_count,
        filter_other_count,
        filter_stale,
        filter_stale_timestamp,
        filter_stale_warning_timestamp,
        filter_culled_timestamp,
        filter_created,
        tags,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'multi',
            'filter[system_profile][sap_sids][in]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if advisory_id is not None:
            _path_params['advisory_id'] = advisory_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_insights_id is not None:
            
            _query_params.append(('filter[insights_id]', filter_insights_id))
            
        if filter_display_name is not None:
            
            _query_params.append(('filter[display_name]', filter_display_name))
            
        if filter_last_evaluation is not None:
            
            _query_params.append(('filter[last_evaluation]', filter_last_evaluation))
            
        if filter_last_upload is not None:
            
            _query_params.append(('filter[last_upload]', filter_last_upload))
            
        if filter_rhsa_count is not None:
            
            _query_params.append(('filter[rhsa_count]', filter_rhsa_count))
            
        if filter_rhba_count is not None:
            
            _query_params.append(('filter[rhba_count]', filter_rhba_count))
            
        if filter_rhea_count is not None:
            
            _query_params.append(('filter[rhea_count]', filter_rhea_count))
            
        if filter_other_count is not None:
            
            _query_params.append(('filter[other_count]', filter_other_count))
            
        if filter_stale is not None:
            
            _query_params.append(('filter[stale]', filter_stale))
            
        if filter_stale_timestamp is not None:
            
            _query_params.append(('filter[stale_timestamp]', filter_stale_timestamp))
            
        if filter_stale_warning_timestamp is not None:
            
            _query_params.append(('filter[stale_warning_timestamp]', filter_stale_warning_timestamp))
            
        if filter_culled_timestamp is not None:
            
            _query_params.append(('filter[culled_timestamp]', filter_culled_timestamp))
            
        if filter_created is not None:
            
            _query_params.append(('filter[created]', filter_created))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/advisories/{advisory_id}/systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_packages(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersPackagesResponse:
        """Show me all installed packages across my systems

        Show me all installed packages across my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_systems_installed: Filter
        :type filter_systems_installed: str
        :param filter_systems_updatable: Filter
        :type filter_systems_updatable: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_packages_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_name=filter_name,
            filter_systems_installed=filter_systems_installed,
            filter_systems_updatable=filter_systems_updatable,
            filter_summary=filter_summary,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackagesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_packages_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersPackagesResponse]:
        """Show me all installed packages across my systems

        Show me all installed packages across my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_systems_installed: Filter
        :type filter_systems_installed: str
        :param filter_systems_updatable: Filter
        :type filter_systems_updatable: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_packages_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_name=filter_name,
            filter_systems_installed=filter_systems_installed,
            filter_systems_updatable=filter_systems_updatable,
            filter_summary=filter_summary,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackagesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_packages_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_systems_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me all installed packages across my systems

        Show me all installed packages across my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_systems_installed: Filter
        :type filter_systems_installed: str
        :param filter_systems_updatable: Filter
        :type filter_systems_updatable: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_packages_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_name=filter_name,
            filter_systems_installed=filter_systems_installed,
            filter_systems_updatable=filter_systems_updatable,
            filter_summary=filter_summary,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackagesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_packages_serialize(
        self,
        limit,
        offset,
        sort,
        search,
        filter_name,
        filter_systems_installed,
        filter_systems_updatable,
        filter_summary,
        tags,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'multi',
            'filter[system_profile][sap_sids][in]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_name is not None:
            
            _query_params.append(('filter[name]', filter_name))
            
        if filter_systems_installed is not None:
            
            _query_params.append(('filter[systems_installed]', filter_systems_installed))
            
        if filter_systems_updatable is not None:
            
            _query_params.append(('filter[systems_updatable]', filter_systems_updatable))
            
        if filter_summary is not None:
            
            _query_params.append(('filter[summary]', filter_summary))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/packages/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_system_advisories(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersSystemAdvisoriesResponse:
        """Show me advisories for a system by given inventory id

        Show me advisories for a system by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_system_advisories_serialize(
            inventory_id=inventory_id,
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_system_advisories_with_http_info(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersSystemAdvisoriesResponse]:
        """Show me advisories for a system by given inventory id

        Show me advisories for a system by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_system_advisories_serialize(
            inventory_id=inventory_id,
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_system_advisories_without_preload_content(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_public_date: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_synopsis: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_advisory_type: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_severity: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me advisories for a system by given inventory id

        Show me advisories for a system by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_public_date: Filter
        :type filter_public_date: str
        :param filter_synopsis: Filter
        :type filter_synopsis: str
        :param filter_advisory_type: Filter
        :type filter_advisory_type: str
        :param filter_severity: Filter
        :type filter_severity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_system_advisories_serialize(
            inventory_id=inventory_id,
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_id=filter_id,
            filter_description=filter_description,
            filter_public_date=filter_public_date,
            filter_synopsis=filter_synopsis,
            filter_advisory_type=filter_advisory_type,
            filter_severity=filter_severity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_system_advisories_serialize(
        self,
        inventory_id,
        limit,
        offset,
        sort,
        search,
        filter_id,
        filter_description,
        filter_public_date,
        filter_synopsis,
        filter_advisory_type,
        filter_severity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if inventory_id is not None:
            _path_params['inventory_id'] = inventory_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_description is not None:
            
            _query_params.append(('filter[description]', filter_description))
            
        if filter_public_date is not None:
            
            _query_params.append(('filter[public_date]', filter_public_date))
            
        if filter_synopsis is not None:
            
            _query_params.append(('filter[synopsis]', filter_synopsis))
            
        if filter_advisory_type is not None:
            
            _query_params.append(('filter[advisory_type]', filter_advisory_type))
            
        if filter_severity is not None:
            
            _query_params.append(('filter[severity]', filter_severity))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/systems/{inventory_id}/advisories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_systems(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_insights_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_warning_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_culled_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_created: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersSystemsResponse:
        """Show me all my systems

        Show me all my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_insights_id: Filter
        :type filter_insights_id: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_stale_timestamp: Filter
        :type filter_stale_timestamp: str
        :param filter_stale_warning_timestamp: Filter
        :type filter_stale_warning_timestamp: str
        :param filter_culled_timestamp: Filter
        :type filter_culled_timestamp: str
        :param filter_created: Filter
        :type filter_created: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_systems_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_insights_id=filter_insights_id,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_stale_timestamp=filter_stale_timestamp,
            filter_stale_warning_timestamp=filter_stale_warning_timestamp,
            filter_culled_timestamp=filter_culled_timestamp,
            filter_created=filter_created,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_systems_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_insights_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_warning_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_culled_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_created: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersSystemsResponse]:
        """Show me all my systems

        Show me all my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_insights_id: Filter
        :type filter_insights_id: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_stale_timestamp: Filter
        :type filter_stale_timestamp: str
        :param filter_stale_warning_timestamp: Filter
        :type filter_stale_warning_timestamp: str
        :param filter_culled_timestamp: Filter
        :type filter_culled_timestamp: str
        :param filter_created: Filter
        :type filter_created: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_systems_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_insights_id=filter_insights_id,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_stale_timestamp=filter_stale_timestamp,
            filter_stale_warning_timestamp=filter_stale_warning_timestamp,
            filter_culled_timestamp=filter_culled_timestamp,
            filter_created=filter_created,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_systems_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort field")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_insights_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_id: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_display_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_evaluation: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_last_upload: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhsa_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhba_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_rhea_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_other_count: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_installed: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_packages_updatable: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_stale_warning_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_culled_timestamp: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_created: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me all my systems

        Show me all my systems

        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param sort: Sort field
        :type sort: str
        :param search: Find matching text
        :type search: str
        :param filter_insights_id: Filter
        :type filter_insights_id: str
        :param filter_id: Filter
        :type filter_id: str
        :param filter_display_name: Filter
        :type filter_display_name: str
        :param filter_last_evaluation: Filter
        :type filter_last_evaluation: str
        :param filter_last_upload: Filter
        :type filter_last_upload: str
        :param filter_rhsa_count: Filter
        :type filter_rhsa_count: str
        :param filter_rhba_count: Filter
        :type filter_rhba_count: str
        :param filter_rhea_count: Filter
        :type filter_rhea_count: str
        :param filter_other_count: Filter
        :type filter_other_count: str
        :param filter_stale: Filter
        :type filter_stale: str
        :param filter_packages_installed: Filter
        :type filter_packages_installed: str
        :param filter_packages_updatable: Filter
        :type filter_packages_updatable: str
        :param filter_stale_timestamp: Filter
        :type filter_stale_timestamp: str
        :param filter_stale_warning_timestamp: Filter
        :type filter_stale_warning_timestamp: str
        :param filter_culled_timestamp: Filter
        :type filter_culled_timestamp: str
        :param filter_created: Filter
        :type filter_created: str
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_systems_serialize(
            limit=limit,
            offset=offset,
            sort=sort,
            search=search,
            filter_insights_id=filter_insights_id,
            filter_id=filter_id,
            filter_display_name=filter_display_name,
            filter_last_evaluation=filter_last_evaluation,
            filter_last_upload=filter_last_upload,
            filter_rhsa_count=filter_rhsa_count,
            filter_rhba_count=filter_rhba_count,
            filter_rhea_count=filter_rhea_count,
            filter_other_count=filter_other_count,
            filter_stale=filter_stale,
            filter_packages_installed=filter_packages_installed,
            filter_packages_updatable=filter_packages_updatable,
            filter_stale_timestamp=filter_stale_timestamp,
            filter_stale_warning_timestamp=filter_stale_warning_timestamp,
            filter_culled_timestamp=filter_culled_timestamp,
            filter_created=filter_created,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_systems_serialize(
        self,
        limit,
        offset,
        sort,
        search,
        filter_insights_id,
        filter_id,
        filter_display_name,
        filter_last_evaluation,
        filter_last_upload,
        filter_rhsa_count,
        filter_rhba_count,
        filter_rhea_count,
        filter_other_count,
        filter_stale,
        filter_packages_installed,
        filter_packages_updatable,
        filter_stale_timestamp,
        filter_stale_warning_timestamp,
        filter_culled_timestamp,
        filter_created,
        tags,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'multi',
            'filter[system_profile][sap_sids][in]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_insights_id is not None:
            
            _query_params.append(('filter[insights_id]', filter_insights_id))
            
        if filter_id is not None:
            
            _query_params.append(('filter[id]', filter_id))
            
        if filter_display_name is not None:
            
            _query_params.append(('filter[display_name]', filter_display_name))
            
        if filter_last_evaluation is not None:
            
            _query_params.append(('filter[last_evaluation]', filter_last_evaluation))
            
        if filter_last_upload is not None:
            
            _query_params.append(('filter[last_upload]', filter_last_upload))
            
        if filter_rhsa_count is not None:
            
            _query_params.append(('filter[rhsa_count]', filter_rhsa_count))
            
        if filter_rhba_count is not None:
            
            _query_params.append(('filter[rhba_count]', filter_rhba_count))
            
        if filter_rhea_count is not None:
            
            _query_params.append(('filter[rhea_count]', filter_rhea_count))
            
        if filter_other_count is not None:
            
            _query_params.append(('filter[other_count]', filter_other_count))
            
        if filter_stale is not None:
            
            _query_params.append(('filter[stale]', filter_stale))
            
        if filter_packages_installed is not None:
            
            _query_params.append(('filter[packages_installed]', filter_packages_installed))
            
        if filter_packages_updatable is not None:
            
            _query_params.append(('filter[packages_updatable]', filter_packages_updatable))
            
        if filter_stale_timestamp is not None:
            
            _query_params.append(('filter[stale_timestamp]', filter_stale_timestamp))
            
        if filter_stale_warning_timestamp is not None:
            
            _query_params.append(('filter[stale_warning_timestamp]', filter_stale_warning_timestamp))
            
        if filter_culled_timestamp is not None:
            
            _query_params.append(('filter[culled_timestamp]', filter_culled_timestamp))
            
        if filter_created is not None:
            
            _query_params.append(('filter[created]', filter_created))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def package_systems(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersPackageSystemsResponse:
        """Show me all my systems which have a package installed

        Show me all my systems which have a package installed

        :param package_name: Package name (required)
        :type package_name: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._package_systems_serialize(
            package_name=package_name,
            limit=limit,
            offset=offset,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def package_systems_with_http_info(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersPackageSystemsResponse]:
        """Show me all my systems which have a package installed

        Show me all my systems which have a package installed

        :param package_name: Package name (required)
        :type package_name: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._package_systems_serialize(
            package_name=package_name,
            limit=limit,
            offset=offset,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def package_systems_without_preload_content(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Tag filter")] = None,
        filter_system_profile_sap_system: Annotated[Optional[StrictStr], Field(description="Filter only SAP systems")] = None,
        filter_system_profile_sap_sids_in: Annotated[Optional[List[StrictStr]], Field(description="Filter systems by their SAP SIDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me all my systems which have a package installed

        Show me all my systems which have a package installed

        :param package_name: Package name (required)
        :type package_name: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param tags: Tag filter
        :type tags: List[str]
        :param filter_system_profile_sap_system: Filter only SAP systems
        :type filter_system_profile_sap_system: str
        :param filter_system_profile_sap_sids_in: Filter systems by their SAP SIDs
        :type filter_system_profile_sap_sids_in: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._package_systems_serialize(
            package_name=package_name,
            limit=limit,
            offset=offset,
            tags=tags,
            filter_system_profile_sap_system=filter_system_profile_sap_system,
            filter_system_profile_sap_sids_in=filter_system_profile_sap_sids_in,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _package_systems_serialize(
        self,
        package_name,
        limit,
        offset,
        tags,
        filter_system_profile_sap_system,
        filter_system_profile_sap_sids_in,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'multi',
            'filter[system_profile][sap_sids][in]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if package_name is not None:
            _path_params['package_name'] = package_name
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if filter_system_profile_sap_system is not None:
            
            _query_params.append(('filter[system_profile][sap_system]', filter_system_profile_sap_system))
            
        if filter_system_profile_sap_sids_in is not None:
            
            _query_params.append(('filter[system_profile][sap_sids][in]', filter_system_profile_sap_sids_in))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/packages/{package_name}/systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def package_versions(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersPackageVersionsResponse:
        """Show me all package versions installed on some system

        Show me all package versions installed on some system

        :param package_name: Package name (required)
        :type package_name: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._package_versions_serialize(
            package_name=package_name,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageVersionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def package_versions_with_http_info(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersPackageVersionsResponse]:
        """Show me all package versions installed on some system

        Show me all package versions installed on some system

        :param package_name: Package name (required)
        :type package_name: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._package_versions_serialize(
            package_name=package_name,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageVersionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def package_versions_without_preload_content(
        self,
        package_name: Annotated[StrictStr, Field(description="Package name")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me all package versions installed on some system

        Show me all package versions installed on some system

        :param package_name: Package name (required)
        :type package_name: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._package_versions_serialize(
            package_name=package_name,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersPackageVersionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _package_versions_serialize(
        self,
        package_name,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if package_name is not None:
            _path_params['package_name'] = package_name
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/packages/{package_name}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def system_packages(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_evra: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_updatable: Annotated[Optional[StrictBool], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersSystemPackageResponse:
        """Show me details about a system packages by given inventory id

        Show me details about a system packages by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_evra: Filter
        :type filter_evra: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param filter_updatable: Filter
        :type filter_updatable: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._system_packages_serialize(
            inventory_id=inventory_id,
            limit=limit,
            offset=offset,
            search=search,
            filter_name=filter_name,
            filter_description=filter_description,
            filter_evra=filter_evra,
            filter_summary=filter_summary,
            filter_updatable=filter_updatable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemPackageResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def system_packages_with_http_info(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_evra: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_updatable: Annotated[Optional[StrictBool], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersSystemPackageResponse]:
        """Show me details about a system packages by given inventory id

        Show me details about a system packages by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_evra: Filter
        :type filter_evra: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param filter_updatable: Filter
        :type filter_updatable: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._system_packages_serialize(
            inventory_id=inventory_id,
            limit=limit,
            offset=offset,
            search=search,
            filter_name=filter_name,
            filter_description=filter_description,
            filter_evra=filter_evra,
            filter_summary=filter_summary,
            filter_updatable=filter_updatable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemPackageResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def system_packages_without_preload_content(
        self,
        inventory_id: Annotated[StrictStr, Field(description="Inventory ID")],
        limit: Annotated[Optional[StrictInt], Field(description="Limit for paging, set -1 to return all")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Offset for paging")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Find matching text")] = None,
        filter_name: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_description: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_evra: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_summary: Annotated[Optional[StrictStr], Field(description="Filter")] = None,
        filter_updatable: Annotated[Optional[StrictBool], Field(description="Filter")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Show me details about a system packages by given inventory id

        Show me details about a system packages by given inventory id

        :param inventory_id: Inventory ID (required)
        :type inventory_id: str
        :param limit: Limit for paging, set -1 to return all
        :type limit: int
        :param offset: Offset for paging
        :type offset: int
        :param search: Find matching text
        :type search: str
        :param filter_name: Filter
        :type filter_name: str
        :param filter_description: Filter
        :type filter_description: str
        :param filter_evra: Filter
        :type filter_evra: str
        :param filter_summary: Filter
        :type filter_summary: str
        :param filter_updatable: Filter
        :type filter_updatable: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._system_packages_serialize(
            inventory_id=inventory_id,
            limit=limit,
            offset=offset,
            search=search,
            filter_name=filter_name,
            filter_description=filter_description,
            filter_evra=filter_evra,
            filter_summary=filter_summary,
            filter_updatable=filter_updatable,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemPackageResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _system_packages_serialize(
        self,
        inventory_id,
        limit,
        offset,
        search,
        filter_name,
        filter_description,
        filter_evra,
        filter_summary,
        filter_updatable,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if inventory_id is not None:
            _path_params['inventory_id'] = inventory_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if filter_name is not None:
            
            _query_params.append(('filter[name]', filter_name))
            
        if filter_description is not None:
            
            _query_params.append(('filter[description]', filter_description))
            
        if filter_evra is not None:
            
            _query_params.append(('filter[evra]', filter_evra))
            
        if filter_summary is not None:
            
            _query_params.append(('filter[summary]', filter_summary))
            
        if filter_updatable is not None:
            
            _query_params.append(('filter[updatable]', filter_updatable))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/patch/v1/systems/{inventory_id}/packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def view_advisories_systems(
        self,
        body: Annotated[ControllersSystemsAdvisoriesRequest, Field(description="Request body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersAdvisoriesSystemsResponse:
        """View advisory-system pairs for selected systems and advisories

        View advisory-system pairs for selected systems and advisories

        :param body: Request body (required)
        :type body: ControllersSystemsAdvisoriesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_advisories_systems_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoriesSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def view_advisories_systems_with_http_info(
        self,
        body: Annotated[ControllersSystemsAdvisoriesRequest, Field(description="Request body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersAdvisoriesSystemsResponse]:
        """View advisory-system pairs for selected systems and advisories

        View advisory-system pairs for selected systems and advisories

        :param body: Request body (required)
        :type body: ControllersSystemsAdvisoriesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_advisories_systems_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoriesSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def view_advisories_systems_without_preload_content(
        self,
        body: Annotated[ControllersSystemsAdvisoriesRequest, Field(description="Request body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View advisory-system pairs for selected systems and advisories

        View advisory-system pairs for selected systems and advisories

        :param body: Request body (required)
        :type body: ControllersSystemsAdvisoriesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_advisories_systems_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersAdvisoriesSystemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _view_advisories_systems_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/patch/v1/views/advisories/systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def view_systems_advisories(
        self,
        body: Annotated[ControllersSystemsAdvisoriesRequest, Field(description="Request body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ControllersSystemsAdvisoriesResponse:
        """View system-advisory pairs for selected systems and advisories

        View system-advisory pairs for selected systems and advisories

        :param body: Request body (required)
        :type body: ControllersSystemsAdvisoriesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_systems_advisories_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemsAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def view_systems_advisories_with_http_info(
        self,
        body: Annotated[ControllersSystemsAdvisoriesRequest, Field(description="Request body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ControllersSystemsAdvisoriesResponse]:
        """View system-advisory pairs for selected systems and advisories

        View system-advisory pairs for selected systems and advisories

        :param body: Request body (required)
        :type body: ControllersSystemsAdvisoriesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_systems_advisories_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemsAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def view_systems_advisories_without_preload_content(
        self,
        body: Annotated[ControllersSystemsAdvisoriesRequest, Field(description="Request body")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View system-advisory pairs for selected systems and advisories

        View system-advisory pairs for selected systems and advisories

        :param body: Request body (required)
        :type body: ControllersSystemsAdvisoriesRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_systems_advisories_serialize(
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ControllersSystemsAdvisoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _view_systems_advisories_serialize(
        self,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'RhIdentity'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/patch/v1/views/systems/advisories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Patchman-engine API

    API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)

    The version of the OpenAPI document: v1.15.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ControllersSystemItemAttributes(BaseModel):
    """
    ControllersSystemItemAttributes
    """ # noqa: E501
    created: Optional[StrictStr] = None
    culled_timestamp: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    insights_id: Optional[StrictStr] = None
    last_evaluation: Optional[StrictStr] = None
    last_upload: Optional[StrictStr] = None
    os_major: Optional[StrictStr] = None
    os_minor: Optional[StrictStr] = None
    os_name: Optional[StrictStr] = None
    other_count: Optional[StrictInt] = None
    packages_installed: Optional[StrictInt] = None
    packages_updatable: Optional[StrictInt] = None
    rhba_count: Optional[StrictInt] = None
    rhea_count: Optional[StrictInt] = None
    rhsa_count: Optional[StrictInt] = None
    rhsm: Optional[StrictStr] = None
    stale: Optional[StrictBool] = None
    stale_timestamp: Optional[StrictStr] = None
    stale_warning_timestamp: Optional[StrictStr] = None
    third_party: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["created", "culled_timestamp", "display_name", "insights_id", "last_evaluation", "last_upload", "os_major", "os_minor", "os_name", "other_count", "packages_installed", "packages_updatable", "rhba_count", "rhea_count", "rhsa_count", "rhsm", "stale", "stale_timestamp", "stale_warning_timestamp", "third_party"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ControllersSystemItemAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ControllersSystemItemAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "culled_timestamp": obj.get("culled_timestamp"),
            "display_name": obj.get("display_name"),
            "insights_id": obj.get("insights_id"),
            "last_evaluation": obj.get("last_evaluation"),
            "last_upload": obj.get("last_upload"),
            "os_major": obj.get("os_major"),
            "os_minor": obj.get("os_minor"),
            "os_name": obj.get("os_name"),
            "other_count": obj.get("other_count"),
            "packages_installed": obj.get("packages_installed"),
            "packages_updatable": obj.get("packages_updatable"),
            "rhba_count": obj.get("rhba_count"),
            "rhea_count": obj.get("rhea_count"),
            "rhsa_count": obj.get("rhsa_count"),
            "rhsm": obj.get("rhsm"),
            "stale": obj.get("stale"),
            "stale_timestamp": obj.get("stale_timestamp"),
            "stale_warning_timestamp": obj.get("stale_warning_timestamp"),
            "third_party": obj.get("third_party")
        })
        return _obj



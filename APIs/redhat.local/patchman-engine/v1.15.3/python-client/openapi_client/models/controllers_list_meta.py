# coding: utf-8

"""
    Patchman-engine API

    API of the Patch application on [cloud.redhat.com](cloud.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)

    The version of the OpenAPI document: v1.15.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.controllers_filter_data import ControllersFilterData
from typing import Optional, Set
from typing_extensions import Self

class ControllersListMeta(BaseModel):
    """
    ControllersListMeta
    """ # noqa: E501
    filter: Optional[Dict[str, ControllersFilterData]] = None
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    search: Optional[StrictStr] = None
    sort: Optional[List[StrictStr]] = None
    subtotals: Optional[Dict[str, StrictInt]] = None
    total_items: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["filter", "limit", "offset", "search", "sort", "subtotals", "total_items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ControllersListMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in filter (dict)
        _field_dict = {}
        if self.filter:
            for _key_filter in self.filter:
                if self.filter[_key_filter]:
                    _field_dict[_key_filter] = self.filter[_key_filter].to_dict()
            _dict['filter'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ControllersListMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": dict(
                (_k, ControllersFilterData.from_dict(_v))
                for _k, _v in obj["filter"].items()
            )
            if obj.get("filter") is not None
            else None,
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "search": obj.get("search"),
            "sort": obj.get("sort"),
            "subtotals": obj.get("subtotals"),
            "total_items": obj.get("total_items")
        })
        return _obj



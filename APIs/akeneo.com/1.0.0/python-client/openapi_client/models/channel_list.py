# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channels_all_of_embedded_items_inner_all_of_conversion_units import ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits
from openapi_client.models.channels_all_of_embedded_items_inner_all_of_labels import ChannelsAllOfEmbeddedItemsInnerAllOfLabels
from openapi_client.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from typing import Optional, Set
from typing_extensions import Self

class ChannelList(BaseModel):
    """
    ChannelList
    """ # noqa: E501
    links: Optional[PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks] = Field(default=None, alias="_links")
    category_tree: StrictStr = Field(description="Code of the category tree linked to the channel")
    code: StrictStr = Field(description="Channel code")
    conversion_units: Optional[ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits] = None
    currencies: List[StrictStr] = Field(description="Codes of activated currencies for the channel")
    labels: Optional[ChannelsAllOfEmbeddedItemsInnerAllOfLabels] = None
    locales: List[StrictStr] = Field(description="Codes of activated locales for the channel")
    __properties: ClassVar[List[str]] = ["_links", "category_tree", "code", "conversion_units", "currencies", "labels", "locales"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChannelList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversion_units
        if self.conversion_units:
            _dict['conversion_units'] = self.conversion_units.to_dict()
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChannelList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "category_tree": obj.get("category_tree"),
            "code": obj.get("code"),
            "conversion_units": ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits.from_dict(obj["conversion_units"]) if obj.get("conversion_units") is not None else None,
            "currencies": obj.get("currencies"),
            "labels": ChannelsAllOfEmbeddedItemsInnerAllOfLabels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "locales": obj.get("locales")
        })
        return _obj



# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.get_asset_families_code_attributes200_response_inner_labels import GetAssetFamiliesCodeAttributes200ResponseInnerLabels
from typing import Optional, Set
from typing_extensions import Self

class ReferenceEntityAttribute(BaseModel):
    """
    ReferenceEntityAttribute
    """ # noqa: E501
    allowed_extensions: Optional[List[StrictStr]] = Field(default=None, description="Extensions allowed when the attribute type is `image`")
    code: StrictStr = Field(description="Attribute code")
    decimals_allowed: Optional[StrictBool] = Field(default=False, description="Whether decimals are allowed when the attribute type is `number`")
    is_required_for_completeness: Optional[StrictBool] = Field(default=False, description="Whether the attribute should be part of the record's completeness calculation")
    is_rich_text_editor: Optional[StrictBool] = Field(default=None, description="Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`")
    is_textarea: Optional[StrictBool] = Field(default=False, description="Whether the UI should display a text area instead of a simple field when the attribute type is `text`")
    labels: Optional[GetAssetFamiliesCodeAttributes200ResponseInnerLabels] = None
    max_characters: Optional[StrictInt] = Field(default=None, description="Maximum number of characters allowed for the value of the attribute when the attribute type is `text`")
    max_file_size: Optional[StrictStr] = Field(default=None, description="Max file size in MB when the attribute type is `image`")
    max_value: Optional[StrictStr] = Field(default=None, description="Maximum value allowed when the attribute type is `number`")
    min_value: Optional[StrictStr] = Field(default=None, description="Minimum value allowed when the attribute type is `number`")
    reference_entity_code: Optional[StrictStr] = Field(default=None, description="Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`")
    type: StrictStr = Field(description="Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.")
    validation_regexp: Optional[StrictStr] = Field(default=None, description="Regexp expression used to validate the attribute value when the attribute type is `text`")
    validation_rule: Optional[StrictStr] = Field(default='none', description="Validation rule type used to validate the attribute value when the attribute type is `text`")
    value_per_channel: Optional[StrictBool] = Field(default=False, description="Whether the attribute is scopable, i.e. can have one value by channel")
    value_per_locale: Optional[StrictBool] = Field(default=False, description="Whether the attribute is localizable, i.e. can have one value by locale")
    __properties: ClassVar[List[str]] = ["allowed_extensions", "code", "decimals_allowed", "is_required_for_completeness", "is_rich_text_editor", "is_textarea", "labels", "max_characters", "max_file_size", "max_value", "min_value", "reference_entity_code", "type", "validation_regexp", "validation_rule", "value_per_channel", "value_per_locale"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['text', 'image', 'number', 'single_option', 'multiple_options', 'reference_entity_single_link', 'reference_entity_multiple_links']):
            raise ValueError("must be one of enum values ('text', 'image', 'number', 'single_option', 'multiple_options', 'reference_entity_single_link', 'reference_entity_multiple_links')")
        return value

    @field_validator('validation_rule')
    def validation_rule_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['email', 'url', 'regexp', 'none']):
            raise ValueError("must be one of enum values ('email', 'url', 'regexp', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReferenceEntityAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReferenceEntityAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_extensions": obj.get("allowed_extensions"),
            "code": obj.get("code"),
            "decimals_allowed": obj.get("decimals_allowed") if obj.get("decimals_allowed") is not None else False,
            "is_required_for_completeness": obj.get("is_required_for_completeness") if obj.get("is_required_for_completeness") is not None else False,
            "is_rich_text_editor": obj.get("is_rich_text_editor"),
            "is_textarea": obj.get("is_textarea") if obj.get("is_textarea") is not None else False,
            "labels": GetAssetFamiliesCodeAttributes200ResponseInnerLabels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "max_characters": obj.get("max_characters"),
            "max_file_size": obj.get("max_file_size"),
            "max_value": obj.get("max_value"),
            "min_value": obj.get("min_value"),
            "reference_entity_code": obj.get("reference_entity_code"),
            "type": obj.get("type"),
            "validation_regexp": obj.get("validation_regexp"),
            "validation_rule": obj.get("validation_rule") if obj.get("validation_rule") is not None else 'none',
            "value_per_channel": obj.get("value_per_channel") if obj.get("value_per_channel") is not None else False,
            "value_per_locale": obj.get("value_per_locale") if obj.get("value_per_locale") is not None else False
        })
        return _obj



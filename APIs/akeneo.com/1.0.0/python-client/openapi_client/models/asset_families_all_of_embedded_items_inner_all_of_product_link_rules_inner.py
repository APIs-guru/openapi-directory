# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asset_families_all_of_embedded_items_inner_all_of_product_link_rules_inner_assign_assets_to_inner import AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerAssignAssetsToInner
from openapi_client.models.asset_families_all_of_embedded_items_inner_all_of_product_link_rules_inner_product_selections_inner import AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner
from typing import Optional, Set
from typing_extensions import Self

class AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner(BaseModel):
    """
    AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner
    """ # noqa: E501
    assign_assets_to: Optional[List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerAssignAssetsToInner]] = Field(default=None, description="The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>.")
    product_selections: Optional[List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner]] = Field(default=None, description="The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>.")
    __properties: ClassVar[List[str]] = ["assign_assets_to", "product_selections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assign_assets_to (list)
        _items = []
        if self.assign_assets_to:
            for _item_assign_assets_to in self.assign_assets_to:
                if _item_assign_assets_to:
                    _items.append(_item_assign_assets_to.to_dict())
            _dict['assign_assets_to'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_selections (list)
        _items = []
        if self.product_selections:
            for _item_product_selections in self.product_selections:
                if _item_product_selections:
                    _items.append(_item_product_selections.to_dict())
            _dict['product_selections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assign_assets_to": [AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerAssignAssetsToInner.from_dict(_item) for _item in obj["assign_assets_to"]] if obj.get("assign_assets_to") is not None else None,
            "product_selections": [AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.from_dict(_item) for _item in obj["product_selections"]] if obj.get("product_selections") is not None else None
        })
        return _obj



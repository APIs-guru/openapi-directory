# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attributes_all_of_embedded_items_inner_all_of_group_labels import AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels
from openapi_client.models.attributes_all_of_embedded_items_inner_all_of_table_configuration_inner import AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
from openapi_client.models.get_asset_families_code_attributes200_response_inner_labels import GetAssetFamiliesCodeAttributes200ResponseInnerLabels
from typing import Optional, Set
from typing_extensions import Self

class PostAttributesRequest(BaseModel):
    """
    PostAttributesRequest
    """ # noqa: E501
    allowed_extensions: Optional[List[StrictStr]] = Field(default=None, description="Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`")
    available_locales: Optional[List[StrictStr]] = Field(default=None, description="To make the attribute locale specfic, specify here for which locales it is specific")
    code: StrictStr = Field(description="Attribute code")
    date_max: Optional[datetime] = Field(default=None, description="Maximum date allowed when the attribute type is `pim_catalog_date`")
    date_min: Optional[datetime] = Field(default=None, description="Minimum date allowed when the attribute type is `pim_catalog_date`")
    decimals_allowed: Optional[StrictBool] = Field(default=None, description="Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`")
    default_metric_unit: Optional[StrictStr] = Field(default=None, description="Default metric unit when the attribute type is `pim_catalog_metric`")
    default_value: Optional[StrictBool] = Field(default=None, description="Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)")
    group: StrictStr = Field(description="Attribute group")
    group_labels: Optional[AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels] = None
    labels: Optional[GetAssetFamiliesCodeAttributes200ResponseInnerLabels] = None
    localizable: Optional[StrictBool] = Field(default=False, description="Whether the attribute is localizable, i.e. can have one value by locale")
    max_characters: Optional[StrictInt] = Field(default=None, description="Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`")
    max_file_size: Optional[StrictStr] = Field(default=None, description="Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`")
    metric_family: Optional[StrictStr] = Field(default=None, description="Metric family when the attribute type is `pim_catalog_metric`")
    negative_allowed: Optional[StrictBool] = Field(default=None, description="Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`")
    number_max: Optional[StrictStr] = Field(default=None, description="Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`")
    number_min: Optional[StrictStr] = Field(default=None, description="Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`")
    reference_data_name: Optional[StrictStr] = Field(default=None, description="Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`")
    scopable: Optional[StrictBool] = Field(default=False, description="Whether the attribute is scopable, i.e. can have one value by channel")
    sort_order: Optional[StrictInt] = Field(default=None, description="Order of the attribute in its group")
    table_configuration: Optional[List[AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner]] = Field(default=None, description="Configuration of the Table attribute (columns)")
    type: StrictStr = Field(description="Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.")
    unique: Optional[StrictBool] = Field(default=None, description="Whether two values for the attribute cannot be the same")
    useable_as_grid_filter: Optional[StrictBool] = Field(default=None, description="Whether the attribute can be used as a filter for the product grid in the PIM user interface")
    validation_regexp: Optional[StrictStr] = Field(default=None, description="Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`")
    validation_rule: Optional[StrictStr] = Field(default=None, description="Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`")
    wysiwyg_enabled: Optional[StrictBool] = Field(default=None, description="Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`")
    __properties: ClassVar[List[str]] = ["allowed_extensions", "available_locales", "code", "date_max", "date_min", "decimals_allowed", "default_metric_unit", "default_value", "group", "group_labels", "labels", "localizable", "max_characters", "max_file_size", "metric_family", "negative_allowed", "number_max", "number_min", "reference_data_name", "scopable", "sort_order", "table_configuration", "type", "unique", "useable_as_grid_filter", "validation_regexp", "validation_rule", "wysiwyg_enabled"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pim_catalog_identifier', 'pim_catalog_metric', 'pim_catalog_number', 'pim_catalog_reference_data_multi_select', 'pim_catalog_reference_data_simple_select', 'pim_catalog_simpleselect', 'pim_catalog_multiselect', 'pim_catalog_date', 'pim_catalog_textarea', 'pim_catalog_text', 'pim_catalog_file', 'pim_catalog_image', 'pim_catalog_price_collection', 'pim_catalog_boolean', 'akeneo_reference_entity', 'akeneo_reference_entity_collection', 'pim_catalog_asset_collection']):
            raise ValueError("must be one of enum values ('pim_catalog_identifier', 'pim_catalog_metric', 'pim_catalog_number', 'pim_catalog_reference_data_multi_select', 'pim_catalog_reference_data_simple_select', 'pim_catalog_simpleselect', 'pim_catalog_multiselect', 'pim_catalog_date', 'pim_catalog_textarea', 'pim_catalog_text', 'pim_catalog_file', 'pim_catalog_image', 'pim_catalog_price_collection', 'pim_catalog_boolean', 'akeneo_reference_entity', 'akeneo_reference_entity_collection', 'pim_catalog_asset_collection')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAttributesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of group_labels
        if self.group_labels:
            _dict['group_labels'] = self.group_labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in table_configuration (list)
        _items = []
        if self.table_configuration:
            for _item_table_configuration in self.table_configuration:
                if _item_table_configuration:
                    _items.append(_item_table_configuration.to_dict())
            _dict['table_configuration'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAttributesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_extensions": obj.get("allowed_extensions"),
            "available_locales": obj.get("available_locales"),
            "code": obj.get("code"),
            "date_max": obj.get("date_max"),
            "date_min": obj.get("date_min"),
            "decimals_allowed": obj.get("decimals_allowed"),
            "default_metric_unit": obj.get("default_metric_unit"),
            "default_value": obj.get("default_value"),
            "group": obj.get("group"),
            "group_labels": AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels.from_dict(obj["group_labels"]) if obj.get("group_labels") is not None else None,
            "labels": GetAssetFamiliesCodeAttributes200ResponseInnerLabels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "localizable": obj.get("localizable") if obj.get("localizable") is not None else False,
            "max_characters": obj.get("max_characters"),
            "max_file_size": obj.get("max_file_size"),
            "metric_family": obj.get("metric_family"),
            "negative_allowed": obj.get("negative_allowed"),
            "number_max": obj.get("number_max"),
            "number_min": obj.get("number_min"),
            "reference_data_name": obj.get("reference_data_name"),
            "scopable": obj.get("scopable") if obj.get("scopable") is not None else False,
            "sort_order": obj.get("sort_order"),
            "table_configuration": [AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.from_dict(_item) for _item in obj["table_configuration"]] if obj.get("table_configuration") is not None else None,
            "type": obj.get("type"),
            "unique": obj.get("unique"),
            "useable_as_grid_filter": obj.get("useable_as_grid_filter"),
            "validation_regexp": obj.get("validation_regexp"),
            "validation_rule": obj.get("validation_rule"),
            "wysiwyg_enabled": obj.get("wysiwyg_enabled")
        })
        return _obj



# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.get_variation_files_channel_code_locale_code200_response import GetVariationFilesChannelCodeLocaleCode200Response
from openapi_client.models.post_reference_files_locale_code_request import PostReferenceFilesLocaleCodeRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PAMAssetVariationFileApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_variation_files_channel_code_locale_code(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVariationFilesChannelCodeLocaleCode200Response:
        """Get a variation file

        This endpoint allows you to get the information about a variation file of a given PAM asset.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variation_files_channel_code_locale_code_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVariationFilesChannelCodeLocaleCode200Response",
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
            '406': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_variation_files_channel_code_locale_code_with_http_info(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVariationFilesChannelCodeLocaleCode200Response]:
        """Get a variation file

        This endpoint allows you to get the information about a variation file of a given PAM asset.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variation_files_channel_code_locale_code_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVariationFilesChannelCodeLocaleCode200Response",
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
            '406': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_variation_files_channel_code_locale_code_without_preload_content(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a variation file

        This endpoint allows you to get the information about a variation file of a given PAM asset.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variation_files_channel_code_locale_code_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVariationFilesChannelCodeLocaleCode200Response",
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
            '406': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_variation_files_channel_code_locale_code_serialize(
        self,
        asset_code,
        channel_code,
        locale_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if asset_code is not None:
            _path_params['asset_code'] = asset_code
        if channel_code is not None:
            _path_params['channel_code'] = channel_code
        if locale_code is not None:
            _path_params['locale_code'] = locale_code
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'code', 
                    'message'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_variation_files_channel_code_locale_code_download(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Download a variation file

        This endpoint allows you to download a given variation file.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variation_files_channel_code_locale_code_download_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_variation_files_channel_code_locale_code_download_with_http_info(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Download a variation file

        This endpoint allows you to download a given variation file.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variation_files_channel_code_locale_code_download_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_variation_files_channel_code_locale_code_download_without_preload_content(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download a variation file

        This endpoint allows you to download a given variation file.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_variation_files_channel_code_locale_code_download_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_variation_files_channel_code_locale_code_download_serialize(
        self,
        asset_code,
        channel_code,
        locale_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if asset_code is not None:
            _path_params['asset_code'] = asset_code
        if channel_code is not None:
            _path_params['channel_code'] = channel_code
        if locale_code is not None:
            _path_params['locale_code'] = locale_code
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'code', 
                    'message'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_variation_files_channel_code_locale_code(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        content_type: Annotated[StrictStr, Field(description="Equal to 'multipart/form-data', no other value allowed")],
        body: Optional[PostReferenceFilesLocaleCodeRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Upload a new variation file

        This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param content_type: Equal to 'multipart/form-data', no other value allowed (required)
        :type content_type: str
        :param body:
        :type body: PostReferenceFilesLocaleCodeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_variation_files_channel_code_locale_code_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            content_type=content_type,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
            '400': "PostToken400Response",
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
            '415': "PostToken400Response",
            '422': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_variation_files_channel_code_locale_code_with_http_info(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        content_type: Annotated[StrictStr, Field(description="Equal to 'multipart/form-data', no other value allowed")],
        body: Optional[PostReferenceFilesLocaleCodeRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Upload a new variation file

        This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param content_type: Equal to 'multipart/form-data', no other value allowed (required)
        :type content_type: str
        :param body:
        :type body: PostReferenceFilesLocaleCodeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_variation_files_channel_code_locale_code_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            content_type=content_type,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
            '400': "PostToken400Response",
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
            '415': "PostToken400Response",
            '422': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_variation_files_channel_code_locale_code_without_preload_content(
        self,
        asset_code: Annotated[StrictStr, Field(description="Code of the asset")],
        channel_code: Annotated[StrictStr, Field(description="Code of the channel")],
        locale_code: Annotated[StrictStr, Field(description="Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable")],
        content_type: Annotated[StrictStr, Field(description="Equal to 'multipart/form-data', no other value allowed")],
        body: Optional[PostReferenceFilesLocaleCodeRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a new variation file

        This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.

        :param asset_code: Code of the asset (required)
        :type asset_code: str
        :param channel_code: Code of the channel (required)
        :type channel_code: str
        :param locale_code: Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable (required)
        :type locale_code: str
        :param content_type: Equal to 'multipart/form-data', no other value allowed (required)
        :type content_type: str
        :param body:
        :type body: PostReferenceFilesLocaleCodeRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_variation_files_channel_code_locale_code_serialize(
            asset_code=asset_code,
            channel_code=channel_code,
            locale_code=locale_code,
            content_type=content_type,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': None,
            '400': "PostToken400Response",
            '401': "PostToken400Response",
            '403': "PostToken400Response",
            '404': "PostToken400Response",
            '415': "PostToken400Response",
            '422': "PostToken400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_variation_files_channel_code_locale_code_serialize(
        self,
        asset_code,
        channel_code,
        locale_code,
        content_type,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if asset_code is not None:
            _path_params['asset_code'] = asset_code
        if channel_code is not None:
            _path_params['channel_code'] = channel_code
        if locale_code is not None:
            _path_params['locale_code'] = locale_code
        # process the query parameters
        # process the header parameters
        if content_type is not None:
            _header_params['Content-type'] = content_type
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'code', 
                    'message', 
                    '_links'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



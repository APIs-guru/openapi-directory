# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.attribute_list import AttributeList

class TestAttributeList(unittest.TestCase):
    """AttributeList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AttributeList:
        """Test AttributeList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AttributeList`
        """
        model = AttributeList()
        if include_optional:
            return AttributeList(
                links = openapi_client.models.pam_asset_categories_all_of__embedded_items_inner_all_of__links.PAM_Asset_Categories_allOf__embedded_items_inner_allOf__links(
                    self = openapi_client.models.pam_asset_categories_all_of__embedded_items_inner_all_of__links_self.PAM_Asset_Categories_allOf__embedded_items_inner_allOf__links_self(
                        href = '', ), ),
                allowed_extensions = [
                    ''
                    ],
                available_locales = [
                    ''
                    ],
                code = '',
                date_max = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                date_min = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                decimals_allowed = True,
                default_metric_unit = '',
                default_value = True,
                group = '',
                group_labels = openapi_client.models.attributes_all_of__embedded_items_inner_all_of_group_labels.Attributes_allOf__embedded_items_inner_allOf_group_labels(
                    locale_code = '', ),
                labels = openapi_client.models.get_asset_families__code__attributes_200_response_inner_labels.get_asset_families__code__attributes_200_response_inner_labels(
                    locale_code = '', ),
                localizable = True,
                max_characters = 56,
                max_file_size = '',
                metric_family = '',
                negative_allowed = True,
                number_max = '',
                number_min = '',
                reference_data_name = '',
                scopable = True,
                sort_order = 56,
                table_configuration = [
                    openapi_client.models.attributes_all_of__embedded_items_inner_all_of_table_configuration_inner.Attributes_allOf__embedded_items_inner_allOf_table_configuration_inner(
                        code = '', 
                        data_type = 'select', 
                        is_required_for_completeness = True, 
                        labels = openapi_client.models.attributes_all_of__embedded_items_inner_all_of_table_configuration_inner_labels.Attributes_allOf__embedded_items_inner_allOf_table_configuration_inner_labels(
                            locale_code = '', ), 
                        validations = openapi_client.models.attributes_all_of__embedded_items_inner_all_of_table_configuration_inner_validations.Attributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations(
                            decimals_allowed = True, 
                            max = 1.337, 
                            max_length = 1.337, 
                            min = 1.337, ), )
                    ],
                type = 'pim_catalog_identifier',
                unique = True,
                useable_as_grid_filter = True,
                validation_regexp = '',
                validation_rule = '',
                wysiwyg_enabled = True
            )
        else:
            return AttributeList(
                code = '',
                group = '',
                type = 'pim_catalog_identifier',
        )
        """

    def testAttributeList(self):
        """Test AttributeList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

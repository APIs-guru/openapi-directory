# coding: utf-8

"""
    Mailscript

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.add_action_alias_request import AddActionAliasRequest
from openapi_client.models.add_action_combine_request import AddActionCombineRequest
from openapi_client.models.add_action_daemon_request import AddActionDaemonRequest
from openapi_client.models.add_action_forward_request import AddActionForwardRequest
from openapi_client.models.add_action_reply_all_request import AddActionReplyAllRequest
from openapi_client.models.add_action_reply_request import AddActionReplyRequest
from openapi_client.models.add_action_send_request import AddActionSendRequest
from openapi_client.models.add_action_sms_request import AddActionSmsRequest
from openapi_client.models.add_action_webhook_request import AddActionWebhookRequest
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ADDACTIONREQUEST_ONE_OF_SCHEMAS = ["AddActionAliasRequest", "AddActionCombineRequest", "AddActionDaemonRequest", "AddActionForwardRequest", "AddActionReplyAllRequest", "AddActionReplyRequest", "AddActionSendRequest", "AddActionSmsRequest", "AddActionWebhookRequest"]

class AddActionRequest(BaseModel):
    """
    AddActionRequest
    """
    # data type: AddActionCombineRequest
    oneof_schema_1_validator: Optional[AddActionCombineRequest] = None
    # data type: AddActionSmsRequest
    oneof_schema_2_validator: Optional[AddActionSmsRequest] = None
    # data type: AddActionWebhookRequest
    oneof_schema_3_validator: Optional[AddActionWebhookRequest] = None
    # data type: AddActionDaemonRequest
    oneof_schema_4_validator: Optional[AddActionDaemonRequest] = None
    # data type: AddActionSendRequest
    oneof_schema_5_validator: Optional[AddActionSendRequest] = None
    # data type: AddActionForwardRequest
    oneof_schema_6_validator: Optional[AddActionForwardRequest] = None
    # data type: AddActionForwardRequest
    oneof_schema_7_validator: Optional[AddActionForwardRequest] = None
    # data type: AddActionReplyRequest
    oneof_schema_8_validator: Optional[AddActionReplyRequest] = None
    # data type: AddActionReplyAllRequest
    oneof_schema_9_validator: Optional[AddActionReplyAllRequest] = None
    # data type: AddActionAliasRequest
    oneof_schema_10_validator: Optional[AddActionAliasRequest] = None
    actual_instance: Optional[Union[AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest]] = None
    one_of_schemas: Set[str] = { "AddActionAliasRequest", "AddActionCombineRequest", "AddActionDaemonRequest", "AddActionForwardRequest", "AddActionReplyAllRequest", "AddActionReplyRequest", "AddActionSendRequest", "AddActionSmsRequest", "AddActionWebhookRequest" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddActionRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: AddActionCombineRequest
        if not isinstance(v, AddActionCombineRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionCombineRequest`")
        else:
            match += 1
        # validate data type: AddActionSmsRequest
        if not isinstance(v, AddActionSmsRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionSmsRequest`")
        else:
            match += 1
        # validate data type: AddActionWebhookRequest
        if not isinstance(v, AddActionWebhookRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionWebhookRequest`")
        else:
            match += 1
        # validate data type: AddActionDaemonRequest
        if not isinstance(v, AddActionDaemonRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionDaemonRequest`")
        else:
            match += 1
        # validate data type: AddActionSendRequest
        if not isinstance(v, AddActionSendRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionSendRequest`")
        else:
            match += 1
        # validate data type: AddActionForwardRequest
        if not isinstance(v, AddActionForwardRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionForwardRequest`")
        else:
            match += 1
        # validate data type: AddActionForwardRequest
        if not isinstance(v, AddActionForwardRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionForwardRequest`")
        else:
            match += 1
        # validate data type: AddActionReplyRequest
        if not isinstance(v, AddActionReplyRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionReplyRequest`")
        else:
            match += 1
        # validate data type: AddActionReplyAllRequest
        if not isinstance(v, AddActionReplyAllRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionReplyAllRequest`")
        else:
            match += 1
        # validate data type: AddActionAliasRequest
        if not isinstance(v, AddActionAliasRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddActionAliasRequest`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddActionRequest with oneOf schemas: AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddActionRequest with oneOf schemas: AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AddActionCombineRequest
        try:
            instance.actual_instance = AddActionCombineRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionSmsRequest
        try:
            instance.actual_instance = AddActionSmsRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionWebhookRequest
        try:
            instance.actual_instance = AddActionWebhookRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionDaemonRequest
        try:
            instance.actual_instance = AddActionDaemonRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionSendRequest
        try:
            instance.actual_instance = AddActionSendRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionForwardRequest
        try:
            instance.actual_instance = AddActionForwardRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionForwardRequest
        try:
            instance.actual_instance = AddActionForwardRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionReplyRequest
        try:
            instance.actual_instance = AddActionReplyRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionReplyAllRequest
        try:
            instance.actual_instance = AddActionReplyAllRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddActionAliasRequest
        try:
            instance.actual_instance = AddActionAliasRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddActionRequest with oneOf schemas: AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddActionRequest with oneOf schemas: AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



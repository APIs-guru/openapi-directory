# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.emoji import Emoji
from openapi_client.models.model_field import ModelField
from openapi_client.models.source import Source
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Represents a user of Mastodon and their associated profile.
    """ # noqa: E501
    acct: Optional[StrictStr] = Field(default=None, description="The Webfinger account URI. Equal to `username` for local users, or `username@domain` for")
    avatar: Optional[StrictStr] = Field(default=None, description="An image icon that is shown next to statuses and in the profile. The format is URL.")
    avatar_static: Optional[StrictStr] = Field(default=None, description="A static version of the avatar. Equal to `avatar` if its value is a static image; different if `avatar` is an animated GIF. The format is URL.")
    bot: Optional[StrictBool] = Field(default=None, description="A presentational flag. Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.")
    created_at: Optional[datetime] = Field(default=None, description="When the account was created.")
    discoverable: Optional[StrictBool] = Field(default=None, description="Whether the account has opted into discovery features such as the profile directory.")
    display_name: Optional[StrictStr] = Field(default=None, description="The profile's display name.")
    emojis: Optional[List[Emoji]] = Field(default=None, description="Custom emoji entities to be used when rendering the profile. If none, an empty array will be returned.")
    fields: Optional[List[ModelField]] = Field(default=None, description="Additional metadata attached to a profile as name-value pairs.")
    followers_count: Optional[StrictInt] = Field(default=None, description="The reported followers of this profile.")
    following_count: Optional[StrictInt] = Field(default=None, description="The reported follows of this profile.")
    header: Optional[StrictStr] = Field(default=None, description="An image banner that is shown above the profile and in profile cards. The format is URL.")
    header_static: Optional[StrictStr] = Field(default=None, description="A static version of the header. Equal to `header` if its value is a static image; different if `header` is an animated GIF. The format is URL.")
    id: Optional[StrictStr] = Field(default=None, description="The account id `header`.")
    last_status_at: Optional[datetime] = Field(default=None, description="When the most recent status was posted.")
    locked: Optional[StrictBool] = Field(default=None, description="Whether the account manually approves follow requests.")
    moved: Optional[Account] = None
    mute_expires_at: Optional[datetime] = Field(default=None, description="When a timed mute will expire, if applicable. ISO 8601 Datetime.")
    note: Optional[StrictStr] = Field(default=None, description="The profile's bio / description.")
    source: Optional[Source] = None
    statuses_count: Optional[StrictInt] = Field(default=None, description="How many statuses are attached to this account.")
    suspended: Optional[StrictBool] = Field(default=None, description="An extra entity returned when an account is suspended.")
    url: Optional[StrictStr] = Field(default=None, description="The location of the user's profile page. (HTTPS URL)")
    username: Optional[StrictStr] = Field(default=None, description="The username of the account, not including domain.")
    __properties: ClassVar[List[str]] = ["acct", "avatar", "avatar_static", "bot", "created_at", "discoverable", "display_name", "emojis", "fields", "followers_count", "following_count", "header", "header_static", "id", "last_status_at", "locked", "moved", "mute_expires_at", "note", "source", "statuses_count", "suspended", "url", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in emojis (list)
        _items = []
        if self.emojis:
            for _item_emojis in self.emojis:
                if _item_emojis:
                    _items.append(_item_emojis.to_dict())
            _dict['emojis'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of moved
        if self.moved:
            _dict['moved'] = self.moved.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acct": obj.get("acct"),
            "avatar": obj.get("avatar"),
            "avatar_static": obj.get("avatar_static"),
            "bot": obj.get("bot"),
            "created_at": obj.get("created_at"),
            "discoverable": obj.get("discoverable"),
            "display_name": obj.get("display_name"),
            "emojis": [Emoji.from_dict(_item) for _item in obj["emojis"]] if obj.get("emojis") is not None else None,
            "fields": [ModelField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "followers_count": obj.get("followers_count"),
            "following_count": obj.get("following_count"),
            "header": obj.get("header"),
            "header_static": obj.get("header_static"),
            "id": obj.get("id"),
            "last_status_at": obj.get("last_status_at"),
            "locked": obj.get("locked"),
            "moved": Account.from_dict(obj["moved"]) if obj.get("moved") is not None else None,
            "mute_expires_at": obj.get("mute_expires_at"),
            "note": obj.get("note"),
            "source": Source.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "statuses_count": obj.get("statuses_count"),
            "suspended": obj.get("suspended"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Account.model_rebuild(raise_errors=False)


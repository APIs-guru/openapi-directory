# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiV1StatusesPostRequestInner(BaseModel):
    """
    ApiV1StatusesPostRequestInner
    """ # noqa: E501
    in_reply_to_id: Optional[StrictStr] = Field(default=None, description="ID of the status being replied to, if status is a reply")
    language: Optional[StrictStr] = Field(default=None, description="ISO 639 language code for this status.")
    media_ids: Optional[List[StrictStr]] = Field(default=None, description="Array of Attachment ids to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used.")
    poll: Optional[List[Dict[str, Any]]] = None
    scheduled_at: Optional[StrictStr] = Field(default=None, description="ISO 8601 Datetime at which to schedule a status. Providing this paramter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.")
    sensitive: Optional[StrictBool] = Field(default=None, description="Mark status and attached media as sensitive?")
    spoiler_text: Optional[StrictStr] = Field(default=None, description="Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.")
    status: Optional[StrictStr] = Field(default=None, description="Text content of the status. If `media_ids` is provided, this becomes optional. Attaching a `poll` is optional while `status` is provided.")
    visibility: Optional[StrictStr] = Field(default=None, description="Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.")
    __properties: ClassVar[List[str]] = ["in_reply_to_id", "language", "media_ids", "poll", "scheduled_at", "sensitive", "spoiler_text", "status", "visibility"]

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['public', 'unlisted', 'private', 'direct']):
            raise ValueError("must be one of enum values ('public', 'unlisted', 'private', 'direct')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV1StatusesPostRequestInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV1StatusesPostRequestInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "in_reply_to_id": obj.get("in_reply_to_id"),
            "language": obj.get("language"),
            "media_ids": obj.get("media_ids"),
            "poll": obj.get("poll"),
            "scheduled_at": obj.get("scheduled_at"),
            "sensitive": obj.get("sensitive"),
            "spoiler_text": obj.get("spoiler_text"),
            "status": obj.get("status"),
            "visibility": obj.get("visibility")
        })
        return _obj



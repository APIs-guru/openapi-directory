# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.emoji import Emoji
from typing import Optional, Set
from typing_extensions import Self

class Poll(BaseModel):
    """
    Represents a poll attached to a status.
    """ # noqa: E501
    emojis: Optional[List[Emoji]] = Field(default=None, description="Custom emoji to be used for rendering poll options.")
    expired: Optional[StrictBool] = Field(default=None, description="Is the poll currently expired?")
    expires_at: Optional[datetime] = Field(default=None, description="When the poll ends. ISO 8601 Datetime, or null if the poll does not end.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the poll in the database. Cast from an integer, but not guaranteed to be a number.")
    multiple: Optional[StrictBool] = Field(default=None, description="Does the poll allow multiple-choice answers?")
    options: Optional[List[Any]] = Field(default=None, description="Possible answers for the poll.")
    own_votes: Optional[List[StrictInt]] = Field(default=None, description="When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`. Array of Number, or null if no current user")
    voted: Optional[StrictBool] = Field(default=None, description="When called with a user token, has the authorized user voted? Boolean, or null if no current user")
    voters_count: Optional[StrictInt] = Field(default=None, description="How many unique accounts have voted on a multiple-choice poll. Number, or null if `multiple` is false.")
    votes_count: Optional[StrictInt] = Field(default=None, description="How many votes have been received.")
    __properties: ClassVar[List[str]] = ["emojis", "expired", "expires_at", "id", "multiple", "options", "own_votes", "voted", "voters_count", "votes_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Poll from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in emojis (list)
        _items = []
        if self.emojis:
            for _item_emojis in self.emojis:
                if _item_emojis:
                    _items.append(_item_emojis.to_dict())
            _dict['emojis'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Poll from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emojis": [Emoji.from_dict(_item) for _item in obj["emojis"]] if obj.get("emojis") is not None else None,
            "expired": obj.get("expired"),
            "expires_at": obj.get("expires_at"),
            "id": obj.get("id"),
            "multiple": obj.get("multiple"),
            "options": obj.get("options"),
            "own_votes": obj.get("own_votes"),
            "voted": obj.get("voted"),
            "voters_count": obj.get("voters_count"),
            "votes_count": obj.get("votes_count")
        })
        return _obj



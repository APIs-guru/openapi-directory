# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account import Account
from openapi_client.models.application import Application
from openapi_client.models.attachment import Attachment
from openapi_client.models.card import Card
from openapi_client.models.emoji import Emoji
from openapi_client.models.mention import Mention
from openapi_client.models.poll import Poll
from openapi_client.models.tag import Tag
from typing import Optional, Set
from typing_extensions import Self

class Status(BaseModel):
    """
    Represents a status posted by an account.
    """ # noqa: E501
    account: Optional[Account] = None
    application: Optional[Application] = None
    bookmarked: Optional[StrictBool] = Field(default=None, description="Have you bookmarked this status?")
    card: Optional[Card] = None
    content: Optional[StrictStr] = Field(default=None, description="HTML-encoded status content.")
    created_at: Optional[datetime] = Field(default=None, description="The date when this status was created.")
    emojis: Optional[List[Emoji]] = Field(default=None, description="Custom emoji to be used when rendering status content.")
    favourited: Optional[StrictBool] = Field(default=None, description="Have you favourited this status?")
    favourites_count: Optional[StrictInt] = Field(default=None, description="How many favourites this status has received.")
    id: Optional[StrictStr] = Field(default=None, description="ID of the status in the database. Cast from an integer but not guaranteed to be a number.")
    in_reply_to_account_id: Optional[StrictStr] = Field(default=None, description="ID of the account being replied to.")
    in_reply_to_id: Optional[StrictStr] = Field(default=None, description="ID of the status being replied. Cast from an integer but not guaranteed to be a number.")
    language: Optional[StrictStr] = Field(default=None, description="Primary language of this status. ISO 639 Part 1 two-letter language code.")
    media_attachments: Optional[List[Attachment]] = Field(default=None, description="Media that is attached to this status.")
    mentions: Optional[List[Mention]] = Field(default=None, description="Mentions of users within the status content.")
    muted: Optional[StrictBool] = Field(default=None, description="Have you muted notifications for this status's conversation?")
    pinned: Optional[StrictBool] = Field(default=None, description="Have you pinned this status? Only appears if the status is pinnable.")
    poll: Optional[Poll] = None
    reblog: Optional[Status] = None
    reblogged: Optional[StrictBool] = Field(default=None, description="Have you boosted this status?")
    reblogs_count: Optional[StrictInt] = Field(default=None, description="How many boosts this status has received.")
    replies_count: Optional[StrictInt] = Field(default=None, description="How many replies this status has received.")
    sensitive: Optional[StrictBool] = Field(default=None, description="Is this status marked as sensitive content?")
    spoiler_text: Optional[StrictStr] = Field(default=None, description="Subject or summary line, below which status content is collapsed until expanded.")
    tags: Optional[List[Tag]] = Field(default=None, description="Hashtags used within the status content.")
    text: Optional[StrictStr] = Field(default=None, description="Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.")
    uri: Optional[StrictStr] = Field(default=None, description="URI of the status used for federation.")
    url: Optional[StrictStr] = Field(default=None, description="A link to the status's HTML representation.")
    visibility: Optional[StrictStr] = Field(default=None, description="Visibility of this status.")
    __properties: ClassVar[List[str]] = ["account", "application", "bookmarked", "card", "content", "created_at", "emojis", "favourited", "favourites_count", "id", "in_reply_to_account_id", "in_reply_to_id", "language", "media_attachments", "mentions", "muted", "pinned", "poll", "reblog", "reblogged", "reblogs_count", "replies_count", "sensitive", "spoiler_text", "tags", "text", "uri", "url", "visibility"]

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['public', 'unlisted', 'private', 'direct']):
            raise ValueError("must be one of enum values ('public', 'unlisted', 'private', 'direct')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in emojis (list)
        _items = []
        if self.emojis:
            for _item_emojis in self.emojis:
                if _item_emojis:
                    _items.append(_item_emojis.to_dict())
            _dict['emojis'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in media_attachments (list)
        _items = []
        if self.media_attachments:
            for _item_media_attachments in self.media_attachments:
                if _item_media_attachments:
                    _items.append(_item_media_attachments.to_dict())
            _dict['media_attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mentions (list)
        _items = []
        if self.mentions:
            for _item_mentions in self.mentions:
                if _item_mentions:
                    _items.append(_item_mentions.to_dict())
            _dict['mentions'] = _items
        # override the default output from pydantic by calling `to_dict()` of poll
        if self.poll:
            _dict['poll'] = self.poll.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reblog
        if self.reblog:
            _dict['reblog'] = self.reblog.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": Account.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "application": Application.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "bookmarked": obj.get("bookmarked"),
            "card": Card.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "content": obj.get("content"),
            "created_at": obj.get("created_at"),
            "emojis": [Emoji.from_dict(_item) for _item in obj["emojis"]] if obj.get("emojis") is not None else None,
            "favourited": obj.get("favourited"),
            "favourites_count": obj.get("favourites_count"),
            "id": obj.get("id"),
            "in_reply_to_account_id": obj.get("in_reply_to_account_id"),
            "in_reply_to_id": obj.get("in_reply_to_id"),
            "language": obj.get("language"),
            "media_attachments": [Attachment.from_dict(_item) for _item in obj["media_attachments"]] if obj.get("media_attachments") is not None else None,
            "mentions": [Mention.from_dict(_item) for _item in obj["mentions"]] if obj.get("mentions") is not None else None,
            "muted": obj.get("muted"),
            "pinned": obj.get("pinned"),
            "poll": Poll.from_dict(obj["poll"]) if obj.get("poll") is not None else None,
            "reblog": Status.from_dict(obj["reblog"]) if obj.get("reblog") is not None else None,
            "reblogged": obj.get("reblogged"),
            "reblogs_count": obj.get("reblogs_count"),
            "replies_count": obj.get("replies_count"),
            "sensitive": obj.get("sensitive"),
            "spoiler_text": obj.get("spoiler_text"),
            "tags": [Tag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "text": obj.get("text"),
            "uri": obj.get("uri"),
            "url": obj.get("url"),
            "visibility": obj.get("visibility")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Status.model_rebuild(raise_errors=False)


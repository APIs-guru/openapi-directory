# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiV1FiltersPostRequest(BaseModel):
    """
    ApiV1FiltersPostRequest
    """ # noqa: E501
    context: List[StrictStr] = Field(description="Array of enumerable strings `home`, `notifications`, `public`, `thread`. At least one context must be specified.")
    expires_in: Optional[StrictInt] = Field(default=None, description="Number of seconds from now the filter should expire. Otherwise, null for a filter that doesn't expire.")
    irreversible: Optional[StrictBool] = Field(default=None, description="Should the server irreversibly drop matching entities from home and notifications?")
    phrase: StrictStr = Field(description="Text to be filtered.")
    whole_word: Optional[StrictBool] = Field(default=None, description="Consider word boundaries?")
    __properties: ClassVar[List[str]] = ["context", "expires_in", "irreversible", "phrase", "whole_word"]

    @field_validator('context')
    def context_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['home', 'notifications', 'public', 'thread']):
                raise ValueError("each list item must be one of ('home', 'notifications', 'public', 'thread')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV1FiltersPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV1FiltersPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": obj.get("context"),
            "expires_in": obj.get("expires_in"),
            "irreversible": obj.get("irreversible"),
            "phrase": obj.get("phrase"),
            "whole_word": obj.get("whole_word")
        })
        return _obj



# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Card(BaseModel):
    """
    Represents a rich preview card that is generated using OpenGraph tags from a URL.
    """ # noqa: E501
    author_name: Optional[StrictStr] = Field(default=None, description="The author of the original resource.")
    author_url: Optional[StrictStr] = Field(default=None, description="A link to the author of the original resource.")
    blurhash: Optional[StrictStr] = Field(default=None, description="A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.")
    description: StrictStr = Field(description="Description of preview.")
    height: Optional[StrictInt] = Field(default=None, description="Height of preview, in pixels.")
    html: Optional[StrictStr] = Field(default=None, description="HTML to be used for generating the preview card.")
    image: Optional[StrictStr] = Field(default=None, description="Preview thumbnail (URL).")
    provider_name: Optional[StrictStr] = Field(default=None, description="The provider of the original resource.")
    provider_url: Optional[StrictStr] = Field(default=None, description="A link to the provider of the original resource.")
    title: StrictStr = Field(description="Title of linked resource.")
    type: StrictStr = Field(description="The type of the preview card. String (Enumerable, oneOf).")
    url: StrictStr = Field(description="Location of linked resource.")
    width: Optional[StrictInt] = Field(default=None, description="Width of preview, in pixels.")
    __properties: ClassVar[List[str]] = ["author_name", "author_url", "blurhash", "description", "height", "html", "image", "provider_name", "provider_url", "title", "type", "url", "width"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['link', 'photo', 'video', 'rich']):
            raise ValueError("must be one of enum values ('link', 'photo', 'video', 'rich')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Card from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Card from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author_name": obj.get("author_name"),
            "author_url": obj.get("author_url"),
            "blurhash": obj.get("blurhash"),
            "description": obj.get("description"),
            "height": obj.get("height"),
            "html": obj.get("html"),
            "image": obj.get("image"),
            "provider_name": obj.get("provider_name"),
            "provider_url": obj.get("provider_url"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.api_v1_accounts_update_credentials_patch_request_source import ApiV1AccountsUpdateCredentialsPatchRequestSource
from typing import Optional, Set
from typing_extensions import Self

class ApiV1AccountsUpdateCredentialsPatchRequest(BaseModel):
    """
    ApiV1AccountsUpdateCredentialsPatchRequest
    """ # noqa: E501
    avatar: Optional[StrictStr] = Field(default=None, description="Avatar image encoded using multipart/form-data")
    bot: Optional[StrictBool] = Field(default=None, description="Whether the account has a bot flag.")
    discoverable: Optional[StrictStr] = Field(default=None, description="Whether the account should be shown in the profile directory.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name to use for the profile.")
    fields_attributes: Optional[Dict[str, Any]] = Field(default=None, description="Profile metadata `name` and `value`. (By default, max 4 fields and 255 characters per property/value)")
    header: Optional[StrictStr] = Field(default=None, description="Header image encoded using multipart/form-data")
    locked: Optional[StrictBool] = Field(default=None, description="Whether manual approval of follow requests is required.")
    note: Optional[StrictStr] = Field(default=None, description="The account bio.")
    source: Optional[ApiV1AccountsUpdateCredentialsPatchRequestSource] = None
    __properties: ClassVar[List[str]] = ["avatar", "bot", "discoverable", "display_name", "fields_attributes", "header", "locked", "note", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV1AccountsUpdateCredentialsPatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV1AccountsUpdateCredentialsPatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar": obj.get("avatar"),
            "bot": obj.get("bot"),
            "discoverable": obj.get("discoverable"),
            "display_name": obj.get("display_name"),
            "fields_attributes": obj.get("fields_attributes"),
            "header": obj.get("header"),
            "locked": obj.get("locked"),
            "note": obj.get("note"),
            "source": ApiV1AccountsUpdateCredentialsPatchRequestSource.from_dict(obj["source"]) if obj.get("source") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Preferences(BaseModel):
    """
    Represents a user's preferences.
    """ # noqa: E501
    postingdefaultlanguage: Optional[StrictStr] = Field(default=None, description="Default language for new posts. Equivalent to [Source#language](https://docs.joinmastodon.org/entities/source/#language). ISO 639-1 language two-letter code, or null", alias="posting:default:language")
    postingdefaultsensitive: Optional[StrictBool] = Field(default=None, description="Default sensitivity flag for new posts. Equivalent to [Source#sensitive](https://docs.joinmastodon.org/entities/source/#sensitive).", alias="posting:default:sensitive")
    postingdefaultvisibility: Optional[StrictStr] = Field(default=None, description="Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).", alias="posting:default:visibility")
    readingexpandmedia: Optional[StrictStr] = Field(default=None, description="Whether media attachments should be automatically displayed or blurred/hidden.", alias="reading:expand:media")
    readingexpandspoilers: Optional[StrictBool] = Field(default=None, description="Whether CWs should be expanded by default.", alias="reading:expand:spoilers")
    __properties: ClassVar[List[str]] = ["posting:default:language", "posting:default:sensitive", "posting:default:visibility", "reading:expand:media", "reading:expand:spoilers"]

    @field_validator('postingdefaultvisibility')
    def postingdefaultvisibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['public', 'unlisted', 'private', 'direct']):
            raise ValueError("must be one of enum values ('public', 'unlisted', 'private', 'direct')")
        return value

    @field_validator('readingexpandmedia')
    def readingexpandmedia_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['default', 'show_all', 'hide_all']):
            raise ValueError("must be one of enum values ('default', 'show_all', 'hide_all')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Preferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Preferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "posting:default:language": obj.get("posting:default:language"),
            "posting:default:sensitive": obj.get("posting:default:sensitive"),
            "posting:default:visibility": obj.get("posting:default:visibility"),
            "reading:expand:media": obj.get("reading:expand:media"),
            "reading:expand:spoilers": obj.get("reading:expand:spoilers")
        })
        return _obj



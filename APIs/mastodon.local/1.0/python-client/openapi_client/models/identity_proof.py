# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentityProof(BaseModel):
    """
    Represents a proof from an external identity provider.
    """ # noqa: E501
    profile_url: Optional[StrictStr] = Field(default=None, description="The account owner's profile URL on the identity provider.")
    proof_url: Optional[StrictStr] = Field(default=None, description="A link to a statement of identity proof, hosted by the identity provider.")
    provider: Optional[StrictStr] = Field(default=None, description="The name of the identity provider.")
    provider_username: Optional[StrictStr] = Field(default=None, description="The account owner's username on the identity provider's service.")
    updated_at: Optional[StrictStr] = Field(default=None, description="When the identity proof was last updated. ISO 8601 Datetime.")
    __properties: ClassVar[List[str]] = ["profile_url", "proof_url", "provider", "provider_username", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityProof from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityProof from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "profile_url": obj.get("profile_url"),
            "proof_url": obj.get("proof_url"),
            "provider": obj.get("provider"),
            "provider_username": obj.get("provider_username"),
            "updated_at": obj.get("updated_at")
        })
        return _obj



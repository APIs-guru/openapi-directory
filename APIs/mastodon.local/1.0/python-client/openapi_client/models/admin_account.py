# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account import Account
from typing import Optional, Set
from typing_extensions import Self

class AdminAccount(BaseModel):
    """
    Admin-level information about a given account.
    """ # noqa: E501
    account: Optional[Account] = None
    approved: Optional[StrictBool] = Field(default=None, description="Whether the account is currently approved.")
    confirmed: Optional[StrictBool] = Field(default=None, description="Whether the account has confirmed their email address.")
    created_at: Optional[datetime] = Field(default=None, description="When the account was first discovered.")
    created_by_application_id: Optional[StrictStr] = Field(default=None, description="The ID of the application that created this account. Cast from an integer, but not guaranteed to be a number.")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the account is currently disabled.")
    email: Optional[StrictStr] = Field(default=None, description="The email address associated with the account.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the account in the database. Cast from an integer, but not guaranteed to be a number.")
    invite_request: Optional[StrictStr] = Field(default=None, description="Invite request text ???")
    invited_by_account_id: Optional[StrictStr] = Field(default=None, description="The ID of the account that invited this user. Cast from an integer, but not guaranteed to be a number.")
    ip: Optional[StrictStr] = Field(default=None, description="The IP address last used to login to this account.")
    locale: Optional[StrictStr] = Field(default=None, description="The locale of the account. ISO 639 Part 1 two-letter language code.")
    role: Optional[StrictStr] = Field(default=None, description="The current role of the account. Enumerable oneOf.")
    silenced: Optional[StrictBool] = Field(default=None, description="Whether the account is currently silenced.")
    suspended: Optional[StrictBool] = Field(default=None, description="Whether the account is currently suspended.")
    username: Optional[StrictStr] = Field(default=None, description="The username of the account.")
    __properties: ClassVar[List[str]] = ["account", "approved", "confirmed", "created_at", "created_by_application_id", "disabled", "email", "id", "invite_request", "invited_by_account_id", "ip", "locale", "role", "silenced", "suspended", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": Account.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "approved": obj.get("approved"),
            "confirmed": obj.get("confirmed"),
            "created_at": obj.get("created_at"),
            "created_by_application_id": obj.get("created_by_application_id"),
            "disabled": obj.get("disabled"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "invite_request": obj.get("invite_request"),
            "invited_by_account_id": obj.get("invited_by_account_id"),
            "ip": obj.get("ip"),
            "locale": obj.get("locale"),
            "role": obj.get("role"),
            "silenced": obj.get("silenced"),
            "suspended": obj.get("suspended"),
            "username": obj.get("username")
        })
        return _obj



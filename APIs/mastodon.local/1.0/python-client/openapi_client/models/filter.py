# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Filter(BaseModel):
    """
    Represents a user-defined filter for determining which statuses should not be shown to the user.
    """ # noqa: E501
    context: Optional[List[StrictStr]] = Field(default=None, description="The contexts in which the filter should be applied.")
    expires_at: Optional[StrictStr] = Field(default=None, description="When the filter should no longer be applied. ISO 8601 Datetime, or null if the filter does not expire")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the filter in the database. Cast from an integer, but not guaranteed to be a number.")
    irreversible: Optional[StrictBool] = Field(default=None, description="Should matching entities in home and notifications be dropped by the server?")
    phrase: Optional[StrictStr] = Field(default=None, description="The text to be filtered.")
    whole_word: Optional[StrictBool] = Field(default=None, description="Should the filter consider word boundaries?")
    __properties: ClassVar[List[str]] = ["context", "expires_at", "id", "irreversible", "phrase", "whole_word"]

    @field_validator('context')
    def context_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['home', 'notifications', 'public', 'thread']):
                raise ValueError("each list item must be one of ('home', 'notifications', 'public', 'thread')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Filter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Filter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": obj.get("context"),
            "expires_at": obj.get("expires_at"),
            "id": obj.get("id"),
            "irreversible": obj.get("irreversible"),
            "phrase": obj.get("phrase"),
            "whole_word": obj.get("whole_word")
        })
        return _obj



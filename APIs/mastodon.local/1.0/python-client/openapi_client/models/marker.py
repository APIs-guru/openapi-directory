# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Marker(BaseModel):
    """
    Represents the last read position within a user's timelines.
    """ # noqa: E501
    home: Optional[Dict[str, Any]] = Field(default=None, description="Information about the user's position in the home timeline.")
    last_read_id: Optional[StrictStr] = Field(default=None, description="The ID of the most recently viewed entity. Cast from integer but not guaranteed to be a number")
    notifications: Optional[Dict[str, Any]] = Field(default=None, description="Information about the user's position in their notifications.")
    updated_at: Optional[datetime] = Field(default=None, description="The timestamp of when the marker was set. ISO 8601 Datetime.")
    version: Optional[StrictInt] = Field(default=None, description="Used for locking to prevent write conflicts.")
    __properties: ClassVar[List[str]] = ["home", "last_read_id", "notifications", "updated_at", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Marker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Marker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "home": obj.get("home"),
            "last_read_id": obj.get("last_read_id"),
            "notifications": obj.get("notifications"),
            "updated_at": obj.get("updated_at"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account import Account
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    Represents the software instance of Mastodon running on this domain.
    """ # noqa: E501
    approval_required: StrictBool = Field(description="Whether registrations require moderator approval.")
    contact_account: Optional[Account] = None
    description: StrictStr = Field(description="Admin-defined description of the Mastodon site.")
    email: StrictStr = Field(description="An email that may be contacted for any inquiries.")
    invites_enabled: StrictBool = Field(description="Whether invites are enabled.")
    languages: List[StrictStr] = Field(description="Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.")
    registrations: StrictBool = Field(description="Whether registrations are enabled.")
    short_description: StrictStr = Field(description="A shorter description defined by the admin.")
    stats: Dict[str, Any] = Field(description="Statistics about how much information the instance contains.")
    thumbnail: Optional[StrictStr] = Field(default=None, description="Banner image for the website.")
    title: StrictStr = Field(description="The title of the website.")
    uri: StrictStr = Field(description="The domain name of the instance.")
    urls: Dict[str, Any] = Field(description="URLs of interest for clients apps.")
    version: StrictStr = Field(description="The version of Mastodon installed on the instance.")
    __properties: ClassVar[List[str]] = ["approval_required", "contact_account", "description", "email", "invites_enabled", "languages", "registrations", "short_description", "stats", "thumbnail", "title", "uri", "urls", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact_account
        if self.contact_account:
            _dict['contact_account'] = self.contact_account.to_dict()
        # set to None if thumbnail (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail is None and "thumbnail" in self.model_fields_set:
            _dict['thumbnail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approval_required": obj.get("approval_required"),
            "contact_account": Account.from_dict(obj["contact_account"]) if obj.get("contact_account") is not None else None,
            "description": obj.get("description"),
            "email": obj.get("email"),
            "invites_enabled": obj.get("invites_enabled"),
            "languages": obj.get("languages"),
            "registrations": obj.get("registrations"),
            "short_description": obj.get("short_description"),
            "stats": obj.get("stats"),
            "thumbnail": obj.get("thumbnail"),
            "title": obj.get("title"),
            "uri": obj.get("uri"),
            "urls": obj.get("urls"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    Represents a file or media attachment that can be added to a status.
    """ # noqa: E501
    blurhash: Optional[StrictStr] = Field(default=None, description="A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.")
    description: Optional[StrictStr] = Field(default=None, description="Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.")
    id: StrictStr = Field(description="The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number")
    meta: Optional[Dict[str, Any]] = Field(default=None, description="Metadata returned by Paperclip.")
    preview_url: StrictStr = Field(description="The location of a scaled-down preview of the attachment.")
    remote_url: Optional[StrictStr] = Field(default=None, description="The location of the full-size original attachment on the remote website. String or null if the attachment is local.")
    text_url: Optional[StrictStr] = Field(default=None, description="A shorter URL for the attachment.")
    type: StrictStr = Field(description="The type of the attachment.")
    url: StrictStr = Field(description="The location of the original full-size attachment.")
    __properties: ClassVar[List[str]] = ["blurhash", "description", "id", "meta", "preview_url", "remote_url", "text_url", "type", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['unknown', 'image', 'gifv', 'video', 'audio']):
            raise ValueError("must be one of enum values ('unknown', 'image', 'gifv', 'video', 'audio')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blurhash": obj.get("blurhash"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "meta": obj.get("meta"),
            "preview_url": obj.get("preview_url"),
            "remote_url": obj.get("remote_url"),
            "text_url": obj.get("text_url"),
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class Relationship(BaseModel):
    """
    Represents the relationship between accounts, such as following / blocking / muting / etc.
    """ # noqa: E501
    blocked_by: StrictBool = Field(description="Is this user blocking you?")
    blocking: StrictBool = Field(description="Are you blocking this user?")
    domain_blocking: StrictBool = Field(description="Are you blocking this user's domain?")
    endorsed: StrictBool = Field(description="Are you featuring this user on your profile?")
    followed_by: StrictBool = Field(description="Are you followed by this user?")
    following: StrictBool = Field(description="Are you following this user?")
    id: StrictStr = Field(description="The account id. Cast from an integer, but not guaranteed to be a number.")
    muting: StrictBool = Field(description="Are you muting this user?")
    muting_notifications: StrictBool = Field(description="Are you muting notifications from this user?")
    note: StrictStr = Field(description="This user's profile bio")
    notifying: StrictBool = Field(description="Have you enabled notifications for this user?")
    requested: StrictBool = Field(description="Do you have a pending follow request for this user?")
    showing_reblogs: StrictBool = Field(description="Are you receiving this user's boosts in your home timeline?")
    __properties: ClassVar[List[str]] = ["blocked_by", "blocking", "domain_blocking", "endorsed", "followed_by", "following", "id", "muting", "muting_notifications", "note", "notifying", "requested", "showing_reblogs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Relationship from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Relationship from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blocked_by": obj.get("blocked_by"),
            "blocking": obj.get("blocking"),
            "domain_blocking": obj.get("domain_blocking"),
            "endorsed": obj.get("endorsed"),
            "followed_by": obj.get("followed_by"),
            "following": obj.get("following"),
            "id": obj.get("id"),
            "muting": obj.get("muting"),
            "muting_notifications": obj.get("muting_notifications"),
            "note": obj.get("note"),
            "notifying": obj.get("notifying"),
            "requested": obj.get("requested"),
            "showing_reblogs": obj.get("showing_reblogs")
        })
        return _obj



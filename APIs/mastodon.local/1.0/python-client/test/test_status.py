# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.status import Status

class TestStatus(unittest.TestCase):
    """Status unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Status:
        """Test Status
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Status`
        """
        model = Status()
        if include_optional:
            return Status(
                account = openapi_client.models.account.Account(
                    acct = '', 
                    avatar = '', 
                    avatar_static = '', 
                    bot = True, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    discoverable = True, 
                    display_name = '', 
                    emojis = [
                        openapi_client.models.emoji.Emoji(
                            category = '', 
                            shortcode = '', 
                            static_url = '', 
                            url = '', 
                            visible_in_picker = True, )
                        ], 
                    fields = [
                        openapi_client.models.field.Field(
                            name = '', 
                            value = '', 
                            verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    followers_count = 56, 
                    following_count = 56, 
                    header = '', 
                    header_static = '', 
                    id = '', 
                    last_status_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    locked = True, 
                    moved = openapi_client.models.account.Account(
                        acct = '', 
                        avatar = '', 
                        avatar_static = '', 
                        bot = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        discoverable = True, 
                        display_name = '', 
                        followers_count = 56, 
                        following_count = 56, 
                        header = '', 
                        header_static = '', 
                        id = '', 
                        last_status_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        locked = True, 
                        mute_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        note = '', 
                        source = openapi_client.models.source.Source(
                            follow_requests_count = 56, 
                            language = '', 
                            note = '', 
                            privacy = 'public', 
                            sensitive = True, ), 
                        statuses_count = 56, 
                        suspended = True, 
                        url = '', 
                        username = '', ), 
                    mute_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    note = '', 
                    source = openapi_client.models.source.Source(
                        follow_requests_count = 56, 
                        language = '', 
                        note = '', 
                        privacy = 'public', 
                        sensitive = True, ), 
                    statuses_count = 56, 
                    suspended = True, 
                    url = '', 
                    username = '', ),
                application = openapi_client.models.application.Application(
                    client_id = '', 
                    client_secret = '', 
                    name = '', 
                    vapid_key = '', 
                    website = '', ),
                bookmarked = True,
                card = openapi_client.models.card.Card(
                    author_name = '', 
                    author_url = '', 
                    blurhash = '', 
                    description = '', 
                    height = 56, 
                    html = '', 
                    image = '', 
                    provider_name = '', 
                    provider_url = '', 
                    title = '', 
                    type = 'link', 
                    url = '', 
                    width = 56, ),
                content = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                emojis = [
                    openapi_client.models.emoji.Emoji(
                        category = '', 
                        shortcode = '', 
                        static_url = '', 
                        url = '', 
                        visible_in_picker = True, )
                    ],
                favourited = True,
                favourites_count = 56,
                id = '',
                in_reply_to_account_id = '',
                in_reply_to_id = '',
                language = '',
                media_attachments = [
                    openapi_client.models.attachment.Attachment(
                        blurhash = '', 
                        description = '', 
                        id = '', 
                        meta = openapi_client.models.meta.meta(), 
                        preview_url = '', 
                        remote_url = '', 
                        text_url = '', 
                        type = 'unknown', 
                        url = '', )
                    ],
                mentions = [
                    openapi_client.models.mention.Mention(
                        acct = '', 
                        id = '', 
                        url = '', 
                        username = '', )
                    ],
                muted = True,
                pinned = True,
                poll = openapi_client.models.poll.Poll(
                    emojis = [
                        openapi_client.models.emoji.Emoji(
                            category = '', 
                            shortcode = '', 
                            static_url = '', 
                            url = '', 
                            visible_in_picker = True, )
                        ], 
                    expired = True, 
                    expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    multiple = True, 
                    options = [
                        null
                        ], 
                    own_votes = [
                        56
                        ], 
                    voted = True, 
                    voters_count = 56, 
                    votes_count = 56, ),
                reblog = openapi_client.models.status.Status(
                    account = openapi_client.models.account.Account(
                        acct = '', 
                        avatar = '', 
                        avatar_static = '', 
                        bot = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        discoverable = True, 
                        display_name = '', 
                        emojis = [
                            openapi_client.models.emoji.Emoji(
                                category = '', 
                                shortcode = '', 
                                static_url = '', 
                                url = '', 
                                visible_in_picker = True, )
                            ], 
                        fields = [
                            openapi_client.models.field.Field(
                                name = '', 
                                value = '', 
                                verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        followers_count = 56, 
                        following_count = 56, 
                        header = '', 
                        header_static = '', 
                        id = '', 
                        last_status_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        locked = True, 
                        moved = openapi_client.models.account.Account(
                            acct = '', 
                            avatar = '', 
                            avatar_static = '', 
                            bot = True, 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            discoverable = True, 
                            display_name = '', 
                            followers_count = 56, 
                            following_count = 56, 
                            header = '', 
                            header_static = '', 
                            id = '', 
                            last_status_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            locked = True, 
                            mute_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            note = '', 
                            source = openapi_client.models.source.Source(
                                follow_requests_count = 56, 
                                language = '', 
                                note = '', 
                                privacy = 'public', 
                                sensitive = True, ), 
                            statuses_count = 56, 
                            suspended = True, 
                            url = '', 
                            username = '', ), 
                        mute_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        note = '', 
                        source = openapi_client.models.source.Source(
                            follow_requests_count = 56, 
                            language = '', 
                            note = '', 
                            privacy = 'public', 
                            sensitive = True, ), 
                        statuses_count = 56, 
                        suspended = True, 
                        url = '', 
                        username = '', ), 
                    application = openapi_client.models.application.Application(
                        client_id = '', 
                        client_secret = '', 
                        name = '', 
                        vapid_key = '', 
                        website = '', ), 
                    bookmarked = True, 
                    card = openapi_client.models.card.Card(
                        author_name = '', 
                        author_url = '', 
                        blurhash = '', 
                        description = '', 
                        height = 56, 
                        html = '', 
                        image = '', 
                        provider_name = '', 
                        provider_url = '', 
                        title = '', 
                        type = 'link', 
                        url = '', 
                        width = 56, ), 
                    content = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    emojis = [
                        openapi_client.models.emoji.Emoji(
                            category = '', 
                            shortcode = '', 
                            static_url = '', 
                            url = '', 
                            visible_in_picker = True, )
                        ], 
                    favourited = True, 
                    favourites_count = 56, 
                    id = '', 
                    in_reply_to_account_id = '', 
                    in_reply_to_id = '', 
                    language = '', 
                    media_attachments = [
                        openapi_client.models.attachment.Attachment(
                            blurhash = '', 
                            description = '', 
                            id = '', 
                            meta = openapi_client.models.meta.meta(), 
                            preview_url = '', 
                            remote_url = '', 
                            text_url = '', 
                            type = 'unknown', 
                            url = '', )
                        ], 
                    mentions = [
                        openapi_client.models.mention.Mention(
                            acct = '', 
                            id = '', 
                            url = '', 
                            username = '', )
                        ], 
                    muted = True, 
                    pinned = True, 
                    poll = openapi_client.models.poll.Poll(
                        expired = True, 
                        expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = '', 
                        multiple = True, 
                        options = [
                            null
                            ], 
                        own_votes = [
                            56
                            ], 
                        voted = True, 
                        voters_count = 56, 
                        votes_count = 56, ), 
                    reblogged = True, 
                    reblogs_count = 56, 
                    replies_count = 56, 
                    sensitive = True, 
                    spoiler_text = '', 
                    tags = [
                        openapi_client.models.tag.Tag(
                            history = [
                                openapi_client.models.history.History(
                                    accounts = '', 
                                    day = '', 
                                    uses = '', )
                                ], 
                            name = '', 
                            url = '', )
                        ], 
                    text = '', 
                    uri = '', 
                    url = '', 
                    visibility = 'public', ),
                reblogged = True,
                reblogs_count = 56,
                replies_count = 56,
                sensitive = True,
                spoiler_text = '',
                tags = [
                    openapi_client.models.tag.Tag(
                        history = [
                            openapi_client.models.history.History(
                                accounts = '', 
                                day = '', 
                                uses = '', )
                            ], 
                        name = '', 
                        url = '', )
                    ],
                text = '',
                uri = '',
                url = '',
                visibility = 'public'
            )
        else:
            return Status(
        )
        """

    def testStatus(self):
        """Test Status"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

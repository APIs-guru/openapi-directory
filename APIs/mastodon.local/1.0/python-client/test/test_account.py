# coding: utf-8

"""
    Mastodon API Specification (https://github.com/mastodon/mastodon)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: sardo@hey.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.account import Account

class TestAccount(unittest.TestCase):
    """Account unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Account:
        """Test Account
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Account`
        """
        model = Account()
        if include_optional:
            return Account(
                acct = '',
                avatar = '',
                avatar_static = '',
                bot = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                discoverable = True,
                display_name = '',
                emojis = [
                    openapi_client.models.emoji.Emoji(
                        category = '', 
                        shortcode = '', 
                        static_url = '', 
                        url = '', 
                        visible_in_picker = True, )
                    ],
                fields = [
                    openapi_client.models.field.Field(
                        name = '', 
                        value = '', 
                        verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                followers_count = 56,
                following_count = 56,
                header = '',
                header_static = '',
                id = '',
                last_status_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                locked = True,
                moved = openapi_client.models.account.Account(
                    acct = '', 
                    avatar = '', 
                    avatar_static = '', 
                    bot = True, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    discoverable = True, 
                    display_name = '', 
                    emojis = [
                        openapi_client.models.emoji.Emoji(
                            category = '', 
                            shortcode = '', 
                            static_url = '', 
                            url = '', 
                            visible_in_picker = True, )
                        ], 
                    fields = [
                        openapi_client.models.field.Field(
                            name = '', 
                            value = '', 
                            verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    followers_count = 56, 
                    following_count = 56, 
                    header = '', 
                    header_static = '', 
                    id = '', 
                    last_status_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    locked = True, 
                    moved = openapi_client.models.account.Account(
                        acct = '', 
                        avatar = '', 
                        avatar_static = '', 
                        bot = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        discoverable = True, 
                        display_name = '', 
                        followers_count = 56, 
                        following_count = 56, 
                        header = '', 
                        header_static = '', 
                        id = '', 
                        last_status_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        locked = True, 
                        mute_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        note = '', 
                        source = openapi_client.models.source.Source(
                            follow_requests_count = 56, 
                            language = '', 
                            note = '', 
                            privacy = 'public', 
                            sensitive = True, ), 
                        statuses_count = 56, 
                        suspended = True, 
                        url = '', 
                        username = '', ), 
                    mute_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    note = '', 
                    source = openapi_client.models.source.Source(
                        follow_requests_count = 56, 
                        language = '', 
                        note = '', 
                        privacy = 'public', 
                        sensitive = True, ), 
                    statuses_count = 56, 
                    suspended = True, 
                    url = '', 
                    username = '', ),
                mute_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                note = '',
                source = openapi_client.models.source.Source(
                    fields = [
                        openapi_client.models.field.Field(
                            name = '', 
                            value = '', 
                            verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    follow_requests_count = 56, 
                    language = '', 
                    note = '', 
                    privacy = 'public', 
                    sensitive = True, ),
                statuses_count = 56,
                suspended = True,
                url = '',
                username = ''
            )
        else:
            return Account(
        )
        """

    def testAccount(self):
        """Test Account"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

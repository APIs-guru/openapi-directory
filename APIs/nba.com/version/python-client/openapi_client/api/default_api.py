# coding: utf-8

"""
    NBA Stats API

    The destination for current and historic NBA statistics.

    The version of the OpenAPI document: version
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr
from typing import Optional

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def allstarballotpredictor_get(
        self,
        west_player1: StrictStr,
        west_player2: StrictStr,
        west_player3: StrictStr,
        west_player4: StrictStr,
        west_player5: StrictStr,
        east_player1: StrictStr,
        east_player2: StrictStr,
        east_player3: StrictStr,
        east_player4: StrictStr,
        east_player5: StrictStr,
        point_cap: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """allstarballotpredictor_get


        :param west_player1: (required)
        :type west_player1: str
        :param west_player2: (required)
        :type west_player2: str
        :param west_player3: (required)
        :type west_player3: str
        :param west_player4: (required)
        :type west_player4: str
        :param west_player5: (required)
        :type west_player5: str
        :param east_player1: (required)
        :type east_player1: str
        :param east_player2: (required)
        :type east_player2: str
        :param east_player3: (required)
        :type east_player3: str
        :param east_player4: (required)
        :type east_player4: str
        :param east_player5: (required)
        :type east_player5: str
        :param point_cap:
        :type point_cap: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._allstarballotpredictor_get_serialize(
            west_player1=west_player1,
            west_player2=west_player2,
            west_player3=west_player3,
            west_player4=west_player4,
            west_player5=west_player5,
            east_player1=east_player1,
            east_player2=east_player2,
            east_player3=east_player3,
            east_player4=east_player4,
            east_player5=east_player5,
            point_cap=point_cap,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def allstarballotpredictor_get_with_http_info(
        self,
        west_player1: StrictStr,
        west_player2: StrictStr,
        west_player3: StrictStr,
        west_player4: StrictStr,
        west_player5: StrictStr,
        east_player1: StrictStr,
        east_player2: StrictStr,
        east_player3: StrictStr,
        east_player4: StrictStr,
        east_player5: StrictStr,
        point_cap: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """allstarballotpredictor_get


        :param west_player1: (required)
        :type west_player1: str
        :param west_player2: (required)
        :type west_player2: str
        :param west_player3: (required)
        :type west_player3: str
        :param west_player4: (required)
        :type west_player4: str
        :param west_player5: (required)
        :type west_player5: str
        :param east_player1: (required)
        :type east_player1: str
        :param east_player2: (required)
        :type east_player2: str
        :param east_player3: (required)
        :type east_player3: str
        :param east_player4: (required)
        :type east_player4: str
        :param east_player5: (required)
        :type east_player5: str
        :param point_cap:
        :type point_cap: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._allstarballotpredictor_get_serialize(
            west_player1=west_player1,
            west_player2=west_player2,
            west_player3=west_player3,
            west_player4=west_player4,
            west_player5=west_player5,
            east_player1=east_player1,
            east_player2=east_player2,
            east_player3=east_player3,
            east_player4=east_player4,
            east_player5=east_player5,
            point_cap=point_cap,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def allstarballotpredictor_get_without_preload_content(
        self,
        west_player1: StrictStr,
        west_player2: StrictStr,
        west_player3: StrictStr,
        west_player4: StrictStr,
        west_player5: StrictStr,
        east_player1: StrictStr,
        east_player2: StrictStr,
        east_player3: StrictStr,
        east_player4: StrictStr,
        east_player5: StrictStr,
        point_cap: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """allstarballotpredictor_get


        :param west_player1: (required)
        :type west_player1: str
        :param west_player2: (required)
        :type west_player2: str
        :param west_player3: (required)
        :type west_player3: str
        :param west_player4: (required)
        :type west_player4: str
        :param west_player5: (required)
        :type west_player5: str
        :param east_player1: (required)
        :type east_player1: str
        :param east_player2: (required)
        :type east_player2: str
        :param east_player3: (required)
        :type east_player3: str
        :param east_player4: (required)
        :type east_player4: str
        :param east_player5: (required)
        :type east_player5: str
        :param point_cap:
        :type point_cap: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._allstarballotpredictor_get_serialize(
            west_player1=west_player1,
            west_player2=west_player2,
            west_player3=west_player3,
            west_player4=west_player4,
            west_player5=west_player5,
            east_player1=east_player1,
            east_player2=east_player2,
            east_player3=east_player3,
            east_player4=east_player4,
            east_player5=east_player5,
            point_cap=point_cap,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _allstarballotpredictor_get_serialize(
        self,
        west_player1,
        west_player2,
        west_player3,
        west_player4,
        west_player5,
        east_player1,
        east_player2,
        east_player3,
        east_player4,
        east_player5,
        point_cap,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if point_cap is not None:
            
            _query_params.append(('PointCap', point_cap))
            
        if west_player1 is not None:
            
            _query_params.append(('WestPlayer1', west_player1))
            
        if west_player2 is not None:
            
            _query_params.append(('WestPlayer2', west_player2))
            
        if west_player3 is not None:
            
            _query_params.append(('WestPlayer3', west_player3))
            
        if west_player4 is not None:
            
            _query_params.append(('WestPlayer4', west_player4))
            
        if west_player5 is not None:
            
            _query_params.append(('WestPlayer5', west_player5))
            
        if east_player1 is not None:
            
            _query_params.append(('EastPlayer1', east_player1))
            
        if east_player2 is not None:
            
            _query_params.append(('EastPlayer2', east_player2))
            
        if east_player3 is not None:
            
            _query_params.append(('EastPlayer3', east_player3))
            
        if east_player4 is not None:
            
            _query_params.append(('EastPlayer4', east_player4))
            
        if east_player5 is not None:
            
            _query_params.append(('EastPlayer5', east_player5))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/allstarballotpredictor',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscore_get(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) boxscore_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscore is deprecated.", DeprecationWarning)

        _param = self._boxscore_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscore_get_with_http_info(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) boxscore_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscore is deprecated.", DeprecationWarning)

        _param = self._boxscore_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscore_get_without_preload_content(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) boxscore_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscore is deprecated.", DeprecationWarning)

        _param = self._boxscore_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscore_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscore',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoreadvanced_get(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) boxscoreadvanced_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoreadvanced is deprecated.", DeprecationWarning)

        _param = self._boxscoreadvanced_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoreadvanced_get_with_http_info(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) boxscoreadvanced_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoreadvanced is deprecated.", DeprecationWarning)

        _param = self._boxscoreadvanced_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoreadvanced_get_without_preload_content(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) boxscoreadvanced_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoreadvanced is deprecated.", DeprecationWarning)

        _param = self._boxscoreadvanced_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoreadvanced_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoreadvanced',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoreadvancedv2_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscoreadvancedv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreadvancedv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoreadvancedv2_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscoreadvancedv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreadvancedv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoreadvancedv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscoreadvancedv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreadvancedv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoreadvancedv2_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoreadvancedv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscorefourfactors_get(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) boxscorefourfactors_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscorefourfactors is deprecated.", DeprecationWarning)

        _param = self._boxscorefourfactors_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscorefourfactors_get_with_http_info(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) boxscorefourfactors_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscorefourfactors is deprecated.", DeprecationWarning)

        _param = self._boxscorefourfactors_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscorefourfactors_get_without_preload_content(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) boxscorefourfactors_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscorefourfactors is deprecated.", DeprecationWarning)

        _param = self._boxscorefourfactors_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscorefourfactors_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscorefourfactors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscorefourfactorsv2_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscorefourfactorsv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscorefourfactorsv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscorefourfactorsv2_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscorefourfactorsv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscorefourfactorsv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscorefourfactorsv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscorefourfactorsv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscorefourfactorsv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscorefourfactorsv2_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscorefourfactorsv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoremisc_get(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) boxscoremisc_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoremisc is deprecated.", DeprecationWarning)

        _param = self._boxscoremisc_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoremisc_get_with_http_info(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) boxscoremisc_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoremisc is deprecated.", DeprecationWarning)

        _param = self._boxscoremisc_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoremisc_get_without_preload_content(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) boxscoremisc_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoremisc is deprecated.", DeprecationWarning)

        _param = self._boxscoremisc_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoremisc_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoremisc',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoremiscv2_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscoremiscv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoremiscv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoremiscv2_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscoremiscv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoremiscv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoremiscv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscoremiscv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoremiscv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoremiscv2_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoremiscv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoreplayertrackv2_get(
        self,
        game_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscoreplayertrackv2_get


        :param game_id: (required)
        :type game_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreplayertrackv2_get_serialize(
            game_id=game_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoreplayertrackv2_get_with_http_info(
        self,
        game_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscoreplayertrackv2_get


        :param game_id: (required)
        :type game_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreplayertrackv2_get_serialize(
            game_id=game_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoreplayertrackv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscoreplayertrackv2_get


        :param game_id: (required)
        :type game_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreplayertrackv2_get_serialize(
            game_id=game_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoreplayertrackv2_get_serialize(
        self,
        game_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoreplayertrackv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscorescoring_get(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) boxscorescoring_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscorescoring is deprecated.", DeprecationWarning)

        _param = self._boxscorescoring_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscorescoring_get_with_http_info(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) boxscorescoring_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscorescoring is deprecated.", DeprecationWarning)

        _param = self._boxscorescoring_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscorescoring_get_without_preload_content(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) boxscorescoring_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscorescoring is deprecated.", DeprecationWarning)

        _param = self._boxscorescoring_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscorescoring_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscorescoring',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscorescoringv2_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscorescoringv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscorescoringv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscorescoringv2_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscorescoringv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscorescoringv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscorescoringv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscorescoringv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscorescoringv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscorescoringv2_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscorescoringv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoresummaryv2_get(
        self,
        game_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscoresummaryv2_get


        :param game_id: (required)
        :type game_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoresummaryv2_get_serialize(
            game_id=game_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoresummaryv2_get_with_http_info(
        self,
        game_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscoresummaryv2_get


        :param game_id: (required)
        :type game_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoresummaryv2_get_serialize(
            game_id=game_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoresummaryv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscoresummaryv2_get


        :param game_id: (required)
        :type game_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoresummaryv2_get_serialize(
            game_id=game_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoresummaryv2_get_serialize(
        self,
        game_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoresummaryv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoretraditionalv2_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscoretraditionalv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoretraditionalv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoretraditionalv2_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscoretraditionalv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoretraditionalv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoretraditionalv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscoretraditionalv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoretraditionalv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoretraditionalv2_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoretraditionalv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoreusage_get(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) boxscoreusage_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoreusage is deprecated.", DeprecationWarning)

        _param = self._boxscoreusage_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoreusage_get_with_http_info(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) boxscoreusage_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoreusage is deprecated.", DeprecationWarning)

        _param = self._boxscoreusage_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoreusage_get_without_preload_content(
        self,
        game_id: Optional[StrictStr] = None,
        start_period: Optional[StrictStr] = None,
        end_period: Optional[StrictStr] = None,
        start_range: Optional[StrictStr] = None,
        end_range: Optional[StrictStr] = None,
        range_type: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) boxscoreusage_get


        :param game_id:
        :type game_id: str
        :param start_period:
        :type start_period: str
        :param end_period:
        :type end_period: str
        :param start_range:
        :type start_range: str
        :param end_range:
        :type end_range: str
        :param range_type:
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /boxscoreusage is deprecated.", DeprecationWarning)

        _param = self._boxscoreusage_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoreusage_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoreusage',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def boxscoreusagev2_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """boxscoreusagev2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreusagev2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def boxscoreusagev2_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """boxscoreusagev2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreusagev2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def boxscoreusagev2_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        start_range: StrictStr,
        end_range: StrictStr,
        range_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """boxscoreusagev2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param start_range: (required)
        :type start_range: str
        :param end_range: (required)
        :type end_range: str
        :param range_type: (required)
        :type range_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._boxscoreusagev2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            start_range=start_range,
            end_range=end_range,
            range_type=range_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _boxscoreusagev2_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        start_range,
        end_range,
        range_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        if start_range is not None:
            
            _query_params.append(('StartRange', start_range))
            
        if end_range is not None:
            
            _query_params.append(('EndRange', end_range))
            
        if range_type is not None:
            
            _query_params.append(('RangeType', range_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boxscoreusagev2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def common_team_years_get(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """common_team_years_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._common_team_years_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def common_team_years_get_with_http_info(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """common_team_years_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._common_team_years_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def common_team_years_get_without_preload_content(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """common_team_years_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._common_team_years_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _common_team_years_get_serialize(
        self,
        league_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/commonTeamYears',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commonallplayers_get(
        self,
        league_id: StrictStr,
        season: StrictStr,
        is_only_current_season: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """commonallplayers_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param is_only_current_season: (required)
        :type is_only_current_season: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonallplayers_get_serialize(
            league_id=league_id,
            season=season,
            is_only_current_season=is_only_current_season,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commonallplayers_get_with_http_info(
        self,
        league_id: StrictStr,
        season: StrictStr,
        is_only_current_season: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """commonallplayers_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param is_only_current_season: (required)
        :type is_only_current_season: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonallplayers_get_serialize(
            league_id=league_id,
            season=season,
            is_only_current_season=is_only_current_season,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commonallplayers_get_without_preload_content(
        self,
        league_id: StrictStr,
        season: StrictStr,
        is_only_current_season: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """commonallplayers_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param is_only_current_season: (required)
        :type is_only_current_season: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonallplayers_get_serialize(
            league_id=league_id,
            season=season,
            is_only_current_season=is_only_current_season,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commonallplayers_get_serialize(
        self,
        league_id,
        season,
        is_only_current_season,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if is_only_current_season is not None:
            
            _query_params.append(('IsOnlyCurrentSeason', is_only_current_season))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/commonallplayers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commonplayerinfo_get(
        self,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """commonplayerinfo_get


        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonplayerinfo_get_serialize(
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commonplayerinfo_get_with_http_info(
        self,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """commonplayerinfo_get


        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonplayerinfo_get_serialize(
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commonplayerinfo_get_without_preload_content(
        self,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """commonplayerinfo_get


        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonplayerinfo_get_serialize(
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commonplayerinfo_get_serialize(
        self,
        player_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/commonplayerinfo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commonplayoffseries_get(
        self,
        league_id: StrictStr,
        season: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """commonplayoffseries_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonplayoffseries_get_serialize(
            league_id=league_id,
            season=season,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commonplayoffseries_get_with_http_info(
        self,
        league_id: StrictStr,
        season: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """commonplayoffseries_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonplayoffseries_get_serialize(
            league_id=league_id,
            season=season,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commonplayoffseries_get_without_preload_content(
        self,
        league_id: StrictStr,
        season: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """commonplayoffseries_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonplayoffseries_get_serialize(
            league_id=league_id,
            season=season,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commonplayoffseries_get_serialize(
        self,
        league_id,
        season,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/commonplayoffseries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def commonteamroster_get(
        self,
        season: StrictStr,
        team_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """commonteamroster_get


        :param season: (required)
        :type season: str
        :param team_id: (required)
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonteamroster_get_serialize(
            season=season,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def commonteamroster_get_with_http_info(
        self,
        season: StrictStr,
        team_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """commonteamroster_get


        :param season: (required)
        :type season: str
        :param team_id: (required)
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonteamroster_get_serialize(
            season=season,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def commonteamroster_get_without_preload_content(
        self,
        season: StrictStr,
        team_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """commonteamroster_get


        :param season: (required)
        :type season: str
        :param team_id: (required)
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._commonteamroster_get_serialize(
            season=season,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _commonteamroster_get_serialize(
        self,
        season,
        team_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/commonteamroster',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def draftcombinedrillresults_get(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """draftcombinedrillresults_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinedrillresults_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def draftcombinedrillresults_get_with_http_info(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """draftcombinedrillresults_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinedrillresults_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def draftcombinedrillresults_get_without_preload_content(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """draftcombinedrillresults_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinedrillresults_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _draftcombinedrillresults_get_serialize(
        self,
        league_id,
        season_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_year is not None:
            
            _query_params.append(('SeasonYear', season_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/draftcombinedrillresults',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def draftcombinenonstationaryshooting_get(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """draftcombinenonstationaryshooting_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinenonstationaryshooting_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def draftcombinenonstationaryshooting_get_with_http_info(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """draftcombinenonstationaryshooting_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinenonstationaryshooting_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def draftcombinenonstationaryshooting_get_without_preload_content(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """draftcombinenonstationaryshooting_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinenonstationaryshooting_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _draftcombinenonstationaryshooting_get_serialize(
        self,
        league_id,
        season_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_year is not None:
            
            _query_params.append(('SeasonYear', season_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/draftcombinenonstationaryshooting',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def draftcombineplayeranthro_get(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """draftcombineplayeranthro_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombineplayeranthro_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def draftcombineplayeranthro_get_with_http_info(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """draftcombineplayeranthro_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombineplayeranthro_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def draftcombineplayeranthro_get_without_preload_content(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """draftcombineplayeranthro_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombineplayeranthro_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _draftcombineplayeranthro_get_serialize(
        self,
        league_id,
        season_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_year is not None:
            
            _query_params.append(('SeasonYear', season_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/draftcombineplayeranthro',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def draftcombinespotshooting_get(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """draftcombinespotshooting_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinespotshooting_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def draftcombinespotshooting_get_with_http_info(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """draftcombinespotshooting_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinespotshooting_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def draftcombinespotshooting_get_without_preload_content(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """draftcombinespotshooting_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinespotshooting_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _draftcombinespotshooting_get_serialize(
        self,
        league_id,
        season_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_year is not None:
            
            _query_params.append(('SeasonYear', season_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/draftcombinespotshooting',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def draftcombinestats_get(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """draftcombinestats_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinestats_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def draftcombinestats_get_with_http_info(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """draftcombinestats_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinestats_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def draftcombinestats_get_without_preload_content(
        self,
        league_id: StrictStr,
        season_year: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """draftcombinestats_get


        :param league_id: (required)
        :type league_id: str
        :param season_year: (required)
        :type season_year: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._draftcombinestats_get_serialize(
            league_id=league_id,
            season_year=season_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _draftcombinestats_get_serialize(
        self,
        league_id,
        season_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_year is not None:
            
            _query_params.append(('SeasonYear', season_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/draftcombinestats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def drafthistory_get(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """drafthistory_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drafthistory_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def drafthistory_get_with_http_info(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """drafthistory_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drafthistory_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def drafthistory_get_without_preload_content(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """drafthistory_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drafthistory_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _drafthistory_get_serialize(
        self,
        league_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/drafthistory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def franchisehistory_get(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """franchisehistory_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._franchisehistory_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def franchisehistory_get_with_http_info(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """franchisehistory_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._franchisehistory_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def franchisehistory_get_without_preload_content(
        self,
        league_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """franchisehistory_get


        :param league_id: (required)
        :type league_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._franchisehistory_get_serialize(
            league_id=league_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _franchisehistory_get_serialize(
        self,
        league_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/franchisehistory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def homepageleaders_get(
        self,
        stat_category: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """homepageleaders_get


        :param stat_category: (required)
        :type stat_category: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._homepageleaders_get_serialize(
            stat_category=stat_category,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def homepageleaders_get_with_http_info(
        self,
        stat_category: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """homepageleaders_get


        :param stat_category: (required)
        :type stat_category: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._homepageleaders_get_serialize(
            stat_category=stat_category,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def homepageleaders_get_without_preload_content(
        self,
        stat_category: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """homepageleaders_get


        :param stat_category: (required)
        :type stat_category: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._homepageleaders_get_serialize(
            stat_category=stat_category,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _homepageleaders_get_serialize(
        self,
        stat_category,
        league_id,
        season,
        season_type,
        player_or_team,
        player_scope,
        game_scope,
        game,
        player,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if stat_category is not None:
            
            _query_params.append(('StatCategory', stat_category))
            
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_or_team is not None:
            
            _query_params.append(('PlayerOrTeam', player_or_team))
            
        if game is not None:
            
            _query_params.append(('Game', game))
            
        if player is not None:
            
            _query_params.append(('Player', player))
            
        if player_scope is not None:
            
            _query_params.append(('PlayerScope', player_scope))
            
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/homepageleaders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def homepagev2_get(
        self,
        stat_type: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """homepagev2_get


        :param stat_type: (required)
        :type stat_type: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._homepagev2_get_serialize(
            stat_type=stat_type,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def homepagev2_get_with_http_info(
        self,
        stat_type: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """homepagev2_get


        :param stat_type: (required)
        :type stat_type: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._homepagev2_get_serialize(
            stat_type=stat_type,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def homepagev2_get_without_preload_content(
        self,
        stat_type: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """homepagev2_get


        :param stat_type: (required)
        :type stat_type: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._homepagev2_get_serialize(
            stat_type=stat_type,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _homepagev2_get_serialize(
        self,
        stat_type,
        league_id,
        season,
        season_type,
        player_or_team,
        player_scope,
        game_scope,
        game,
        player,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if stat_type is not None:
            
            _query_params.append(('StatType', stat_type))
            
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_or_team is not None:
            
            _query_params.append(('PlayerOrTeam', player_or_team))
            
        if game is not None:
            
            _query_params.append(('Game', game))
            
        if player is not None:
            
            _query_params.append(('Player', player))
            
        if player_scope is not None:
            
            _query_params.append(('PlayerScope', player_scope))
            
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/homepagev2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaderstiles_get(
        self,
        stat: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaderstiles_get


        :param stat: (required)
        :type stat: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaderstiles_get_serialize(
            stat=stat,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaderstiles_get_with_http_info(
        self,
        stat: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaderstiles_get


        :param stat: (required)
        :type stat: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaderstiles_get_serialize(
            stat=stat,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaderstiles_get_without_preload_content(
        self,
        stat: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_or_team: StrictStr,
        player_scope: StrictStr,
        game_scope: StrictStr,
        game: Optional[StrictStr] = None,
        player: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaderstiles_get


        :param stat: (required)
        :type stat: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_or_team: (required)
        :type player_or_team: str
        :param player_scope: (required)
        :type player_scope: str
        :param game_scope: (required)
        :type game_scope: str
        :param game:
        :type game: str
        :param player:
        :type player: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaderstiles_get_serialize(
            stat=stat,
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_or_team=player_or_team,
            player_scope=player_scope,
            game_scope=game_scope,
            game=game,
            player=player,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaderstiles_get_serialize(
        self,
        stat,
        league_id,
        season,
        season_type,
        player_or_team,
        player_scope,
        game_scope,
        game,
        player,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if stat is not None:
            
            _query_params.append(('Stat', stat))
            
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_or_team is not None:
            
            _query_params.append(('PlayerOrTeam', player_or_team))
            
        if game is not None:
            
            _query_params.append(('Game', game))
            
        if player is not None:
            
            _query_params.append(('Player', player))
            
        if player_scope is not None:
            
            _query_params.append(('PlayerScope', player_scope))
            
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaderstiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashlineups_get(
        self,
        group_quantity: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashlineups_get


        :param group_quantity: (required)
        :type group_quantity: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashlineups_get_serialize(
            group_quantity=group_quantity,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashlineups_get_with_http_info(
        self,
        group_quantity: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashlineups_get


        :param group_quantity: (required)
        :type group_quantity: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashlineups_get_serialize(
            group_quantity=group_quantity,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashlineups_get_without_preload_content(
        self,
        group_quantity: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashlineups_get


        :param group_quantity: (required)
        :type group_quantity: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashlineups_get_serialize(
            group_quantity=group_quantity,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashlineups_get_serialize(
        self,
        group_quantity,
        season_type,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if group_quantity is not None:
            
            _query_params.append(('GroupQuantity', group_quantity))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashlineups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashplayerbiostats_get(
        self,
        per_mode: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashplayerbiostats_get


        :param per_mode: (required)
        :type per_mode: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerbiostats_get_serialize(
            per_mode=per_mode,
            league_id=league_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashplayerbiostats_get_with_http_info(
        self,
        per_mode: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashplayerbiostats_get


        :param per_mode: (required)
        :type per_mode: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerbiostats_get_serialize(
            per_mode=per_mode,
            league_id=league_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashplayerbiostats_get_without_preload_content(
        self,
        per_mode: StrictStr,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashplayerbiostats_get


        :param per_mode: (required)
        :type per_mode: str
        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerbiostats_get_serialize(
            per_mode=per_mode,
            league_id=league_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashplayerbiostats_get_serialize(
        self,
        per_mode,
        league_id,
        season,
        season_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashplayerbiostats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashplayerclutch_get(
        self,
        clutch_time: StrictStr,
        ahead_behind: StrictStr,
        point_diff: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashplayerclutch_get


        :param clutch_time: (required)
        :type clutch_time: str
        :param ahead_behind: (required)
        :type ahead_behind: str
        :param point_diff: (required)
        :type point_diff: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerclutch_get_serialize(
            clutch_time=clutch_time,
            ahead_behind=ahead_behind,
            point_diff=point_diff,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashplayerclutch_get_with_http_info(
        self,
        clutch_time: StrictStr,
        ahead_behind: StrictStr,
        point_diff: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashplayerclutch_get


        :param clutch_time: (required)
        :type clutch_time: str
        :param ahead_behind: (required)
        :type ahead_behind: str
        :param point_diff: (required)
        :type point_diff: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerclutch_get_serialize(
            clutch_time=clutch_time,
            ahead_behind=ahead_behind,
            point_diff=point_diff,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashplayerclutch_get_without_preload_content(
        self,
        clutch_time: StrictStr,
        ahead_behind: StrictStr,
        point_diff: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashplayerclutch_get


        :param clutch_time: (required)
        :type clutch_time: str
        :param ahead_behind: (required)
        :type ahead_behind: str
        :param point_diff: (required)
        :type point_diff: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerclutch_get_serialize(
            clutch_time=clutch_time,
            ahead_behind=ahead_behind,
            point_diff=point_diff,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashplayerclutch_get_serialize(
        self,
        clutch_time,
        ahead_behind,
        point_diff,
        game_scope,
        player_experience,
        player_position,
        starter_bench,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if clutch_time is not None:
            
            _query_params.append(('ClutchTime', clutch_time))
            
        if ahead_behind is not None:
            
            _query_params.append(('AheadBehind', ahead_behind))
            
        if point_diff is not None:
            
            _query_params.append(('PointDiff', point_diff))
            
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        if player_experience is not None:
            
            _query_params.append(('PlayerExperience', player_experience))
            
        if player_position is not None:
            
            _query_params.append(('PlayerPosition', player_position))
            
        if starter_bench is not None:
            
            _query_params.append(('StarterBench', starter_bench))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashplayerclutch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashplayerptshot_get(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashplayerptshot_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerptshot_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashplayerptshot_get_with_http_info(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashplayerptshot_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerptshot_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashplayerptshot_get_without_preload_content(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashplayerptshot_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerptshot_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashplayerptshot_get_serialize(
        self,
        league_id,
        per_mode,
        season,
        season_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashplayerptshot',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashplayershotlocations_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        distance_range: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashplayershotlocations_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param distance_range: (required)
        :type distance_range: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayershotlocations_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            distance_range=distance_range,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashplayershotlocations_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        distance_range: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashplayershotlocations_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param distance_range: (required)
        :type distance_range: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayershotlocations_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            distance_range=distance_range,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashplayershotlocations_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        distance_range: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashplayershotlocations_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param distance_range: (required)
        :type distance_range: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayershotlocations_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            distance_range=distance_range,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashplayershotlocations_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        distance_range,
        game_scope,
        player_experience,
        player_position,
        starter_bench,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        if distance_range is not None:
            
            _query_params.append(('DistanceRange', distance_range))
            
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        if player_experience is not None:
            
            _query_params.append(('PlayerExperience', player_experience))
            
        if player_position is not None:
            
            _query_params.append(('PlayerPosition', player_position))
            
        if starter_bench is not None:
            
            _query_params.append(('StarterBench', starter_bench))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashplayershotlocations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashplayerstats_get(
        self,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashplayerstats_get


        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerstats_get_serialize(
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashplayerstats_get_with_http_info(
        self,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashplayerstats_get


        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerstats_get_serialize(
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashplayerstats_get_without_preload_content(
        self,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashplayerstats_get


        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashplayerstats_get_serialize(
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashplayerstats_get_serialize(
        self,
        game_scope,
        player_experience,
        player_position,
        starter_bench,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        if player_experience is not None:
            
            _query_params.append(('PlayerExperience', player_experience))
            
        if player_position is not None:
            
            _query_params.append(('PlayerPosition', player_position))
            
        if starter_bench is not None:
            
            _query_params.append(('StarterBench', starter_bench))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashplayerstats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashptdefend_get(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        defense_category: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashptdefend_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param defense_category: (required)
        :type defense_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashptdefend_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            defense_category=defense_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashptdefend_get_with_http_info(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        defense_category: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashptdefend_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param defense_category: (required)
        :type defense_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashptdefend_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            defense_category=defense_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashptdefend_get_without_preload_content(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        defense_category: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashptdefend_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param defense_category: (required)
        :type defense_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashptdefend_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            defense_category=defense_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashptdefend_get_serialize(
        self,
        league_id,
        per_mode,
        season,
        season_type,
        defense_category,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if defense_category is not None:
            
            _query_params.append(('DefenseCategory', defense_category))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashptdefend',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashptteamdefend_get(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        defense_category: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashptteamdefend_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param defense_category: (required)
        :type defense_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashptteamdefend_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            defense_category=defense_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashptteamdefend_get_with_http_info(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        defense_category: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashptteamdefend_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param defense_category: (required)
        :type defense_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashptteamdefend_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            defense_category=defense_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashptteamdefend_get_without_preload_content(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        defense_category: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashptteamdefend_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param defense_category: (required)
        :type defense_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashptteamdefend_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            defense_category=defense_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashptteamdefend_get_serialize(
        self,
        league_id,
        per_mode,
        season,
        season_type,
        defense_category,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if defense_category is not None:
            
            _query_params.append(('DefenseCategory', defense_category))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashptteamdefend',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashteamclutch_get(
        self,
        clutch_time: StrictStr,
        ahead_behind: StrictStr,
        point_diff: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashteamclutch_get


        :param clutch_time: (required)
        :type clutch_time: str
        :param ahead_behind: (required)
        :type ahead_behind: str
        :param point_diff: (required)
        :type point_diff: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamclutch_get_serialize(
            clutch_time=clutch_time,
            ahead_behind=ahead_behind,
            point_diff=point_diff,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashteamclutch_get_with_http_info(
        self,
        clutch_time: StrictStr,
        ahead_behind: StrictStr,
        point_diff: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashteamclutch_get


        :param clutch_time: (required)
        :type clutch_time: str
        :param ahead_behind: (required)
        :type ahead_behind: str
        :param point_diff: (required)
        :type point_diff: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamclutch_get_serialize(
            clutch_time=clutch_time,
            ahead_behind=ahead_behind,
            point_diff=point_diff,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashteamclutch_get_without_preload_content(
        self,
        clutch_time: StrictStr,
        ahead_behind: StrictStr,
        point_diff: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashteamclutch_get


        :param clutch_time: (required)
        :type clutch_time: str
        :param ahead_behind: (required)
        :type ahead_behind: str
        :param point_diff: (required)
        :type point_diff: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamclutch_get_serialize(
            clutch_time=clutch_time,
            ahead_behind=ahead_behind,
            point_diff=point_diff,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashteamclutch_get_serialize(
        self,
        clutch_time,
        ahead_behind,
        point_diff,
        game_scope,
        player_experience,
        player_position,
        starter_bench,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if clutch_time is not None:
            
            _query_params.append(('ClutchTime', clutch_time))
            
        if ahead_behind is not None:
            
            _query_params.append(('AheadBehind', ahead_behind))
            
        if point_diff is not None:
            
            _query_params.append(('PointDiff', point_diff))
            
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        if player_experience is not None:
            
            _query_params.append(('PlayerExperience', player_experience))
            
        if player_position is not None:
            
            _query_params.append(('PlayerPosition', player_position))
            
        if starter_bench is not None:
            
            _query_params.append(('StarterBench', starter_bench))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashteamclutch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashteamptshot_get(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashteamptshot_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamptshot_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashteamptshot_get_with_http_info(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashteamptshot_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamptshot_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashteamptshot_get_without_preload_content(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashteamptshot_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamptshot_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashteamptshot_get_serialize(
        self,
        league_id,
        per_mode,
        season,
        season_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashteamptshot',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashteamshotlocations_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        distance_range: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashteamshotlocations_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param distance_range: (required)
        :type distance_range: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamshotlocations_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            distance_range=distance_range,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashteamshotlocations_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        distance_range: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashteamshotlocations_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param distance_range: (required)
        :type distance_range: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamshotlocations_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            distance_range=distance_range,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashteamshotlocations_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        distance_range: StrictStr,
        game_scope: StrictStr,
        player_experience: StrictStr,
        player_position: StrictStr,
        starter_bench: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashteamshotlocations_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param distance_range: (required)
        :type distance_range: str
        :param game_scope: (required)
        :type game_scope: str
        :param player_experience: (required)
        :type player_experience: str
        :param player_position: (required)
        :type player_position: str
        :param starter_bench: (required)
        :type starter_bench: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamshotlocations_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            distance_range=distance_range,
            game_scope=game_scope,
            player_experience=player_experience,
            player_position=player_position,
            starter_bench=starter_bench,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashteamshotlocations_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        distance_range,
        game_scope,
        player_experience,
        player_position,
        starter_bench,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        if distance_range is not None:
            
            _query_params.append(('DistanceRange', distance_range))
            
        if game_scope is not None:
            
            _query_params.append(('GameScope', game_scope))
            
        if player_experience is not None:
            
            _query_params.append(('PlayerExperience', player_experience))
            
        if player_position is not None:
            
            _query_params.append(('PlayerPosition', player_position))
            
        if starter_bench is not None:
            
            _query_params.append(('StarterBench', starter_bench))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashteamshotlocations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leaguedashteamstats_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leaguedashteamstats_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamstats_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leaguedashteamstats_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leaguedashteamstats_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamstats_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leaguedashteamstats_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leaguedashteamstats_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leaguedashteamstats_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leaguedashteamstats_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leaguedashteamstats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def leagueleaders_get(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        scope: StrictStr,
        stat_category: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """leagueleaders_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param scope: (required)
        :type scope: str
        :param stat_category:
        :type stat_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leagueleaders_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            scope=scope,
            stat_category=stat_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def leagueleaders_get_with_http_info(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        scope: StrictStr,
        stat_category: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """leagueleaders_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param scope: (required)
        :type scope: str
        :param stat_category:
        :type stat_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leagueleaders_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            scope=scope,
            stat_category=stat_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def leagueleaders_get_without_preload_content(
        self,
        league_id: StrictStr,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        scope: StrictStr,
        stat_category: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """leagueleaders_get


        :param league_id: (required)
        :type league_id: str
        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param scope: (required)
        :type scope: str
        :param stat_category:
        :type stat_category: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._leagueleaders_get_serialize(
            league_id=league_id,
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            scope=scope,
            stat_category=stat_category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _leagueleaders_get_serialize(
        self,
        league_id,
        per_mode,
        season,
        season_type,
        scope,
        stat_category,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if stat_category is not None:
            
            _query_params.append(('StatCategory', stat_category))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if scope is not None:
            
            _query_params.append(('Scope', scope))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/leagueleaders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playbyplay_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playbyplay_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playbyplay_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playbyplay_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playbyplay_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playbyplay_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playbyplay_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playbyplay_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playbyplay_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playbyplay_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playbyplay',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playbyplayv2_get(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playbyplayv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playbyplayv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playbyplayv2_get_with_http_info(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playbyplayv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playbyplayv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playbyplayv2_get_without_preload_content(
        self,
        game_id: StrictStr,
        start_period: StrictStr,
        end_period: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playbyplayv2_get


        :param game_id: (required)
        :type game_id: str
        :param start_period: (required)
        :type start_period: str
        :param end_period: (required)
        :type end_period: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playbyplayv2_get_serialize(
            game_id=game_id,
            start_period=start_period,
            end_period=end_period,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playbyplayv2_get_serialize(
        self,
        game_id,
        start_period,
        end_period,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if start_period is not None:
            
            _query_params.append(('StartPeriod', start_period))
            
        if end_period is not None:
            
            _query_params.append(('EndPeriod', end_period))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playbyplayv2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playercareerstats_get(
        self,
        per_mode: StrictStr,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playercareerstats_get


        :param per_mode: (required)
        :type per_mode: str
        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playercareerstats_get_serialize(
            per_mode=per_mode,
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playercareerstats_get_with_http_info(
        self,
        per_mode: StrictStr,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playercareerstats_get


        :param per_mode: (required)
        :type per_mode: str
        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playercareerstats_get_serialize(
            per_mode=per_mode,
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playercareerstats_get_without_preload_content(
        self,
        per_mode: StrictStr,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playercareerstats_get


        :param per_mode: (required)
        :type per_mode: str
        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playercareerstats_get_serialize(
            per_mode=per_mode,
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playercareerstats_get_serialize(
        self,
        per_mode,
        player_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playercareerstats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playercompare_get(
        self,
        player_id_list: StrictStr,
        vs_player_id_list: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playercompare_get


        :param player_id_list: (required)
        :type player_id_list: str
        :param vs_player_id_list: (required)
        :type vs_player_id_list: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playercompare_get_serialize(
            player_id_list=player_id_list,
            vs_player_id_list=vs_player_id_list,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playercompare_get_with_http_info(
        self,
        player_id_list: StrictStr,
        vs_player_id_list: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playercompare_get


        :param player_id_list: (required)
        :type player_id_list: str
        :param vs_player_id_list: (required)
        :type vs_player_id_list: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playercompare_get_serialize(
            player_id_list=player_id_list,
            vs_player_id_list=vs_player_id_list,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playercompare_get_without_preload_content(
        self,
        player_id_list: StrictStr,
        vs_player_id_list: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playercompare_get


        :param player_id_list: (required)
        :type player_id_list: str
        :param vs_player_id_list: (required)
        :type vs_player_id_list: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playercompare_get_serialize(
            player_id_list=player_id_list,
            vs_player_id_list=vs_player_id_list,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playercompare_get_serialize(
        self,
        player_id_list,
        vs_player_id_list,
        season_type,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if player_id_list is not None:
            
            _query_params.append(('PlayerIDList', player_id_list))
            
        if vs_player_id_list is not None:
            
            _query_params.append(('VsPlayerIDList', vs_player_id_list))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playercompare',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbyclutch_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbyclutch_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyclutch_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbyclutch_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbyclutch_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyclutch_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbyclutch_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbyclutch_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyclutch_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbyclutch_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbyclutch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbygamesplits_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbygamesplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbygamesplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbygamesplits_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbygamesplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbygamesplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbygamesplits_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbygamesplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbygamesplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbygamesplits_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbygamesplits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbygeneralsplits_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbygeneralsplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbygeneralsplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbygeneralsplits_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbygeneralsplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbygeneralsplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbygeneralsplits_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbygeneralsplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbygeneralsplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbygeneralsplits_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbygeneralsplits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbylastngames_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbylastngames_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbylastngames_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbylastngames_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbylastngames_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbylastngames_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbylastngames_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbylastngames_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbylastngames_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbylastngames_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbylastngames',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbyopponent_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbyopponent_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyopponent_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbyopponent_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbyopponent_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyopponent_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbyopponent_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbyopponent_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyopponent_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbyopponent_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbyopponent',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbyshootingsplits_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbyshootingsplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyshootingsplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbyshootingsplits_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbyshootingsplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyshootingsplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbyshootingsplits_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbyshootingsplits_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyshootingsplits_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbyshootingsplits_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbyshootingsplits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbyteamperformance_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbyteamperformance_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyteamperformance_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbyteamperformance_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbyteamperformance_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyteamperformance_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbyteamperformance_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbyteamperformance_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyteamperformance_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbyteamperformance_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbyteamperformance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashboardbyyearoveryear_get(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashboardbyyearoveryear_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyyearoveryear_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashboardbyyearoveryear_get_with_http_info(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashboardbyyearoveryear_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyyearoveryear_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashboardbyyearoveryear_get_without_preload_content(
        self,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashboardbyyearoveryear_get


        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashboardbyyearoveryear_get_serialize(
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            player_id=player_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashboardbyyearoveryear_get_serialize(
        self,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        player_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashboardbyyearoveryear',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashptpass_get(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashptpass_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptpass_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashptpass_get_with_http_info(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashptpass_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptpass_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashptpass_get_without_preload_content(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashptpass_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptpass_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashptpass_get_serialize(
        self,
        per_mode,
        season,
        season_type,
        player_id,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashptpass',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashptreb_get(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashptreb_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptreb_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashptreb_get_with_http_info(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashptreb_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptreb_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashptreb_get_without_preload_content(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashptreb_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptreb_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashptreb_get_serialize(
        self,
        per_mode,
        season,
        season_type,
        player_id,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashptreb',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashptreboundlogs_get(
        self,
        season: Optional[StrictStr] = None,
        season_type: Optional[StrictStr] = None,
        player_id: Optional[StrictStr] = None,
        team_id: Optional[StrictStr] = None,
        outcome: Optional[StrictStr] = None,
        location: Optional[StrictStr] = None,
        month: Optional[StrictStr] = None,
        season_segment: Optional[StrictStr] = None,
        date_from: Optional[StrictStr] = None,
        date_to: Optional[StrictStr] = None,
        opponent_team_id: Optional[StrictStr] = None,
        vs_conference: Optional[StrictStr] = None,
        vs_division: Optional[StrictStr] = None,
        game_segment: Optional[StrictStr] = None,
        period: Optional[StrictStr] = None,
        last_n_games: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) playerdashptreboundlogs_get


        :param season:
        :type season: str
        :param season_type:
        :type season_type: str
        :param player_id:
        :type player_id: str
        :param team_id:
        :type team_id: str
        :param outcome:
        :type outcome: str
        :param location:
        :type location: str
        :param month:
        :type month: str
        :param season_segment:
        :type season_segment: str
        :param date_from:
        :type date_from: str
        :param date_to:
        :type date_to: str
        :param opponent_team_id:
        :type opponent_team_id: str
        :param vs_conference:
        :type vs_conference: str
        :param vs_division:
        :type vs_division: str
        :param game_segment:
        :type game_segment: str
        :param period:
        :type period: str
        :param last_n_games:
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /playerdashptreboundlogs is deprecated.", DeprecationWarning)

        _param = self._playerdashptreboundlogs_get_serialize(
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashptreboundlogs_get_with_http_info(
        self,
        season: Optional[StrictStr] = None,
        season_type: Optional[StrictStr] = None,
        player_id: Optional[StrictStr] = None,
        team_id: Optional[StrictStr] = None,
        outcome: Optional[StrictStr] = None,
        location: Optional[StrictStr] = None,
        month: Optional[StrictStr] = None,
        season_segment: Optional[StrictStr] = None,
        date_from: Optional[StrictStr] = None,
        date_to: Optional[StrictStr] = None,
        opponent_team_id: Optional[StrictStr] = None,
        vs_conference: Optional[StrictStr] = None,
        vs_division: Optional[StrictStr] = None,
        game_segment: Optional[StrictStr] = None,
        period: Optional[StrictStr] = None,
        last_n_games: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) playerdashptreboundlogs_get


        :param season:
        :type season: str
        :param season_type:
        :type season_type: str
        :param player_id:
        :type player_id: str
        :param team_id:
        :type team_id: str
        :param outcome:
        :type outcome: str
        :param location:
        :type location: str
        :param month:
        :type month: str
        :param season_segment:
        :type season_segment: str
        :param date_from:
        :type date_from: str
        :param date_to:
        :type date_to: str
        :param opponent_team_id:
        :type opponent_team_id: str
        :param vs_conference:
        :type vs_conference: str
        :param vs_division:
        :type vs_division: str
        :param game_segment:
        :type game_segment: str
        :param period:
        :type period: str
        :param last_n_games:
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /playerdashptreboundlogs is deprecated.", DeprecationWarning)

        _param = self._playerdashptreboundlogs_get_serialize(
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashptreboundlogs_get_without_preload_content(
        self,
        season: Optional[StrictStr] = None,
        season_type: Optional[StrictStr] = None,
        player_id: Optional[StrictStr] = None,
        team_id: Optional[StrictStr] = None,
        outcome: Optional[StrictStr] = None,
        location: Optional[StrictStr] = None,
        month: Optional[StrictStr] = None,
        season_segment: Optional[StrictStr] = None,
        date_from: Optional[StrictStr] = None,
        date_to: Optional[StrictStr] = None,
        opponent_team_id: Optional[StrictStr] = None,
        vs_conference: Optional[StrictStr] = None,
        vs_division: Optional[StrictStr] = None,
        game_segment: Optional[StrictStr] = None,
        period: Optional[StrictStr] = None,
        last_n_games: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) playerdashptreboundlogs_get


        :param season:
        :type season: str
        :param season_type:
        :type season_type: str
        :param player_id:
        :type player_id: str
        :param team_id:
        :type team_id: str
        :param outcome:
        :type outcome: str
        :param location:
        :type location: str
        :param month:
        :type month: str
        :param season_segment:
        :type season_segment: str
        :param date_from:
        :type date_from: str
        :param date_to:
        :type date_to: str
        :param opponent_team_id:
        :type opponent_team_id: str
        :param vs_conference:
        :type vs_conference: str
        :param vs_division:
        :type vs_division: str
        :param game_segment:
        :type game_segment: str
        :param period:
        :type period: str
        :param last_n_games:
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /playerdashptreboundlogs is deprecated.", DeprecationWarning)

        _param = self._playerdashptreboundlogs_get_serialize(
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashptreboundlogs_get_serialize(
        self,
        season,
        season_type,
        player_id,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashptreboundlogs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashptshotdefend_get(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashptshotdefend_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptshotdefend_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashptshotdefend_get_with_http_info(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashptshotdefend_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptshotdefend_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashptshotdefend_get_without_preload_content(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashptshotdefend_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptshotdefend_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashptshotdefend_get_serialize(
        self,
        per_mode,
        season,
        season_type,
        player_id,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashptshotdefend',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashptshotlog_get(
        self,
        league_id: Optional[StrictStr] = None,
        season: Optional[StrictStr] = None,
        season_type: Optional[StrictStr] = None,
        player_id: Optional[StrictStr] = None,
        team_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) playerdashptshotlog_get


        :param league_id:
        :type league_id: str
        :param season:
        :type season: str
        :param season_type:
        :type season_type: str
        :param player_id:
        :type player_id: str
        :param team_id:
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /playerdashptshotlog is deprecated.", DeprecationWarning)

        _param = self._playerdashptshotlog_get_serialize(
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashptshotlog_get_with_http_info(
        self,
        league_id: Optional[StrictStr] = None,
        season: Optional[StrictStr] = None,
        season_type: Optional[StrictStr] = None,
        player_id: Optional[StrictStr] = None,
        team_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) playerdashptshotlog_get


        :param league_id:
        :type league_id: str
        :param season:
        :type season: str
        :param season_type:
        :type season_type: str
        :param player_id:
        :type player_id: str
        :param team_id:
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /playerdashptshotlog is deprecated.", DeprecationWarning)

        _param = self._playerdashptshotlog_get_serialize(
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashptshotlog_get_without_preload_content(
        self,
        league_id: Optional[StrictStr] = None,
        season: Optional[StrictStr] = None,
        season_type: Optional[StrictStr] = None,
        player_id: Optional[StrictStr] = None,
        team_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) playerdashptshotlog_get


        :param league_id:
        :type league_id: str
        :param season:
        :type season: str
        :param season_type:
        :type season_type: str
        :param player_id:
        :type player_id: str
        :param team_id:
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /playerdashptshotlog is deprecated.", DeprecationWarning)

        _param = self._playerdashptshotlog_get_serialize(
            league_id=league_id,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashptshotlog_get_serialize(
        self,
        league_id,
        season,
        season_type,
        player_id,
        team_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashptshotlog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerdashptshots_get(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerdashptshots_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptshots_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerdashptshots_get_with_http_info(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerdashptshots_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptshots_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerdashptshots_get_without_preload_content(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        player_id: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerdashptshots_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param player_id: (required)
        :type player_id: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerdashptshots_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            player_id=player_id,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerdashptshots_get_serialize(
        self,
        per_mode,
        season,
        season_type,
        player_id,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerdashptshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playergamelog_get(
        self,
        player_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playergamelog_get


        :param player_id: (required)
        :type player_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playergamelog_get_serialize(
            player_id=player_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playergamelog_get_with_http_info(
        self,
        player_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playergamelog_get


        :param player_id: (required)
        :type player_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playergamelog_get_serialize(
            player_id=player_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playergamelog_get_without_preload_content(
        self,
        player_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playergamelog_get


        :param player_id: (required)
        :type player_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playergamelog_get_serialize(
            player_id=player_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playergamelog_get_serialize(
        self,
        player_id,
        season,
        season_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playergamelog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerprofile_get(
        self,
        league_id: StrictStr,
        player_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        graph_start_season: StrictStr,
        graph_end_season: StrictStr,
        graph_stat: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerprofile_get


        :param league_id: (required)
        :type league_id: str
        :param player_id: (required)
        :type player_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param graph_start_season: (required)
        :type graph_start_season: str
        :param graph_end_season: (required)
        :type graph_end_season: str
        :param graph_stat: (required)
        :type graph_stat: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerprofile_get_serialize(
            league_id=league_id,
            player_id=player_id,
            season=season,
            season_type=season_type,
            graph_start_season=graph_start_season,
            graph_end_season=graph_end_season,
            graph_stat=graph_stat,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerprofile_get_with_http_info(
        self,
        league_id: StrictStr,
        player_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        graph_start_season: StrictStr,
        graph_end_season: StrictStr,
        graph_stat: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerprofile_get


        :param league_id: (required)
        :type league_id: str
        :param player_id: (required)
        :type player_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param graph_start_season: (required)
        :type graph_start_season: str
        :param graph_end_season: (required)
        :type graph_end_season: str
        :param graph_stat: (required)
        :type graph_stat: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerprofile_get_serialize(
            league_id=league_id,
            player_id=player_id,
            season=season,
            season_type=season_type,
            graph_start_season=graph_start_season,
            graph_end_season=graph_end_season,
            graph_stat=graph_stat,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerprofile_get_without_preload_content(
        self,
        league_id: StrictStr,
        player_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        graph_start_season: StrictStr,
        graph_end_season: StrictStr,
        graph_stat: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerprofile_get


        :param league_id: (required)
        :type league_id: str
        :param player_id: (required)
        :type player_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param graph_start_season: (required)
        :type graph_start_season: str
        :param graph_end_season: (required)
        :type graph_end_season: str
        :param graph_stat: (required)
        :type graph_stat: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerprofile_get_serialize(
            league_id=league_id,
            player_id=player_id,
            season=season,
            season_type=season_type,
            graph_start_season=graph_start_season,
            graph_end_season=graph_end_season,
            graph_stat=graph_stat,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerprofile_get_serialize(
        self,
        league_id,
        player_id,
        season,
        season_type,
        graph_start_season,
        graph_end_season,
        graph_stat,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if graph_start_season is not None:
            
            _query_params.append(('GraphStartSeason', graph_start_season))
            
        if graph_end_season is not None:
            
            _query_params.append(('GraphEndSeason', graph_end_season))
            
        if graph_stat is not None:
            
            _query_params.append(('GraphStat', graph_stat))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerprofile',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playerprofilev2_get(
        self,
        per_mode: StrictStr,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playerprofilev2_get


        :param per_mode: (required)
        :type per_mode: str
        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerprofilev2_get_serialize(
            per_mode=per_mode,
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playerprofilev2_get_with_http_info(
        self,
        per_mode: StrictStr,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playerprofilev2_get


        :param per_mode: (required)
        :type per_mode: str
        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerprofilev2_get_serialize(
            per_mode=per_mode,
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playerprofilev2_get_without_preload_content(
        self,
        per_mode: StrictStr,
        player_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playerprofilev2_get


        :param per_mode: (required)
        :type per_mode: str
        :param player_id: (required)
        :type player_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playerprofilev2_get_serialize(
            per_mode=per_mode,
            player_id=player_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playerprofilev2_get_serialize(
        self,
        per_mode,
        player_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playerprofilev2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playersvsplayers_get(
        self,
        player_team_id: StrictStr,
        player_id1: StrictStr,
        player_id2: StrictStr,
        player_id3: StrictStr,
        player_id4: StrictStr,
        player_id5: StrictStr,
        vs_team_id: StrictStr,
        vs_player_id1: StrictStr,
        vs_player_id2: StrictStr,
        vs_player_id3: StrictStr,
        vs_player_id4: StrictStr,
        vs_player_id5: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playersvsplayers_get


        :param player_team_id: (required)
        :type player_team_id: str
        :param player_id1: (required)
        :type player_id1: str
        :param player_id2: (required)
        :type player_id2: str
        :param player_id3: (required)
        :type player_id3: str
        :param player_id4: (required)
        :type player_id4: str
        :param player_id5: (required)
        :type player_id5: str
        :param vs_team_id: (required)
        :type vs_team_id: str
        :param vs_player_id1: (required)
        :type vs_player_id1: str
        :param vs_player_id2: (required)
        :type vs_player_id2: str
        :param vs_player_id3: (required)
        :type vs_player_id3: str
        :param vs_player_id4: (required)
        :type vs_player_id4: str
        :param vs_player_id5: (required)
        :type vs_player_id5: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playersvsplayers_get_serialize(
            player_team_id=player_team_id,
            player_id1=player_id1,
            player_id2=player_id2,
            player_id3=player_id3,
            player_id4=player_id4,
            player_id5=player_id5,
            vs_team_id=vs_team_id,
            vs_player_id1=vs_player_id1,
            vs_player_id2=vs_player_id2,
            vs_player_id3=vs_player_id3,
            vs_player_id4=vs_player_id4,
            vs_player_id5=vs_player_id5,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playersvsplayers_get_with_http_info(
        self,
        player_team_id: StrictStr,
        player_id1: StrictStr,
        player_id2: StrictStr,
        player_id3: StrictStr,
        player_id4: StrictStr,
        player_id5: StrictStr,
        vs_team_id: StrictStr,
        vs_player_id1: StrictStr,
        vs_player_id2: StrictStr,
        vs_player_id3: StrictStr,
        vs_player_id4: StrictStr,
        vs_player_id5: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playersvsplayers_get


        :param player_team_id: (required)
        :type player_team_id: str
        :param player_id1: (required)
        :type player_id1: str
        :param player_id2: (required)
        :type player_id2: str
        :param player_id3: (required)
        :type player_id3: str
        :param player_id4: (required)
        :type player_id4: str
        :param player_id5: (required)
        :type player_id5: str
        :param vs_team_id: (required)
        :type vs_team_id: str
        :param vs_player_id1: (required)
        :type vs_player_id1: str
        :param vs_player_id2: (required)
        :type vs_player_id2: str
        :param vs_player_id3: (required)
        :type vs_player_id3: str
        :param vs_player_id4: (required)
        :type vs_player_id4: str
        :param vs_player_id5: (required)
        :type vs_player_id5: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playersvsplayers_get_serialize(
            player_team_id=player_team_id,
            player_id1=player_id1,
            player_id2=player_id2,
            player_id3=player_id3,
            player_id4=player_id4,
            player_id5=player_id5,
            vs_team_id=vs_team_id,
            vs_player_id1=vs_player_id1,
            vs_player_id2=vs_player_id2,
            vs_player_id3=vs_player_id3,
            vs_player_id4=vs_player_id4,
            vs_player_id5=vs_player_id5,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playersvsplayers_get_without_preload_content(
        self,
        player_team_id: StrictStr,
        player_id1: StrictStr,
        player_id2: StrictStr,
        player_id3: StrictStr,
        player_id4: StrictStr,
        player_id5: StrictStr,
        vs_team_id: StrictStr,
        vs_player_id1: StrictStr,
        vs_player_id2: StrictStr,
        vs_player_id3: StrictStr,
        vs_player_id4: StrictStr,
        vs_player_id5: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playersvsplayers_get


        :param player_team_id: (required)
        :type player_team_id: str
        :param player_id1: (required)
        :type player_id1: str
        :param player_id2: (required)
        :type player_id2: str
        :param player_id3: (required)
        :type player_id3: str
        :param player_id4: (required)
        :type player_id4: str
        :param player_id5: (required)
        :type player_id5: str
        :param vs_team_id: (required)
        :type vs_team_id: str
        :param vs_player_id1: (required)
        :type vs_player_id1: str
        :param vs_player_id2: (required)
        :type vs_player_id2: str
        :param vs_player_id3: (required)
        :type vs_player_id3: str
        :param vs_player_id4: (required)
        :type vs_player_id4: str
        :param vs_player_id5: (required)
        :type vs_player_id5: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playersvsplayers_get_serialize(
            player_team_id=player_team_id,
            player_id1=player_id1,
            player_id2=player_id2,
            player_id3=player_id3,
            player_id4=player_id4,
            player_id5=player_id5,
            vs_team_id=vs_team_id,
            vs_player_id1=vs_player_id1,
            vs_player_id2=vs_player_id2,
            vs_player_id3=vs_player_id3,
            vs_player_id4=vs_player_id4,
            vs_player_id5=vs_player_id5,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playersvsplayers_get_serialize(
        self,
        player_team_id,
        player_id1,
        player_id2,
        player_id3,
        player_id4,
        player_id5,
        vs_team_id,
        vs_player_id1,
        vs_player_id2,
        vs_player_id3,
        vs_player_id4,
        vs_player_id5,
        season_type,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if player_team_id is not None:
            
            _query_params.append(('PlayerTeamID', player_team_id))
            
        if player_id1 is not None:
            
            _query_params.append(('PlayerID1', player_id1))
            
        if player_id2 is not None:
            
            _query_params.append(('PlayerID2', player_id2))
            
        if player_id3 is not None:
            
            _query_params.append(('PlayerID3', player_id3))
            
        if player_id4 is not None:
            
            _query_params.append(('PlayerID4', player_id4))
            
        if player_id5 is not None:
            
            _query_params.append(('PlayerID5', player_id5))
            
        if vs_team_id is not None:
            
            _query_params.append(('VsTeamID', vs_team_id))
            
        if vs_player_id1 is not None:
            
            _query_params.append(('VsPlayerID1', vs_player_id1))
            
        if vs_player_id2 is not None:
            
            _query_params.append(('VsPlayerID2', vs_player_id2))
            
        if vs_player_id3 is not None:
            
            _query_params.append(('VsPlayerID3', vs_player_id3))
            
        if vs_player_id4 is not None:
            
            _query_params.append(('VsPlayerID4', vs_player_id4))
            
        if vs_player_id5 is not None:
            
            _query_params.append(('VsPlayerID5', vs_player_id5))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playersvsplayers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playervsplayer_get(
        self,
        player_id: StrictStr,
        vs_player_id: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playervsplayer_get


        :param player_id: (required)
        :type player_id: str
        :param vs_player_id: (required)
        :type vs_player_id: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playervsplayer_get_serialize(
            player_id=player_id,
            vs_player_id=vs_player_id,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playervsplayer_get_with_http_info(
        self,
        player_id: StrictStr,
        vs_player_id: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playervsplayer_get


        :param player_id: (required)
        :type player_id: str
        :param vs_player_id: (required)
        :type vs_player_id: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playervsplayer_get_serialize(
            player_id=player_id,
            vs_player_id=vs_player_id,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playervsplayer_get_without_preload_content(
        self,
        player_id: StrictStr,
        vs_player_id: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playervsplayer_get


        :param player_id: (required)
        :type player_id: str
        :param vs_player_id: (required)
        :type vs_player_id: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playervsplayer_get_serialize(
            player_id=player_id,
            vs_player_id=vs_player_id,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playervsplayer_get_serialize(
        self,
        player_id,
        vs_player_id,
        season_type,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if vs_player_id is not None:
            
            _query_params.append(('VsPlayerID', vs_player_id))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playervsplayer',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def playoffpicture_get(
        self,
        league_id: StrictStr,
        season_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """playoffpicture_get


        :param league_id: (required)
        :type league_id: str
        :param season_id: (required)
        :type season_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playoffpicture_get_serialize(
            league_id=league_id,
            season_id=season_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def playoffpicture_get_with_http_info(
        self,
        league_id: StrictStr,
        season_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """playoffpicture_get


        :param league_id: (required)
        :type league_id: str
        :param season_id: (required)
        :type season_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playoffpicture_get_serialize(
            league_id=league_id,
            season_id=season_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def playoffpicture_get_without_preload_content(
        self,
        league_id: StrictStr,
        season_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """playoffpicture_get


        :param league_id: (required)
        :type league_id: str
        :param season_id: (required)
        :type season_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._playoffpicture_get_serialize(
            league_id=league_id,
            season_id=season_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _playoffpicture_get_serialize(
        self,
        league_id,
        season_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_id is not None:
            
            _query_params.append(('SeasonID', season_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/playoffpicture',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def scoreboard_get(
        self,
        game_date: StrictStr,
        league_id: StrictStr,
        day_offset: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """scoreboard_get


        :param game_date: (required)
        :type game_date: str
        :param league_id: (required)
        :type league_id: str
        :param day_offset: (required)
        :type day_offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scoreboard_get_serialize(
            game_date=game_date,
            league_id=league_id,
            day_offset=day_offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def scoreboard_get_with_http_info(
        self,
        game_date: StrictStr,
        league_id: StrictStr,
        day_offset: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """scoreboard_get


        :param game_date: (required)
        :type game_date: str
        :param league_id: (required)
        :type league_id: str
        :param day_offset: (required)
        :type day_offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scoreboard_get_serialize(
            game_date=game_date,
            league_id=league_id,
            day_offset=day_offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def scoreboard_get_without_preload_content(
        self,
        game_date: StrictStr,
        league_id: StrictStr,
        day_offset: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """scoreboard_get


        :param game_date: (required)
        :type game_date: str
        :param league_id: (required)
        :type league_id: str
        :param day_offset: (required)
        :type day_offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scoreboard_get_serialize(
            game_date=game_date,
            league_id=league_id,
            day_offset=day_offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _scoreboard_get_serialize(
        self,
        game_date,
        league_id,
        day_offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_date is not None:
            
            _query_params.append(('GameDate', game_date))
            
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if day_offset is not None:
            
            _query_params.append(('DayOffset', day_offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/scoreboard',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def scoreboard_v2_get(
        self,
        game_date: StrictStr,
        league_id: StrictStr,
        day_offset: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """scoreboard_v2_get


        :param game_date: (required)
        :type game_date: str
        :param league_id: (required)
        :type league_id: str
        :param day_offset: (required)
        :type day_offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scoreboard_v2_get_serialize(
            game_date=game_date,
            league_id=league_id,
            day_offset=day_offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def scoreboard_v2_get_with_http_info(
        self,
        game_date: StrictStr,
        league_id: StrictStr,
        day_offset: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """scoreboard_v2_get


        :param game_date: (required)
        :type game_date: str
        :param league_id: (required)
        :type league_id: str
        :param day_offset: (required)
        :type day_offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scoreboard_v2_get_serialize(
            game_date=game_date,
            league_id=league_id,
            day_offset=day_offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def scoreboard_v2_get_without_preload_content(
        self,
        game_date: StrictStr,
        league_id: StrictStr,
        day_offset: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """scoreboard_v2_get


        :param game_date: (required)
        :type game_date: str
        :param league_id: (required)
        :type league_id: str
        :param day_offset: (required)
        :type day_offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._scoreboard_v2_get_serialize(
            game_date=game_date,
            league_id=league_id,
            day_offset=day_offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _scoreboard_v2_get_serialize(
        self,
        game_date,
        league_id,
        day_offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if game_date is not None:
            
            _query_params.append(('GameDate', game_date))
            
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if day_offset is not None:
            
            _query_params.append(('DayOffset', day_offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/scoreboardV2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def shotchartdetail_get(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        player_id: StrictStr,
        game_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        position: StrictStr,
        rookie_year: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        context_measure: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """shotchartdetail_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param player_id: (required)
        :type player_id: str
        :param game_id: (required)
        :type game_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param position: (required)
        :type position: str
        :param rookie_year: (required)
        :type rookie_year: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param context_measure: (required)
        :type context_measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._shotchartdetail_get_serialize(
            season_type=season_type,
            team_id=team_id,
            player_id=player_id,
            game_id=game_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            position=position,
            rookie_year=rookie_year,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            context_measure=context_measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def shotchartdetail_get_with_http_info(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        player_id: StrictStr,
        game_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        position: StrictStr,
        rookie_year: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        context_measure: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """shotchartdetail_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param player_id: (required)
        :type player_id: str
        :param game_id: (required)
        :type game_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param position: (required)
        :type position: str
        :param rookie_year: (required)
        :type rookie_year: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param context_measure: (required)
        :type context_measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._shotchartdetail_get_serialize(
            season_type=season_type,
            team_id=team_id,
            player_id=player_id,
            game_id=game_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            position=position,
            rookie_year=rookie_year,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            context_measure=context_measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def shotchartdetail_get_without_preload_content(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        player_id: StrictStr,
        game_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        position: StrictStr,
        rookie_year: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        context_measure: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """shotchartdetail_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param player_id: (required)
        :type player_id: str
        :param game_id: (required)
        :type game_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param position: (required)
        :type position: str
        :param rookie_year: (required)
        :type rookie_year: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param context_measure: (required)
        :type context_measure: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._shotchartdetail_get_serialize(
            season_type=season_type,
            team_id=team_id,
            player_id=player_id,
            game_id=game_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            position=position,
            rookie_year=rookie_year,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            context_measure=context_measure,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _shotchartdetail_get_serialize(
        self,
        season_type,
        team_id,
        player_id,
        game_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        position,
        rookie_year,
        game_segment,
        period,
        last_n_games,
        context_measure,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if player_id is not None:
            
            _query_params.append(('PlayerID', player_id))
            
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if position is not None:
            
            _query_params.append(('Position', position))
            
        if rookie_year is not None:
            
            _query_params.append(('RookieYear', rookie_year))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        if context_measure is not None:
            
            _query_params.append(('ContextMeasure', context_measure))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/shotchartdetail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def shotchartlineupdetail_get(
        self,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        game_id: StrictStr,
        group_id: StrictStr,
        context_measure: StrictStr,
        context_filter: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """shotchartlineupdetail_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param game_id: (required)
        :type game_id: str
        :param group_id: (required)
        :type group_id: str
        :param context_measure: (required)
        :type context_measure: str
        :param context_filter: (required)
        :type context_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._shotchartlineupdetail_get_serialize(
            league_id=league_id,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            game_id=game_id,
            group_id=group_id,
            context_measure=context_measure,
            context_filter=context_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def shotchartlineupdetail_get_with_http_info(
        self,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        game_id: StrictStr,
        group_id: StrictStr,
        context_measure: StrictStr,
        context_filter: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """shotchartlineupdetail_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param game_id: (required)
        :type game_id: str
        :param group_id: (required)
        :type group_id: str
        :param context_measure: (required)
        :type context_measure: str
        :param context_filter: (required)
        :type context_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._shotchartlineupdetail_get_serialize(
            league_id=league_id,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            game_id=game_id,
            group_id=group_id,
            context_measure=context_measure,
            context_filter=context_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def shotchartlineupdetail_get_without_preload_content(
        self,
        league_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        game_id: StrictStr,
        group_id: StrictStr,
        context_measure: StrictStr,
        context_filter: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """shotchartlineupdetail_get


        :param league_id: (required)
        :type league_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param game_id: (required)
        :type game_id: str
        :param group_id: (required)
        :type group_id: str
        :param context_measure: (required)
        :type context_measure: str
        :param context_filter: (required)
        :type context_filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._shotchartlineupdetail_get_serialize(
            league_id=league_id,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            game_id=game_id,
            group_id=group_id,
            context_measure=context_measure,
            context_filter=context_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _shotchartlineupdetail_get_serialize(
        self,
        league_id,
        season,
        season_type,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        game_id,
        group_id,
        context_measure,
        context_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if group_id is not None:
            
            _query_params.append(('GROUP_ID', group_id))
            
        if context_measure is not None:
            
            _query_params.append(('ContextMeasure', context_measure))
            
        if context_filter is not None:
            
            _query_params.append(('ContextFilter', context_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/shotchartlineupdetail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbyclutch_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbyclutch_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyclutch_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbyclutch_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbyclutch_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyclutch_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbyclutch_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbyclutch_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyclutch_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbyclutch_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbyclutch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbygamesplits_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbygamesplits_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbygamesplits_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbygamesplits_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbygamesplits_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbygamesplits_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbygamesplits_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbygamesplits_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbygamesplits_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbygamesplits_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbygamesplits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbygeneralsplits_get(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbygeneralsplits_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbygeneralsplits_get_serialize(
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbygeneralsplits_get_with_http_info(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbygeneralsplits_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbygeneralsplits_get_serialize(
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbygeneralsplits_get_without_preload_content(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbygeneralsplits_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbygeneralsplits_get_serialize(
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbygeneralsplits_get_serialize(
        self,
        season_type,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbygeneralsplits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbylastngames_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbylastngames_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbylastngames_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbylastngames_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbylastngames_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbylastngames_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbylastngames_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbylastngames_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbylastngames_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbylastngames_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbylastngames',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbyopponent_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbyopponent_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyopponent_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbyopponent_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbyopponent_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyopponent_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbyopponent_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbyopponent_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyopponent_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbyopponent_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbyopponent',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbyshootingsplits_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbyshootingsplits_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyshootingsplits_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbyshootingsplits_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbyshootingsplits_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyshootingsplits_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbyshootingsplits_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbyshootingsplits_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyshootingsplits_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbyshootingsplits_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbyshootingsplits',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbyteamperformance_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbyteamperformance_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyteamperformance_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbyteamperformance_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbyteamperformance_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyteamperformance_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbyteamperformance_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbyteamperformance_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyteamperformance_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbyteamperformance_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbyteamperformance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashboardbyyearoveryear_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashboardbyyearoveryear_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyyearoveryear_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashboardbyyearoveryear_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashboardbyyearoveryear_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyyearoveryear_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashboardbyyearoveryear_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashboardbyyearoveryear_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashboardbyyearoveryear_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashboardbyyearoveryear_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashboardbyyearoveryear',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashlineups_get(
        self,
        group_quantity: StrictStr,
        game_id: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashlineups_get


        :param group_quantity: (required)
        :type group_quantity: str
        :param game_id: (required)
        :type game_id: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashlineups_get_serialize(
            group_quantity=group_quantity,
            game_id=game_id,
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashlineups_get_with_http_info(
        self,
        group_quantity: StrictStr,
        game_id: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashlineups_get


        :param group_quantity: (required)
        :type group_quantity: str
        :param game_id: (required)
        :type game_id: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashlineups_get_serialize(
            group_quantity=group_quantity,
            game_id=game_id,
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashlineups_get_without_preload_content(
        self,
        group_quantity: StrictStr,
        game_id: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashlineups_get


        :param group_quantity: (required)
        :type group_quantity: str
        :param game_id: (required)
        :type game_id: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashlineups_get_serialize(
            group_quantity=group_quantity,
            game_id=game_id,
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashlineups_get_serialize(
        self,
        group_quantity,
        game_id,
        season_type,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if group_quantity is not None:
            
            _query_params.append(('GroupQuantity', group_quantity))
            
        if game_id is not None:
            
            _query_params.append(('GameID', game_id))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashlineups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashptpass_get(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashptpass_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptpass_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashptpass_get_with_http_info(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashptpass_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptpass_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashptpass_get_without_preload_content(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashptpass_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptpass_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashptpass_get_serialize(
        self,
        per_mode,
        season,
        season_type,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashptpass',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashptreb_get(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashptreb_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptreb_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashptreb_get_with_http_info(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashptreb_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptreb_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashptreb_get_without_preload_content(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashptreb_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptreb_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashptreb_get_serialize(
        self,
        per_mode,
        season,
        season_type,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashptreb',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamdashptshots_get(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamdashptshots_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptshots_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamdashptshots_get_with_http_info(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamdashptshots_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptshots_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamdashptshots_get_without_preload_content(
        self,
        per_mode: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        team_id: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamdashptshots_get


        :param per_mode: (required)
        :type per_mode: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamdashptshots_get_serialize(
            per_mode=per_mode,
            season=season,
            season_type=season_type,
            team_id=team_id,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamdashptshots_get_serialize(
        self,
        per_mode,
        season,
        season_type,
        team_id,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamdashptshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamgamelog_get(
        self,
        team_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamgamelog_get


        :param team_id: (required)
        :type team_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamgamelog_get_serialize(
            team_id=team_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamgamelog_get_with_http_info(
        self,
        team_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamgamelog_get


        :param team_id: (required)
        :type team_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamgamelog_get_serialize(
            team_id=team_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamgamelog_get_without_preload_content(
        self,
        team_id: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamgamelog_get


        :param team_id: (required)
        :type team_id: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamgamelog_get_serialize(
            team_id=team_id,
            season=season,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamgamelog_get_serialize(
        self,
        team_id,
        season,
        season_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamgamelog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teaminfocommon_get(
        self,
        season: StrictStr,
        team_id: StrictStr,
        league_id: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teaminfocommon_get


        :param season: (required)
        :type season: str
        :param team_id: (required)
        :type team_id: str
        :param league_id: (required)
        :type league_id: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teaminfocommon_get_serialize(
            season=season,
            team_id=team_id,
            league_id=league_id,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teaminfocommon_get_with_http_info(
        self,
        season: StrictStr,
        team_id: StrictStr,
        league_id: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teaminfocommon_get


        :param season: (required)
        :type season: str
        :param team_id: (required)
        :type team_id: str
        :param league_id: (required)
        :type league_id: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teaminfocommon_get_serialize(
            season=season,
            team_id=team_id,
            league_id=league_id,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teaminfocommon_get_without_preload_content(
        self,
        season: StrictStr,
        team_id: StrictStr,
        league_id: StrictStr,
        season_type: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teaminfocommon_get


        :param season: (required)
        :type season: str
        :param team_id: (required)
        :type team_id: str
        :param league_id: (required)
        :type league_id: str
        :param season_type: (required)
        :type season_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teaminfocommon_get_serialize(
            season=season,
            team_id=team_id,
            league_id=league_id,
            season_type=season_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teaminfocommon_get_serialize(
        self,
        season,
        team_id,
        league_id,
        season_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teaminfocommon',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamplayerdashboard_get(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamplayerdashboard_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayerdashboard_get_serialize(
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamplayerdashboard_get_with_http_info(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamplayerdashboard_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayerdashboard_get_serialize(
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamplayerdashboard_get_without_preload_content(
        self,
        season_type: StrictStr,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamplayerdashboard_get


        :param season_type: (required)
        :type season_type: str
        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayerdashboard_get_serialize(
            season_type=season_type,
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamplayerdashboard_get_serialize(
        self,
        season_type,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamplayerdashboard',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamplayeronoffdetails_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamplayeronoffdetails_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayeronoffdetails_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamplayeronoffdetails_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamplayeronoffdetails_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayeronoffdetails_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamplayeronoffdetails_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamplayeronoffdetails_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayeronoffdetails_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamplayeronoffdetails_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamplayeronoffdetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamplayeronoffsummary_get(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamplayeronoffsummary_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayeronoffsummary_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamplayeronoffsummary_get_with_http_info(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamplayeronoffsummary_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayeronoffsummary_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamplayeronoffsummary_get_without_preload_content(
        self,
        team_id: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        season_type: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamplayeronoffsummary_get


        :param team_id: (required)
        :type team_id: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param season_type: (required)
        :type season_type: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamplayeronoffsummary_get_serialize(
            team_id=team_id,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            season_type=season_type,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamplayeronoffsummary_get_serialize(
        self,
        team_id,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        season_type,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamplayeronoffsummary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamvsplayer_get(
        self,
        team_id: StrictStr,
        vs_player_id: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamvsplayer_get


        :param team_id: (required)
        :type team_id: str
        :param vs_player_id: (required)
        :type vs_player_id: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamvsplayer_get_serialize(
            team_id=team_id,
            vs_player_id=vs_player_id,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamvsplayer_get_with_http_info(
        self,
        team_id: StrictStr,
        vs_player_id: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamvsplayer_get


        :param team_id: (required)
        :type team_id: str
        :param vs_player_id: (required)
        :type vs_player_id: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamvsplayer_get_serialize(
            team_id=team_id,
            vs_player_id=vs_player_id,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamvsplayer_get_without_preload_content(
        self,
        team_id: StrictStr,
        vs_player_id: StrictStr,
        season_type: StrictStr,
        measure_type: StrictStr,
        per_mode: StrictStr,
        plus_minus: StrictStr,
        pace_adjust: StrictStr,
        rank: StrictStr,
        season: StrictStr,
        outcome: StrictStr,
        location: StrictStr,
        month: StrictStr,
        season_segment: StrictStr,
        date_from: StrictStr,
        date_to: StrictStr,
        opponent_team_id: StrictStr,
        vs_conference: StrictStr,
        vs_division: StrictStr,
        game_segment: StrictStr,
        period: StrictStr,
        last_n_games: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamvsplayer_get


        :param team_id: (required)
        :type team_id: str
        :param vs_player_id: (required)
        :type vs_player_id: str
        :param season_type: (required)
        :type season_type: str
        :param measure_type: (required)
        :type measure_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param plus_minus: (required)
        :type plus_minus: str
        :param pace_adjust: (required)
        :type pace_adjust: str
        :param rank: (required)
        :type rank: str
        :param season: (required)
        :type season: str
        :param outcome: (required)
        :type outcome: str
        :param location: (required)
        :type location: str
        :param month: (required)
        :type month: str
        :param season_segment: (required)
        :type season_segment: str
        :param date_from: (required)
        :type date_from: str
        :param date_to: (required)
        :type date_to: str
        :param opponent_team_id: (required)
        :type opponent_team_id: str
        :param vs_conference: (required)
        :type vs_conference: str
        :param vs_division: (required)
        :type vs_division: str
        :param game_segment: (required)
        :type game_segment: str
        :param period: (required)
        :type period: str
        :param last_n_games: (required)
        :type last_n_games: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamvsplayer_get_serialize(
            team_id=team_id,
            vs_player_id=vs_player_id,
            season_type=season_type,
            measure_type=measure_type,
            per_mode=per_mode,
            plus_minus=plus_minus,
            pace_adjust=pace_adjust,
            rank=rank,
            season=season,
            outcome=outcome,
            location=location,
            month=month,
            season_segment=season_segment,
            date_from=date_from,
            date_to=date_to,
            opponent_team_id=opponent_team_id,
            vs_conference=vs_conference,
            vs_division=vs_division,
            game_segment=game_segment,
            period=period,
            last_n_games=last_n_games,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamvsplayer_get_serialize(
        self,
        team_id,
        vs_player_id,
        season_type,
        measure_type,
        per_mode,
        plus_minus,
        pace_adjust,
        rank,
        season,
        outcome,
        location,
        month,
        season_segment,
        date_from,
        date_to,
        opponent_team_id,
        vs_conference,
        vs_division,
        game_segment,
        period,
        last_n_games,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        if vs_player_id is not None:
            
            _query_params.append(('VsPlayerID', vs_player_id))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if measure_type is not None:
            
            _query_params.append(('MeasureType', measure_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if plus_minus is not None:
            
            _query_params.append(('PlusMinus', plus_minus))
            
        if pace_adjust is not None:
            
            _query_params.append(('PaceAdjust', pace_adjust))
            
        if rank is not None:
            
            _query_params.append(('Rank', rank))
            
        if season is not None:
            
            _query_params.append(('Season', season))
            
        if outcome is not None:
            
            _query_params.append(('Outcome', outcome))
            
        if location is not None:
            
            _query_params.append(('Location', location))
            
        if month is not None:
            
            _query_params.append(('Month', month))
            
        if season_segment is not None:
            
            _query_params.append(('SeasonSegment', season_segment))
            
        if date_from is not None:
            
            _query_params.append(('DateFrom', date_from))
            
        if date_to is not None:
            
            _query_params.append(('DateTo', date_to))
            
        if opponent_team_id is not None:
            
            _query_params.append(('OpponentTeamID', opponent_team_id))
            
        if vs_conference is not None:
            
            _query_params.append(('VsConference', vs_conference))
            
        if vs_division is not None:
            
            _query_params.append(('VsDivision', vs_division))
            
        if game_segment is not None:
            
            _query_params.append(('GameSegment', game_segment))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if last_n_games is not None:
            
            _query_params.append(('LastNGames', last_n_games))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamvsplayer',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def teamyearbyyearstats_get(
        self,
        league_id: StrictStr,
        season_type: StrictStr,
        per_mode: StrictStr,
        team_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """teamyearbyyearstats_get


        :param league_id: (required)
        :type league_id: str
        :param season_type: (required)
        :type season_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param team_id: (required)
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamyearbyyearstats_get_serialize(
            league_id=league_id,
            season_type=season_type,
            per_mode=per_mode,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def teamyearbyyearstats_get_with_http_info(
        self,
        league_id: StrictStr,
        season_type: StrictStr,
        per_mode: StrictStr,
        team_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """teamyearbyyearstats_get


        :param league_id: (required)
        :type league_id: str
        :param season_type: (required)
        :type season_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param team_id: (required)
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamyearbyyearstats_get_serialize(
            league_id=league_id,
            season_type=season_type,
            per_mode=per_mode,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def teamyearbyyearstats_get_without_preload_content(
        self,
        league_id: StrictStr,
        season_type: StrictStr,
        per_mode: StrictStr,
        team_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """teamyearbyyearstats_get


        :param league_id: (required)
        :type league_id: str
        :param season_type: (required)
        :type season_type: str
        :param per_mode: (required)
        :type per_mode: str
        :param team_id: (required)
        :type team_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._teamyearbyyearstats_get_serialize(
            league_id=league_id,
            season_type=season_type,
            per_mode=per_mode,
            team_id=team_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _teamyearbyyearstats_get_serialize(
        self,
        league_id,
        season_type,
        per_mode,
        team_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if season_type is not None:
            
            _query_params.append(('SeasonType', season_type))
            
        if per_mode is not None:
            
            _query_params.append(('PerMode', per_mode))
            
        if team_id is not None:
            
            _query_params.append(('TeamID', team_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/teamyearbyyearstats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def video_status_get(
        self,
        league_id: StrictStr,
        game_date: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """video_status_get


        :param league_id: (required)
        :type league_id: str
        :param game_date: (required)
        :type game_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._video_status_get_serialize(
            league_id=league_id,
            game_date=game_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def video_status_get_with_http_info(
        self,
        league_id: StrictStr,
        game_date: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """video_status_get


        :param league_id: (required)
        :type league_id: str
        :param game_date: (required)
        :type game_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._video_status_get_serialize(
            league_id=league_id,
            game_date=game_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def video_status_get_without_preload_content(
        self,
        league_id: StrictStr,
        game_date: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """video_status_get


        :param league_id: (required)
        :type league_id: str
        :param game_date: (required)
        :type game_date: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._video_status_get_serialize(
            league_id=league_id,
            game_date=game_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _video_status_get_serialize(
        self,
        league_id,
        game_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if league_id is not None:
            
            _query_params.append(('LeagueID', league_id))
            
        if game_date is not None:
            
            _query_params.append(('GameDate', game_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/videoStatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



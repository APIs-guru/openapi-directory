# coding: utf-8

"""
    DEV Community

    A plugin that recommends resources like articles or users to a user using ChatGP.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.shared_organization import SharedOrganization
from openapi_client.models.shared_user import SharedUser
from typing import Optional, Set
from typing_extensions import Self

class GetArticlesResponse(BaseModel):
    """
    Representation of an article returned in a list
    """ # noqa: E501
    body_markdown: Optional[StrictStr] = Field(default=None, description="The body of the article")
    canonical_url: StrictStr
    cover_image: Optional[StrictStr]
    created_at: datetime
    crossposted_at: Optional[datetime]
    description: StrictStr = Field(description="A description of the article")
    edited_at: Optional[datetime]
    id: StrictInt
    last_comment_at: datetime
    organization: Optional[SharedOrganization] = None
    path: StrictStr = Field(description="A relative path of the article.")
    positive_reactions_count: StrictInt
    public_reactions_count: StrictInt
    published_at: datetime
    published_timestamp: datetime = Field(description="Crossposting or published date time")
    readable_publish_date: StrictStr
    reading_time_minutes: StrictInt = Field(description="Reading time, in minutes")
    slug: StrictStr
    social_image: StrictStr
    tag_list: List[StrictStr] = Field(description="An array representation of the tags that are associated with an article")
    tags: StrictStr = Field(description="An array representation of the tags that are associated with an article")
    title: StrictStr = Field(description="The article title")
    type_of: StrictStr
    url: StrictStr = Field(description="The url of the article. Can be used to link to the article.")
    user: SharedUser
    __properties: ClassVar[List[str]] = ["body_markdown", "canonical_url", "cover_image", "created_at", "crossposted_at", "description", "edited_at", "id", "last_comment_at", "organization", "path", "positive_reactions_count", "public_reactions_count", "published_at", "published_timestamp", "readable_publish_date", "reading_time_minutes", "slug", "social_image", "tag_list", "tags", "title", "type_of", "url", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetArticlesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if cover_image (nullable) is None
        # and model_fields_set contains the field
        if self.cover_image is None and "cover_image" in self.model_fields_set:
            _dict['cover_image'] = None

        # set to None if crossposted_at (nullable) is None
        # and model_fields_set contains the field
        if self.crossposted_at is None and "crossposted_at" in self.model_fields_set:
            _dict['crossposted_at'] = None

        # set to None if edited_at (nullable) is None
        # and model_fields_set contains the field
        if self.edited_at is None and "edited_at" in self.model_fields_set:
            _dict['edited_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetArticlesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body_markdown": obj.get("body_markdown"),
            "canonical_url": obj.get("canonical_url"),
            "cover_image": obj.get("cover_image"),
            "created_at": obj.get("created_at"),
            "crossposted_at": obj.get("crossposted_at"),
            "description": obj.get("description"),
            "edited_at": obj.get("edited_at"),
            "id": obj.get("id"),
            "last_comment_at": obj.get("last_comment_at"),
            "organization": SharedOrganization.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "path": obj.get("path"),
            "positive_reactions_count": obj.get("positive_reactions_count"),
            "public_reactions_count": obj.get("public_reactions_count"),
            "published_at": obj.get("published_at"),
            "published_timestamp": obj.get("published_timestamp"),
            "readable_publish_date": obj.get("readable_publish_date"),
            "reading_time_minutes": obj.get("reading_time_minutes"),
            "slug": obj.get("slug"),
            "social_image": obj.get("social_image"),
            "tag_list": obj.get("tag_list"),
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "type_of": obj.get("type_of"),
            "url": obj.get("url"),
            "user": SharedUser.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



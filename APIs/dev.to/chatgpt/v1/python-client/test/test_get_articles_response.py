# coding: utf-8

"""
    DEV Community

    A plugin that recommends resources like articles or users to a user using ChatGP.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_articles_response import GetArticlesResponse

class TestGetArticlesResponse(unittest.TestCase):
    """GetArticlesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetArticlesResponse:
        """Test GetArticlesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetArticlesResponse`
        """
        model = GetArticlesResponse()
        if include_optional:
            return GetArticlesResponse(
                body_markdown = '',
                canonical_url = '',
                cover_image = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                crossposted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                edited_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = 56,
                last_comment_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                organization = openapi_client.models.shared_organization.SharedOrganization(
                    name = '', 
                    profile_image = '', 
                    profile_image_90 = '', 
                    slug = '', 
                    username = '', ),
                path = '',
                positive_reactions_count = 56,
                public_reactions_count = 56,
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                published_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                readable_publish_date = '',
                reading_time_minutes = 56,
                slug = '',
                social_image = '',
                tag_list = [
                    ''
                    ],
                tags = '',
                title = '',
                type_of = '',
                url = '',
                user = openapi_client.models.shared_user.SharedUser(
                    github_username = '', 
                    name = '', 
                    profile_image = '', 
                    profile_image_90 = '', 
                    twitter_username = '', 
                    username = '', 
                    website_url = '', )
            )
        else:
            return GetArticlesResponse(
                canonical_url = '',
                cover_image = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                crossposted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                edited_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = 56,
                last_comment_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                path = '',
                positive_reactions_count = 56,
                public_reactions_count = 56,
                published_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                published_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                readable_publish_date = '',
                reading_time_minutes = 56,
                slug = '',
                social_image = '',
                tag_list = [
                    ''
                    ],
                tags = '',
                title = '',
                type_of = '',
                url = '',
                user = openapi_client.models.shared_user.SharedUser(
                    github_username = '', 
                    name = '', 
                    profile_image = '', 
                    profile_image_90 = '', 
                    twitter_username = '', 
                    username = '', 
                    website_url = '', ),
        )
        """

    def testGetArticlesResponse(self):
        """Test GetArticlesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Organization(BaseModel):
    """
    Representation of an Organization
    """ # noqa: E501
    github_username: Optional[StrictStr] = None
    joined_at: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    story: Optional[StrictStr] = None
    summary: Optional[StrictStr] = None
    tag_line: Optional[StrictStr] = None
    tech_stack: Optional[StrictStr] = None
    twitter_username: Optional[StrictStr] = None
    type_of: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["github_username", "joined_at", "location", "name", "story", "summary", "tag_line", "tech_stack", "twitter_username", "type_of", "url", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if story (nullable) is None
        # and model_fields_set contains the field
        if self.story is None and "story" in self.model_fields_set:
            _dict['story'] = None

        # set to None if tag_line (nullable) is None
        # and model_fields_set contains the field
        if self.tag_line is None and "tag_line" in self.model_fields_set:
            _dict['tag_line'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "github_username": obj.get("github_username"),
            "joined_at": obj.get("joined_at"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "story": obj.get("story"),
            "summary": obj.get("summary"),
            "tag_line": obj.get("tag_line"),
            "tech_stack": obj.get("tech_stack"),
            "twitter_username": obj.get("twitter_username"),
            "type_of": obj.get("type_of"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj



# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiPagesPostRequest(BaseModel):
    """
    ApiPagesPostRequest
    """ # noqa: E501
    body_json: Optional[StrictStr] = Field(default=None, description="For JSON pages, the JSON body")
    body_markdown: Optional[StrictStr] = Field(default=None, description="The text (in markdown) of the ad (required)")
    description: Optional[StrictStr] = Field(default=None, description="For internal use, helps similar pages from one another")
    is_top_level_path: Optional[StrictBool] = Field(default=None, description="If true, the page is available at '/{slug}' instead of '/page/{slug}', use with caution")
    slug: Optional[StrictStr] = Field(default=None, description="Used to link to this page in URLs, must be unique and URL-safe")
    template: Optional[StrictStr] = Field(default='contained', description="Controls what kind of layout the page is rendered in")
    title: Optional[StrictStr] = Field(default=None, description="Title of the page")
    __properties: ClassVar[List[str]] = ["body_json", "body_markdown", "description", "is_top_level_path", "slug", "template", "title"]

    @field_validator('template')
    def template_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['contained', 'full_within_layout', 'nav_bar_included', 'json']):
            raise ValueError("must be one of enum values ('contained', 'full_within_layout', 'nav_bar_included', 'json')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiPagesPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiPagesPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body_json": obj.get("body_json"),
            "body_markdown": obj.get("body_markdown"),
            "description": obj.get("description"),
            "is_top_level_path": obj.get("is_top_level_path"),
            "slug": obj.get("slug"),
            "template": obj.get("template") if obj.get("template") is not None else 'contained',
            "title": obj.get("title")
        })
        return _obj



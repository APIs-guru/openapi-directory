# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.shared_podcast import SharedPodcast
from typing import Optional, Set
from typing_extensions import Self

class PodcastEpisodeIndex(BaseModel):
    """
    Representation of a podcast episode returned in a list
    """ # noqa: E501
    class_name: StrictStr
    id: StrictInt
    image_url: StrictStr = Field(description="Podcast episode image url or podcast image url")
    path: StrictStr
    podcast: SharedPodcast
    title: StrictStr
    type_of: StrictStr
    __properties: ClassVar[List[str]] = ["class_name", "id", "image_url", "path", "podcast", "title", "type_of"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodcastEpisodeIndex from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of podcast
        if self.podcast:
            _dict['podcast'] = self.podcast.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodcastEpisodeIndex from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "class_name": obj.get("class_name"),
            "id": obj.get("id"),
            "image_url": obj.get("image_url"),
            "path": obj.get("path"),
            "podcast": SharedPodcast.from_dict(obj["podcast"]) if obj.get("podcast") is not None else None,
            "title": obj.get("title"),
            "type_of": obj.get("type_of")
        })
        return _obj



# coding: utf-8

"""
    Forem API V1

    Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DisplayAd(BaseModel):
    """
    A Display Ad, aka Billboard, aka Widget
    """ # noqa: E501
    approved: Optional[StrictBool] = Field(default=None, description="Ad must be both published and approved to be in rotation")
    article_exclude_ids: Optional[StrictStr] = Field(default=None, description="Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs")
    body_markdown: StrictStr = Field(description="The text (in markdown) of the ad (required)")
    creator_id: Optional[StrictInt] = Field(default=None, description="Identifies the user who created the ad.")
    display_to: Optional[StrictStr] = Field(default='all', description="Potentially limits visitors to whom the ad is visible")
    id: Optional[StrictInt] = Field(default=None, description="The ID of the Display Ad")
    name: StrictStr = Field(description="For internal use, helps distinguish ads from one another")
    organization_id: Optional[StrictInt] = Field(default=None, description="Identifies the organization to which the ad belongs")
    placement_area: StrictStr = Field(description="Identifies which area of site layout the ad can appear in")
    published: Optional[StrictBool] = Field(default=None, description="Ad must be both published and approved to be in rotation")
    tag_list: Optional[StrictStr] = Field(default=None, description="Tags on which this ad can be displayed (blank is all/any tags)")
    type_of: Optional[StrictStr] = Field(default='in_house', description="Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity's content), external ( created by an entity, or a non-entity, can appear everywhere) ")
    __properties: ClassVar[List[str]] = ["approved", "article_exclude_ids", "body_markdown", "creator_id", "display_to", "id", "name", "organization_id", "placement_area", "published", "tag_list", "type_of"]

    @field_validator('display_to')
    def display_to_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'logged_in', 'logged_out']):
            raise ValueError("must be one of enum values ('all', 'logged_in', 'logged_out')")
        return value

    @field_validator('placement_area')
    def placement_area_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['sidebar_left', 'sidebar_left_2', 'sidebar_right', 'feed_first', 'feed_second', 'feed_third', 'post_sidebar', 'post_comments']):
            raise ValueError("must be one of enum values ('sidebar_left', 'sidebar_left_2', 'sidebar_right', 'feed_first', 'feed_second', 'feed_third', 'post_sidebar', 'post_comments')")
        return value

    @field_validator('type_of')
    def type_of_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in_house', 'community', 'external']):
            raise ValueError("must be one of enum values ('in_house', 'community', 'external')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DisplayAd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if article_exclude_ids (nullable) is None
        # and model_fields_set contains the field
        if self.article_exclude_ids is None and "article_exclude_ids" in self.model_fields_set:
            _dict['article_exclude_ids'] = None

        # set to None if creator_id (nullable) is None
        # and model_fields_set contains the field
        if self.creator_id is None and "creator_id" in self.model_fields_set:
            _dict['creator_id'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organization_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DisplayAd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approved": obj.get("approved"),
            "article_exclude_ids": obj.get("article_exclude_ids"),
            "body_markdown": obj.get("body_markdown"),
            "creator_id": obj.get("creator_id"),
            "display_to": obj.get("display_to") if obj.get("display_to") is not None else 'all',
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "placement_area": obj.get("placement_area"),
            "published": obj.get("published"),
            "tag_list": obj.get("tag_list"),
            "type_of": obj.get("type_of") if obj.get("type_of") is not None else 'in_house'
        })
        return _obj



# coding: utf-8

"""
    Authentiq Connect API

    Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 

    The version of the OpenAPI document: 1.0
    Contact: hello@authentiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.user_info_aq_location import UserInfoAqLocation
from typing import Optional, Set
from typing_extensions import Self

class UserInfo(BaseModel):
    """
    OIDC UserInfo structure
    """ # noqa: E501
    address: Optional[Address] = None
    aqlocation: Optional[UserInfoAqLocation] = Field(default=None, alias="aq:location")
    email: Optional[StrictStr] = None
    email_verified: Optional[StrictBool] = None
    family_name: Optional[StrictStr] = None
    given_name: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    phone_number: Optional[StrictStr] = None
    phone_number_verified: Optional[StrictBool] = None
    sub: StrictStr
    __properties: ClassVar[List[str]] = ["address", "aq:location", "email", "email_verified", "family_name", "given_name", "name", "phone_number", "phone_number_verified", "sub"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aqlocation
        if self.aqlocation:
            _dict['aq:location'] = self.aqlocation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "aq:location": UserInfoAqLocation.from_dict(obj["aq:location"]) if obj.get("aq:location") is not None else None,
            "email": obj.get("email"),
            "email_verified": obj.get("email_verified"),
            "family_name": obj.get("family_name"),
            "given_name": obj.get("given_name"),
            "name": obj.get("name"),
            "phone_number": obj.get("phone_number"),
            "phone_number_verified": obj.get("phone_number_verified"),
            "sub": obj.get("sub")
        })
        return _obj



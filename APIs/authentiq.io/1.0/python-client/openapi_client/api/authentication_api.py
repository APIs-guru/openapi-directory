# coding: utf-8

"""
    Authentiq Connect API

    Authentiq Connect OAuth 2.0 and OpenID Connect API reference. Learn about [Authentiq ID](https://www.authentiq.com/) or check out the [Authentiq Connect](https://developers.authentiq.com) developer documentation. 

    The version of the OpenAPI document: 1.0
    Contact: hello@authentiq.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.token import Token
from openapi_client.models.user_info import UserInfo

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AuthenticationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def authorize(
        self,
        client_id: Annotated[StrictStr, Field(description="A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/). ")],
        response_type: Annotated[StrictStr, Field(description="The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set. ")],
        scope: Annotated[StrictStr, Field(description="The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC. ")],
        redirect_uri: Annotated[StrictStr, Field(description="The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs. ")],
        state: Annotated[StrictStr, Field(description="An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. ")],
        response_mode: Annotated[Optional[StrictStr], Field(description="Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. ")] = None,
        nonce: Annotated[Optional[StrictStr], Field(description="An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. ")] = None,
        display: Annotated[Optional[StrictStr], Field(description="The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. ")] = None,
        prompt: Annotated[Optional[StrictStr], Field(description="Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. ")] = None,
        max_age: Annotated[Optional[StrictInt], Field(description="Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. ")] = None,
        ui_locales: Annotated[Optional[StrictStr], Field(description="Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Authenticate a user

        Start a session with Authentiq Connect to authenticate a user.  ``` GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789 ```  This endpoint also supports the POST method. 

        :param client_id: A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).  (required)
        :type client_id: str
        :param response_type: The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set.  (required)
        :type response_type: str
        :param scope: The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC.  (required)
        :type scope: str
        :param redirect_uri: The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs.  (required)
        :type redirect_uri: str
        :param state: An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
        :type state: str
        :param response_mode: Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. 
        :type response_mode: str
        :param nonce: An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. 
        :type nonce: str
        :param display: The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. 
        :type display: str
        :param prompt: Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. 
        :type prompt: str
        :param max_age: Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. 
        :type max_age: int
        :param ui_locales: Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. 
        :type ui_locales: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._authorize_serialize(
            client_id=client_id,
            response_type=response_type,
            scope=scope,
            redirect_uri=redirect_uri,
            state=state,
            response_mode=response_mode,
            nonce=nonce,
            display=display,
            prompt=prompt,
            max_age=max_age,
            ui_locales=ui_locales,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '303': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def authorize_with_http_info(
        self,
        client_id: Annotated[StrictStr, Field(description="A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/). ")],
        response_type: Annotated[StrictStr, Field(description="The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set. ")],
        scope: Annotated[StrictStr, Field(description="The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC. ")],
        redirect_uri: Annotated[StrictStr, Field(description="The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs. ")],
        state: Annotated[StrictStr, Field(description="An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. ")],
        response_mode: Annotated[Optional[StrictStr], Field(description="Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. ")] = None,
        nonce: Annotated[Optional[StrictStr], Field(description="An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. ")] = None,
        display: Annotated[Optional[StrictStr], Field(description="The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. ")] = None,
        prompt: Annotated[Optional[StrictStr], Field(description="Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. ")] = None,
        max_age: Annotated[Optional[StrictInt], Field(description="Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. ")] = None,
        ui_locales: Annotated[Optional[StrictStr], Field(description="Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Authenticate a user

        Start a session with Authentiq Connect to authenticate a user.  ``` GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789 ```  This endpoint also supports the POST method. 

        :param client_id: A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).  (required)
        :type client_id: str
        :param response_type: The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set.  (required)
        :type response_type: str
        :param scope: The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC.  (required)
        :type scope: str
        :param redirect_uri: The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs.  (required)
        :type redirect_uri: str
        :param state: An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
        :type state: str
        :param response_mode: Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. 
        :type response_mode: str
        :param nonce: An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. 
        :type nonce: str
        :param display: The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. 
        :type display: str
        :param prompt: Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. 
        :type prompt: str
        :param max_age: Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. 
        :type max_age: int
        :param ui_locales: Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. 
        :type ui_locales: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._authorize_serialize(
            client_id=client_id,
            response_type=response_type,
            scope=scope,
            redirect_uri=redirect_uri,
            state=state,
            response_mode=response_mode,
            nonce=nonce,
            display=display,
            prompt=prompt,
            max_age=max_age,
            ui_locales=ui_locales,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '303': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def authorize_without_preload_content(
        self,
        client_id: Annotated[StrictStr, Field(description="A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/). ")],
        response_type: Annotated[StrictStr, Field(description="The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set. ")],
        scope: Annotated[StrictStr, Field(description="The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC. ")],
        redirect_uri: Annotated[StrictStr, Field(description="The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs. ")],
        state: Annotated[StrictStr, Field(description="An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. ")],
        response_mode: Annotated[Optional[StrictStr], Field(description="Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. ")] = None,
        nonce: Annotated[Optional[StrictStr], Field(description="An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. ")] = None,
        display: Annotated[Optional[StrictStr], Field(description="The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. ")] = None,
        prompt: Annotated[Optional[StrictStr], Field(description="Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. ")] = None,
        max_age: Annotated[Optional[StrictInt], Field(description="Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. ")] = None,
        ui_locales: Annotated[Optional[StrictStr], Field(description="Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Authenticate a user

        Start a session with Authentiq Connect to authenticate a user.  ``` GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789 ```  This endpoint also supports the POST method. 

        :param client_id: A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).  (required)
        :type client_id: str
        :param response_type: The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set.  (required)
        :type response_type: str
        :param scope: The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC.  (required)
        :type scope: str
        :param redirect_uri: The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs.  (required)
        :type redirect_uri: str
        :param state: An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
        :type state: str
        :param response_mode: Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. 
        :type response_mode: str
        :param nonce: An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. 
        :type nonce: str
        :param display: The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. 
        :type display: str
        :param prompt: Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. 
        :type prompt: str
        :param max_age: Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. 
        :type max_age: int
        :param ui_locales: Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. 
        :type ui_locales: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._authorize_serialize(
            client_id=client_id,
            response_type=response_type,
            scope=scope,
            redirect_uri=redirect_uri,
            state=state,
            response_mode=response_mode,
            nonce=nonce,
            display=display,
            prompt=prompt,
            max_age=max_age,
            ui_locales=ui_locales,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '303': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _authorize_serialize(
        self,
        client_id,
        response_type,
        scope,
        redirect_uri,
        state,
        response_mode,
        nonce,
        display,
        prompt,
        max_age,
        ui_locales,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if client_id is not None:
            
            _query_params.append(('client_id', client_id))
            
        if response_type is not None:
            
            _query_params.append(('response_type', response_type))
            
        if scope is not None:
            
            _query_params.append(('scope', scope))
            
        if redirect_uri is not None:
            
            _query_params.append(('redirect_uri', redirect_uri))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if response_mode is not None:
            
            _query_params.append(('response_mode', response_mode))
            
        if nonce is not None:
            
            _query_params.append(('nonce', nonce))
            
        if display is not None:
            
            _query_params.append(('display', display))
            
        if prompt is not None:
            
            _query_params.append(('prompt', prompt))
            
        if max_age is not None:
            
            _query_params.append(('max_age', max_age))
            
        if ui_locales is not None:
            
            _query_params.append(('ui_locales', ui_locales))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/authorize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def token(
        self,
        client_id: Annotated[StrictStr, Field(description="The registered client ID. ")],
        client_secret: Annotated[StrictStr, Field(description="The registered client ID secret. ")],
        code: Annotated[StrictStr, Field(description="The authorization code previously obtained from the Authentication endpoint. ")],
        grant_type: Annotated[StrictStr, Field(description="The authorization grant type, must be `authorization_code`. ")],
        redirect_uri: Annotated[StrictStr, Field(description="The redirect URL that was used previously with the Authentication endpoint. ")],
        authorization: Annotated[Optional[StrictStr], Field(description="HTTP Basic authorization header. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Token:
        """Obtain an ID Token

        Exchange en authorization code for an ID Token or Access Token.  This endpoint supports both `client_secret_basic` (default) and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`. 

        :param client_id: The registered client ID.  (required)
        :type client_id: str
        :param client_secret: The registered client ID secret.  (required)
        :type client_secret: str
        :param code: The authorization code previously obtained from the Authentication endpoint.  (required)
        :type code: str
        :param grant_type: The authorization grant type, must be `authorization_code`.  (required)
        :type grant_type: str
        :param redirect_uri: The redirect URL that was used previously with the Authentication endpoint.  (required)
        :type redirect_uri: str
        :param authorization: HTTP Basic authorization header. 
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._token_serialize(
            client_id=client_id,
            client_secret=client_secret,
            code=code,
            grant_type=grant_type,
            redirect_uri=redirect_uri,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Token",
            '400': "OAuth2Error",
            '401': "OAuth2Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def token_with_http_info(
        self,
        client_id: Annotated[StrictStr, Field(description="The registered client ID. ")],
        client_secret: Annotated[StrictStr, Field(description="The registered client ID secret. ")],
        code: Annotated[StrictStr, Field(description="The authorization code previously obtained from the Authentication endpoint. ")],
        grant_type: Annotated[StrictStr, Field(description="The authorization grant type, must be `authorization_code`. ")],
        redirect_uri: Annotated[StrictStr, Field(description="The redirect URL that was used previously with the Authentication endpoint. ")],
        authorization: Annotated[Optional[StrictStr], Field(description="HTTP Basic authorization header. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Token]:
        """Obtain an ID Token

        Exchange en authorization code for an ID Token or Access Token.  This endpoint supports both `client_secret_basic` (default) and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`. 

        :param client_id: The registered client ID.  (required)
        :type client_id: str
        :param client_secret: The registered client ID secret.  (required)
        :type client_secret: str
        :param code: The authorization code previously obtained from the Authentication endpoint.  (required)
        :type code: str
        :param grant_type: The authorization grant type, must be `authorization_code`.  (required)
        :type grant_type: str
        :param redirect_uri: The redirect URL that was used previously with the Authentication endpoint.  (required)
        :type redirect_uri: str
        :param authorization: HTTP Basic authorization header. 
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._token_serialize(
            client_id=client_id,
            client_secret=client_secret,
            code=code,
            grant_type=grant_type,
            redirect_uri=redirect_uri,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Token",
            '400': "OAuth2Error",
            '401': "OAuth2Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def token_without_preload_content(
        self,
        client_id: Annotated[StrictStr, Field(description="The registered client ID. ")],
        client_secret: Annotated[StrictStr, Field(description="The registered client ID secret. ")],
        code: Annotated[StrictStr, Field(description="The authorization code previously obtained from the Authentication endpoint. ")],
        grant_type: Annotated[StrictStr, Field(description="The authorization grant type, must be `authorization_code`. ")],
        redirect_uri: Annotated[StrictStr, Field(description="The redirect URL that was used previously with the Authentication endpoint. ")],
        authorization: Annotated[Optional[StrictStr], Field(description="HTTP Basic authorization header. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Obtain an ID Token

        Exchange en authorization code for an ID Token or Access Token.  This endpoint supports both `client_secret_basic` (default) and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`. 

        :param client_id: The registered client ID.  (required)
        :type client_id: str
        :param client_secret: The registered client ID secret.  (required)
        :type client_secret: str
        :param code: The authorization code previously obtained from the Authentication endpoint.  (required)
        :type code: str
        :param grant_type: The authorization grant type, must be `authorization_code`.  (required)
        :type grant_type: str
        :param redirect_uri: The redirect URL that was used previously with the Authentication endpoint.  (required)
        :type redirect_uri: str
        :param authorization: HTTP Basic authorization header. 
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._token_serialize(
            client_id=client_id,
            client_secret=client_secret,
            code=code,
            grant_type=grant_type,
            redirect_uri=redirect_uri,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Token",
            '400': "OAuth2Error",
            '401': "OAuth2Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _token_serialize(
        self,
        client_id,
        client_secret,
        code,
        grant_type,
        redirect_uri,
        authorization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        if client_id is not None:
            _form_params.append(('client_id', client_id))
        if client_secret is not None:
            _form_params.append(('client_secret', client_secret))
        if code is not None:
            _form_params.append(('code', code))
        if grant_type is not None:
            _form_params.append(('grant_type', grant_type))
        if redirect_uri is not None:
            _form_params.append(('redirect_uri', redirect_uri))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json', 
                    'application/x-www-form-urlencoded', 
                    'text/html'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/token',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def user_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserInfo:
        """Retrieve a user profile

        Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint. 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_info_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserInfo",
            '401': "OAuth2Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def user_info_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserInfo]:
        """Retrieve a user profile

        Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint. 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_info_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserInfo",
            '401': "OAuth2Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def user_info_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a user profile

        Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint. 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._user_info_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserInfo",
            '401': "OAuth2Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _user_info_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json', 
                    'application/x-www-form-urlencoded', 
                    'text/html'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth_code', 
            'oauth_implicit'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/userinfo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



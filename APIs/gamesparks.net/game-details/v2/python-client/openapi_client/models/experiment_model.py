# coding: utf-8

"""
    GameSparks Game Details API

    The API to manage the GameSparks game details

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.experiment_config_model import ExperimentConfigModel
from typing import Optional, Set
from typing_extensions import Self

class ExperimentModel(BaseModel):
    """
    ExperimentModel
    """ # noqa: E501
    active: Optional[StrictBool] = None
    changed_fields_and_initial_values: Optional[Dict[str, Any]] = Field(default=None, alias="changedFieldsAndInitialValues")
    complete: Optional[StrictBool] = None
    config: Optional[ExperimentConfigModel] = None
    end_date: Optional[datetime] = Field(default=None, alias="endDate")
    id: Optional[StrictInt] = None
    measurements: Optional[StrictStr] = None
    measurements_es_query: Optional[StrictStr] = Field(default=None, alias="measurementsEsQuery")
    name: Optional[StrictStr] = None
    percent_hash: Optional[StrictStr] = Field(default=None, alias="percentHash")
    published_stages: Optional[List[StrictStr]] = Field(default=None, alias="publishedStages")
    start_date: Optional[datetime] = Field(default=None, alias="startDate")
    __properties: ClassVar[List[str]] = ["active", "changedFieldsAndInitialValues", "complete", "config", "endDate", "id", "measurements", "measurementsEsQuery", "name", "percentHash", "publishedStages", "startDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExperimentModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExperimentModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "changedFieldsAndInitialValues": obj.get("changedFieldsAndInitialValues"),
            "complete": obj.get("complete"),
            "config": ExperimentConfigModel.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "endDate": obj.get("endDate"),
            "id": obj.get("id"),
            "measurements": obj.get("measurements"),
            "measurementsEsQuery": obj.get("measurementsEsQuery"),
            "name": obj.get("name"),
            "percentHash": obj.get("percentHash"),
            "publishedStages": obj.get("publishedStages"),
            "startDate": obj.get("startDate")
        })
        return _obj



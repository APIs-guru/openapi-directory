# coding: utf-8

"""
    GameSparks Game Details API

    The API to manage the GameSparks game details

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BillingDetailsModel(BaseModel):
    """
    BillingDetailsModel
    """ # noqa: E501
    building: StrictStr
    city: StrictStr
    company_name: StrictStr = Field(alias="companyName")
    country: StrictStr
    email1: StrictStr
    email2: Optional[StrictStr] = None
    email3: Optional[StrictStr] = None
    first_name1: StrictStr = Field(alias="firstName1")
    first_name2: Optional[StrictStr] = Field(default=None, alias="firstName2")
    first_name3: Optional[StrictStr] = Field(default=None, alias="firstName3")
    last_name1: StrictStr = Field(alias="lastName1")
    last_name2: Optional[StrictStr] = Field(default=None, alias="lastName2")
    last_name3: Optional[StrictStr] = Field(default=None, alias="lastName3")
    postcode: StrictStr
    state: Optional[StrictStr] = None
    street: StrictStr
    tax_number: Optional[StrictStr] = Field(default=None, alias="taxNumber")
    __properties: ClassVar[List[str]] = ["building", "city", "companyName", "country", "email1", "email2", "email3", "firstName1", "firstName2", "firstName3", "lastName1", "lastName2", "lastName3", "postcode", "state", "street", "taxNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingDetailsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingDetailsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "building": obj.get("building"),
            "city": obj.get("city"),
            "companyName": obj.get("companyName"),
            "country": obj.get("country"),
            "email1": obj.get("email1"),
            "email2": obj.get("email2"),
            "email3": obj.get("email3"),
            "firstName1": obj.get("firstName1"),
            "firstName2": obj.get("firstName2"),
            "firstName3": obj.get("firstName3"),
            "lastName1": obj.get("lastName1"),
            "lastName2": obj.get("lastName2"),
            "lastName3": obj.get("lastName3"),
            "postcode": obj.get("postcode"),
            "state": obj.get("state"),
            "street": obj.get("street"),
            "taxNumber": obj.get("taxNumber")
        })
        return _obj



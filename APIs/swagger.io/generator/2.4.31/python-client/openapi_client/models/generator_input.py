# coding: utf-8

"""
    Swagger Generator

    This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).

    The version of the OpenAPI document: 2.4.31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorization_value import AuthorizationValue
from openapi_client.models.security_scheme_definition import SecuritySchemeDefinition
from typing import Optional, Set
from typing_extensions import Self

class GeneratorInput(BaseModel):
    """
    GeneratorInput
    """ # noqa: E501
    authorization_value: Optional[AuthorizationValue] = Field(default=None, alias="authorizationValue")
    options: Optional[Dict[str, StrictStr]] = None
    security_definition: Optional[SecuritySchemeDefinition] = Field(default=None, alias="securityDefinition")
    spec: Optional[Dict[str, Any]] = None
    swagger_url: Optional[StrictStr] = Field(default=None, alias="swaggerUrl")
    using_flatten_spec: Optional[StrictBool] = Field(default=None, alias="usingFlattenSpec")
    __properties: ClassVar[List[str]] = ["authorizationValue", "options", "securityDefinition", "spec", "swaggerUrl", "usingFlattenSpec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeneratorInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authorization_value
        if self.authorization_value:
            _dict['authorizationValue'] = self.authorization_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_definition
        if self.security_definition:
            _dict['securityDefinition'] = self.security_definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeneratorInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationValue": AuthorizationValue.from_dict(obj["authorizationValue"]) if obj.get("authorizationValue") is not None else None,
            "options": obj.get("options"),
            "securityDefinition": SecuritySchemeDefinition.from_dict(obj["securityDefinition"]) if obj.get("securityDefinition") is not None else None,
            "spec": obj.get("spec"),
            "swaggerUrl": obj.get("swaggerUrl"),
            "usingFlattenSpec": obj.get("usingFlattenSpec")
        })
        return _obj



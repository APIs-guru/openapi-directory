# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.builds_list_toolset_projects200_response_android import BuildsListToolsetProjects200ResponseAndroid
from openapi_client.models.builds_list_toolset_projects200_response_buildscripts_value import BuildsListToolsetProjects200ResponseBuildscriptsValue
from openapi_client.models.builds_list_toolset_projects200_response_javascript import BuildsListToolsetProjects200ResponseJavascript
from openapi_client.models.builds_list_toolset_projects200_response_testcloud import BuildsListToolsetProjects200ResponseTestcloud
from openapi_client.models.builds_list_toolset_projects200_response_uwp import BuildsListToolsetProjects200ResponseUwp
from openapi_client.models.builds_list_toolset_projects200_response_xamarin import BuildsListToolsetProjects200ResponseXamarin
from openapi_client.models.builds_list_toolset_projects200_response_xcode import BuildsListToolsetProjects200ResponseXcode
from typing import Optional, Set
from typing_extensions import Self

class BuildsListToolsetProjects200Response(BaseModel):
    """
    A collection of projects for each type of toolset
    """ # noqa: E501
    android: Optional[BuildsListToolsetProjects200ResponseAndroid] = None
    buildscripts: Optional[Dict[str, BuildsListToolsetProjects200ResponseBuildscriptsValue]] = Field(default=None, description="A collection of detected pre/post buildscripts for current platform toolset")
    commit: Optional[StrictStr] = Field(default=None, description="The commit hash of the analyzed commit")
    javascript: Optional[BuildsListToolsetProjects200ResponseJavascript] = None
    testcloud: Optional[BuildsListToolsetProjects200ResponseTestcloud] = None
    uwp: Optional[BuildsListToolsetProjects200ResponseUwp] = None
    xamarin: Optional[BuildsListToolsetProjects200ResponseXamarin] = None
    xcode: Optional[BuildsListToolsetProjects200ResponseXcode] = None
    __properties: ClassVar[List[str]] = ["android", "buildscripts", "commit", "javascript", "testcloud", "uwp", "xamarin", "xcode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildsListToolsetProjects200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android
        if self.android:
            _dict['android'] = self.android.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in buildscripts (dict)
        _field_dict = {}
        if self.buildscripts:
            for _key_buildscripts in self.buildscripts:
                if self.buildscripts[_key_buildscripts]:
                    _field_dict[_key_buildscripts] = self.buildscripts[_key_buildscripts].to_dict()
            _dict['buildscripts'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of javascript
        if self.javascript:
            _dict['javascript'] = self.javascript.to_dict()
        # override the default output from pydantic by calling `to_dict()` of testcloud
        if self.testcloud:
            _dict['testcloud'] = self.testcloud.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uwp
        if self.uwp:
            _dict['uwp'] = self.uwp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xamarin
        if self.xamarin:
            _dict['xamarin'] = self.xamarin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xcode
        if self.xcode:
            _dict['xcode'] = self.xcode.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildsListToolsetProjects200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "android": BuildsListToolsetProjects200ResponseAndroid.from_dict(obj["android"]) if obj.get("android") is not None else None,
            "buildscripts": dict(
                (_k, BuildsListToolsetProjects200ResponseBuildscriptsValue.from_dict(_v))
                for _k, _v in obj["buildscripts"].items()
            )
            if obj.get("buildscripts") is not None
            else None,
            "commit": obj.get("commit"),
            "javascript": BuildsListToolsetProjects200ResponseJavascript.from_dict(obj["javascript"]) if obj.get("javascript") is not None else None,
            "testcloud": BuildsListToolsetProjects200ResponseTestcloud.from_dict(obj["testcloud"]) if obj.get("testcloud") is not None else None,
            "uwp": BuildsListToolsetProjects200ResponseUwp.from_dict(obj["uwp"]) if obj.get("uwp") is not None else None,
            "xamarin": BuildsListToolsetProjects200ResponseXamarin.from_dict(obj["xamarin"]) if obj.get("xamarin") is not None else None,
            "xcode": BuildsListToolsetProjects200ResponseXcode.from_dict(obj["xcode"]) if obj.get("xcode") is not None else None
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.branch_configurations_get200_response_all_of_toolsets_android import BranchConfigurationsGet200ResponseAllOfToolsetsAndroid
from openapi_client.models.branch_configurations_get200_response_all_of_toolsets_javascript import BranchConfigurationsGet200ResponseAllOfToolsetsJavascript
from openapi_client.models.branch_configurations_get200_response_all_of_toolsets_xamarin import BranchConfigurationsGet200ResponseAllOfToolsetsXamarin
from openapi_client.models.branch_configurations_get200_response_all_of_toolsets_xcode import BranchConfigurationsGet200ResponseAllOfToolsetsXcode
from typing import Optional, Set
from typing_extensions import Self

class BranchConfigurationToolsets(BaseModel):
    """
    The branch build configuration for each toolset
    """ # noqa: E501
    android: Optional[BranchConfigurationsGet200ResponseAllOfToolsetsAndroid] = None
    javascript: Optional[BranchConfigurationsGet200ResponseAllOfToolsetsJavascript] = None
    xamarin: Optional[BranchConfigurationsGet200ResponseAllOfToolsetsXamarin] = None
    xcode: Optional[BranchConfigurationsGet200ResponseAllOfToolsetsXcode] = None
    __properties: ClassVar[List[str]] = ["android", "javascript", "xamarin", "xcode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BranchConfigurationToolsets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android
        if self.android:
            _dict['android'] = self.android.to_dict()
        # override the default output from pydantic by calling `to_dict()` of javascript
        if self.javascript:
            _dict['javascript'] = self.javascript.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xamarin
        if self.xamarin:
            _dict['xamarin'] = self.xamarin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xcode
        if self.xcode:
            _dict['xcode'] = self.xcode.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BranchConfigurationToolsets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "android": BranchConfigurationsGet200ResponseAllOfToolsetsAndroid.from_dict(obj["android"]) if obj.get("android") is not None else None,
            "javascript": BranchConfigurationsGet200ResponseAllOfToolsetsJavascript.from_dict(obj["javascript"]) if obj.get("javascript") is not None else None,
            "xamarin": BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.from_dict(obj["xamarin"]) if obj.get("xamarin") is not None else None,
            "xcode": BranchConfigurationsGet200ResponseAllOfToolsetsXcode.from_dict(obj["xcode"]) if obj.get("xcode") is not None else None
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.branch_configurations_get200_response_all_of_toolsets_xcode_app_extension_provisioning_profile_files_inner import BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner
from typing import Optional, Set
from typing_extensions import Self

class BranchConfigurationsGet200ResponseAllOfToolsetsXcode(BaseModel):
    """
    Build configuration when Xcode is part of the build steps
    """ # noqa: E501
    app_extension_provisioning_profile_files: Optional[List[BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner]] = Field(default=None, alias="appExtensionProvisioningProfileFiles")
    archive_configuration: Optional[StrictStr] = Field(default=None, description="The build configuration of the target to archive", alias="archiveConfiguration")
    automatic_signing: Optional[StrictBool] = Field(default=None, alias="automaticSigning")
    cartfile_path: Optional[StrictStr] = Field(default=None, description="Path to Carthage file, if present", alias="cartfilePath")
    certificate_encoded: Optional[StrictStr] = Field(default=None, alias="certificateEncoded")
    certificate_file_id: Optional[StrictStr] = Field(default=None, alias="certificateFileId")
    certificate_filename: Optional[StrictStr] = Field(default=None, alias="certificateFilename")
    certificate_password: Optional[StrictStr] = Field(default=None, alias="certificatePassword")
    certificate_upload_id: Optional[StrictStr] = Field(default=None, alias="certificateUploadId")
    force_legacy_build_system: Optional[StrictBool] = Field(default=None, description="Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used. By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10. ", alias="forceLegacyBuildSystem")
    podfile_path: Optional[StrictStr] = Field(default=None, description="Path to CococaPods file, if present", alias="podfilePath")
    project_or_workspace_path: Optional[StrictStr] = Field(default=None, description="Xcode project/workspace path", alias="projectOrWorkspacePath")
    provisioning_profile_encoded: Optional[StrictStr] = Field(default=None, alias="provisioningProfileEncoded")
    provisioning_profile_file_id: Optional[StrictStr] = Field(default=None, alias="provisioningProfileFileId")
    provisioning_profile_filename: Optional[StrictStr] = Field(default=None, alias="provisioningProfileFilename")
    provisioning_profile_upload_id: Optional[StrictStr] = Field(default=None, alias="provisioningProfileUploadId")
    scheme: Optional[StrictStr] = None
    target_to_archive: Optional[StrictStr] = Field(default=None, description="The target id of the selected scheme to archive", alias="targetToArchive")
    team_id: Optional[StrictStr] = Field(default=None, alias="teamId")
    xcode_project_sha: Optional[StrictStr] = Field(default=None, description="The selected pbxproject hash to the repositroy", alias="xcodeProjectSha")
    xcode_version: Optional[StrictStr] = Field(default=None, description="Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set.", alias="xcodeVersion")
    __properties: ClassVar[List[str]] = ["appExtensionProvisioningProfileFiles", "archiveConfiguration", "automaticSigning", "cartfilePath", "certificateEncoded", "certificateFileId", "certificateFilename", "certificatePassword", "certificateUploadId", "forceLegacyBuildSystem", "podfilePath", "projectOrWorkspacePath", "provisioningProfileEncoded", "provisioningProfileFileId", "provisioningProfileFilename", "provisioningProfileUploadId", "scheme", "targetToArchive", "teamId", "xcodeProjectSha", "xcodeVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BranchConfigurationsGet200ResponseAllOfToolsetsXcode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_extension_provisioning_profile_files (list)
        _items = []
        if self.app_extension_provisioning_profile_files:
            for _item_app_extension_provisioning_profile_files in self.app_extension_provisioning_profile_files:
                if _item_app_extension_provisioning_profile_files:
                    _items.append(_item_app_extension_provisioning_profile_files.to_dict())
            _dict['appExtensionProvisioningProfileFiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BranchConfigurationsGet200ResponseAllOfToolsetsXcode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appExtensionProvisioningProfileFiles": [BranchConfigurationsGet200ResponseAllOfToolsetsXcodeAppExtensionProvisioningProfileFilesInner.from_dict(_item) for _item in obj["appExtensionProvisioningProfileFiles"]] if obj.get("appExtensionProvisioningProfileFiles") is not None else None,
            "archiveConfiguration": obj.get("archiveConfiguration"),
            "automaticSigning": obj.get("automaticSigning"),
            "cartfilePath": obj.get("cartfilePath"),
            "certificateEncoded": obj.get("certificateEncoded"),
            "certificateFileId": obj.get("certificateFileId"),
            "certificateFilename": obj.get("certificateFilename"),
            "certificatePassword": obj.get("certificatePassword"),
            "certificateUploadId": obj.get("certificateUploadId"),
            "forceLegacyBuildSystem": obj.get("forceLegacyBuildSystem"),
            "podfilePath": obj.get("podfilePath"),
            "projectOrWorkspacePath": obj.get("projectOrWorkspacePath"),
            "provisioningProfileEncoded": obj.get("provisioningProfileEncoded"),
            "provisioningProfileFileId": obj.get("provisioningProfileFileId"),
            "provisioningProfileFilename": obj.get("provisioningProfileFilename"),
            "provisioningProfileUploadId": obj.get("provisioningProfileUploadId"),
            "scheme": obj.get("scheme"),
            "targetToArchive": obj.get("targetToArchive"),
            "teamId": obj.get("teamId"),
            "xcodeProjectSha": obj.get("xcodeProjectSha"),
            "xcodeVersion": obj.get("xcodeVersion")
        })
        return _obj



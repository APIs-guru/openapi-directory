# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ReleasesGetReleaseUploadStatus200Response(BaseModel):
    """
    ReleasesGetReleaseUploadStatus200Response
    """ # noqa: E501
    error_details: Optional[StrictStr] = Field(default=None, description="Details describing what went wrong processing the upload. Will only be set if status = 'error'.")
    id: StrictStr = Field(description="The ID for the upload.")
    release_distinct_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The distinct ID of the release. Will only be set when the status = 'readyToBePublished'.")
    release_url: Optional[Any] = Field(default=None, description="The URL of the release. Will only be set when the status = 'readyToBePublished'.")
    upload_status: StrictStr = Field(description="The current upload status.")
    __properties: ClassVar[List[str]] = ["error_details", "id", "release_distinct_id", "release_url", "upload_status"]

    @field_validator('upload_status')
    def upload_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['uploadStarted', 'uploadFinished', 'readyToBePublished', 'malwareDetected', 'error']):
            raise ValueError("must be one of enum values ('uploadStarted', 'uploadFinished', 'readyToBePublished', 'malwareDetected', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleasesGetReleaseUploadStatus200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if release_url (nullable) is None
        # and model_fields_set contains the field
        if self.release_url is None and "release_url" in self.model_fields_set:
            _dict['release_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleasesGetReleaseUploadStatus200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error_details": obj.get("error_details"),
            "id": obj.get("id"),
            "release_distinct_id": obj.get("release_distinct_id"),
            "release_url": obj.get("release_url"),
            "upload_status": obj.get("upload_status")
        })
        return _obj



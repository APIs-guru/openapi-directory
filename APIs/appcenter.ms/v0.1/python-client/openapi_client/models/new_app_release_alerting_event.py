# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.new_app_release_alerting_event_all_of_app_release_properties import NewAppReleaseAlertingEventAllOfAppReleaseProperties
from typing import Optional, Set
from typing_extensions import Self

class NewAppReleaseAlertingEvent(BaseModel):
    """
    New app release alerting event
    """ # noqa: E501
    event_id: StrictStr = Field(description="A unique identifier for this event instance. Useful for deduplication")
    event_timestamp: StrictStr = Field(description="ISO 8601 date time when event was generated")
    properties: Optional[Dict[str, Any]] = Field(default=None, description="Obsolete. Use emailProperties.")
    app_release_properties: Optional[NewAppReleaseAlertingEventAllOfAppReleaseProperties] = None
    disable_webhook: Optional[StrictBool] = Field(default=None, description="indicate whether notify via webhook or not")
    user_ids: Optional[List[StrictStr]] = Field(default=None, description="List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.")
    __properties: ClassVar[List[str]] = ["event_id", "event_timestamp", "properties", "app_release_properties", "disable_webhook", "user_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewAppReleaseAlertingEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_release_properties
        if self.app_release_properties:
            _dict['app_release_properties'] = self.app_release_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewAppReleaseAlertingEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "event_timestamp": obj.get("event_timestamp"),
            "properties": obj.get("properties"),
            "app_release_properties": NewAppReleaseAlertingEventAllOfAppReleaseProperties.from_dict(obj["app_release_properties"]) if obj.get("app_release_properties") is not None else None,
            "disable_webhook": obj.get("disable_webhook"),
            "user_ids": obj.get("user_ids")
        })
        return _obj



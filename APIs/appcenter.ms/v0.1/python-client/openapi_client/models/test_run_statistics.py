# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TestRunStatistics(BaseModel):
    """
    Summary single test run on Xamarin Test Cloud
    """ # noqa: E501
    devices: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of devices running the test")
    devices_failed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of failed devices", alias="devicesFailed")
    devices_finished: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of finished devices", alias="devicesFinished")
    failed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of failed tests")
    passed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of passed tests")
    peak_memory: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The max amount of MB used during the test run", alias="peakMemory")
    skipped: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of skipped tests")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of tests in total")
    total_device_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of minutes of device time the test has been runnign", alias="totalDeviceMinutes")
    __properties: ClassVar[List[str]] = ["devices", "devicesFailed", "devicesFinished", "failed", "passed", "peakMemory", "skipped", "total", "totalDeviceMinutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestRunStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestRunStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "devices": obj.get("devices"),
            "devicesFailed": obj.get("devicesFailed"),
            "devicesFinished": obj.get("devicesFinished"),
            "failed": obj.get("failed"),
            "passed": obj.get("passed"),
            "peakMemory": obj.get("peakMemory"),
            "skipped": obj.get("skipped"),
            "total": obj.get("total"),
            "totalDeviceMinutes": obj.get("totalDeviceMinutes")
        })
        return _obj



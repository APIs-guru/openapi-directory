# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apps_list200_response_inner_all_of_azure_subscription import AppsList200ResponseInnerAllOfAzureSubscription
from openapi_client.models.apps_list200_response_inner_all_of_owner import AppsList200ResponseInnerAllOfOwner
from typing import Optional, Set
from typing_extensions import Self

class AppsList200ResponseInner(BaseModel):
    """
    AppsList200ResponseInner
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the app")
    display_name: StrictStr = Field(description="The display name of the app")
    icon_source: Optional[StrictStr] = Field(default=None, description="The string representation of the source of the app's icon")
    icon_url: Optional[StrictStr] = Field(default=None, description="The string representation of the URL pointing to the app's icon")
    id: StrictStr = Field(description="The unique ID (UUID) of the app")
    name: StrictStr = Field(description="The name of the app used in URLs")
    os: StrictStr = Field(description="The OS the app will be running on")
    owner: AppsList200ResponseInnerAllOfOwner
    release_type: Optional[StrictStr] = Field(default=None, description="A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase")
    app_secret: StrictStr = Field(description="A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics")
    azure_subscription: Optional[AppsList200ResponseInnerAllOfAzureSubscription] = None
    created_at: Optional[StrictStr] = Field(default=None, description="The created date of this app")
    member_permissions: Optional[List[StrictStr]] = Field(default=None, description="The permissions of the calling user")
    origin: StrictStr = Field(description="The creation origin of this app")
    platform: StrictStr = Field(description="The platform of the app")
    updated_at: Optional[StrictStr] = Field(default=None, description="The last updated date of this app")
    __properties: ClassVar[List[str]] = ["description", "display_name", "icon_source", "icon_url", "id", "name", "os", "owner", "release_type", "app_secret", "azure_subscription", "created_at", "member_permissions", "origin", "platform", "updated_at"]

    @field_validator('os')
    def os_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Android', 'iOS', 'macOS', 'Tizen', 'tvOS', 'Windows', 'Linux', 'Custom']):
            raise ValueError("must be one of enum values ('Android', 'iOS', 'macOS', 'Tizen', 'tvOS', 'Windows', 'Linux', 'Custom')")
        return value

    @field_validator('member_permissions')
    def member_permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['manager', 'developer', 'viewer', 'tester']):
                raise ValueError("each list item must be one of ('manager', 'developer', 'viewer', 'tester')")
        return value

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['appcenter', 'hockeyapp', 'codepush']):
            raise ValueError("must be one of enum values ('appcenter', 'hockeyapp', 'codepush')")
        return value

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Java', 'Objective-C-Swift', 'UWP', 'Cordova', 'React-Native', 'Unity', 'Electron', 'Xamarin', 'WPF', 'WinForms', 'Unknown', 'Custom']):
            raise ValueError("must be one of enum values ('Java', 'Objective-C-Swift', 'UWP', 'Cordova', 'React-Native', 'Unity', 'Electron', 'Xamarin', 'WPF', 'WinForms', 'Unknown', 'Custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppsList200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_subscription
        if self.azure_subscription:
            _dict['azure_subscription'] = self.azure_subscription.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppsList200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "display_name": obj.get("display_name"),
            "icon_source": obj.get("icon_source"),
            "icon_url": obj.get("icon_url"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "os": obj.get("os"),
            "owner": AppsList200ResponseInnerAllOfOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "release_type": obj.get("release_type"),
            "app_secret": obj.get("app_secret"),
            "azure_subscription": AppsList200ResponseInnerAllOfAzureSubscription.from_dict(obj["azure_subscription"]) if obj.get("azure_subscription") is not None else None,
            "created_at": obj.get("created_at"),
            "member_permissions": obj.get("member_permissions"),
            "origin": obj.get("origin"),
            "platform": obj.get("platform"),
            "updated_at": obj.get("updated_at")
        })
        return _obj



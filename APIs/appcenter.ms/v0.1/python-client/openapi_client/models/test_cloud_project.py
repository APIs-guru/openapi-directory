# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.builds_list_toolset_projects200_response_testcloud_projects_inner_framework_properties import BuildsListToolsetProjects200ResponseTestcloudProjectsInnerFrameworkProperties
from typing import Optional, Set
from typing_extensions import Self

class TestCloudProject(BaseModel):
    """
    TestCloudProject
    """ # noqa: E501
    framework_properties: Optional[BuildsListToolsetProjects200ResponseTestcloudProjectsInnerFrameworkProperties] = Field(default=None, alias="frameworkProperties")
    framework_type: StrictStr = Field(alias="frameworkType")
    path: StrictStr = Field(description="The path to the TestCloud project")
    __properties: ClassVar[List[str]] = ["frameworkProperties", "frameworkType", "path"]

    @field_validator('framework_type')
    def framework_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Appium', 'Calabash', 'Espresso', 'UITest', 'Generated']):
            raise ValueError("must be one of enum values ('Appium', 'Calabash', 'Espresso', 'UITest', 'Generated')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestCloudProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of framework_properties
        if self.framework_properties:
            _dict['frameworkProperties'] = self.framework_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestCloudProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frameworkProperties": BuildsListToolsetProjects200ResponseTestcloudProjectsInnerFrameworkProperties.from_dict(obj["frameworkProperties"]) if obj.get("frameworkProperties") is not None else None,
            "frameworkType": obj.get("frameworkType"),
            "path": obj.get("path")
        })
        return _obj



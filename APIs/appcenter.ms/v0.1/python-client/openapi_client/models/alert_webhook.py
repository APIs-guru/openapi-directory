# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AlertWebhook(BaseModel):
    """
    Alerting webhook
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Allows eanble/disable webhook")
    event_types: List[StrictStr] = Field(description="Event types enabled for webhook")
    id: Optional[StrictStr] = Field(default=None, description="The unique id (UUID) of the webhook")
    name: Annotated[str, Field(strict=True, max_length=512)] = Field(description="display name of the webhook")
    url: StrictStr = Field(description="target url of the webhook")
    __properties: ClassVar[List[str]] = ["enabled", "event_types", "id", "name", "url"]

    @field_validator('event_types')
    def event_types_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['newCrashGroupCreated', 'newAppReleased']):
                raise ValueError("each list item must be one of ('newCrashGroupCreated', 'newAppReleased')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertWebhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertWebhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "event_types": obj.get("event_types"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "url": obj.get("url")
        })
        return _obj



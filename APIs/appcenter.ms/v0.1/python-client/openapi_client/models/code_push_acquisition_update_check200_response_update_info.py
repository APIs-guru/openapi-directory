# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CodePushAcquisitionUpdateCheck200ResponseUpdateInfo(BaseModel):
    """
    CodePushAcquisitionUpdateCheck200ResponseUpdateInfo
    """ # noqa: E501
    description: Optional[StrictStr] = None
    is_disabled: Optional[StrictBool] = None
    is_mandatory: Optional[StrictBool] = None
    rollout: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None
    target_binary_range: Optional[StrictStr] = None
    download_url: Optional[StrictStr] = None
    is_available: StrictBool
    label: Optional[StrictStr] = None
    package_hash: Optional[StrictStr] = None
    package_size: Optional[Union[StrictFloat, StrictInt]] = None
    should_run_binary_version: Optional[StrictBool] = None
    update_app_version: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["description", "is_disabled", "is_mandatory", "rollout", "target_binary_range", "download_url", "is_available", "label", "package_hash", "package_size", "should_run_binary_version", "update_app_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodePushAcquisitionUpdateCheck200ResponseUpdateInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodePushAcquisitionUpdateCheck200ResponseUpdateInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "is_disabled": obj.get("is_disabled"),
            "is_mandatory": obj.get("is_mandatory"),
            "rollout": obj.get("rollout"),
            "target_binary_range": obj.get("target_binary_range"),
            "download_url": obj.get("download_url"),
            "is_available": obj.get("is_available"),
            "label": obj.get("label"),
            "package_hash": obj.get("package_hash"),
            "package_size": obj.get("package_size"),
            "should_run_binary_version": obj.get("should_run_binary_version"),
            "update_app_version": obj.get("update_app_version")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.crash_details import CrashDetails
from openapi_client.models.stacktrace import Stacktrace
from typing import Optional, Set
from typing_extensions import Self

class Crash(BaseModel):
    """
    Crash
    """ # noqa: E501
    build: StrictStr
    crash_id: StrictStr
    details: Optional[CrashDetails] = None
    device: StrictStr
    device_name: Optional[StrictStr] = None
    display_id: Optional[StrictStr] = None
    new_crash_group_id: StrictStr
    new_crash_id: StrictStr
    os_type: Optional[StrictStr] = None
    os_version: StrictStr
    stacktrace: Optional[Stacktrace] = None
    timestamp: datetime
    user_email: Optional[StrictStr] = None
    user_name: StrictStr
    version: StrictStr
    __properties: ClassVar[List[str]] = ["build", "crash_id", "details", "device", "device_name", "display_id", "new_crash_group_id", "new_crash_id", "os_type", "os_version", "stacktrace", "timestamp", "user_email", "user_name", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Crash from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stacktrace
        if self.stacktrace:
            _dict['stacktrace'] = self.stacktrace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Crash from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build": obj.get("build"),
            "crash_id": obj.get("crash_id"),
            "details": CrashDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "device": obj.get("device"),
            "device_name": obj.get("device_name"),
            "display_id": obj.get("display_id"),
            "new_crash_group_id": obj.get("new_crash_group_id"),
            "new_crash_id": obj.get("new_crash_id"),
            "os_type": obj.get("os_type"),
            "os_version": obj.get("os_version"),
            "stacktrace": Stacktrace.from_dict(obj["stacktrace"]) if obj.get("stacktrace") is not None else None,
            "timestamp": obj.get("timestamp"),
            "user_email": obj.get("user_email"),
            "user_name": obj.get("user_name"),
            "version": obj.get("version")
        })
        return _obj



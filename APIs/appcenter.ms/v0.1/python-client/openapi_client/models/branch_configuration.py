# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.branch_configurations_get200_response_all_of_artifact_versioning import BranchConfigurationsGet200ResponseAllOfArtifactVersioning
from openapi_client.models.branch_configurations_get200_response_all_of_toolsets import BranchConfigurationsGet200ResponseAllOfToolsets
from typing import Optional, Set
from typing_extensions import Self

class BranchConfiguration(BaseModel):
    """
    The branch build configuration
    """ # noqa: E501
    artifact_versioning: Optional[BranchConfigurationsGet200ResponseAllOfArtifactVersioning] = Field(default=None, alias="artifactVersioning")
    badge_is_enabled: Optional[StrictBool] = Field(default=None, alias="badgeIsEnabled")
    clone_from_branch: Optional[StrictStr] = Field(default=None, description="A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.", alias="cloneFromBranch")
    signed: Optional[StrictBool] = None
    tests_enabled: Optional[StrictBool] = Field(default=None, alias="testsEnabled")
    toolsets: Optional[BranchConfigurationsGet200ResponseAllOfToolsets] = None
    trigger: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["artifactVersioning", "badgeIsEnabled", "cloneFromBranch", "signed", "testsEnabled", "toolsets", "trigger"]

    @field_validator('trigger')
    def trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['continous', 'continuous', 'manual']):
            raise ValueError("must be one of enum values ('continous', 'continuous', 'manual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BranchConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact_versioning
        if self.artifact_versioning:
            _dict['artifactVersioning'] = self.artifact_versioning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toolsets
        if self.toolsets:
            _dict['toolsets'] = self.toolsets.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BranchConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactVersioning": BranchConfigurationsGet200ResponseAllOfArtifactVersioning.from_dict(obj["artifactVersioning"]) if obj.get("artifactVersioning") is not None else None,
            "badgeIsEnabled": obj.get("badgeIsEnabled"),
            "cloneFromBranch": obj.get("cloneFromBranch"),
            "signed": obj.get("signed"),
            "testsEnabled": obj.get("testsEnabled"),
            "toolsets": BranchConfigurationsGet200ResponseAllOfToolsets.from_dict(obj["toolsets"]) if obj.get("toolsets") is not None else None,
            "trigger": obj.get("trigger")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



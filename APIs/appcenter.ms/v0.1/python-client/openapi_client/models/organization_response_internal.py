# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrganizationResponseInternal(BaseModel):
    """
    OrganizationResponseInternal
    """ # noqa: E501
    avatar_url: Optional[StrictStr] = Field(default=None, description="The URL to a user-uploaded Avatar image")
    created_at: StrictStr = Field(description="The creation date of this organization")
    display_name: StrictStr = Field(description="The display name of the organization")
    id: StrictStr = Field(description="The internal unique id (UUID) of the organization.")
    name: StrictStr = Field(description="The slug name of the organization")
    origin: StrictStr = Field(description="The creation origin of this organization")
    updated_at: StrictStr = Field(description="The date the organization was last updated at")
    feature_flags: Optional[List[StrictStr]] = Field(default=None, description="The feature flags that are enabled for this organization")
    __properties: ClassVar[List[str]] = ["avatar_url", "created_at", "display_name", "id", "name", "origin", "updated_at", "feature_flags"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['appcenter', 'hockeyapp']):
            raise ValueError("must be one of enum values ('appcenter', 'hockeyapp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationResponseInternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationResponseInternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar_url": obj.get("avatar_url"),
            "created_at": obj.get("created_at"),
            "display_name": obj.get("display_name"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "origin": obj.get("origin"),
            "updated_at": obj.get("updated_at"),
            "feature_flags": obj.get("feature_flags")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.app_invitations_list200_response_distribution_group import AppInvitationsList200ResponseDistributionGroup
from openapi_client.models.app_invitations_list200_response_invited_by import AppInvitationsList200ResponseInvitedBy
from openapi_client.models.apps_list200_response_inner import AppsList200ResponseInner
from typing import Optional, Set
from typing_extensions import Self

class AppInvitationsList200Response(BaseModel):
    """
    AppInvitationsList200Response
    """ # noqa: E501
    app: AppsList200ResponseInner
    app_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of apps in the group")
    distribution_group: Optional[AppInvitationsList200ResponseDistributionGroup] = None
    email: StrictStr = Field(description="The email address of the invited user")
    id: StrictStr = Field(description="The unique ID (UUID) of the invitation")
    invite_type: StrictStr = Field(description="The invitation type")
    invited_by: AppInvitationsList200ResponseInvitedBy
    is_existing_user: StrictBool = Field(description="Indicates whether the invited user already exists")
    permissions: Optional[List[StrictStr]] = Field(default=None, description="The permissions the user has for the app")
    __properties: ClassVar[List[str]] = ["app", "app_count", "distribution_group", "email", "id", "invite_type", "invited_by", "is_existing_user", "permissions"]

    @field_validator('invite_type')
    def invite_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['developer', 'tester']):
            raise ValueError("must be one of enum values ('developer', 'tester')")
        return value

    @field_validator('permissions')
    def permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['manager', 'developer', 'viewer', 'tester']):
                raise ValueError("each list item must be one of ('manager', 'developer', 'viewer', 'tester')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppInvitationsList200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of distribution_group
        if self.distribution_group:
            _dict['distribution_group'] = self.distribution_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invited_by
        if self.invited_by:
            _dict['invited_by'] = self.invited_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppInvitationsList200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app": AppsList200ResponseInner.from_dict(obj["app"]) if obj.get("app") is not None else None,
            "app_count": obj.get("app_count"),
            "distribution_group": AppInvitationsList200ResponseDistributionGroup.from_dict(obj["distribution_group"]) if obj.get("distribution_group") is not None else None,
            "email": obj.get("email"),
            "id": obj.get("id"),
            "invite_type": obj.get("invite_type"),
            "invited_by": AppInvitationsList200ResponseInvitedBy.from_dict(obj["invited_by"]) if obj.get("invited_by") is not None else None,
            "is_existing_user": obj.get("is_existing_user"),
            "permissions": obj.get("permissions")
        })
        return _obj



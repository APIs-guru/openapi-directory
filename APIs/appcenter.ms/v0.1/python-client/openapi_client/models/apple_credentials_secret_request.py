# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppleCredentialsSecretRequest(BaseModel):
    """
    Apple connection secrets
    """ # noqa: E501
    data: object = Field(description="apple secret details")
    credential_type: Optional[StrictStr] = Field(default='credentials', description="credential type of the shared connection. Values can be credentials|certificate", alias="credentialType")
    display_name: Optional[StrictStr] = Field(default=None, description="display name of shared connection", alias="displayName")
    service_type: StrictStr = Field(description="service type of shared connection can be apple|gitlab|googleplay|jira|applecertificate", alias="serviceType")
    __properties: ClassVar[List[str]] = ["credentialType", "data", "displayName", "serviceType"]

    @field_validator('credential_type')
    def credential_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['credentials', 'certificate', 'key']):
            raise ValueError("must be one of enum values ('credentials', 'certificate', 'key')")
        return value

    @field_validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['apple', 'jira', 'googleplay', 'gitlab']):
            raise ValueError("must be one of enum values ('apple', 'jira', 'googleplay', 'gitlab')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppleCredentialsSecretRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppleCredentialsSecretRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credentialType": obj.get("credentialType") if obj.get("credentialType") is not None else 'credentials',
            "data": obj.get("data"),
            "displayName": obj.get("displayName"),
            "serviceType": obj.get("serviceType")
        })
        return _obj



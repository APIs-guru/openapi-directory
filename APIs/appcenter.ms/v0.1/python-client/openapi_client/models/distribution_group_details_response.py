# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.distribution_groups_list_users200_response_inner import DistributionGroupsListUsers200ResponseInner
from typing import Optional, Set
from typing_extensions import Self

class DistributionGroupDetailsResponse(BaseModel):
    """
    DistributionGroupDetailsResponse
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the distribution group")
    id: StrictStr = Field(description="The unique ID of the distribution group")
    is_public: StrictBool = Field(description="Whether the distribution group is public")
    name: StrictStr = Field(description="The name of the distribution group used in URLs")
    origin: StrictStr = Field(description="The creation origin of this distribution group")
    group_type: Optional[StrictStr] = Field(default=None, description="Type of group (Default, HockeyAppDefault or MicrosoftDogfooding)")
    is_shared: StrictBool = Field(description="Whether the distribution group is shared group or not")
    notified_user_count: Union[StrictFloat, StrictInt] = Field(description="The count of non-pending users in the distribution group who will be notified by new releases")
    total_apps_count: Union[StrictFloat, StrictInt] = Field(description="The count of apps associated with this distribution group")
    total_user_count: Union[StrictFloat, StrictInt] = Field(description="The count of users in the distribution group")
    users: List[DistributionGroupsListUsers200ResponseInner] = Field(description="The distribution group users")
    __properties: ClassVar[List[str]] = ["display_name", "id", "is_public", "name", "origin", "group_type", "is_shared", "notified_user_count", "total_apps_count", "total_user_count", "users"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['appcenter', 'hockeyapp']):
            raise ValueError("must be one of enum values ('appcenter', 'hockeyapp')")
        return value

    @field_validator('group_type')
    def group_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Default', 'HockeyAppDefault', 'MicrosoftDogfooding']):
            raise ValueError("must be one of enum values ('Default', 'HockeyAppDefault', 'MicrosoftDogfooding')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DistributionGroupDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DistributionGroupDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "id": obj.get("id"),
            "is_public": obj.get("is_public"),
            "name": obj.get("name"),
            "origin": obj.get("origin"),
            "group_type": obj.get("group_type"),
            "is_shared": obj.get("is_shared"),
            "notified_user_count": obj.get("notified_user_count"),
            "total_apps_count": obj.get("total_apps_count"),
            "total_user_count": obj.get("total_user_count"),
            "users": [DistributionGroupsListUsers200ResponseInner.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.errors_group_list200_response_error_groups_inner_all_of_reason_frames_inner import ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner
from typing import Optional, Set
from typing_extensions import Self

class ErrorsLatestErrorDetails200Response(BaseModel):
    """
    ErrorsLatestErrorDetails200Response
    """ # noqa: E501
    app_launch_timestamp: Optional[datetime] = Field(default=None, description="Timestamp when the app was launched, example: '2017-03-13T18:05:42Z'. ", alias="appLaunchTimestamp")
    carrier_name: Optional[StrictStr] = Field(default=None, description="Carrier name (for mobile devices). ", alias="carrierName")
    jailbreak: Optional[StrictBool] = Field(default=None, description="Flag indicating if device is jailbroken ")
    name: Optional[StrictStr] = None
    properties: Optional[Dict[str, StrictStr]] = None
    reason_frames: Optional[List[ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner]] = Field(default=None, alias="reasonFrames")
    country: Optional[StrictStr] = None
    device_name: Optional[StrictStr] = Field(default=None, alias="deviceName")
    error_id: Optional[StrictStr] = Field(default=None, alias="errorId")
    has_attachments: Optional[StrictBool] = Field(default=None, alias="hasAttachments")
    has_breadcrumbs: Optional[StrictBool] = Field(default=None, alias="hasBreadcrumbs")
    language: Optional[StrictStr] = None
    os_type: Optional[StrictStr] = Field(default=None, alias="osType")
    os_version: Optional[StrictStr] = Field(default=None, alias="osVersion")
    timestamp: Optional[datetime] = None
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    __properties: ClassVar[List[str]] = ["country", "deviceName", "errorId", "hasAttachments", "hasBreadcrumbs", "language", "osType", "osVersion", "timestamp", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorsLatestErrorDetails200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorsLatestErrorDetails200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "deviceName": obj.get("deviceName"),
            "errorId": obj.get("errorId"),
            "hasAttachments": obj.get("hasAttachments"),
            "hasBreadcrumbs": obj.get("hasBreadcrumbs"),
            "language": obj.get("language"),
            "osType": obj.get("osType"),
            "osVersion": obj.get("osVersion"),
            "timestamp": obj.get("timestamp"),
            "userId": obj.get("userId")
        })
        return _obj



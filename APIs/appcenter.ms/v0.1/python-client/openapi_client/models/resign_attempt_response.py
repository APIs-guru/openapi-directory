# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ResignAttemptResponse(BaseModel):
    """
    URL that can be used to check the status of the update devices operation and the updated profiles.
    """ # noqa: E501
    app_id: StrictStr = Field(description="App ID that the resign operation is being performed against.", alias="appId")
    context_id: StrictStr = Field(description="Context ID for the resigning operation.", alias="contextId")
    destinations: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of destinations that the resign operation is being performed against.")
    error_code: Optional[StrictStr] = Field(default=None, description="Error code associated with the exception.", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="Error message associated with the exception.", alias="errorMessage")
    original_release_id: Union[StrictFloat, StrictInt] = Field(description="ID of the release which is being resigned.", alias="originalReleaseId")
    resign_id: StrictStr = Field(description="ID of the resign operation.", alias="resignId")
    start_time: Union[StrictFloat, StrictInt] = Field(description="The time that the resign operation was started.", alias="startTime")
    status: StrictStr = Field(description="The status of the resigning operation.")
    user_id: StrictStr = Field(description="ID of the user performing the resign operaiton.", alias="userId")
    __properties: ClassVar[List[str]] = ["appId", "contextId", "destinations", "errorCode", "errorMessage", "originalReleaseId", "resignId", "startTime", "status", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResignAttemptResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResignAttemptResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "contextId": obj.get("contextId"),
            "destinations": obj.get("destinations"),
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "originalReleaseId": obj.get("originalReleaseId"),
            "resignId": obj.get("resignId"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "userId": obj.get("userId")
        })
        return _obj



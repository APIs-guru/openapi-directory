# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.builds_list_toolsets200_response_node_inner import BuildsListToolsets200ResponseNodeInner
from openapi_client.models.builds_list_toolsets200_response_xamarin_inner import BuildsListToolsets200ResponseXamarinInner
from openapi_client.models.builds_list_toolsets200_response_xcode_inner import BuildsListToolsets200ResponseXcodeInner
from typing import Optional, Set
from typing_extensions import Self

class Toolsets(BaseModel):
    """
    Set of toolsets available for app
    """ # noqa: E501
    node: Optional[List[BuildsListToolsets200ResponseNodeInner]] = Field(default=None, description="A list of Node versions")
    xamarin: Optional[List[BuildsListToolsets200ResponseXamarinInner]] = Field(default=None, description="A list of Xamarin SDK bundles")
    xcode: Optional[List[BuildsListToolsets200ResponseXcodeInner]] = Field(default=None, description="A list of Xcode versions")
    __properties: ClassVar[List[str]] = ["node", "xamarin", "xcode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Toolsets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in node (list)
        _items = []
        if self.node:
            for _item_node in self.node:
                if _item_node:
                    _items.append(_item_node.to_dict())
            _dict['node'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in xamarin (list)
        _items = []
        if self.xamarin:
            for _item_xamarin in self.xamarin:
                if _item_xamarin:
                    _items.append(_item_xamarin.to_dict())
            _dict['xamarin'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in xcode (list)
        _items = []
        if self.xcode:
            for _item_xcode in self.xcode:
                if _item_xcode:
                    _items.append(_item_xcode.to_dict())
            _dict['xcode'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Toolsets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "node": [BuildsListToolsets200ResponseNodeInner.from_dict(_item) for _item in obj["node"]] if obj.get("node") is not None else None,
            "xamarin": [BuildsListToolsets200ResponseXamarinInner.from_dict(_item) for _item in obj["xamarin"]] if obj.get("xamarin") is not None else None,
            "xcode": [BuildsListToolsets200ResponseXcodeInner.from_dict(_item) for _item in obj["xcode"]] if obj.get("xcode") is not None else None
        })
        return _obj



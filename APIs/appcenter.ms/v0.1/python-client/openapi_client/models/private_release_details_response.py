# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PrivateReleaseDetailsResponse(BaseModel):
    """
    Details of an uploaded release
    """ # noqa: E501
    android_min_api_level: Optional[StrictStr] = Field(default=None, description="The release's minimum required Android API level.")
    app_display_name: Optional[StrictStr] = Field(default=None, description="The app's display name.")
    app_icon_url: Optional[StrictStr] = Field(default=None, description="A URL to the app's icon.")
    app_name: Optional[StrictStr] = Field(default=None, description="The app's name (extracted from the uploaded release).")
    bundle_identifier: Optional[StrictStr] = Field(default=None, description="The identifier of the apps bundle.")
    destination_type: Optional[StrictStr] = Field(default=None, description="The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> ")
    device_family: Optional[StrictStr] = Field(default=None, description="The release's device family.")
    distribution_group_id: Optional[StrictStr] = Field(default=None, description="the destination where release is distributed")
    download_url: Optional[StrictStr] = Field(default=None, description="The URL that hosts the binary for this release.")
    fingerprint: Optional[StrictStr] = Field(default=None, description="MD5 checksum of the release binary.")
    id: Optional[StrictInt] = Field(default=None, description="ID identifying this unique release.")
    install_url: Optional[StrictStr] = Field(default=None, description="The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`")
    is_external_build: Optional[StrictBool] = Field(default=None, description="This value determines if a release is external or not.")
    is_provisioning_profile_syncing: Optional[StrictBool] = Field(default=None, description="A flag that determines whether the release's provisioning profile is still extracted or not.")
    min_os: Optional[StrictStr] = Field(default=None, description="The release's minimum required operating system.")
    origin: Optional[StrictStr] = Field(default=None, description="The release's origin")
    provisioning_profile_name: Optional[StrictStr] = Field(default=None, description="The release's provisioning profile name.")
    provisioning_profile_type: Optional[StrictStr] = Field(default=None, description="The type of the provisioning profile for the requested app version.")
    publishing_status: Optional[StrictStr] = Field(default=None, description="the publishing status of the distributed release")
    release_notes: Optional[StrictStr] = Field(default=None, description="The release's release notes.")
    secondary_download_url: Optional[StrictStr] = Field(default=None, description="The URL that hosts the secondary binary for this release, such as the apk file for aab releases.")
    short_version: Optional[StrictStr] = Field(default=None, description="The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. ")
    size: Optional[StrictInt] = Field(default=None, description="The release's size in bytes.")
    status: Optional[StrictStr] = Field(default=None, description="OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br> The release state.<br> <b>available</b>: The uploaded release has been distributed.<br> <b>unavailable</b>: The uploaded release is not visible to the user. <br> ")
    uploaded_at: Optional[StrictStr] = Field(default=None, description="UTC time in ISO 8601 format of the uploaded time.")
    version: Optional[StrictStr] = Field(default=None, description="The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. ")
    __properties: ClassVar[List[str]] = ["android_min_api_level", "app_display_name", "app_icon_url", "app_name", "bundle_identifier", "destination_type", "device_family", "distribution_group_id", "download_url", "fingerprint", "id", "install_url", "is_external_build", "is_provisioning_profile_syncing", "min_os", "origin", "provisioning_profile_name", "provisioning_profile_type", "publishing_status", "release_notes", "secondary_download_url", "short_version", "size", "status", "uploaded_at", "version"]

    @field_validator('destination_type')
    def destination_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['group', 'store', 'tester']):
            raise ValueError("must be one of enum values ('group', 'store', 'tester')")
        return value

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['hockeyapp', 'appcenter']):
            raise ValueError("must be one of enum values ('hockeyapp', 'appcenter')")
        return value

    @field_validator('provisioning_profile_type')
    def provisioning_profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['adhoc', 'enterprise', 'other']):
            raise ValueError("must be one of enum values ('adhoc', 'enterprise', 'other')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['available', 'unavailable']):
            raise ValueError("must be one of enum values ('available', 'unavailable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateReleaseDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateReleaseDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "android_min_api_level": obj.get("android_min_api_level"),
            "app_display_name": obj.get("app_display_name"),
            "app_icon_url": obj.get("app_icon_url"),
            "app_name": obj.get("app_name"),
            "bundle_identifier": obj.get("bundle_identifier"),
            "destination_type": obj.get("destination_type"),
            "device_family": obj.get("device_family"),
            "distribution_group_id": obj.get("distribution_group_id"),
            "download_url": obj.get("download_url"),
            "fingerprint": obj.get("fingerprint"),
            "id": obj.get("id"),
            "install_url": obj.get("install_url"),
            "is_external_build": obj.get("is_external_build"),
            "is_provisioning_profile_syncing": obj.get("is_provisioning_profile_syncing"),
            "min_os": obj.get("min_os"),
            "origin": obj.get("origin"),
            "provisioning_profile_name": obj.get("provisioning_profile_name"),
            "provisioning_profile_type": obj.get("provisioning_profile_type"),
            "publishing_status": obj.get("publishing_status"),
            "release_notes": obj.get("release_notes"),
            "secondary_download_url": obj.get("secondary_download_url"),
            "short_version": obj.get("short_version"),
            "size": obj.get("size"),
            "status": obj.get("status"),
            "uploaded_at": obj.get("uploaded_at"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DataSubjectRightOperation(BaseModel):
    """
    DataSubjectRightOperation
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="Application identifier if applicable", alias="appId")
    context: StrictStr = Field(description="JSON object decribing what to delete (TODO - make separate definition?)")
    operation_id: StrictStr = Field(description="Unique operation identifier", alias="operationId")
    participant: StrictStr = Field(description="Participant to execute the response")
    participant_data: Optional[StrictStr] = Field(default=None, description="String field to be used by participant for any intermediate statuses or data they need to save", alias="participantData")
    request_id: StrictStr = Field(description="Unique request identifier", alias="requestId")
    request_type: StrictStr = Field(description="Request type", alias="requestType")
    status: StrictStr = Field(description="Operation status")
    __properties: ClassVar[List[str]] = ["appId", "context", "operationId", "participant", "participantData", "requestId", "requestType", "status"]

    @field_validator('request_type')
    def request_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Unsupported', 'Delete', 'Purge', 'UndoDelete', 'Scheduled', 'AppDelete', 'AppPurge', 'AppUndoDelete', 'Export', 'CustomerAccountDelete', 'CustomerAccountExport', 'CustomerUserDelete', 'CustomerUserExport']):
            raise ValueError("must be one of enum values ('Unsupported', 'Delete', 'Purge', 'UndoDelete', 'Scheduled', 'AppDelete', 'AppPurge', 'AppUndoDelete', 'Export', 'CustomerAccountDelete', 'CustomerAccountExport', 'CustomerUserDelete', 'CustomerUserExport')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['None', 'Created', 'Queued', 'InProgress', 'Completed', 'Failed']):
            raise ValueError("must be one of enum values ('None', 'Created', 'Queued', 'InProgress', 'Completed', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSubjectRightOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSubjectRightOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "context": obj.get("context"),
            "operationId": obj.get("operationId"),
            "participant": obj.get("participant"),
            "participantData": obj.get("participantData"),
            "requestId": obj.get("requestId"),
            "requestType": obj.get("requestType"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SymbolsList200ResponseInner(BaseModel):
    """
    SymbolsList200ResponseInner
    """ # noqa: E501
    alternate_symbol_ids: List[StrictStr] = Field(description="The other symbols in the same file")
    app_id: StrictStr = Field(description="The application that this symbol belongs to")
    build: Optional[StrictStr] = Field(default=None, description="The build number. Optional for Apple. Required for Android.")
    origin: StrictStr = Field(description="The origin of the symbol file")
    platform: StrictStr = Field(description="The platform that this symbol is associated with")
    status: StrictStr = Field(description="Whether the symbol is ignored.")
    symbol_id: StrictStr = Field(description="The unique id for this symbol (uuid)")
    symbol_upload_id: StrictStr = Field(description="The id of the symbol upload this symbol belongs to.")
    type: StrictStr = Field(description="The type of the symbol for the current symbol upload")
    url: StrictStr = Field(description="The path name of the symbol file in blob storage")
    version: Optional[StrictStr] = Field(default=None, description="The version number. Optional for Apple. Required for Android.")
    __properties: ClassVar[List[str]] = ["alternate_symbol_ids", "app_id", "build", "origin", "platform", "status", "symbol_id", "symbol_upload_id", "type", "url", "version"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['System', 'User']):
            raise ValueError("must be one of enum values ('System', 'User')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['available', 'ignored']):
            raise ValueError("must be one of enum values ('available', 'ignored')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Apple', 'JavaScript', 'Breakpad', 'AndroidProguard', 'UWP']):
            raise ValueError("must be one of enum values ('Apple', 'JavaScript', 'Breakpad', 'AndroidProguard', 'UWP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SymbolsList200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SymbolsList200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternate_symbol_ids": obj.get("alternate_symbol_ids"),
            "app_id": obj.get("app_id"),
            "build": obj.get("build"),
            "origin": obj.get("origin"),
            "platform": obj.get("platform"),
            "status": obj.get("status"),
            "symbol_id": obj.get("symbol_id"),
            "symbol_upload_id": obj.get("symbol_upload_id"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "version": obj.get("version")
        })
        return _obj



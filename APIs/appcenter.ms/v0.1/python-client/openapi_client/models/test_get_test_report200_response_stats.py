# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TestGetTestReport200ResponseStats(BaseModel):
    """
    TestGetTestReport200ResponseStats
    """ # noqa: E501
    artifacts: Optional[Dict[str, StrictStr]] = None
    devices: Union[StrictFloat, StrictInt]
    devices_failed: Union[StrictFloat, StrictInt]
    devices_finished: Union[StrictFloat, StrictInt]
    devices_not_runned: Union[StrictFloat, StrictInt]
    devices_skipped: Union[StrictFloat, StrictInt]
    failed: Union[StrictFloat, StrictInt]
    filesize: Union[StrictFloat, StrictInt]
    os: Union[StrictFloat, StrictInt]
    passed: Union[StrictFloat, StrictInt]
    skipped: Union[StrictFloat, StrictInt]
    step_count: Union[StrictFloat, StrictInt]
    total: Union[StrictFloat, StrictInt]
    total_device_minutes: Union[StrictFloat, StrictInt] = Field(alias="totalDeviceMinutes")
    __properties: ClassVar[List[str]] = ["artifacts", "devices", "devices_failed", "devices_finished", "devices_not_runned", "devices_skipped", "failed", "filesize", "os", "passed", "skipped", "step_count", "total", "totalDeviceMinutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestGetTestReport200ResponseStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestGetTestReport200ResponseStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifacts": obj.get("artifacts"),
            "devices": obj.get("devices"),
            "devices_failed": obj.get("devices_failed"),
            "devices_finished": obj.get("devices_finished"),
            "devices_not_runned": obj.get("devices_not_runned"),
            "devices_skipped": obj.get("devices_skipped"),
            "failed": obj.get("failed"),
            "filesize": obj.get("filesize"),
            "os": obj.get("os"),
            "passed": obj.get("passed"),
            "skipped": obj.get("skipped"),
            "step_count": obj.get("step_count"),
            "total": obj.get("total"),
            "totalDeviceMinutes": obj.get("totalDeviceMinutes")
        })
        return _obj



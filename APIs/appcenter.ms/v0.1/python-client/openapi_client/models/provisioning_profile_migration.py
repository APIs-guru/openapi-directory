# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProvisioningProfileMigration(BaseModel):
    """
    Describes the migration schema for a provisioning profile defined in HockeyApp.
    """ # noqa: E501
    bundle_id: StrictStr = Field(description="The bundle/application identifier.")
    expired_at: Optional[StrictStr] = Field(default=None, description="The provisioning profile's expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z.")
    is_appex: StrictBool = Field(description="A boolean value that indicates whether the provisioning profile represents an app extension.")
    name: StrictStr = Field(description="The name of the provisioning profile.")
    team_identifier: StrictStr = Field(description="The team identifier.")
    type: StrictInt = Field(description="The type of provisoning profile.")
    udids: Optional[List[StrictStr]] = Field(default=None, description="A list of UDIDs of provisioned devices.")
    url: Optional[StrictStr] = Field(default=None, description="A provisioning profile URL that indicates where to download it from.")
    __properties: ClassVar[List[str]] = ["bundle_id", "expired_at", "is_appex", "name", "team_identifier", "type", "udids", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([0, 1, 2]):
            raise ValueError("must be one of enum values (0, 1, 2)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisioningProfileMigration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisioningProfileMigration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundle_id": obj.get("bundle_id"),
            "expired_at": obj.get("expired_at"),
            "is_appex": obj.get("is_appex"),
            "name": obj.get("name"),
            "team_identifier": obj.get("team_identifier"),
            "type": obj.get("type"),
            "udids": obj.get("udids"),
            "url": obj.get("url")
        })
        return _obj



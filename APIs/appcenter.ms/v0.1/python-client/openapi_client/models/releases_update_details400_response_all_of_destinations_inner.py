# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReleasesUpdateDetails400ResponseAllOfDestinationsInner(BaseModel):
    """
    ReleasesUpdateDetails400ResponseAllOfDestinationsInner
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Error Codes:<br> <b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br> <b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br> <b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br> <b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br> <b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br> <b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br> <b>store_release_not_found</b>: App with the given package name is not found in the store.<br> <b>store_release_not_available</b>: The release is not available.<br> <b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error. ")
    id: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["code", "id", "message", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleasesUpdateDetails400ResponseAllOfDestinationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleasesUpdateDetails400ResponseAllOfDestinationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "name": obj.get("name")
        })
        return _obj



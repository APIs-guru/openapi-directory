# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_invitations_list200_response_invited_by import AppInvitationsList200ResponseInvitedBy
from openapi_client.models.organizations_list_administered200_response_organizations import OrganizationsListAdministered200ResponseOrganizations
from typing import Optional, Set
from typing_extensions import Self

class OrganizationInvitationDetailResponse(BaseModel):
    """
    OrganizationInvitationDetailResponse
    """ # noqa: E501
    email: StrictStr = Field(description="The email address of the invited user")
    id: StrictStr = Field(description="The unique ID (UUID) of the invitation")
    invited_by: AppInvitationsList200ResponseInvitedBy
    is_existing_user: StrictBool = Field(description="Indicates whether the invited user already exists")
    organization: OrganizationsListAdministered200ResponseOrganizations
    role: Optional[StrictStr] = Field(default=None, description="The role assigned to the invited user")
    __properties: ClassVar[List[str]] = ["email", "id", "invited_by", "is_existing_user", "organization", "role"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationInvitationDetailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invited_by
        if self.invited_by:
            _dict['invited_by'] = self.invited_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationInvitationDetailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "id": obj.get("id"),
            "invited_by": AppInvitationsList200ResponseInvitedBy.from_dict(obj["invited_by"]) if obj.get("invited_by") is not None else None,
            "is_existing_user": obj.get("is_existing_user"),
            "organization": OrganizationsListAdministered200ResponseOrganizations.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "role": obj.get("role")
        })
        return _obj



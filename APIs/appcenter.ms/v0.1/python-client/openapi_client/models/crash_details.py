# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CrashDetails(BaseModel):
    """
    CrashDetails
    """ # noqa: E501
    app_start_timestamp: Optional[datetime] = Field(default=None, description="Application launch timestamp (example: 1985-04-12T23:20:50.52Z). ")
    carrier_country: Optional[StrictStr] = Field(default=None, description="Carrier country code (for mobile devices). ")
    carrier_name: Optional[StrictStr] = Field(default=None, description="Carrier name (for mobile devices). ")
    locale: StrictStr = Field(description="Language code (example: en_US). ")
    os_build: Optional[StrictStr] = Field(default=None, description="OS build code (example: LMY47X). ")
    rooted: StrictBool = Field(description="Whether the device where the crash occurred is rooted or jailbroken ")
    screen_size: StrictStr = Field(description="Screen size of the device in pixels (example: 640x480). ")
    __properties: ClassVar[List[str]] = ["app_start_timestamp", "carrier_country", "carrier_name", "locale", "os_build", "rooted", "screen_size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrashDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrashDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_start_timestamp": obj.get("app_start_timestamp"),
            "carrier_country": obj.get("carrier_country"),
            "carrier_name": obj.get("carrier_name"),
            "locale": obj.get("locale"),
            "os_build": obj.get("os_build"),
            "rooted": obj.get("rooted"),
            "screen_size": obj.get("screen_size")
        })
        return _obj



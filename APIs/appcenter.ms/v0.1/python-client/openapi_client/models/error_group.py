# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ErrorGroup(BaseModel):
    """
    ErrorGroup
    """ # noqa: E501
    app_build: Optional[StrictStr] = Field(default=None, alias="appBuild")
    app_version: StrictStr = Field(alias="appVersion")
    code_raw: Optional[StrictStr] = Field(default=None, alias="codeRaw")
    count: StrictInt
    device_count: StrictInt = Field(alias="deviceCount")
    error_group_id: StrictStr = Field(alias="errorGroupId")
    exception_app_code: Optional[StrictBool] = Field(default=None, alias="exceptionAppCode")
    exception_class_method: Optional[StrictBool] = Field(default=None, alias="exceptionClassMethod")
    exception_class_name: Optional[StrictStr] = Field(default=None, alias="exceptionClassName")
    exception_file: Optional[StrictStr] = Field(default=None, alias="exceptionFile")
    exception_line: Optional[StrictStr] = Field(default=None, alias="exceptionLine")
    exception_message: Optional[StrictStr] = Field(default=None, alias="exceptionMessage")
    exception_method: Optional[StrictStr] = Field(default=None, alias="exceptionMethod")
    exception_type: Optional[StrictStr] = Field(default=None, alias="exceptionType")
    first_occurrence: datetime = Field(alias="firstOccurrence")
    hidden: Optional[StrictBool] = None
    last_occurrence: datetime = Field(alias="lastOccurrence")
    reason_frames: Optional[List[Optional[object]]] = Field(default=None, alias="reasonFrames")
    annotation: Optional[StrictStr] = None
    state: StrictStr
    __properties: ClassVar[List[str]] = ["annotation", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['open', 'closed', 'ignored']):
            raise ValueError("must be one of enum values ('open', 'closed', 'ignored')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotation": obj.get("annotation"),
            "state": obj.get("state")
        })
        return _obj



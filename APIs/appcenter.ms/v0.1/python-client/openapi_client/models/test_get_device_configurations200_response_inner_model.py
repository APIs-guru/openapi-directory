# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.test_get_device_configurations200_response_inner_model_cpu import TestGetDeviceConfigurations200ResponseInnerModelCpu
from openapi_client.models.test_get_device_configurations200_response_inner_model_device_frame import TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame
from openapi_client.models.test_get_device_configurations200_response_inner_model_dimensions import TestGetDeviceConfigurations200ResponseInnerModelDimensions
from openapi_client.models.test_get_device_configurations200_response_inner_model_memory import TestGetDeviceConfigurations200ResponseInnerModelMemory
from openapi_client.models.test_get_device_configurations200_response_inner_model_resolution import TestGetDeviceConfigurations200ResponseInnerModelResolution
from openapi_client.models.test_get_device_configurations200_response_inner_model_screen_size import TestGetDeviceConfigurations200ResponseInnerModelScreenSize
from typing import Optional, Set
from typing_extensions import Self

class TestGetDeviceConfigurations200ResponseInnerModel(BaseModel):
    """
    TestGetDeviceConfigurations200ResponseInnerModel
    """ # noqa: E501
    availability_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="availabilityCount")
    cpu: Optional[TestGetDeviceConfigurations200ResponseInnerModelCpu] = None
    device_frame: Optional[TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame] = Field(default=None, alias="deviceFrame")
    dimensions: Optional[TestGetDeviceConfigurations200ResponseInnerModelDimensions] = None
    form_factor: Optional[StrictStr] = Field(default=None, alias="formFactor")
    manufacturer: Optional[StrictStr] = None
    memory: Optional[TestGetDeviceConfigurations200ResponseInnerModelMemory] = None
    model: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    platform: Optional[StrictStr] = None
    release_date: Optional[StrictStr] = Field(default=None, alias="releaseDate")
    resolution: Optional[TestGetDeviceConfigurations200ResponseInnerModelResolution] = None
    screen_rotation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="screenRotation")
    screen_size: Optional[TestGetDeviceConfigurations200ResponseInnerModelScreenSize] = Field(default=None, alias="screenSize")
    __properties: ClassVar[List[str]] = ["availabilityCount", "cpu", "deviceFrame", "dimensions", "formFactor", "manufacturer", "memory", "model", "name", "platform", "releaseDate", "resolution", "screenRotation", "screenSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestGetDeviceConfigurations200ResponseInnerModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_frame
        if self.device_frame:
            _dict['deviceFrame'] = self.device_frame.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict['memory'] = self.memory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolution
        if self.resolution:
            _dict['resolution'] = self.resolution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of screen_size
        if self.screen_size:
            _dict['screenSize'] = self.screen_size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestGetDeviceConfigurations200ResponseInnerModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availabilityCount": obj.get("availabilityCount"),
            "cpu": TestGetDeviceConfigurations200ResponseInnerModelCpu.from_dict(obj["cpu"]) if obj.get("cpu") is not None else None,
            "deviceFrame": TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame.from_dict(obj["deviceFrame"]) if obj.get("deviceFrame") is not None else None,
            "dimensions": TestGetDeviceConfigurations200ResponseInnerModelDimensions.from_dict(obj["dimensions"]) if obj.get("dimensions") is not None else None,
            "formFactor": obj.get("formFactor"),
            "manufacturer": obj.get("manufacturer"),
            "memory": TestGetDeviceConfigurations200ResponseInnerModelMemory.from_dict(obj["memory"]) if obj.get("memory") is not None else None,
            "model": obj.get("model"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "releaseDate": obj.get("releaseDate"),
            "resolution": TestGetDeviceConfigurations200ResponseInnerModelResolution.from_dict(obj["resolution"]) if obj.get("resolution") is not None else None,
            "screenRotation": obj.get("screenRotation"),
            "screenSize": TestGetDeviceConfigurations200ResponseInnerModelScreenSize.from_dict(obj["screenSize"]) if obj.get("screenSize") is not None else None
        })
        return _obj



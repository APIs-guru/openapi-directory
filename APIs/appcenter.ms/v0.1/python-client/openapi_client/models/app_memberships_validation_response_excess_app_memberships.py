# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_memberships_response_memberships_inner import AppMembershipsResponseMembershipsInner
from typing import Optional, Set
from typing_extensions import Self

class AppMembershipsValidationResponseExcessAppMemberships(BaseModel):
    """
    AppMembershipsValidationResponseExcessAppMemberships
    """ # noqa: E501
    app_users_memberships: Optional[List[AppMembershipsResponseMembershipsInner]] = None
    distribution_group_memberships: Optional[List[AppMembershipsResponseMembershipsInner]] = None
    organization_admin_memberships: Optional[List[AppMembershipsResponseMembershipsInner]] = None
    __properties: ClassVar[List[str]] = ["app_users_memberships", "distribution_group_memberships", "organization_admin_memberships"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppMembershipsValidationResponseExcessAppMemberships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_users_memberships (list)
        _items = []
        if self.app_users_memberships:
            for _item_app_users_memberships in self.app_users_memberships:
                if _item_app_users_memberships:
                    _items.append(_item_app_users_memberships.to_dict())
            _dict['app_users_memberships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_group_memberships (list)
        _items = []
        if self.distribution_group_memberships:
            for _item_distribution_group_memberships in self.distribution_group_memberships:
                if _item_distribution_group_memberships:
                    _items.append(_item_distribution_group_memberships.to_dict())
            _dict['distribution_group_memberships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in organization_admin_memberships (list)
        _items = []
        if self.organization_admin_memberships:
            for _item_organization_admin_memberships in self.organization_admin_memberships:
                if _item_organization_admin_memberships:
                    _items.append(_item_organization_admin_memberships.to_dict())
            _dict['organization_admin_memberships'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppMembershipsValidationResponseExcessAppMemberships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_users_memberships": [AppMembershipsResponseMembershipsInner.from_dict(_item) for _item in obj["app_users_memberships"]] if obj.get("app_users_memberships") is not None else None,
            "distribution_group_memberships": [AppMembershipsResponseMembershipsInner.from_dict(_item) for _item in obj["distribution_group_memberships"]] if obj.get("distribution_group_memberships") is not None else None,
            "organization_admin_memberships": [AppMembershipsResponseMembershipsInner.from_dict(_item) for _item in obj["organization_admin_memberships"]] if obj.get("organization_admin_memberships") is not None else None
        })
        return _obj



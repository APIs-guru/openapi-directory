# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExportConfigurationsList200ResponseValuesInnerExportConfiguration(BaseModel):
    """
    Export configuration
    """ # noqa: E501
    backfill: Optional[StrictBool] = Field(default=None, description="Field to determine if backfilling should occur. The default value is true. If set to false export starts from date and time of config creation.")
    export_entities: Optional[List[StrictStr]] = None
    resource_group: Optional[StrictStr] = Field(default=None, description="The resource group name on azure")
    resource_name: Optional[StrictStr] = Field(default=None, description="The resource name on azure")
    type: StrictStr = Field(description="Type of export configuration")
    __properties: ClassVar[List[str]] = ["backfill", "export_entities", "resource_group", "resource_name", "type"]

    @field_validator('export_entities')
    def export_entities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['crashes', 'errors', 'attachments', 'no_logs']):
                raise ValueError("each list item must be one of ('crashes', 'errors', 'attachments', 'no_logs')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['blob_storage_connection_string', 'application_insights_instrumentation_key', 'blob_storage_linked_subscription', 'application_insights_linked_subscription']):
            raise ValueError("must be one of enum values ('blob_storage_connection_string', 'application_insights_instrumentation_key', 'blob_storage_linked_subscription', 'application_insights_linked_subscription')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportConfigurationsList200ResponseValuesInnerExportConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportConfigurationsList200ResponseValuesInnerExportConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backfill": obj.get("backfill"),
            "export_entities": obj.get("export_entities"),
            "resource_group": obj.get("resource_group"),
            "resource_name": obj.get("resource_name"),
            "type": obj.get("type")
        })
        return _obj



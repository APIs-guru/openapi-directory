# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.release_create_request_appex_provisioning_profiles_inner import ReleaseCreateRequestAppexProvisioningProfilesInner
from openapi_client.models.release_create_request_ipa_uuids_inner import ReleaseCreateRequestIpaUuidsInner
from typing import Optional, Set
from typing_extensions import Self

class ReleaseCreateRequest(BaseModel):
    """
    A request containing information for creating a release.
    """ # noqa: E501
    appex_provisioning_profiles: Optional[List[ReleaseCreateRequestAppexProvisioningProfilesInner]] = Field(default=None, description="iOS app extension provisioning profiles included in the release.")
    build_version: Optional[StrictStr] = Field(default=None, description="The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. ")
    device_family: Optional[StrictStr] = Field(default=None, description="The release's device family.")
    file_extension: Optional[StrictStr] = Field(default=None, description="The file extension of the asset. Does not include the initial period.")
    fingerprint: StrictStr = Field(description="MD5 checksum of the release binary.")
    icon_asset_id: Optional[StrictStr] = Field(default=None, description="The assetId associated with the icon uploaded to app center file upload service.")
    ipa_uuids: Optional[List[ReleaseCreateRequestIpaUuidsInner]] = Field(default=None, description="A list of UUIDs for architectures for an iOS app.")
    languages: Optional[List[StrictStr]] = Field(default=None, description="The languages supported by the release. Limited to 510 characters in a serialized array.")
    minimum_os_version: Optional[StrictStr] = Field(default=None, description="The release's minimum required operating system.")
    package_url: Optional[StrictStr] = Field(default=None, description="The URL to the release's binary.")
    provision: Optional[ReleaseCreateRequestAppexProvisioningProfilesInner] = None
    proxy_flow: Optional[StrictBool] = Field(default=None, description="If true this release was uploaded to the AKS upload proxy")
    size: StrictInt = Field(description="The release's size in bytes.")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="The identifier of the app's bundle.")
    upload_id: StrictStr = Field(description="The upload id associated with the release, to map to the releases upload table.")
    version: Optional[StrictStr] = Field(default=None, description="The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. ")
    __properties: ClassVar[List[str]] = ["appex_provisioning_profiles", "build_version", "device_family", "file_extension", "fingerprint", "icon_asset_id", "ipa_uuids", "languages", "minimum_os_version", "package_url", "provision", "proxy_flow", "size", "unique_identifier", "upload_id", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleaseCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in appex_provisioning_profiles (list)
        _items = []
        if self.appex_provisioning_profiles:
            for _item_appex_provisioning_profiles in self.appex_provisioning_profiles:
                if _item_appex_provisioning_profiles:
                    _items.append(_item_appex_provisioning_profiles.to_dict())
            _dict['appex_provisioning_profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ipa_uuids (list)
        _items = []
        if self.ipa_uuids:
            for _item_ipa_uuids in self.ipa_uuids:
                if _item_ipa_uuids:
                    _items.append(_item_ipa_uuids.to_dict())
            _dict['ipa_uuids'] = _items
        # override the default output from pydantic by calling `to_dict()` of provision
        if self.provision:
            _dict['provision'] = self.provision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleaseCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appex_provisioning_profiles": [ReleaseCreateRequestAppexProvisioningProfilesInner.from_dict(_item) for _item in obj["appex_provisioning_profiles"]] if obj.get("appex_provisioning_profiles") is not None else None,
            "build_version": obj.get("build_version"),
            "device_family": obj.get("device_family"),
            "file_extension": obj.get("file_extension"),
            "fingerprint": obj.get("fingerprint"),
            "icon_asset_id": obj.get("icon_asset_id"),
            "ipa_uuids": [ReleaseCreateRequestIpaUuidsInner.from_dict(_item) for _item in obj["ipa_uuids"]] if obj.get("ipa_uuids") is not None else None,
            "languages": obj.get("languages"),
            "minimum_os_version": obj.get("minimum_os_version"),
            "package_url": obj.get("package_url"),
            "provision": ReleaseCreateRequestAppexProvisioningProfilesInner.from_dict(obj["provision"]) if obj.get("provision") is not None else None,
            "proxy_flow": obj.get("proxy_flow"),
            "size": obj.get("size"),
            "unique_identifier": obj.get("unique_identifier"),
            "upload_id": obj.get("upload_id"),
            "version": obj.get("version")
        })
        return _obj



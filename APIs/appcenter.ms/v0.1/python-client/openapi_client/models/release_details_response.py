# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.releases_get_latest_by_distribution_group200_response_build import ReleasesGetLatestByDistributionGroup200ResponseBuild
from openapi_client.models.releases_get_latest_by_distribution_group200_response_destinations_inner import ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner
from openapi_client.models.releases_get_latest_by_distribution_group200_response_distribution_groups_inner import ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner
from openapi_client.models.releases_get_latest_by_distribution_group200_response_distribution_stores_inner import ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner
from typing import Optional, Set
from typing_extensions import Self

class ReleaseDetailsResponse(BaseModel):
    """
    Details of an uploaded release
    """ # noqa: E501
    android_min_api_level: Optional[StrictStr] = Field(default=None, description="The release's minimum required Android API level.")
    app_display_name: StrictStr = Field(description="The app's display name.")
    app_icon_url: StrictStr = Field(description="A URL to the app's icon.")
    app_name: StrictStr = Field(description="The app's name (extracted from the uploaded release).")
    app_os: Optional[StrictStr] = Field(default=None, description="The app's OS.")
    build: Optional[ReleasesGetLatestByDistributionGroup200ResponseBuild] = None
    bundle_identifier: Optional[StrictStr] = Field(default=None, description="The identifier of the apps bundle.")
    can_resign: Optional[StrictBool] = Field(default=None, description="In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.")
    destination_type: Optional[StrictStr] = Field(default=None, description="OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br> <b>tester</b>: The release distributed testers details will be returned.<br> ")
    destinations: Optional[List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]] = Field(default=None, description="A list of distribution groups or stores.")
    device_family: Optional[StrictStr] = Field(default=None, description="The release's device family.")
    distribution_groups: Optional[List[ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner]] = Field(default=None, description="OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.")
    distribution_stores: Optional[List[ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner]] = Field(default=None, description="OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.")
    download_url: Optional[StrictStr] = Field(default=None, description="The URL that hosts the binary for this release.")
    enabled: StrictBool = Field(description="This value determines the whether a release currently is enabled or disabled.")
    fingerprint: Optional[StrictStr] = Field(default=None, description="MD5 checksum of the release binary.")
    id: StrictInt = Field(description="ID identifying this unique release.")
    install_url: Optional[StrictStr] = Field(default=None, description="The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`")
    is_external_build: Optional[StrictBool] = Field(default=None, description="This value determines if a release is external or not.")
    is_provisioning_profile_syncing: Optional[StrictBool] = Field(default=None, description="A flag that determines whether the release's provisioning profile is still extracted or not.")
    is_udid_provisioned: Optional[StrictBool] = Field(default=None, description="In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.")
    min_os: Optional[StrictStr] = Field(default=None, description="The release's minimum required operating system.")
    origin: Optional[StrictStr] = Field(default=None, description="The release's origin")
    package_hashes: Optional[List[StrictStr]] = Field(default=None, description="Hashes for the packages.")
    provisioning_profile_expiry_date: Optional[StrictStr] = Field(default=None, description="expiration date of provisioning profile in UTC format.")
    provisioning_profile_name: Optional[StrictStr] = Field(default=None, description="The release's provisioning profile name.")
    provisioning_profile_type: Optional[StrictStr] = Field(default=None, description="The type of the provisioning profile for the requested app version.")
    release_notes: Optional[StrictStr] = Field(default=None, description="The release's release notes.")
    secondary_download_url: Optional[StrictStr] = Field(default=None, description="The URL that hosts the secondary binary for this release, such as the apk file for aab releases.")
    short_version: StrictStr = Field(description="The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. ")
    size: Optional[StrictInt] = Field(default=None, description="The release's size in bytes.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the release.")
    uploaded_at: StrictStr = Field(description="UTC time in ISO 8601 format of the uploaded time.")
    version: StrictStr = Field(description="The release's version.<br> For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. ")
    __properties: ClassVar[List[str]] = ["android_min_api_level", "app_display_name", "app_icon_url", "app_name", "app_os", "build", "bundle_identifier", "can_resign", "destination_type", "destinations", "device_family", "distribution_groups", "distribution_stores", "download_url", "enabled", "fingerprint", "id", "install_url", "is_external_build", "is_provisioning_profile_syncing", "is_udid_provisioned", "min_os", "origin", "package_hashes", "provisioning_profile_expiry_date", "provisioning_profile_name", "provisioning_profile_type", "release_notes", "secondary_download_url", "short_version", "size", "status", "uploaded_at", "version"]

    @field_validator('destination_type')
    def destination_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['group', 'store', 'tester']):
            raise ValueError("must be one of enum values ('group', 'store', 'tester')")
        return value

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['hockeyapp', 'appcenter']):
            raise ValueError("must be one of enum values ('hockeyapp', 'appcenter')")
        return value

    @field_validator('provisioning_profile_type')
    def provisioning_profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['adhoc', 'enterprise', 'other']):
            raise ValueError("must be one of enum values ('adhoc', 'enterprise', 'other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleaseDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item_destinations in self.destinations:
                if _item_destinations:
                    _items.append(_item_destinations.to_dict())
            _dict['destinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_groups (list)
        _items = []
        if self.distribution_groups:
            for _item_distribution_groups in self.distribution_groups:
                if _item_distribution_groups:
                    _items.append(_item_distribution_groups.to_dict())
            _dict['distribution_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_stores (list)
        _items = []
        if self.distribution_stores:
            for _item_distribution_stores in self.distribution_stores:
                if _item_distribution_stores:
                    _items.append(_item_distribution_stores.to_dict())
            _dict['distribution_stores'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleaseDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "android_min_api_level": obj.get("android_min_api_level"),
            "app_display_name": obj.get("app_display_name"),
            "app_icon_url": obj.get("app_icon_url"),
            "app_name": obj.get("app_name"),
            "app_os": obj.get("app_os"),
            "build": ReleasesGetLatestByDistributionGroup200ResponseBuild.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "bundle_identifier": obj.get("bundle_identifier"),
            "can_resign": obj.get("can_resign"),
            "destination_type": obj.get("destination_type"),
            "destinations": [ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "device_family": obj.get("device_family"),
            "distribution_groups": [ReleasesGetLatestByDistributionGroup200ResponseDistributionGroupsInner.from_dict(_item) for _item in obj["distribution_groups"]] if obj.get("distribution_groups") is not None else None,
            "distribution_stores": [ReleasesGetLatestByDistributionGroup200ResponseDistributionStoresInner.from_dict(_item) for _item in obj["distribution_stores"]] if obj.get("distribution_stores") is not None else None,
            "download_url": obj.get("download_url"),
            "enabled": obj.get("enabled"),
            "fingerprint": obj.get("fingerprint"),
            "id": obj.get("id"),
            "install_url": obj.get("install_url"),
            "is_external_build": obj.get("is_external_build"),
            "is_provisioning_profile_syncing": obj.get("is_provisioning_profile_syncing"),
            "is_udid_provisioned": obj.get("is_udid_provisioned"),
            "min_os": obj.get("min_os"),
            "origin": obj.get("origin"),
            "package_hashes": obj.get("package_hashes"),
            "provisioning_profile_expiry_date": obj.get("provisioning_profile_expiry_date"),
            "provisioning_profile_name": obj.get("provisioning_profile_name"),
            "provisioning_profile_type": obj.get("provisioning_profile_type"),
            "release_notes": obj.get("release_notes"),
            "secondary_download_url": obj.get("secondary_download_url"),
            "short_version": obj.get("short_version"),
            "size": obj.get("size"),
            "status": obj.get("status"),
            "uploaded_at": obj.get("uploaded_at"),
            "version": obj.get("version")
        })
        return _obj



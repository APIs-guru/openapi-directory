# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Destination(BaseModel):
    """
    Destination
    """ # noqa: E501
    id: StrictStr = Field(description="Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.")
    name: Optional[StrictStr] = Field(default=None, description="Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.")
    is_latest: Optional[StrictBool] = Field(default=None, description="Is the containing release the latest one in this distribution store.")
    publishing_status: Optional[StrictStr] = Field(default=None, description="publishing status of the release in the store.")
    type: Optional[StrictStr] = Field(default=None, description="type of the distribution store currently stores type can be intune, googleplay or windows.")
    destination_type: Optional[StrictStr] = Field(default=None, description="Destination can be either store or group.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name for the group or tester")
    __properties: ClassVar[List[str]] = ["id", "name", "is_latest", "publishing_status", "type", "destination_type", "display_name"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['intune', 'googleplay', 'apple', 'none']):
            raise ValueError("must be one of enum values ('intune', 'googleplay', 'apple', 'none')")
        return value

    @field_validator('destination_type')
    def destination_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['group', 'store', 'tester']):
            raise ValueError("must be one of enum values ('group', 'store', 'tester')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Destination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Destination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "is_latest": obj.get("is_latest"),
            "publishing_status": obj.get("publishing_status"),
            "type": obj.get("type"),
            "destination_type": obj.get("destination_type"),
            "display_name": obj.get("display_name")
        })
        return _obj



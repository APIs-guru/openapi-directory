# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagementReleaseDetailsResponse(BaseModel):
    """
    Details of an uploaded release
    """ # noqa: E501
    build_version: Optional[StrictStr] = Field(default=None, description="The release's buildVersion.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. ", alias="buildVersion")
    created_at: Optional[StrictStr] = Field(default=None, description="UTC time the release was created in ISO 8601 format.", alias="createdAt")
    deleted_at: Optional[StrictStr] = Field(default=None, description="UTC time the release was created in ISO 8601 format.", alias="deletedAt")
    distinct_id: Optional[StrictInt] = Field(default=None, description="ID identifying this unique release.", alias="distinctId")
    enabled: Optional[StrictBool] = Field(default=None, description="This value determines the whether a release currently is enabled or disabled.")
    origin: Optional[StrictStr] = Field(default=None, description="The release's origin")
    sort_version: Optional[StrictStr] = Field(default=None, description="The release's sortVersion.", alias="sortVersion")
    version: Optional[StrictStr] = Field(default=None, description="The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. ")
    __properties: ClassVar[List[str]] = ["buildVersion", "createdAt", "deletedAt", "distinctId", "enabled", "origin", "sortVersion", "version"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['hockeyapp', 'appcenter']):
            raise ValueError("must be one of enum values ('hockeyapp', 'appcenter')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementReleaseDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementReleaseDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildVersion": obj.get("buildVersion"),
            "createdAt": obj.get("createdAt"),
            "deletedAt": obj.get("deletedAt"),
            "distinctId": obj.get("distinctId"),
            "enabled": obj.get("enabled"),
            "origin": obj.get("origin"),
            "sortVersion": obj.get("sortVersion"),
            "version": obj.get("version")
        })
        return _obj



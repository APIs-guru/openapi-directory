# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApiTokensPostRequest(BaseModel):
    """
    ApiTokensPostRequest
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the token")
    encrypted_token: Optional[StrictStr] = Field(default=None, description="An encrypted value of the token.")
    scope: Optional[List[StrictStr]] = Field(default=None, description="The scope for this token. An array of supported roles.")
    token_hash: Optional[StrictStr] = Field(default=None, description="The hashed value of api token")
    token_type: Optional[StrictStr] = Field(default=None, description="The token's type. public:managed by the user; in_app_update:special token for in-app update scenario; buid:dedicated for CI usage for now; session:for CLI session management; tester_app: used for tester mobile app; default is \"public\".'")
    __properties: ClassVar[List[str]] = ["description", "encrypted_token", "scope", "token_hash", "token_type"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['all', 'in_app_update', 'viewer']):
                raise ValueError("each list item must be one of ('all', 'in_app_update', 'viewer')")
        return value

    @field_validator('token_type')
    def token_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['public', 'in_app_update', 'build', 'session', 'tester_app']):
            raise ValueError("must be one of enum values ('public', 'in_app_update', 'build', 'session', 'tester_app')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiTokensPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiTokensPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "encrypted_token": obj.get("encrypted_token"),
            "scope": obj.get("scope"),
            "token_hash": obj.get("token_hash"),
            "token_type": obj.get("token_type")
        })
        return _obj



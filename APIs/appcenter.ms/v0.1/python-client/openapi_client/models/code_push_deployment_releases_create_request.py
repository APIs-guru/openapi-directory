# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.code_push_deployment_releases_create_request_release_upload import CodePushDeploymentReleasesCreateRequestReleaseUpload
from typing import Optional, Set
from typing_extensions import Self

class CodePushDeploymentReleasesCreateRequest(BaseModel):
    """
    CodePushDeploymentReleasesCreateRequest
    """ # noqa: E501
    deployment_name: Optional[StrictStr] = Field(default=None, description="This specifies which deployment you want to release the update to. Default is Staging.")
    description: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="This provides an optional \"change log\" for the deployment.")
    disabled: Optional[StrictBool] = Field(default=None, description="This specifies whether an update should be downloadable by end users or not.")
    mandatory: Optional[StrictBool] = Field(default=None, description="This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).")
    no_duplicate_release_error: Optional[StrictBool] = Field(default=None, description="This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.")
    release_upload: CodePushDeploymentReleasesCreateRequestReleaseUpload
    rollout: Optional[StrictInt] = Field(default=None, description="This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.")
    target_binary_version: StrictStr = Field(description="the binary version of the application")
    __properties: ClassVar[List[str]] = ["deployment_name", "description", "disabled", "mandatory", "no_duplicate_release_error", "release_upload", "rollout", "target_binary_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodePushDeploymentReleasesCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of release_upload
        if self.release_upload:
            _dict['release_upload'] = self.release_upload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodePushDeploymentReleasesCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployment_name": obj.get("deployment_name"),
            "description": obj.get("description"),
            "disabled": obj.get("disabled"),
            "mandatory": obj.get("mandatory"),
            "no_duplicate_release_error": obj.get("no_duplicate_release_error"),
            "release_upload": CodePushDeploymentReleasesCreateRequestReleaseUpload.from_dict(obj["release_upload"]) if obj.get("release_upload") is not None else None,
            "rollout": obj.get("rollout"),
            "target_binary_version": obj.get("target_binary_version")
        })
        return _obj



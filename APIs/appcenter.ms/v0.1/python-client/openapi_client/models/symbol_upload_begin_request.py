# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SymbolUploadBeginRequest(BaseModel):
    """
    A request containing information pertaining to starting a symbol upload process
    """ # noqa: E501
    build: Optional[StrictStr] = Field(default=None, description="The build number. Optional for Apple. Required for Android.")
    client_callback: Optional[StrictStr] = Field(default=None, description="The callback URL that the client can optionally provide to get status updates for the current symbol upload")
    file_name: Optional[StrictStr] = Field(default=None, description="The file name for the symbol upload")
    symbol_type: StrictStr = Field(description="The type of the symbol for the current symbol upload")
    version: Optional[StrictStr] = Field(default=None, description="The version number. Optional for Apple. Required for Android.")
    __properties: ClassVar[List[str]] = ["build", "client_callback", "file_name", "symbol_type", "version"]

    @field_validator('symbol_type')
    def symbol_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Apple', 'JavaScript', 'Breakpad', 'AndroidProguard', 'UWP']):
            raise ValueError("must be one of enum values ('Apple', 'JavaScript', 'Breakpad', 'AndroidProguard', 'UWP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SymbolUploadBeginRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SymbolUploadBeginRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build": obj.get("build"),
            "client_callback": obj.get("client_callback"),
            "file_name": obj.get("file_name"),
            "symbol_type": obj.get("symbol_type"),
            "version": obj.get("version")
        })
        return _obj



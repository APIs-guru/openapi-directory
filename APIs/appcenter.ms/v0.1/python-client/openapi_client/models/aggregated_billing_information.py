# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billing_aggregated_information_get_by_app200_response_billing_plans import BillingAggregatedInformationGetByApp200ResponseBillingPlans
from openapi_client.models.billing_aggregated_information_get_by_app200_response_usage import BillingAggregatedInformationGetByApp200ResponseUsage
from typing import Optional, Set
from typing_extensions import Self

class AggregatedBillingInformation(BaseModel):
    """
    Aggregated Billing Information for a user or an organization
    """ # noqa: E501
    azure_subscription_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the Azure subscription used for billing", alias="azureSubscriptionId")
    azure_subscription_state: Optional[StrictStr] = Field(default=None, description="State of the Azure subscription used for billing", alias="azureSubscriptionState")
    billing_plans: Optional[BillingAggregatedInformationGetByApp200ResponseBillingPlans] = Field(default=None, alias="billingPlans")
    id: Optional[StrictStr] = Field(default=None, description="ID of the user or organization")
    timestamp: Optional[StrictStr] = Field(default=None, description="The ISO 8601 datetime of last modification")
    usage: Optional[BillingAggregatedInformationGetByApp200ResponseUsage] = None
    version: Optional[StrictStr] = Field(default=None, description="Version of the Billing Information schema")
    __properties: ClassVar[List[str]] = ["azureSubscriptionId", "azureSubscriptionState", "billingPlans", "id", "timestamp", "usage", "version"]

    @field_validator('azure_subscription_state')
    def azure_subscription_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Enabled', 'Disabled', 'NotSet']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled', 'NotSet')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregatedBillingInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_plans
        if self.billing_plans:
            _dict['billingPlans'] = self.billing_plans.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregatedBillingInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureSubscriptionId": obj.get("azureSubscriptionId"),
            "azureSubscriptionState": obj.get("azureSubscriptionState"),
            "billingPlans": BillingAggregatedInformationGetByApp200ResponseBillingPlans.from_dict(obj["billingPlans"]) if obj.get("billingPlans") is not None else None,
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "usage": BillingAggregatedInformationGetByApp200ResponseUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "version": obj.get("version")
        })
        return _obj



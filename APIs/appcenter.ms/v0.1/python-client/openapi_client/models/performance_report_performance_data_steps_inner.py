# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.performance_report_performance_data_steps_inner_samples_inner import PerformanceReportPerformanceDataStepsInnerSamplesInner
from typing import Optional, Set
from typing_extensions import Self

class PerformanceReportPerformanceDataStepsInner(BaseModel):
    """
    PerformanceReportPerformanceDataStepsInner
    """ # noqa: E501
    avg_cpu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avg-cpu")
    avg_mem: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avg-mem")
    elapsed_secs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="elapsed-secs")
    elapsed_secs_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="elapsed-secs-end")
    elapsed_secs_start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="elapsed-secs-start")
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    samples: Optional[List[PerformanceReportPerformanceDataStepsInnerSamplesInner]] = None
    __properties: ClassVar[List[str]] = ["avg-cpu", "avg-mem", "elapsed-secs", "elapsed-secs-end", "elapsed-secs-start", "id", "name", "samples"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformanceReportPerformanceDataStepsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in samples (list)
        _items = []
        if self.samples:
            for _item_samples in self.samples:
                if _item_samples:
                    _items.append(_item_samples.to_dict())
            _dict['samples'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformanceReportPerformanceDataStepsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avg-cpu": obj.get("avg-cpu"),
            "avg-mem": obj.get("avg-mem"),
            "elapsed-secs": obj.get("elapsed-secs"),
            "elapsed-secs-end": obj.get("elapsed-secs-end"),
            "elapsed-secs-start": obj.get("elapsed-secs-start"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "samples": [PerformanceReportPerformanceDataStepsInnerSamplesInner.from_dict(_item) for _item in obj["samples"]] if obj.get("samples") is not None else None
        })
        return _obj



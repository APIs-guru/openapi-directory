# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.crashes_list_session_logs200_response_logs_inner import CrashesListSessionLogs200ResponseLogsInner
from typing import Optional, Set
from typing_extensions import Self

class GenericLogContainer(BaseModel):
    """
    GenericLogContainer
    """ # noqa: E501
    exceeded_max_limit: Optional[StrictBool] = Field(default=None, description="indicates if the number of available logs are more than the max allowed return limit(100).")
    last_received_log_timestamp: Optional[datetime] = Field(default=None, description="the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.")
    logs: Annotated[List[CrashesListSessionLogs200ResponseLogsInner], Field(min_length=0)] = Field(description="the list of logs")
    __properties: ClassVar[List[str]] = ["exceeded_max_limit", "last_received_log_timestamp", "logs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenericLogContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logs (list)
        _items = []
        if self.logs:
            for _item_logs in self.logs:
                if _item_logs:
                    _items.append(_item_logs.to_dict())
            _dict['logs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenericLogContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exceeded_max_limit": obj.get("exceeded_max_limit"),
            "last_received_log_timestamp": obj.get("last_received_log_timestamp"),
            "logs": [CrashesListSessionLogs200ResponseLogsInner.from_dict(_item) for _item in obj["logs"]] if obj.get("logs") is not None else None
        })
        return _obj



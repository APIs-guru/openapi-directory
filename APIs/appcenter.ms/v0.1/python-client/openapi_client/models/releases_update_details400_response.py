# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.releases_update_details400_response_all_of_destinations_inner import ReleasesUpdateDetails400ResponseAllOfDestinationsInner
from typing import Optional, Set
from typing_extensions import Self

class ReleasesUpdateDetails400Response(BaseModel):
    """
    ReleasesUpdateDetails400Response
    """ # noqa: E501
    code: StrictStr
    message: StrictStr
    destinations: Optional[List[ReleasesUpdateDetails400ResponseAllOfDestinationsInner]] = None
    mandatory_update: Optional[StrictBool] = None
    release_notes: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["code", "message", "destinations", "mandatory_update", "release_notes"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BadRequest', 'Conflict', 'NotAcceptable', 'NotFound', 'InternalServerError', 'Unauthorized', 'TooManyRequests']):
            raise ValueError("must be one of enum values ('BadRequest', 'Conflict', 'NotAcceptable', 'NotFound', 'InternalServerError', 'Unauthorized', 'TooManyRequests')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleasesUpdateDetails400Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item_destinations in self.destinations:
                if _item_destinations:
                    _items.append(_item_destinations.to_dict())
            _dict['destinations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleasesUpdateDetails400Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "destinations": [ReleasesUpdateDetails400ResponseAllOfDestinationsInner.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "mandatory_update": obj.get("mandatory_update"),
            "release_notes": obj.get("release_notes")
        })
        return _obj



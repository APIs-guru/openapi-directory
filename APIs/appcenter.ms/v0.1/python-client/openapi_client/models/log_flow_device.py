# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class LogFlowDevice(BaseModel):
    """
    Device characteristics.
    """ # noqa: E501
    app_build: StrictStr = Field(description="The app's build number, e.g. 42. ")
    app_namespace: Optional[StrictStr] = Field(default=None, description="The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example. ")
    app_version: StrictStr = Field(description="Application version name, e.g. 1.1.0 ")
    carrier_code: Optional[StrictStr] = Field(default=None, description="Carrier country code (for mobile devices). ")
    carrier_country: Optional[StrictStr] = Field(default=None, description="Carrier country. ")
    carrier_name: Optional[StrictStr] = Field(default=None, description="Carrier name (for mobile devices). ")
    live_update_deployment_key: Optional[StrictStr] = Field(default=None, description="Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging. ")
    live_update_package_hash: Optional[StrictStr] = Field(default=None, description="Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future. ")
    live_update_release_label: Optional[StrictStr] = Field(default=None, description="Label that is used to identify application code 'version' released via Live Update beacon running on device ")
    locale: StrictStr = Field(description="Language code (example: en_US). ")
    model: Optional[StrictStr] = Field(default=None, description="Device model (example: iPad2,3). ")
    oem_name: Optional[StrictStr] = Field(default=None, description="Device manufacturer (example: HTC). ")
    os_api_level: Optional[StrictInt] = Field(default=None, description="API level when applicable like in Android (example: 15). ")
    os_build: Optional[StrictStr] = Field(default=None, description="OS build code (example: LMY47X). ")
    os_name: StrictStr = Field(description="OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows. ")
    os_version: StrictStr = Field(description="OS version (example: 9.3.0). ")
    screen_size: Optional[StrictStr] = Field(default=None, description="Screen size of the device in pixels (example: 640x480). ")
    sdk_name: StrictStr = Field(description="Name of the SDK. Consists of the name of the SDK and the platform, e.g. \"appcenter.ios\", \"hockeysdk.android\". ")
    sdk_version: StrictStr = Field(description="Version of the SDK in semver format, e.g. \"1.2.0\" or \"0.12.3-alpha.1\". ")
    time_zone_offset: Annotated[int, Field(le=840, strict=True, ge=-840)] = Field(description="The offset in minutes from UTC for the device time zone, including daylight savings time. ")
    wrapper_runtime_version: Optional[StrictStr] = Field(default=None, description="Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other. ")
    wrapper_sdk_name: Optional[StrictStr] = Field(default=None, description="Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \"appcenter.xamarin\", \"hockeysdk.cordova\". ")
    wrapper_sdk_version: Optional[StrictStr] = Field(default=None, description="Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK. ")
    __properties: ClassVar[List[str]] = ["app_build", "app_namespace", "app_version", "carrier_code", "carrier_country", "carrier_name", "live_update_deployment_key", "live_update_package_hash", "live_update_release_label", "locale", "model", "oem_name", "os_api_level", "os_build", "os_name", "os_version", "screen_size", "sdk_name", "sdk_version", "time_zone_offset", "wrapper_runtime_version", "wrapper_sdk_name", "wrapper_sdk_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogFlowDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogFlowDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_build": obj.get("app_build"),
            "app_namespace": obj.get("app_namespace"),
            "app_version": obj.get("app_version"),
            "carrier_code": obj.get("carrier_code"),
            "carrier_country": obj.get("carrier_country"),
            "carrier_name": obj.get("carrier_name"),
            "live_update_deployment_key": obj.get("live_update_deployment_key"),
            "live_update_package_hash": obj.get("live_update_package_hash"),
            "live_update_release_label": obj.get("live_update_release_label"),
            "locale": obj.get("locale"),
            "model": obj.get("model"),
            "oem_name": obj.get("oem_name"),
            "os_api_level": obj.get("os_api_level"),
            "os_build": obj.get("os_build"),
            "os_name": obj.get("os_name"),
            "os_version": obj.get("os_version"),
            "screen_size": obj.get("screen_size"),
            "sdk_name": obj.get("sdk_name"),
            "sdk_version": obj.get("sdk_version"),
            "time_zone_offset": obj.get("time_zone_offset"),
            "wrapper_runtime_version": obj.get("wrapper_runtime_version"),
            "wrapper_sdk_name": obj.get("wrapper_sdk_name"),
            "wrapper_sdk_version": obj.get("wrapper_sdk_version")
        })
        return _obj



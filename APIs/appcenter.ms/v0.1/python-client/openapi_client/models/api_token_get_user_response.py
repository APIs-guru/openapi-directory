# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ApiTokenGetUserResponse(BaseModel):
    """
    ApiTokenGetUserResponse
    """ # noqa: E501
    token_id: StrictStr = Field(description="The token's unique id (UUID)")
    token_scope: List[StrictStr] = Field(description="The token's scope. A list of allowed roles.")
    user_email: StrictStr = Field(description="The user email")
    user_id: StrictStr = Field(description="The unique id (UUID) of the user")
    user_origin: StrictStr = Field(description="The creation origin of the user who created this api token")
    __properties: ClassVar[List[str]] = ["token_id", "token_scope", "user_email", "user_id", "user_origin"]

    @field_validator('token_scope')
    def token_scope_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['all', 'in_app_update', 'viewer']):
                raise ValueError("each list item must be one of ('all', 'in_app_update', 'viewer')")
        return value

    @field_validator('user_origin')
    def user_origin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['appcenter', 'hockeyapp', 'codepush']):
            raise ValueError("must be one of enum values ('appcenter', 'hockeyapp', 'codepush')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiTokenGetUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiTokenGetUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token_id": obj.get("token_id"),
            "token_scope": obj.get("token_scope"),
            "user_email": obj.get("user_email"),
            "user_id": obj.get("user_id"),
            "user_origin": obj.get("user_origin")
        })
        return _obj



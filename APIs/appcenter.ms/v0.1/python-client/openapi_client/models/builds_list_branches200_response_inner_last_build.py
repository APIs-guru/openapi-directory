# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BuildsListBranches200ResponseInnerLastBuild(BaseModel):
    """
    BuildsListBranches200ResponseInnerLastBuild
    """ # noqa: E501
    build_number: StrictStr = Field(description="The build number", alias="buildNumber")
    finish_time: Optional[StrictStr] = Field(default=None, description="The time the build was finished", alias="finishTime")
    id: Annotated[int, Field(strict=True, gt=0)] = Field(description="The build ID")
    last_changed_date: Optional[StrictStr] = Field(default=None, description="The time the build status was last changed", alias="lastChangedDate")
    queue_time: StrictStr = Field(description="The time the build was queued", alias="queueTime")
    result: StrictStr = Field(description="The build result")
    source_branch: StrictStr = Field(description="The source branch name", alias="sourceBranch")
    source_version: StrictStr = Field(description="The source SHA", alias="sourceVersion")
    start_time: Optional[StrictStr] = Field(default=None, description="The time the build was started", alias="startTime")
    status: StrictStr = Field(description="The build status")
    __properties: ClassVar[List[str]] = ["buildNumber", "finishTime", "id", "lastChangedDate", "queueTime", "result", "sourceBranch", "sourceVersion", "startTime", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildsListBranches200ResponseInnerLastBuild from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildsListBranches200ResponseInnerLastBuild from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildNumber": obj.get("buildNumber"),
            "finishTime": obj.get("finishTime"),
            "id": obj.get("id"),
            "lastChangedDate": obj.get("lastChangedDate"),
            "queueTime": obj.get("queueTime"),
            "result": obj.get("result"),
            "sourceBranch": obj.get("sourceBranch"),
            "sourceVersion": obj.get("sourceVersion"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status")
        })
        return _obj



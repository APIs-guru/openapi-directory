# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.builds_list_toolset_projects200_response_android_android_modules_inner_build_configurations_inner import BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner
from typing import Optional, Set
from typing_extensions import Self

class AndroidModule(BaseModel):
    """
    AndroidModule
    """ # noqa: E501
    build_configurations: Optional[List[BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner]] = Field(default=None, description="The detected build configurations of the Android module", alias="buildConfigurations")
    build_types: Optional[List[StrictStr]] = Field(default=None, description="The detected build types of the Android module", alias="buildTypes")
    build_variants: Optional[List[StrictStr]] = Field(default=None, description="The detected build variants of the Android module (matrix of product flavor + build type (debug|release))", alias="buildVariants")
    has_bundle: Optional[StrictBool] = Field(default=None, description="Module contains bundle settings", alias="hasBundle")
    is_root: Optional[StrictBool] = Field(default=None, description="Whether the module is at the root level of the project", alias="isRoot")
    name: StrictStr = Field(description="Name of the Android module")
    product_flavors: Optional[List[StrictStr]] = Field(default=None, description="The product flavors of the Android module", alias="productFlavors")
    __properties: ClassVar[List[str]] = ["buildConfigurations", "buildTypes", "buildVariants", "hasBundle", "isRoot", "name", "productFlavors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in build_configurations (list)
        _items = []
        if self.build_configurations:
            for _item_build_configurations in self.build_configurations:
                if _item_build_configurations:
                    _items.append(_item_build_configurations.to_dict())
            _dict['buildConfigurations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildConfigurations": [BuildsListToolsetProjects200ResponseAndroidAndroidModulesInnerBuildConfigurationsInner.from_dict(_item) for _item in obj["buildConfigurations"]] if obj.get("buildConfigurations") is not None else None,
            "buildTypes": obj.get("buildTypes"),
            "buildVariants": obj.get("buildVariants"),
            "hasBundle": obj.get("hasBundle"),
            "isRoot": obj.get("isRoot"),
            "name": obj.get("name"),
            "productFlavors": obj.get("productFlavors")
        })
        return _obj



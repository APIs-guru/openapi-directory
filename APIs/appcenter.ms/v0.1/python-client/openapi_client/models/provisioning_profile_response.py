# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProvisioningProfileResponse(BaseModel):
    """
    A response containing information about an iOS provisioning profile.
    """ # noqa: E501
    appex_profiles: Optional[List[ProvisioningProfileResponse]] = Field(default=None, description="Array of provisioning profiles for any app extensions")
    provisioning_bundle_id: Optional[StrictStr] = Field(default=None, description="The bundle identifier associated with the profile.")
    provisioning_profile_name: Optional[StrictStr] = Field(default=None, description="The name of the provisioning profile.")
    provisioning_profile_type: StrictStr
    team_identifier: Optional[StrictStr] = Field(default=None, description="The team identifier.")
    udids: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["appex_profiles", "provisioning_bundle_id", "provisioning_profile_name", "provisioning_profile_type", "team_identifier", "udids"]

    @field_validator('provisioning_profile_type')
    def provisioning_profile_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['adhoc', 'enterprise', 'other']):
            raise ValueError("must be one of enum values ('adhoc', 'enterprise', 'other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisioningProfileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in appex_profiles (list)
        _items = []
        if self.appex_profiles:
            for _item_appex_profiles in self.appex_profiles:
                if _item_appex_profiles:
                    _items.append(_item_appex_profiles.to_dict())
            _dict['appex_profiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisioningProfileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appex_profiles": [ProvisioningProfileResponse.from_dict(_item) for _item in obj["appex_profiles"]] if obj.get("appex_profiles") is not None else None,
            "provisioning_bundle_id": obj.get("provisioning_bundle_id"),
            "provisioning_profile_name": obj.get("provisioning_profile_name"),
            "provisioning_profile_type": obj.get("provisioning_profile_type"),
            "team_identifier": obj.get("team_identifier"),
            "udids": obj.get("udids")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ProvisioningProfileResponse.model_rebuild(raise_errors=False)


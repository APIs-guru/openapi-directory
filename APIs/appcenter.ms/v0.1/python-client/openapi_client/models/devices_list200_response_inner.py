# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DevicesList200ResponseInner(BaseModel):
    """
    The information for a single iOS device
    """ # noqa: E501
    device_name: StrictStr = Field(description="The device description, in the format \"iPhone 7 Plus (A1784)\"")
    full_device_name: Optional[StrictStr] = Field(default=None, description="A combination of the device model name and the owner name.")
    imei: Optional[StrictStr] = Field(default=None, description="The device's International Mobile Equipment Identity number. Always empty or undefined at present.")
    model: StrictStr = Field(description="The model identifier of the device, in the format iDeviceM,N")
    os_build: StrictStr = Field(description="The last known OS version running on the device")
    os_version: StrictStr = Field(description="The last known OS version running on the device")
    owner_id: Optional[StrictStr] = Field(default=None, description="The user ID of the device owner.")
    registered_at: Optional[StrictStr] = Field(default=None, description="Timestamp of when the device was registered in ISO format.")
    serial: Optional[StrictStr] = Field(default=None, description="The device's serial number. Always empty or undefined at present.")
    status: StrictStr = Field(description="The provisioning status of the device.")
    udid: StrictStr = Field(description="The Unique Device IDentifier of the device")
    __properties: ClassVar[List[str]] = ["device_name", "full_device_name", "imei", "model", "os_build", "os_version", "owner_id", "registered_at", "serial", "status", "udid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DevicesList200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DevicesList200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_name": obj.get("device_name"),
            "full_device_name": obj.get("full_device_name"),
            "imei": obj.get("imei"),
            "model": obj.get("model"),
            "os_build": obj.get("os_build"),
            "os_version": obj.get("os_version"),
            "owner_id": obj.get("owner_id"),
            "registered_at": obj.get("registered_at"),
            "serial": obj.get("serial"),
            "status": obj.get("status"),
            "udid": obj.get("udid")
        })
        return _obj



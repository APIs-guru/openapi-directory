# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.export_configurations_list200_response_values_inner_export_configuration import ExportConfigurationsList200ResponseValuesInnerExportConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ExportConfigurationResult(BaseModel):
    """
    Export configuration result
    """ # noqa: E501
    creation_time: StrictStr = Field(description="Creation time in ISO 8601 format")
    export_configuration: Optional[ExportConfigurationsList200ResponseValuesInnerExportConfiguration] = None
    export_entities: Optional[List[StrictStr]] = None
    export_type: StrictStr = Field(description="Target resource type of export configuration")
    id: StrictStr = Field(description="Export configuration id")
    last_run_time: Optional[StrictStr] = Field(default=None, description="Latest time in ISO 8601 format when export completed successfully")
    resource_group: Optional[StrictStr] = Field(default=None, description="resource group for the storage account/App Insights resource")
    resource_name: Optional[StrictStr] = Field(default=None, description="Storage accout or Appinsights resource name")
    state: StrictStr = Field(description="State of the export job")
    state_info: Optional[StrictStr] = Field(default=None, description="Additional information about export configuration state")
    __properties: ClassVar[List[str]] = ["creation_time", "export_configuration", "export_entities", "export_type", "id", "last_run_time", "resource_group", "resource_name", "state", "state_info"]

    @field_validator('export_entities')
    def export_entities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['crashes', 'errors', 'attachments', 'no_logs']):
                raise ValueError("each list item must be one of ('crashes', 'errors', 'attachments', 'no_logs')")
        return value

    @field_validator('export_type')
    def export_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BlobStorage', 'AppInsights']):
            raise ValueError("must be one of enum values ('BlobStorage', 'AppInsights')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Enabled', 'Disabled', 'Pending', 'Deleted', 'Invalid']):
            raise ValueError("must be one of enum values ('Enabled', 'Disabled', 'Pending', 'Deleted', 'Invalid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportConfigurationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of export_configuration
        if self.export_configuration:
            _dict['export_configuration'] = self.export_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportConfigurationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation_time": obj.get("creation_time"),
            "export_configuration": ExportConfigurationsList200ResponseValuesInnerExportConfiguration.from_dict(obj["export_configuration"]) if obj.get("export_configuration") is not None else None,
            "export_entities": obj.get("export_entities"),
            "export_type": obj.get("export_type"),
            "id": obj.get("id"),
            "last_run_time": obj.get("last_run_time"),
            "resource_group": obj.get("resource_group"),
            "resource_name": obj.get("resource_name"),
            "state": obj.get("state"),
            "state_info": obj.get("state_info")
        })
        return _obj



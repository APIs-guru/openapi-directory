# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.missing_symbol_groups_list200_response_groups_inner_missing_symbols_inner import MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner
from typing import Optional, Set
from typing_extensions import Self

class MissingSymbolGroupsList200ResponseGroupsInner(BaseModel):
    """
    missing symbol crash group object
    """ # noqa: E501
    app_build: StrictStr = Field(description="application build")
    app_id: StrictStr = Field(description="application id")
    app_ver: StrictStr = Field(description="application version")
    crash_count: Optional[StrictInt] = Field(default=None, description="number of crashes that belong to this group")
    error_count: Optional[StrictInt] = Field(default=None, description="number of errors that belong to this group")
    last_modified: datetime = Field(description="last update date for the group")
    missing_symbols: List[MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner] = Field(description="list of missing symbols")
    status: StrictStr = Field(description="group status")
    symbol_group_id: StrictStr = Field(description="id of the symbol group")
    __properties: ClassVar[List[str]] = ["app_build", "app_id", "app_ver", "crash_count", "error_count", "last_modified", "missing_symbols", "status", "symbol_group_id"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'pending', 'closed']):
            raise ValueError("must be one of enum values ('active', 'pending', 'closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MissingSymbolGroupsList200ResponseGroupsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in missing_symbols (list)
        _items = []
        if self.missing_symbols:
            for _item_missing_symbols in self.missing_symbols:
                if _item_missing_symbols:
                    _items.append(_item_missing_symbols.to_dict())
            _dict['missing_symbols'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MissingSymbolGroupsList200ResponseGroupsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_build": obj.get("app_build"),
            "app_id": obj.get("app_id"),
            "app_ver": obj.get("app_ver"),
            "crash_count": obj.get("crash_count"),
            "error_count": obj.get("error_count"),
            "last_modified": obj.get("last_modified"),
            "missing_symbols": [MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner.from_dict(_item) for _item in obj["missing_symbols"]] if obj.get("missing_symbols") is not None else None,
            "status": obj.get("status"),
            "symbol_group_id": obj.get("symbol_group_id")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HockeyAppCompatibilityReleaseResponse(BaseModel):
    """
    HockeyAppCompatibilityReleaseResponse
    """ # noqa: E501
    appsize: Optional[StrictInt] = None
    bundle_identifier: Optional[StrictStr] = None
    device_family: Optional[StrictStr] = None
    external: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    install_url: Optional[StrictStr] = None
    mandatory: Optional[StrictBool] = None
    minimum_os_version: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    shortversion: Optional[StrictStr] = None
    uploaded_at: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["appsize", "bundle_identifier", "device_family", "external", "id", "install_url", "mandatory", "minimum_os_version", "notes", "shortversion", "uploaded_at", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HockeyAppCompatibilityReleaseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HockeyAppCompatibilityReleaseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appsize": obj.get("appsize"),
            "bundle_identifier": obj.get("bundle_identifier"),
            "device_family": obj.get("device_family"),
            "external": obj.get("external"),
            "id": obj.get("id"),
            "install_url": obj.get("install_url"),
            "mandatory": obj.get("mandatory"),
            "minimum_os_version": obj.get("minimum_os_version"),
            "notes": obj.get("notes"),
            "shortversion": obj.get("shortversion"),
            "uploaded_at": obj.get("uploaded_at"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.test_run_statistics import TestRunStatistics
from typing import Optional, Set
from typing_extensions import Self

class TestRun(BaseModel):
    """
    Summary single test run on Xamarin Test Cloud
    """ # noqa: E501
    app_version: Optional[StrictStr] = Field(default=None, description="The compiled version of the app binary", alias="appVersion")
    var_date: Optional[StrictStr] = Field(default=None, description="The date and time the test was uploaded", alias="date")
    description: Optional[StrictStr] = Field(default=None, description="Human readable explanation of the current test status")
    id: Optional[StrictStr] = Field(default=None, description="The unique id of the test upload")
    platform: Optional[StrictStr] = Field(default=None, description="The device platform targeted by the test. Possible values are 'ios' or 'android'")
    result_status: Optional[StrictStr] = Field(default=None, description="The passed/failed state", alias="resultStatus")
    run_status: Optional[StrictStr] = Field(default=None, description="The current status of the test run, in relation to the various phases", alias="runStatus")
    state: Optional[StrictStr] = Field(default=None, description="Deprecated. Use runStatus instead.")
    stats: Optional[TestRunStatistics] = None
    status: Optional[StrictStr] = Field(default=None, description="Deprecated. Use resultStatus instead.")
    test_series: Optional[StrictStr] = Field(default=None, description="The name of the test series with which this test upload is associated", alias="testSeries")
    test_type: Optional[StrictStr] = Field(default=None, description="The name of the test framework used to run this test", alias="testType")
    __properties: ClassVar[List[str]] = ["appVersion", "date", "description", "id", "platform", "resultStatus", "runStatus", "state", "stats", "status", "testSeries", "testType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appVersion": obj.get("appVersion"),
            "date": obj.get("date"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "platform": obj.get("platform"),
            "resultStatus": obj.get("resultStatus"),
            "runStatus": obj.get("runStatus"),
            "state": obj.get("state"),
            "stats": TestRunStatistics.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "status": obj.get("status"),
            "testSeries": obj.get("testSeries"),
            "testType": obj.get("testType")
        })
        return _obj



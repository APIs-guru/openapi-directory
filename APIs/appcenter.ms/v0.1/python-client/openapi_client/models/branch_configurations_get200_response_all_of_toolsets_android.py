# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BranchConfigurationsGet200ResponseAllOfToolsetsAndroid(BaseModel):
    """
    Build configuration for Android projects
    """ # noqa: E501
    automatic_signing: Optional[StrictBool] = Field(default=None, description="Whether to apply automatic signing or not", alias="automaticSigning")
    build_variant: Optional[StrictStr] = Field(default=None, description="The Android build variant to build", alias="buildVariant")
    gradle_wrapper_path: Optional[StrictStr] = Field(default=None, description="Path to the Gradle wrapper script", alias="gradleWrapperPath")
    is_root: Optional[StrictBool] = Field(default=None, description="Whether it is the root module or not", alias="isRoot")
    key_alias: Optional[StrictStr] = Field(default=None, description="The key alias", alias="keyAlias")
    key_password: Optional[StrictStr] = Field(default=None, description="The key password", alias="keyPassword")
    keystore_encoded: Optional[StrictStr] = Field(default=None, description="The keystore encoded value", alias="keystoreEncoded")
    keystore_filename: Optional[StrictStr] = Field(default=None, description="The name of the keystore file", alias="keystoreFilename")
    keystore_password: Optional[StrictStr] = Field(default=None, description="The password of the keystore", alias="keystorePassword")
    module: Optional[StrictStr] = Field(default=None, description="The Gradle module to build")
    run_lint: Optional[StrictBool] = Field(default=None, description="Whether to run lint checks during the build (default)", alias="runLint")
    run_tests: Optional[StrictBool] = Field(default=True, description="Whether to run unit tests during the build (default)", alias="runTests")
    __properties: ClassVar[List[str]] = ["automaticSigning", "buildVariant", "gradleWrapperPath", "isRoot", "keyAlias", "keyPassword", "keystoreEncoded", "keystoreFilename", "keystorePassword", "module", "runLint", "runTests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BranchConfigurationsGet200ResponseAllOfToolsetsAndroid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BranchConfigurationsGet200ResponseAllOfToolsetsAndroid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automaticSigning": obj.get("automaticSigning"),
            "buildVariant": obj.get("buildVariant"),
            "gradleWrapperPath": obj.get("gradleWrapperPath"),
            "isRoot": obj.get("isRoot"),
            "keyAlias": obj.get("keyAlias"),
            "keyPassword": obj.get("keyPassword"),
            "keystoreEncoded": obj.get("keystoreEncoded"),
            "keystoreFilename": obj.get("keystoreFilename"),
            "keystorePassword": obj.get("keystorePassword"),
            "module": obj.get("module"),
            "runLint": obj.get("runLint"),
            "runTests": obj.get("runTests") if obj.get("runTests") is not None else True
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.update_devices_request_destinations_inner import UpdateDevicesRequestDestinationsInner
from typing import Optional, Set
from typing_extensions import Self

class UpdateDevicesRequest(BaseModel):
    """
    Information required to publish devices to the Apple Developer account and resign the application.
    """ # noqa: E501
    account_service_connection_id: Optional[StrictStr] = Field(default=None, description="The service_connection_id of the stored Apple credentials instead of username, password.")
    destinations: Optional[List[UpdateDevicesRequestDestinationsInner]] = Field(default=None, description="Array of distribution groups that the devices should be provisioned from.")
    devices: Optional[List[StrictStr]] = Field(default=None, description="Array of device UDID's to be published to the Apple Developer account.")
    p12_base64: Optional[StrictStr] = Field(default=None, description="The certificate to use for resigning the application with the updated provisioning profiles.")
    p12_password: Optional[StrictStr] = Field(default=None, description="The password certificate if one is needed.")
    p12_service_connection_id: Optional[StrictStr] = Field(default=None, description="The service_connection_id of the stored Apple certificate instead of p12_base64 value.")
    password: Optional[StrictStr] = Field(default=None, description="The password for the Apple Developer account to publish the devices to.")
    publish_all_devices: Optional[StrictBool] = Field(default=None, description="When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.")
    release_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If `release_id` is passed in the path, there is no need to pass in the body as well.")
    username: Optional[StrictStr] = Field(default=None, description="The username for the Apple Developer account to publish the devices to.")
    __properties: ClassVar[List[str]] = ["account_service_connection_id", "destinations", "devices", "p12_base64", "p12_password", "p12_service_connection_id", "password", "publish_all_devices", "release_id", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDevicesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item_destinations in self.destinations:
                if _item_destinations:
                    _items.append(_item_destinations.to_dict())
            _dict['destinations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDevicesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_service_connection_id": obj.get("account_service_connection_id"),
            "destinations": [UpdateDevicesRequestDestinationsInner.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "devices": obj.get("devices"),
            "p12_base64": obj.get("p12_base64"),
            "p12_password": obj.get("p12_password"),
            "p12_service_connection_id": obj.get("p12_service_connection_id"),
            "password": obj.get("password"),
            "publish_all_devices": obj.get("publish_all_devices"),
            "release_id": obj.get("release_id"),
            "username": obj.get("username")
        })
        return _obj



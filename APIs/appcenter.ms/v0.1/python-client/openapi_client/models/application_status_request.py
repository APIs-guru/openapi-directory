# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplicationStatusRequest(BaseModel):
    """
    The information needed to fetch the status of an application
    """ # noqa: E501
    build_version: Optional[StrictStr] = Field(default=None, description="The version of build for which real time status is to be fetched.")
    bundle_identifier: StrictStr = Field(description="Bundle Identifier of application in Apple Itunes portal.")
    password: StrictStr = Field(description="The password for the Apple Developer account.")
    team_identifier: Optional[StrictStr] = Field(default=None, description="Identifier of the team to use when logged in.")
    track_identifier: StrictStr = Field(description="Track Identifier for which the status is to be fetched.")
    train_version: Optional[StrictStr] = Field(default=None, description="The Train version for which the status is to be fetched.")
    username: StrictStr = Field(description="The username for the Apple Developer account.")
    __properties: ClassVar[List[str]] = ["build_version", "bundle_identifier", "password", "team_identifier", "track_identifier", "train_version", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationStatusRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationStatusRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build_version": obj.get("build_version"),
            "bundle_identifier": obj.get("bundle_identifier"),
            "password": obj.get("password"),
            "team_identifier": obj.get("team_identifier"),
            "track_identifier": obj.get("track_identifier"),
            "train_version": obj.get("train_version"),
            "username": obj.get("username")
        })
        return _obj



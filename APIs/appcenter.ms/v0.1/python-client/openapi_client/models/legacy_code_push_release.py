# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LegacyCodePushRelease(BaseModel):
    """
    LegacyCodePushRelease
    """ # noqa: E501
    app_version: Optional[StrictStr] = Field(default=None, description="The version of the release", alias="appVersion")
    blob_url: Optional[StrictStr] = Field(default=None, description="Location (URL) of release package", alias="blobUrl")
    diff_package_map: Optional[Dict[str, Any]] = Field(default=None, description="Object containing URL and size of changed package hashes contained in the release", alias="diffPackageMap")
    is_disabled: Optional[StrictBool] = Field(default=None, description="Flag used to determine if release is disabled", alias="isDisabled")
    is_mandatory: Optional[StrictBool] = Field(default=None, description="Flag used to determine if release is mandatory", alias="isMandatory")
    label: Optional[StrictStr] = Field(default=None, description="Release label (aka release name)")
    manifest_blob_url: Optional[StrictStr] = Field(default=None, description="The URL location of the package's manifest file.", alias="manifestBlobUrl")
    release_method: Optional[StrictStr] = Field(default=None, description="Method used to deploy release", alias="releaseMethod")
    released_by_user_id: Optional[StrictStr] = Field(default=None, description="User ID that triggered most recent release", alias="releasedByUserId")
    rollout: Optional[StrictInt] = Field(default=None, description="Percentage (out of 100) that release is deployed to")
    size: Optional[StrictInt] = Field(default=None, description="Size of release package")
    upload_time: Optional[StrictInt] = Field(default=None, description="Release upload time as epoch Unix timestamp", alias="uploadTime")
    __properties: ClassVar[List[str]] = ["appVersion", "blobUrl", "diffPackageMap", "isDisabled", "isMandatory", "label", "manifestBlobUrl", "releaseMethod", "releasedByUserId", "rollout", "size", "uploadTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegacyCodePushRelease from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegacyCodePushRelease from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appVersion": obj.get("appVersion"),
            "blobUrl": obj.get("blobUrl"),
            "diffPackageMap": obj.get("diffPackageMap"),
            "isDisabled": obj.get("isDisabled"),
            "isMandatory": obj.get("isMandatory"),
            "label": obj.get("label"),
            "manifestBlobUrl": obj.get("manifestBlobUrl"),
            "releaseMethod": obj.get("releaseMethod"),
            "releasedByUserId": obj.get("releasedByUserId"),
            "rollout": obj.get("rollout"),
            "size": obj.get("size"),
            "uploadTime": obj.get("uploadTime")
        })
        return _obj



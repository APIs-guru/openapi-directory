# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_device_counts200_response_daily_inner import AnalyticsDeviceCounts200ResponseDailyInner
from typing import Optional, Set
from typing_extensions import Self

class ActiveDeviceCounts(BaseModel):
    """
    ActiveDeviceCounts
    """ # noqa: E501
    daily: Optional[List[AnalyticsDeviceCounts200ResponseDailyInner]] = Field(default=None, description="The active device count for each interval.")
    monthly: Optional[List[AnalyticsDeviceCounts200ResponseDailyInner]] = Field(default=None, description="The active device count for each interval with a month's retention.")
    weekly: Optional[List[AnalyticsDeviceCounts200ResponseDailyInner]] = Field(default=None, description="The active device count for each interval with a week's retention.")
    __properties: ClassVar[List[str]] = ["daily", "monthly", "weekly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActiveDeviceCounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in daily (list)
        _items = []
        if self.daily:
            for _item_daily in self.daily:
                if _item_daily:
                    _items.append(_item_daily.to_dict())
            _dict['daily'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in monthly (list)
        _items = []
        if self.monthly:
            for _item_monthly in self.monthly:
                if _item_monthly:
                    _items.append(_item_monthly.to_dict())
            _dict['monthly'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in weekly (list)
        _items = []
        if self.weekly:
            for _item_weekly in self.weekly:
                if _item_weekly:
                    _items.append(_item_weekly.to_dict())
            _dict['weekly'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActiveDeviceCounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "daily": [AnalyticsDeviceCounts200ResponseDailyInner.from_dict(_item) for _item in obj["daily"]] if obj.get("daily") is not None else None,
            "monthly": [AnalyticsDeviceCounts200ResponseDailyInner.from_dict(_item) for _item in obj["monthly"]] if obj.get("monthly") is not None else None,
            "weekly": [AnalyticsDeviceCounts200ResponseDailyInner.from_dict(_item) for _item in obj["weekly"]] if obj.get("weekly") is not None else None
        })
        return _obj



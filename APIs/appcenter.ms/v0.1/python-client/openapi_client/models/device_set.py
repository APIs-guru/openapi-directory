# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.device_set_device_configurations_inner import DeviceSetDeviceConfigurationsInner
from openapi_client.models.device_set_owner import DeviceSetOwner
from typing import Optional, Set
from typing_extensions import Self

class DeviceSet(BaseModel):
    """
    The name and devices of the device set
    """ # noqa: E501
    device_configurations: List[DeviceSetDeviceConfigurationsInner] = Field(alias="deviceConfigurations")
    id: StrictStr = Field(description="Identifier of the device set")
    manufacturer_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of manufacturers in the device set's device selection", alias="manufacturerCount")
    name: StrictStr = Field(description="Name of the device set")
    os_version_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of os versions in the device set's device selection", alias="osVersionCount")
    owner: DeviceSetOwner
    slug: Optional[StrictStr] = Field(default=None, description="Slug of the device set")
    __properties: ClassVar[List[str]] = ["deviceConfigurations", "id", "manufacturerCount", "name", "osVersionCount", "owner", "slug"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in device_configurations (list)
        _items = []
        if self.device_configurations:
            for _item_device_configurations in self.device_configurations:
                if _item_device_configurations:
                    _items.append(_item_device_configurations.to_dict())
            _dict['deviceConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceConfigurations": [DeviceSetDeviceConfigurationsInner.from_dict(_item) for _item in obj["deviceConfigurations"]] if obj.get("deviceConfigurations") is not None else None,
            "id": obj.get("id"),
            "manufacturerCount": obj.get("manufacturerCount"),
            "name": obj.get("name"),
            "osVersionCount": obj.get("osVersionCount"),
            "owner": DeviceSetOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "slug": obj.get("slug")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExceptionFramesInner(BaseModel):
    """
    a single frame of a stack trace
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="address of the frame")
    app_code: StrictBool = Field(description="this line isn't from any framework")
    class_method: Optional[StrictBool] = Field(default=None, description="is a class method")
    class_name: Optional[StrictStr] = Field(default=None, description="name of the class")
    code_formatted: StrictStr = Field(description="Formatted frame string")
    code_raw: StrictStr = Field(description="Raw frame string")
    file: Optional[StrictStr] = Field(default=None, description="name of the file")
    framework_name: Optional[StrictStr] = Field(default=None, description="Name of the framework")
    language: Optional[StrictStr] = Field(default=None, description="programming language of the frame")
    line: Optional[StrictInt] = Field(default=None, description="line number")
    method: Optional[StrictStr] = Field(default=None, description="name of the method")
    method_params: Optional[StrictStr] = Field(default=None, description="parameters of the frames method")
    relevant: Optional[StrictBool] = Field(default=None, description="frame should be shown always")
    __properties: ClassVar[List[str]] = ["address", "app_code", "class_method", "class_name", "code_formatted", "code_raw", "file", "framework_name", "language", "line", "method", "method_params", "relevant"]

    @field_validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JavaScript', 'CSharp', 'Objective-C', 'Objective-Cpp', 'Cpp', 'C', 'Swift', 'Java', 'Unknown']):
            raise ValueError("must be one of enum values ('JavaScript', 'CSharp', 'Objective-C', 'Objective-Cpp', 'Cpp', 'C', 'Swift', 'Java', 'Unknown')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExceptionFramesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExceptionFramesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "app_code": obj.get("app_code"),
            "class_method": obj.get("class_method"),
            "class_name": obj.get("class_name"),
            "code_formatted": obj.get("code_formatted"),
            "code_raw": obj.get("code_raw"),
            "file": obj.get("file"),
            "framework_name": obj.get("framework_name"),
            "language": obj.get("language"),
            "line": obj.get("line"),
            "method": obj.get("method"),
            "method_params": obj.get("method_params"),
            "relevant": obj.get("relevant")
        })
        return _obj



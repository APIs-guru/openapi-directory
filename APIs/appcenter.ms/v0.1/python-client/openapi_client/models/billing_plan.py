# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BillingPlan(BaseModel):
    """
    Billing Plan
    """ # noqa: E501
    attributes: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Collection of attribute values.")
    id: Optional[StrictStr] = Field(default=None, description="The Billing Plan ID")
    limits: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="A collection of named numeric values")
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    payment_source: Optional[StrictStr] = Field(default=None, description="Service that receives payments for this billing plan.", alias="paymentSource")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the Billing Plan")
    service: Optional[StrictStr] = Field(default=None, description="Name of the service that the plan applies to.")
    version: Optional[StrictStr] = Field(default=None, description="Version of the Billing Plan schema")
    __properties: ClassVar[List[str]] = ["attributes", "id", "limits", "parentId", "paymentSource", "price", "service", "version"]

    @field_validator('payment_source')
    def payment_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'AppCenter', 'GitHub', 'Xtc']):
            raise ValueError("must be one of enum values ('None', 'AppCenter', 'GitHub', 'Xtc')")
        return value

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Build', 'Test']):
            raise ValueError("must be one of enum values ('Build', 'Test')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": obj.get("attributes"),
            "id": obj.get("id"),
            "limits": obj.get("limits"),
            "parentId": obj.get("parentId"),
            "paymentSource": obj.get("paymentSource"),
            "price": obj.get("price"),
            "service": obj.get("service"),
            "version": obj.get("version")
        })
        return _obj



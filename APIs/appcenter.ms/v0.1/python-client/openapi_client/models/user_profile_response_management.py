# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_profile_response_management_all_of_identity_providers import UserProfileResponseManagementAllOfIdentityProviders
from typing import Optional, Set
from typing_extensions import Self

class UserProfileResponseManagement(BaseModel):
    """
    UserProfileResponseManagement
    """ # noqa: E501
    avatar_url: Optional[StrictStr] = Field(default=None, description="The avatar URL of the user")
    can_change_password: Optional[StrictBool] = Field(default=None, description="User is required to send an old password in order to change the password.")
    display_name: StrictStr = Field(description="The full name of the user. Might for example be first and last name")
    email: StrictStr = Field(description="The email address of the user")
    id: StrictStr = Field(description="The unique id (UUID) of the user")
    name: StrictStr = Field(description="The unique name that is used to identify the user.")
    origin: StrictStr = Field(description="The creation origin of this user")
    permissions: Optional[List[StrictStr]] = Field(default=None, description="The permissions the user has for the app")
    admin_role: Optional[StrictStr] = Field(default=None, description="The new admin_role")
    feature_flags: Optional[List[StrictStr]] = Field(default=None, description="The feature flags that are enabled for this app")
    settings: Optional[object] = Field(default=None, description="The user's settings")
    identity_providers: Optional[List[UserProfileResponseManagementAllOfIdentityProviders]] = Field(default=None, description="The identity providers associated with the user's account")
    updated_at: Optional[StrictStr] = Field(default=None, description="The date when the app was last updated")
    verified: Optional[StrictBool] = Field(default=None, description="A boolean flag that indicates if the user is already verified")
    __properties: ClassVar[List[str]] = ["avatar_url", "can_change_password", "display_name", "email", "id", "name", "origin", "permissions", "admin_role", "feature_flags", "settings", "identity_providers", "updated_at", "verified"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['appcenter', 'hockeyapp', 'codepush']):
            raise ValueError("must be one of enum values ('appcenter', 'hockeyapp', 'codepush')")
        return value

    @field_validator('permissions')
    def permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['manager', 'developer', 'viewer', 'tester']):
                raise ValueError("each list item must be one of ('manager', 'developer', 'viewer', 'tester')")
        return value

    @field_validator('admin_role')
    def admin_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['superAdmin', 'admin', 'devOps', 'customerSupport', 'notAdmin']):
            raise ValueError("must be one of enum values ('superAdmin', 'admin', 'devOps', 'customerSupport', 'notAdmin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProfileResponseManagement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in identity_providers (list)
        _items = []
        if self.identity_providers:
            for _item_identity_providers in self.identity_providers:
                if _item_identity_providers:
                    _items.append(_item_identity_providers.to_dict())
            _dict['identity_providers'] = _items
        # set to None if settings (nullable) is None
        # and model_fields_set contains the field
        if self.settings is None and "settings" in self.model_fields_set:
            _dict['settings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProfileResponseManagement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar_url": obj.get("avatar_url"),
            "can_change_password": obj.get("can_change_password"),
            "display_name": obj.get("display_name"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "origin": obj.get("origin"),
            "permissions": obj.get("permissions"),
            "admin_role": obj.get("admin_role"),
            "feature_flags": obj.get("feature_flags"),
            "settings": obj.get("settings"),
            "identity_providers": [UserProfileResponseManagementAllOfIdentityProviders.from_dict(_item) for _item in obj["identity_providers"]] if obj.get("identity_providers") is not None else None,
            "updated_at": obj.get("updated_at"),
            "verified": obj.get("verified")
        })
        return _obj



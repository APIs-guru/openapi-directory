# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.symbol_uploads_list200_response_inner_symbols_uploaded_inner import SymbolUploadsList200ResponseInnerSymbolsUploadedInner
from openapi_client.models.symbol_uploads_list200_response_inner_user import SymbolUploadsList200ResponseInnerUser
from typing import Optional, Set
from typing_extensions import Self

class SymbolUpload(BaseModel):
    """
    A single symbol upload entity
    """ # noqa: E501
    app_id: StrictStr = Field(description="The application that this symbol upload belongs to")
    file_name: Optional[StrictStr] = Field(default=None, description="The file name for the symbol upload")
    file_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The size of the file in Mebibytes. This may be 0 until the status is indexed")
    origin: Optional[StrictStr] = Field(default=None, description="The origin of the symbol upload")
    status: StrictStr = Field(description="The current status for the symbol upload")
    symbol_type: StrictStr = Field(description="The type of the symbol for the current symbol upload")
    symbol_upload_id: StrictStr = Field(description="The id for the current symbol upload")
    symbols_uploaded: Optional[List[SymbolUploadsList200ResponseInnerSymbolsUploadedInner]] = Field(default=None, description="The symbols found in the upload. This may be empty until the status is indexed")
    timestamp: Optional[datetime] = Field(default=None, description="When the symbol upload was committed, or last transaction time if not committed")
    user: Optional[SymbolUploadsList200ResponseInnerUser] = None
    __properties: ClassVar[List[str]] = ["app_id", "file_name", "file_size", "origin", "status", "symbol_type", "symbol_upload_id", "symbols_uploaded", "timestamp", "user"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['User', 'System']):
            raise ValueError("must be one of enum values ('User', 'System')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['created', 'committed', 'aborted', 'processing', 'indexed', 'failed']):
            raise ValueError("must be one of enum values ('created', 'committed', 'aborted', 'processing', 'indexed', 'failed')")
        return value

    @field_validator('symbol_type')
    def symbol_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Apple', 'JavaScript', 'Breakpad', 'AndroidProguard', 'UWP']):
            raise ValueError("must be one of enum values ('Apple', 'JavaScript', 'Breakpad', 'AndroidProguard', 'UWP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SymbolUpload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in symbols_uploaded (list)
        _items = []
        if self.symbols_uploaded:
            for _item_symbols_uploaded in self.symbols_uploaded:
                if _item_symbols_uploaded:
                    _items.append(_item_symbols_uploaded.to_dict())
            _dict['symbols_uploaded'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SymbolUpload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_id": obj.get("app_id"),
            "file_name": obj.get("file_name"),
            "file_size": obj.get("file_size"),
            "origin": obj.get("origin"),
            "status": obj.get("status"),
            "symbol_type": obj.get("symbol_type"),
            "symbol_upload_id": obj.get("symbol_upload_id"),
            "symbols_uploaded": [SymbolUploadsList200ResponseInnerSymbolsUploadedInner.from_dict(_item) for _item in obj["symbols_uploaded"]] if obj.get("symbols_uploaded") is not None else None,
            "timestamp": obj.get("timestamp"),
            "user": SymbolUploadsList200ResponseInnerUser.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



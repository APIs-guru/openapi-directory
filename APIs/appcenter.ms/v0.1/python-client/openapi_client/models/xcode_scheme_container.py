# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.builds_list_toolset_projects200_response_xcode_xcode_scheme_containers_inner_app_extension_targets_inner import BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner
from openapi_client.models.builds_list_toolset_projects200_response_xcode_xcode_scheme_containers_inner_shared_schemes_inner import BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner
from typing import Optional, Set
from typing_extensions import Self

class XcodeSchemeContainer(BaseModel):
    """
    XcodeSchemeContainer
    """ # noqa: E501
    app_extension_targets: Optional[List[BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner]] = Field(default=None, description="Information regarding project app extensions, if present", alias="appExtensionTargets")
    cartfile_path: Optional[StrictStr] = Field(default=None, description="Path to Carthage file, if present", alias="cartfilePath")
    path: StrictStr = Field(description="Path to project")
    podfile_path: Optional[StrictStr] = Field(default=None, description="Path to CocoaPods file, if present", alias="podfilePath")
    shared_schemes: List[BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner] = Field(description="Project schemes", alias="sharedSchemes")
    workspace_project_paths: Optional[StrictStr] = Field(default=None, description="Related projects paths for xcworkspace", alias="workspaceProjectPaths")
    xcode_project_sha: Optional[StrictStr] = Field(default=None, description="repo object Id of the pbxproject", alias="xcodeProjectSha")
    __properties: ClassVar[List[str]] = ["appExtensionTargets", "cartfilePath", "path", "podfilePath", "sharedSchemes", "workspaceProjectPaths", "xcodeProjectSha"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XcodeSchemeContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_extension_targets (list)
        _items = []
        if self.app_extension_targets:
            for _item_app_extension_targets in self.app_extension_targets:
                if _item_app_extension_targets:
                    _items.append(_item_app_extension_targets.to_dict())
            _dict['appExtensionTargets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shared_schemes (list)
        _items = []
        if self.shared_schemes:
            for _item_shared_schemes in self.shared_schemes:
                if _item_shared_schemes:
                    _items.append(_item_shared_schemes.to_dict())
            _dict['sharedSchemes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XcodeSchemeContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appExtensionTargets": [BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner.from_dict(_item) for _item in obj["appExtensionTargets"]] if obj.get("appExtensionTargets") is not None else None,
            "cartfilePath": obj.get("cartfilePath"),
            "path": obj.get("path"),
            "podfilePath": obj.get("podfilePath"),
            "sharedSchemes": [BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.from_dict(_item) for _item in obj["sharedSchemes"]] if obj.get("sharedSchemes") is not None else None,
            "workspaceProjectPaths": obj.get("workspaceProjectPaths"),
            "xcodeProjectSha": obj.get("xcodeProjectSha")
        })
        return _obj



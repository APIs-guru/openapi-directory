# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.distribution_group_with_users_response_aad_groups_inner import DistributionGroupWithUsersResponseAadGroupsInner
from openapi_client.models.distribution_groups_list_users200_response_inner import DistributionGroupsListUsers200ResponseInner
from typing import Optional, Set
from typing_extensions import Self

class DistributionGroupWithUsersResponse(BaseModel):
    """
    DistributionGroupWithUsersResponse
    """ # noqa: E501
    aad_groups: Optional[List[DistributionGroupWithUsersResponseAadGroupsInner]] = Field(default=None, description="The distribution group aad groups")
    id: StrictStr = Field(description="The unique ID of the distribution group")
    is_public: Optional[StrictBool] = Field(default=None, description="Whether the distribution group is public")
    name: StrictStr = Field(description="The name of the distribution group used in URLs")
    notified_user_count: Union[StrictFloat, StrictInt] = Field(description="The count of non-pending users in the distribution group who will be notified by new releases")
    total_groups_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The count of aad groups in the distribution group")
    total_user_count: Union[StrictFloat, StrictInt] = Field(description="The count of users in the distribution group")
    users: List[DistributionGroupsListUsers200ResponseInner] = Field(description="The distribution group users")
    __properties: ClassVar[List[str]] = ["aad_groups", "id", "is_public", "name", "notified_user_count", "total_groups_count", "total_user_count", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DistributionGroupWithUsersResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aad_groups (list)
        _items = []
        if self.aad_groups:
            for _item_aad_groups in self.aad_groups:
                if _item_aad_groups:
                    _items.append(_item_aad_groups.to_dict())
            _dict['aad_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DistributionGroupWithUsersResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aad_groups": [DistributionGroupWithUsersResponseAadGroupsInner.from_dict(_item) for _item in obj["aad_groups"]] if obj.get("aad_groups") is not None else None,
            "id": obj.get("id"),
            "is_public": obj.get("is_public"),
            "name": obj.get("name"),
            "notified_user_count": obj.get("notified_user_count"),
            "total_groups_count": obj.get("total_groups_count"),
            "total_user_count": obj.get("total_user_count"),
            "users": [DistributionGroupsListUsers200ResponseInner.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj



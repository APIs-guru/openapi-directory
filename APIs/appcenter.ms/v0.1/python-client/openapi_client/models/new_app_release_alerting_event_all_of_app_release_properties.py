# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NewAppReleaseAlertingEventAllOfAppReleaseProperties(BaseModel):
    """
    Properties of new application release
    """ # noqa: E501
    app_display_name: StrictStr
    app_name: StrictStr
    bundle_identifier: StrictStr
    distribution_group_id: Optional[StrictStr] = None
    fingerprint: Optional[StrictStr] = None
    icon_link: Optional[StrictStr] = None
    install_link: StrictStr
    installable: Optional[StrictBool] = None
    mandatory_update: Optional[StrictBool] = None
    min_os: Optional[StrictStr] = None
    platform: StrictStr
    provisioning_profile_name: Optional[StrictStr] = None
    provisioning_profile_type: Optional[StrictStr] = None
    release_id: StrictStr
    release_notes: Optional[StrictStr] = None
    short_version: StrictStr
    size: StrictInt
    uploaded_at: StrictStr = Field(description="Date and time in ISO 8601 format")
    version: StrictStr
    __properties: ClassVar[List[str]] = ["app_display_name", "app_name", "bundle_identifier", "distribution_group_id", "fingerprint", "icon_link", "install_link", "installable", "mandatory_update", "min_os", "platform", "provisioning_profile_name", "provisioning_profile_type", "release_id", "release_notes", "short_version", "size", "uploaded_at", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewAppReleaseAlertingEventAllOfAppReleaseProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewAppReleaseAlertingEventAllOfAppReleaseProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_display_name": obj.get("app_display_name"),
            "app_name": obj.get("app_name"),
            "bundle_identifier": obj.get("bundle_identifier"),
            "distribution_group_id": obj.get("distribution_group_id"),
            "fingerprint": obj.get("fingerprint"),
            "icon_link": obj.get("icon_link"),
            "install_link": obj.get("install_link"),
            "installable": obj.get("installable"),
            "mandatory_update": obj.get("mandatory_update"),
            "min_os": obj.get("min_os"),
            "platform": obj.get("platform"),
            "provisioning_profile_name": obj.get("provisioning_profile_name"),
            "provisioning_profile_type": obj.get("provisioning_profile_type"),
            "release_id": obj.get("release_id"),
            "release_notes": obj.get("release_notes"),
            "short_version": obj.get("short_version"),
            "size": obj.get("size"),
            "uploaded_at": obj.get("uploaded_at"),
            "version": obj.get("version")
        })
        return _obj



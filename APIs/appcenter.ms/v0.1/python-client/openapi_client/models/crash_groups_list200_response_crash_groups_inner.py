# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.crash_groups_list200_response_crash_groups_inner_reason_frame import CrashGroupsList200ResponseCrashGroupsInnerReasonFrame
from typing import Optional, Set
from typing_extensions import Self

class CrashGroupsList200ResponseCrashGroupsInner(BaseModel):
    """
    CrashGroupsList200ResponseCrashGroupsInner
    """ # noqa: E501
    annotation: StrictStr
    app_version: StrictStr
    build: StrictStr
    count: StrictInt
    crash_group_id: StrictStr
    crash_reason: StrictStr
    display_id: StrictStr
    exception: Optional[StrictStr] = None
    fatal: StrictBool = Field(description="Crash or handled exception")
    first_occurrence: datetime
    impacted_users: Optional[StrictInt] = None
    last_occurrence: datetime
    new_crash_group_id: StrictStr
    reason_frame: Optional[CrashGroupsList200ResponseCrashGroupsInnerReasonFrame] = None
    status: StrictStr
    __properties: ClassVar[List[str]] = ["annotation", "app_version", "build", "count", "crash_group_id", "crash_reason", "display_id", "exception", "fatal", "first_occurrence", "impacted_users", "last_occurrence", "new_crash_group_id", "reason_frame", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['open', 'closed', 'ignored']):
            raise ValueError("must be one of enum values ('open', 'closed', 'ignored')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrashGroupsList200ResponseCrashGroupsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reason_frame
        if self.reason_frame:
            _dict['reason_frame'] = self.reason_frame.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrashGroupsList200ResponseCrashGroupsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotation": obj.get("annotation"),
            "app_version": obj.get("app_version"),
            "build": obj.get("build"),
            "count": obj.get("count"),
            "crash_group_id": obj.get("crash_group_id"),
            "crash_reason": obj.get("crash_reason"),
            "display_id": obj.get("display_id"),
            "exception": obj.get("exception"),
            "fatal": obj.get("fatal"),
            "first_occurrence": obj.get("first_occurrence"),
            "impacted_users": obj.get("impacted_users"),
            "last_occurrence": obj.get("last_occurrence"),
            "new_crash_group_id": obj.get("new_crash_group_id"),
            "reason_frame": CrashGroupsList200ResponseCrashGroupsInnerReasonFrame.from_dict(obj["reason_frame"]) if obj.get("reason_frame") is not None else None,
            "status": obj.get("status")
        })
        return _obj



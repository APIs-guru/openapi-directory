# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.releases_get_latest_by_distribution_group200_response_destinations_inner import ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner
from openapi_client.models.releases_list_latest200_response_inner_build import ReleasesListLatest200ResponseInnerBuild
from openapi_client.models.releases_list_latest200_response_inner_distribution_groups_inner import ReleasesListLatest200ResponseInnerDistributionGroupsInner
from openapi_client.models.releases_list_latest200_response_inner_distribution_stores_inner import ReleasesListLatest200ResponseInnerDistributionStoresInner
from typing import Optional, Set
from typing_extensions import Self

class ReleasesListLatest200ResponseInner(BaseModel):
    """
    Basic information on a release
    """ # noqa: E501
    build: Optional[ReleasesListLatest200ResponseInnerBuild] = None
    destination_type: Optional[StrictStr] = Field(default=None, description="OBSOLETE. Will be removed in next version. The destination type.<br> <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br> <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br> ")
    destinations: Optional[List[ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner]] = Field(default=None, description="A list of distribution groups or stores.")
    distribution_groups: Optional[List[ReleasesListLatest200ResponseInnerDistributionGroupsInner]] = Field(default=None, description="OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.")
    distribution_stores: Optional[List[ReleasesListLatest200ResponseInnerDistributionStoresInner]] = Field(default=None, description="OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.")
    enabled: StrictBool = Field(description="This value determines the whether a release currently is enabled or disabled.")
    file_extension: Optional[StrictStr] = Field(default=None, description="The file extension of the main (user-uploaded) package file.")
    id: StrictInt = Field(description="ID identifying this unique release.")
    is_external_build: Optional[StrictBool] = Field(default=None, description="This value determines if a release is external or not.")
    origin: Optional[StrictStr] = Field(default=None, description="The release's origin")
    short_version: StrictStr = Field(description="The release's short version.<br> For iOS: CFBundleShortVersionString from info.plist.<br> For Android: android:versionName from AppManifest.xml. ")
    uploaded_at: StrictStr = Field(description="UTC time in ISO 8601 format of the uploaded time.")
    version: StrictStr = Field(description="The release's version.<br> For iOS: CFBundleVersion from info.plist.<br> For Android: android:versionCode from AppManifest.xml. ")
    __properties: ClassVar[List[str]] = ["build", "destination_type", "destinations", "distribution_groups", "distribution_stores", "enabled", "file_extension", "id", "is_external_build", "origin", "short_version", "uploaded_at", "version"]

    @field_validator('destination_type')
    def destination_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['group', 'store', 'tester']):
            raise ValueError("must be one of enum values ('group', 'store', 'tester')")
        return value

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['hockeyapp', 'appcenter']):
            raise ValueError("must be one of enum values ('hockeyapp', 'appcenter')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleasesListLatest200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item_destinations in self.destinations:
                if _item_destinations:
                    _items.append(_item_destinations.to_dict())
            _dict['destinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_groups (list)
        _items = []
        if self.distribution_groups:
            for _item_distribution_groups in self.distribution_groups:
                if _item_distribution_groups:
                    _items.append(_item_distribution_groups.to_dict())
            _dict['distribution_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in distribution_stores (list)
        _items = []
        if self.distribution_stores:
            for _item_distribution_stores in self.distribution_stores:
                if _item_distribution_stores:
                    _items.append(_item_distribution_stores.to_dict())
            _dict['distribution_stores'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleasesListLatest200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build": ReleasesListLatest200ResponseInnerBuild.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "destination_type": obj.get("destination_type"),
            "destinations": [ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.from_dict(_item) for _item in obj["destinations"]] if obj.get("destinations") is not None else None,
            "distribution_groups": [ReleasesListLatest200ResponseInnerDistributionGroupsInner.from_dict(_item) for _item in obj["distribution_groups"]] if obj.get("distribution_groups") is not None else None,
            "distribution_stores": [ReleasesListLatest200ResponseInnerDistributionStoresInner.from_dict(_item) for _item in obj["distribution_stores"]] if obj.get("distribution_stores") is not None else None,
            "enabled": obj.get("enabled"),
            "file_extension": obj.get("file_extension"),
            "id": obj.get("id"),
            "is_external_build": obj.get("is_external_build"),
            "origin": obj.get("origin"),
            "short_version": obj.get("short_version"),
            "uploaded_at": obj.get("uploaded_at"),
            "version": obj.get("version")
        })
        return _obj



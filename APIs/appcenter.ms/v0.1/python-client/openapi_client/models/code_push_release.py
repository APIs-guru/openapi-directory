# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.code_push_deployments_list200_response_inner_latest_release_all_of_diff_package_map_value import CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue
from typing import Optional, Set
from typing_extensions import Self

class CodePushRelease(BaseModel):
    """
    CodePushRelease
    """ # noqa: E501
    description: Optional[StrictStr] = None
    is_disabled: Optional[StrictBool] = None
    is_mandatory: Optional[StrictBool] = None
    rollout: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None
    target_binary_range: Optional[StrictStr] = None
    blob_url: Optional[StrictStr] = None
    diff_package_map: Optional[Dict[str, CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue]] = None
    label: Optional[StrictStr] = None
    original_deployment: Optional[StrictStr] = Field(default=None, description="Set on 'Promote'")
    original_label: Optional[StrictStr] = Field(default=None, description="Set on 'Promote' and 'Rollback'")
    package_hash: Optional[StrictStr] = None
    release_method: Optional[StrictStr] = Field(default=None, description="The release method is unknown if unspecified")
    released_by: Optional[StrictStr] = None
    size: Optional[Union[StrictFloat, StrictInt]] = None
    upload_time: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["description", "is_disabled", "is_mandatory", "rollout", "target_binary_range", "blob_url", "diff_package_map", "label", "original_deployment", "original_label", "package_hash", "release_method", "released_by", "size", "upload_time"]

    @field_validator('release_method')
    def release_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Upload', 'Promote', 'Rollback']):
            raise ValueError("must be one of enum values ('Upload', 'Promote', 'Rollback')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodePushRelease from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in diff_package_map (dict)
        _field_dict = {}
        if self.diff_package_map:
            for _key_diff_package_map in self.diff_package_map:
                if self.diff_package_map[_key_diff_package_map]:
                    _field_dict[_key_diff_package_map] = self.diff_package_map[_key_diff_package_map].to_dict()
            _dict['diff_package_map'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodePushRelease from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "is_disabled": obj.get("is_disabled"),
            "is_mandatory": obj.get("is_mandatory"),
            "rollout": obj.get("rollout"),
            "target_binary_range": obj.get("target_binary_range"),
            "blob_url": obj.get("blob_url"),
            "diff_package_map": dict(
                (_k, CodePushDeploymentsList200ResponseInnerLatestReleaseAllOfDiffPackageMapValue.from_dict(_v))
                for _k, _v in obj["diff_package_map"].items()
            )
            if obj.get("diff_package_map") is not None
            else None,
            "label": obj.get("label"),
            "original_deployment": obj.get("original_deployment"),
            "original_label": obj.get("original_label"),
            "package_hash": obj.get("package_hash"),
            "release_method": obj.get("release_method"),
            "released_by": obj.get("released_by"),
            "size": obj.get("size"),
            "upload_time": obj.get("upload_time")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TestCloudStartTestRunOptions(BaseModel):
    """
    Options required to start the test run
    """ # noqa: E501
    device_selection: StrictStr = Field(description="Device selection string.")
    language: Optional[StrictStr] = Field(default=None, description="Language that should be used to run tests.")
    locale: Optional[StrictStr] = Field(default=None, description="Locale that should be used to run tests.")
    test_framework: StrictStr = Field(description="Test framework used by tests.")
    test_parameters: Optional[Dict[str, Any]] = Field(default=None, description="A JSON dictionary with additional test parameters")
    test_series: Optional[StrictStr] = Field(default=None, description="Name of the test series.")
    __properties: ClassVar[List[str]] = ["device_selection", "language", "locale", "test_framework", "test_parameters", "test_series"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestCloudStartTestRunOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestCloudStartTestRunOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_selection": obj.get("device_selection"),
            "language": obj.get("language"),
            "locale": obj.get("locale"),
            "test_framework": obj.get("test_framework"),
            "test_parameters": obj.get("test_parameters"),
            "test_series": obj.get("test_series")
        })
        return _obj



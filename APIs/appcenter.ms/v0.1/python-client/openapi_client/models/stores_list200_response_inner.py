# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.stores_list200_response_inner_intune_details import StoresList200ResponseInnerIntuneDetails
from typing import Optional, Set
from typing_extensions import Self

class StoresList200ResponseInner(BaseModel):
    """
    ExternalStoreResponse
    """ # noqa: E501
    created_by: Optional[StrictStr] = Field(default=None, description="The ID of the principal that created the store.")
    created_by_principal_type: Optional[StrictStr] = Field(default=None, description="The type of the principal that created the store.")
    id: Optional[StrictStr] = Field(default=None, description="Store id")
    intune_details: Optional[StoresList200ResponseInnerIntuneDetails] = None
    name: Optional[StrictStr] = Field(default=None, description="Store Name")
    service_connection_id: Optional[StrictStr] = Field(default=None, description="Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.")
    track: Optional[StrictStr] = Field(default=None, description="Store track")
    type: Optional[StrictStr] = Field(default=None, description="Store Type")
    __properties: ClassVar[List[str]] = ["created_by", "created_by_principal_type", "id", "intune_details", "name", "service_connection_id", "track", "type"]

    @field_validator('track')
    def track_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['production', 'alpha', 'beta', 'testflight-internal', 'testflight-external']):
            raise ValueError("must be one of enum values ('production', 'alpha', 'beta', 'testflight-internal', 'testflight-external')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoresList200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of intune_details
        if self.intune_details:
            _dict['intune_details'] = self.intune_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoresList200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_by": obj.get("created_by"),
            "created_by_principal_type": obj.get("created_by_principal_type"),
            "id": obj.get("id"),
            "intune_details": StoresList200ResponseInnerIntuneDetails.from_dict(obj["intune_details"]) if obj.get("intune_details") is not None else None,
            "name": obj.get("name"),
            "service_connection_id": obj.get("service_connection_id"),
            "track": obj.get("track"),
            "type": obj.get("type")
        })
        return _obj



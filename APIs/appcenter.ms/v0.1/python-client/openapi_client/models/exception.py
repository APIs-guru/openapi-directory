# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.exception_frames_inner import ExceptionFramesInner
from typing import Optional, Set
from typing_extensions import Self

class Exception(BaseModel):
    """
    a exception
    """ # noqa: E501
    frames: List[ExceptionFramesInner] = Field(description="frames of the excetpion")
    inner_exceptions: Optional[List[Exception]] = None
    platform: Optional[StrictStr] = Field(default=None, description="SDK/Platform this thread is beeing generated from")
    reason: Optional[StrictStr] = Field(default=None, description="Reason of the exception")
    relevant: Optional[StrictBool] = Field(default=None, description="relevant exception (crashed)")
    type: Optional[StrictStr] = Field(default=None, description="Type of the exception (NSSomethingException, NullPointerException)")
    __properties: ClassVar[List[str]] = ["frames", "inner_exceptions", "platform", "reason", "relevant", "type"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ios', 'android', 'xamarin', 'react-native', 'ndk', 'unity', 'other']):
            raise ValueError("must be one of enum values ('ios', 'android', 'xamarin', 'react-native', 'ndk', 'unity', 'other')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Exception from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in frames (list)
        _items = []
        if self.frames:
            for _item_frames in self.frames:
                if _item_frames:
                    _items.append(_item_frames.to_dict())
            _dict['frames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inner_exceptions (list)
        _items = []
        if self.inner_exceptions:
            for _item_inner_exceptions in self.inner_exceptions:
                if _item_inner_exceptions:
                    _items.append(_item_inner_exceptions.to_dict())
            _dict['inner_exceptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Exception from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frames": [ExceptionFramesInner.from_dict(_item) for _item in obj["frames"]] if obj.get("frames") is not None else None,
            "inner_exceptions": [Exception.from_dict(_item) for _item in obj["inner_exceptions"]] if obj.get("inner_exceptions") is not None else None,
            "platform": obj.get("platform"),
            "reason": obj.get("reason"),
            "relevant": obj.get("relevant"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Exception.model_rebuild(raise_errors=False)


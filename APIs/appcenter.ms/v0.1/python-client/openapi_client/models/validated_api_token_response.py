# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.validated_api_token_response_claims_inner import ValidatedApiTokenResponseClaimsInner
from typing import Optional, Set
from typing_extensions import Self

class ValidatedApiTokenResponse(BaseModel):
    """
    ValidatedApiTokenResponse
    """ # noqa: E501
    claims: List[ValidatedApiTokenResponseClaimsInner] = Field(description="Collection of attributes that describe the principal of the specified API Token")
    principal_id: StrictStr = Field(description="The ID of the owner of the API Token (user_id or app_id)")
    principal_type: StrictStr = Field(description="Indicates the type of the principal (app or user)")
    token_id: StrictStr = Field(description="The token's unique id (UUID)")
    token_scope: List[StrictStr] = Field(description="The token's scope. A list of allowed roles.")
    __properties: ClassVar[List[str]] = ["claims", "principal_id", "principal_type", "token_id", "token_scope"]

    @field_validator('principal_type')
    def principal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['app', 'user']):
            raise ValueError("must be one of enum values ('app', 'user')")
        return value

    @field_validator('token_scope')
    def token_scope_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['all', 'in_app_update', 'viewer']):
                raise ValueError("each list item must be one of ('all', 'in_app_update', 'viewer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValidatedApiTokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in claims (list)
        _items = []
        if self.claims:
            for _item_claims in self.claims:
                if _item_claims:
                    _items.append(_item_claims.to_dict())
            _dict['claims'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValidatedApiTokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "claims": [ValidatedApiTokenResponseClaimsInner.from_dict(_item) for _item in obj["claims"]] if obj.get("claims") is not None else None,
            "principal_id": obj.get("principal_id"),
            "principal_type": obj.get("principal_type"),
            "token_id": obj.get("token_id"),
            "token_scope": obj.get("token_scope")
        })
        return _obj



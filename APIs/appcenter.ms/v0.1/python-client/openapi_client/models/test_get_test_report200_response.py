# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.test_get_test_report200_response_device_logs_inner import TestGetTestReport200ResponseDeviceLogsInner
from openapi_client.models.test_get_test_report200_response_features_inner import TestGetTestReport200ResponseFeaturesInner
from openapi_client.models.test_get_test_report200_response_snapshot_fatal_errors_inner import TestGetTestReport200ResponseSnapshotFatalErrorsInner
from openapi_client.models.test_get_test_report200_response_stats import TestGetTestReport200ResponseStats
from typing import Optional, Set
from typing_extensions import Self

class TestGetTestReport200Response(BaseModel):
    """
    TestGetTestReport200Response
    """ # noqa: E501
    app_upload_id: StrictStr
    var_date: StrictStr = Field(alias="date")
    date_finished: StrictStr
    device_logs: List[TestGetTestReport200ResponseDeviceLogsInner]
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    features: List[TestGetTestReport200ResponseFeaturesInner]
    finished_device_snapshots: List[StrictStr]
    id: StrictStr
    platform: StrictStr
    revision: Union[StrictFloat, StrictInt]
    schema_version: Union[StrictFloat, StrictInt]
    snapshot_fatal_errors: Optional[List[TestGetTestReport200ResponseSnapshotFatalErrorsInner]] = None
    stats: TestGetTestReport200ResponseStats
    test_type: StrictStr = Field(alias="testType")
    __properties: ClassVar[List[str]] = ["app_upload_id", "date", "date_finished", "device_logs", "errorMessage", "features", "finished_device_snapshots", "id", "platform", "revision", "schema_version", "snapshot_fatal_errors", "stats", "testType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestGetTestReport200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in device_logs (list)
        _items = []
        if self.device_logs:
            for _item_device_logs in self.device_logs:
                if _item_device_logs:
                    _items.append(_item_device_logs.to_dict())
            _dict['device_logs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item_features in self.features:
                if _item_features:
                    _items.append(_item_features.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in snapshot_fatal_errors (list)
        _items = []
        if self.snapshot_fatal_errors:
            for _item_snapshot_fatal_errors in self.snapshot_fatal_errors:
                if _item_snapshot_fatal_errors:
                    _items.append(_item_snapshot_fatal_errors.to_dict())
            _dict['snapshot_fatal_errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestGetTestReport200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_upload_id": obj.get("app_upload_id"),
            "date": obj.get("date"),
            "date_finished": obj.get("date_finished"),
            "device_logs": [TestGetTestReport200ResponseDeviceLogsInner.from_dict(_item) for _item in obj["device_logs"]] if obj.get("device_logs") is not None else None,
            "errorMessage": obj.get("errorMessage"),
            "features": [TestGetTestReport200ResponseFeaturesInner.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "finished_device_snapshots": obj.get("finished_device_snapshots"),
            "id": obj.get("id"),
            "platform": obj.get("platform"),
            "revision": obj.get("revision"),
            "schema_version": obj.get("schema_version"),
            "snapshot_fatal_errors": [TestGetTestReport200ResponseSnapshotFatalErrorsInner.from_dict(_item) for _item in obj["snapshot_fatal_errors"]] if obj.get("snapshot_fatal_errors") is not None else None,
            "stats": TestGetTestReport200ResponseStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "testType": obj.get("testType")
        })
        return _obj



# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.analytics_crash_counts200_response import AnalyticsCrashCounts200Response
from openapi_client.models.analytics_crash_free_device_percentages200_response import AnalyticsCrashFreeDevicePercentages200Response
from openapi_client.models.analytics_crash_group_model_counts200_response import AnalyticsCrashGroupModelCounts200Response
from openapi_client.models.analytics_crash_group_operating_system_counts200_response import AnalyticsCrashGroupOperatingSystemCounts200Response
from openapi_client.models.analytics_crash_groups_totals200_response_inner import AnalyticsCrashGroupsTotals200ResponseInner
from openapi_client.models.analytics_crash_groups_totals200_response_inner_overall import AnalyticsCrashGroupsTotals200ResponseInnerOverall
from openapi_client.models.analytics_crash_groups_totals_request import AnalyticsCrashGroupsTotalsRequest
from openapi_client.models.analytics_device_counts200_response import AnalyticsDeviceCounts200Response
from openapi_client.models.analytics_device_counts200_response_daily_inner import AnalyticsDeviceCounts200ResponseDailyInner
from openapi_client.models.analytics_distribution_release_counts200_response import AnalyticsDistributionReleaseCounts200Response
from openapi_client.models.analytics_distribution_release_counts_request import AnalyticsDistributionReleaseCountsRequest
from openapi_client.models.analytics_event_count200_response import AnalyticsEventCount200Response
from openapi_client.models.analytics_event_device_count200_response import AnalyticsEventDeviceCount200Response
from openapi_client.models.analytics_event_per_device_count200_response import AnalyticsEventPerDeviceCount200Response
from openapi_client.models.analytics_event_per_session_count200_response import AnalyticsEventPerSessionCount200Response
from openapi_client.models.analytics_event_properties200_response import AnalyticsEventProperties200Response
from openapi_client.models.analytics_event_property_counts200_response import AnalyticsEventPropertyCounts200Response
from openapi_client.models.analytics_events200_response import AnalyticsEvents200Response
from openapi_client.models.analytics_generic_log_flow200_response import AnalyticsGenericLogFlow200Response
from openapi_client.models.analytics_get_audience200_response import AnalyticsGetAudience200Response
from openapi_client.models.analytics_language_counts200_response import AnalyticsLanguageCounts200Response
from openapi_client.models.analytics_list_audiences200_response import AnalyticsListAudiences200Response
from openapi_client.models.analytics_list_custom_properties200_response import AnalyticsListCustomProperties200Response
from openapi_client.models.analytics_list_device_property_values200_response import AnalyticsListDevicePropertyValues200Response
from openapi_client.models.analytics_log_flow200_response import AnalyticsLogFlow200Response
from openapi_client.models.analytics_model_counts200_response import AnalyticsModelCounts200Response
from openapi_client.models.analytics_operating_system_counts200_response import AnalyticsOperatingSystemCounts200Response
from openapi_client.models.analytics_per_device_counts200_response import AnalyticsPerDeviceCounts200Response
from openapi_client.models.analytics_place_counts200_response import AnalyticsPlaceCounts200Response
from openapi_client.models.analytics_session_durations_distribution200_response import AnalyticsSessionDurationsDistribution200Response
from openapi_client.models.analytics_test_audience200_response import AnalyticsTestAudience200Response
from openapi_client.models.analytics_test_audience_request import AnalyticsTestAudienceRequest
from openapi_client.models.analytics_versions200_response import AnalyticsVersions200Response
from openapi_client.models.crashes_list_session_logs200_response import CrashesListSessionLogs200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AnalyticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def analytics_audience_name_exists(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """analytics_audience_name_exists

        Returns whether audience definition exists.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_audience_name_exists_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_audience_name_exists_with_http_info(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """analytics_audience_name_exists

        Returns whether audience definition exists.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_audience_name_exists_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_audience_name_exists_without_preload_content(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_audience_name_exists

        Returns whether audience definition exists.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_audience_name_exists_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_audience_name_exists_serialize(
        self,
        audience_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if audience_name is not None:
            _path_params['audience_name'] = audience_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_crash_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsCrashCounts200Response:
        """(Deprecated) Available for UWP apps only.

        Count of crashes by day in the time range based the selected versions. Available for UWP apps only.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_crash_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsCrashCounts200Response]:
        """(Deprecated) Available for UWP apps only.

        Count of crashes by day in the time range based the selected versions. Available for UWP apps only.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_crash_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Available for UWP apps only.

        Count of crashes by day in the time range based the selected versions. Available for UWP apps only.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_crash_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_crash_free_device_percentages(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsCrashFreeDevicePercentages200Response:
        """(Deprecated) analytics_crash_free_device_percentages

        Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_free_device_percentages_serialize(
            start=start,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashFreeDevicePercentages200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_crash_free_device_percentages_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsCrashFreeDevicePercentages200Response]:
        """(Deprecated) analytics_crash_free_device_percentages

        Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_free_device_percentages_serialize(
            start=start,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashFreeDevicePercentages200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_crash_free_device_percentages_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) analytics_crash_free_device_percentages

        Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_free_device_percentages_serialize(
            start=start,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashFreeDevicePercentages200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_crash_free_device_percentages_serialize(
        self,
        start,
        version,
        owner_name,
        app_name,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_crash_group_counts(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsCrashCounts200Response:
        """(Deprecated) Available for UWP apps only.

        Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_crash_group_counts_with_http_info(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsCrashCounts200Response]:
        """(Deprecated) Available for UWP apps only.

        Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_crash_group_counts_without_preload_content(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Available for UWP apps only.

        Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_crash_group_counts_serialize(
        self,
        crash_group_id,
        version,
        start,
        owner_name,
        app_name,
        end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crash_group_id is not None:
            _path_params['crash_group_id'] = crash_group_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_crash_group_model_counts(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsCrashGroupModelCounts200Response:
        """(Deprecated) Available for UWP apps only.

        Top models of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_model_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupModelCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_crash_group_model_counts_with_http_info(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsCrashGroupModelCounts200Response]:
        """(Deprecated) Available for UWP apps only.

        Top models of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_model_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupModelCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_crash_group_model_counts_without_preload_content(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Available for UWP apps only.

        Top models of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_model_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupModelCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_crash_group_model_counts_serialize(
        self,
        crash_group_id,
        version,
        owner_name,
        app_name,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crash_group_id is not None:
            _path_params['crash_group_id'] = crash_group_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_crash_group_operating_system_counts(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsCrashGroupOperatingSystemCounts200Response:
        """(Deprecated) Available for UWP apps only.

        Top OSes of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_operating_system_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupOperatingSystemCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_crash_group_operating_system_counts_with_http_info(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsCrashGroupOperatingSystemCounts200Response]:
        """(Deprecated) Available for UWP apps only.

        Top OSes of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_operating_system_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupOperatingSystemCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_crash_group_operating_system_counts_without_preload_content(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Available for UWP apps only.

        Top OSes of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_operating_system_counts_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupOperatingSystemCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_crash_group_operating_system_counts_serialize(
        self,
        crash_group_id,
        version,
        owner_name,
        app_name,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crash_group_id is not None:
            _path_params['crash_group_id'] = crash_group_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_crash_group_totals(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsCrashGroupsTotals200ResponseInnerOverall:
        """(Deprecated) Available for UWP apps only.

        Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_totals_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupsTotals200ResponseInnerOverall",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_crash_group_totals_with_http_info(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsCrashGroupsTotals200ResponseInnerOverall]:
        """(Deprecated) Available for UWP apps only.

        Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_totals_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupsTotals200ResponseInnerOverall",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_crash_group_totals_without_preload_content(
        self,
        crash_group_id: Annotated[StrictStr, Field(description="The id of the crash group.")],
        version: StrictStr,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Available for UWP apps only.

        Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.

        :param crash_group_id: The id of the crash group. (required)
        :type crash_group_id: str
        :param version: (required)
        :type version: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall is deprecated.", DeprecationWarning)

        _param = self._analytics_crash_group_totals_serialize(
            crash_group_id=crash_group_id,
            version=version,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsCrashGroupsTotals200ResponseInnerOverall",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_crash_group_totals_serialize(
        self,
        crash_group_id,
        version,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crash_group_id is not None:
            _path_params['crash_group_id'] = crash_group_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_crash_groups_totals(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_crash_groups_totals_request: AnalyticsCrashGroupsTotalsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AnalyticsCrashGroupsTotals200ResponseInner]:
        """analytics_crash_groups_totals

        Overall crashes and affected users count of the selected crash groups with selected versions.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_crash_groups_totals_request: (required)
        :type analytics_crash_groups_totals_request: AnalyticsCrashGroupsTotalsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_crash_groups_totals_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_crash_groups_totals_request=analytics_crash_groups_totals_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AnalyticsCrashGroupsTotals200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_crash_groups_totals_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_crash_groups_totals_request: AnalyticsCrashGroupsTotalsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AnalyticsCrashGroupsTotals200ResponseInner]]:
        """analytics_crash_groups_totals

        Overall crashes and affected users count of the selected crash groups with selected versions.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_crash_groups_totals_request: (required)
        :type analytics_crash_groups_totals_request: AnalyticsCrashGroupsTotalsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_crash_groups_totals_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_crash_groups_totals_request=analytics_crash_groups_totals_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AnalyticsCrashGroupsTotals200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_crash_groups_totals_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_crash_groups_totals_request: AnalyticsCrashGroupsTotalsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_crash_groups_totals

        Overall crashes and affected users count of the selected crash groups with selected versions.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_crash_groups_totals_request: (required)
        :type analytics_crash_groups_totals_request: AnalyticsCrashGroupsTotalsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_crash_groups_totals_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_crash_groups_totals_request=analytics_crash_groups_totals_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AnalyticsCrashGroupsTotals200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_crash_groups_totals_serialize(
        self,
        owner_name,
        app_name,
        analytics_crash_groups_totals_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if analytics_crash_groups_totals_request is not None:
            _body_params = analytics_crash_groups_totals_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_create_or_update_audience(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_test_audience_request: Annotated[AnalyticsTestAudienceRequest, Field(description="Audience definition")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsGetAudience200Response:
        """analytics_create_or_update_audience

        Creates or updates audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_test_audience_request: Audience definition (required)
        :type analytics_test_audience_request: AnalyticsTestAudienceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_create_or_update_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            analytics_test_audience_request=analytics_test_audience_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGetAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_create_or_update_audience_with_http_info(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_test_audience_request: Annotated[AnalyticsTestAudienceRequest, Field(description="Audience definition")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsGetAudience200Response]:
        """analytics_create_or_update_audience

        Creates or updates audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_test_audience_request: Audience definition (required)
        :type analytics_test_audience_request: AnalyticsTestAudienceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_create_or_update_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            analytics_test_audience_request=analytics_test_audience_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGetAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_create_or_update_audience_without_preload_content(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_test_audience_request: Annotated[AnalyticsTestAudienceRequest, Field(description="Audience definition")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_create_or_update_audience

        Creates or updates audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_test_audience_request: Audience definition (required)
        :type analytics_test_audience_request: AnalyticsTestAudienceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_create_or_update_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            analytics_test_audience_request=analytics_test_audience_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGetAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_create_or_update_audience_serialize(
        self,
        audience_name,
        owner_name,
        app_name,
        analytics_test_audience_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if audience_name is not None:
            _path_params['audience_name'] = audience_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if analytics_test_audience_request is not None:
            _body_params = analytics_test_audience_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_delete_audience(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """analytics_delete_audience

        Deletes audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_delete_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_delete_audience_with_http_info(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """analytics_delete_audience

        Deletes audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_delete_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_delete_audience_without_preload_content(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_delete_audience

        Deletes audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_delete_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_delete_audience_serialize(
        self,
        audience_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if audience_name is not None:
            _path_params['audience_name'] = audience_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_device_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        app_build: Annotated[Optional[StrictStr], Field(description="Application build number. If build number is specified than multiple versions are not allowed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsDeviceCounts200Response:
        """analytics_device_counts

        Count of active devices by interval in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param app_build: Application build number. If build number is specified than multiple versions are not allowed.
        :type app_build: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_device_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            app_build=app_build,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsDeviceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_device_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        app_build: Annotated[Optional[StrictStr], Field(description="Application build number. If build number is specified than multiple versions are not allowed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsDeviceCounts200Response]:
        """analytics_device_counts

        Count of active devices by interval in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param app_build: Application build number. If build number is specified than multiple versions are not allowed.
        :type app_build: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_device_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            app_build=app_build,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsDeviceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_device_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        app_build: Annotated[Optional[StrictStr], Field(description="Application build number. If build number is specified than multiple versions are not allowed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_device_counts

        Count of active devices by interval in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param app_build: Application build number. If build number is specified than multiple versions are not allowed.
        :type app_build: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_device_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            app_build=app_build,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsDeviceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_device_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        versions,
        app_build,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        if app_build is not None:
            
            _query_params.append(('app_build', app_build))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_distribution_release_counts(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_distribution_release_counts_request: Annotated[AnalyticsDistributionReleaseCountsRequest, Field(description="The releases to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsDistributionReleaseCounts200Response:
        """analytics_distribution_release_counts

        Count of total downloads for the provided distribution releases.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_distribution_release_counts_request: The releases to retrieve. (required)
        :type analytics_distribution_release_counts_request: AnalyticsDistributionReleaseCountsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_distribution_release_counts_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_distribution_release_counts_request=analytics_distribution_release_counts_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsDistributionReleaseCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_distribution_release_counts_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_distribution_release_counts_request: Annotated[AnalyticsDistributionReleaseCountsRequest, Field(description="The releases to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsDistributionReleaseCounts200Response]:
        """analytics_distribution_release_counts

        Count of total downloads for the provided distribution releases.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_distribution_release_counts_request: The releases to retrieve. (required)
        :type analytics_distribution_release_counts_request: AnalyticsDistributionReleaseCountsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_distribution_release_counts_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_distribution_release_counts_request=analytics_distribution_release_counts_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsDistributionReleaseCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_distribution_release_counts_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_distribution_release_counts_request: Annotated[AnalyticsDistributionReleaseCountsRequest, Field(description="The releases to retrieve.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_distribution_release_counts

        Count of total downloads for the provided distribution releases.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_distribution_release_counts_request: The releases to retrieve. (required)
        :type analytics_distribution_release_counts_request: AnalyticsDistributionReleaseCountsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_distribution_release_counts_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_distribution_release_counts_request=analytics_distribution_release_counts_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsDistributionReleaseCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_distribution_release_counts_serialize(
        self,
        owner_name,
        app_name,
        analytics_distribution_release_counts_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if analytics_distribution_release_counts_request is not None:
            _body_params = analytics_distribution_release_counts_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_event_count(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsEventCount200Response:
        """analytics_event_count

        Count of events by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_event_count_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsEventCount200Response]:
        """analytics_event_count

        Count of events by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_event_count_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_event_count

        Count of events by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_event_count_serialize(
        self,
        event_name,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_event_device_count(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsEventDeviceCount200Response:
        """analytics_event_device_count

        Count of devices for an event by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_device_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventDeviceCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_event_device_count_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsEventDeviceCount200Response]:
        """analytics_event_device_count

        Count of devices for an event by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_device_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventDeviceCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_event_device_count_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_event_device_count

        Count of devices for an event by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_device_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventDeviceCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_event_device_count_serialize(
        self,
        event_name,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_event_per_device_count(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsEventPerDeviceCount200Response:
        """analytics_event_per_device_count

        Count of events per device by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_per_device_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPerDeviceCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_event_per_device_count_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsEventPerDeviceCount200Response]:
        """analytics_event_per_device_count

        Count of events per device by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_per_device_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPerDeviceCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_event_per_device_count_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_event_per_device_count

        Count of events per device by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_per_device_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPerDeviceCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_event_per_device_count_serialize(
        self,
        event_name,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_event_per_session_count(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsEventPerSessionCount200Response:
        """analytics_event_per_session_count

        Count of events per session by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_per_session_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPerSessionCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_event_per_session_count_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsEventPerSessionCount200Response]:
        """analytics_event_per_session_count

        Count of events per session by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_per_session_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPerSessionCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_event_per_session_count_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_event_per_session_count

        Count of events per session by interval in the time range.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_per_session_count_serialize(
            event_name=event_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPerSessionCount200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_event_per_session_count_serialize(
        self,
        event_name,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_event_properties(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsEventProperties200Response:
        """analytics_event_properties

        Event properties.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_properties_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_event_properties_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsEventProperties200Response]:
        """analytics_event_properties

        Event properties.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_properties_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_event_properties_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_event_properties

        Event properties.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_properties_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_event_properties_serialize(
        self,
        event_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_event_property_counts(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        event_property_name: Annotated[StrictStr, Field(description="The id of the event property.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of property values to return. Set to 0 in order to fetch all results available.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsEventPropertyCounts200Response:
        """analytics_event_property_counts

        Event properties value counts during the time range in descending order.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param event_property_name: The id of the event property. (required)
        :type event_property_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param top: The number of property values to return. Set to 0 in order to fetch all results available.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_property_counts_serialize(
            event_name=event_name,
            event_property_name=event_property_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPropertyCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_event_property_counts_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        event_property_name: Annotated[StrictStr, Field(description="The id of the event property.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of property values to return. Set to 0 in order to fetch all results available.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsEventPropertyCounts200Response]:
        """analytics_event_property_counts

        Event properties value counts during the time range in descending order.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param event_property_name: The id of the event property. (required)
        :type event_property_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param top: The number of property values to return. Set to 0 in order to fetch all results available.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_property_counts_serialize(
            event_name=event_name,
            event_property_name=event_property_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPropertyCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_event_property_counts_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        event_property_name: Annotated[StrictStr, Field(description="The id of the event property.")],
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        top: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of property values to return. Set to 0 in order to fetch all results available.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_event_property_counts

        Event properties value counts during the time range in descending order.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param event_property_name: The id of the event property. (required)
        :type event_property_name: str
        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param top: The number of property values to return. Set to 0 in order to fetch all results available.
        :type top: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_event_property_counts_serialize(
            event_name=event_name,
            event_property_name=event_property_name,
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            top=top,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEventPropertyCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_event_property_counts_serialize(
        self,
        event_name,
        event_property_name,
        start,
        owner_name,
        app_name,
        end,
        versions,
        top,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if event_property_name is not None:
            _path_params['event_property_name'] = event_property_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_events(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        event_name: Annotated[Optional[List[StrictStr]], Field(description="To select the specific events.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.")] = None,
        inlinecount: Annotated[Optional[StrictStr], Field(description="Controls whether or not to include a count of all the items across all pages.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="controls the sorting order and sorting based on which column")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsEvents200Response:
        """analytics_events

        Count of active events in the time range ordered by event.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param event_name: To select the specific events.
        :type event_name: List[str]
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :type skip: int
        :param inlinecount: Controls whether or not to include a count of all the items across all pages.
        :type inlinecount: str
        :param orderby: controls the sorting order and sorting based on which column
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            event_name=event_name,
            top=top,
            skip=skip,
            inlinecount=inlinecount,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEvents200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_events_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        event_name: Annotated[Optional[List[StrictStr]], Field(description="To select the specific events.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.")] = None,
        inlinecount: Annotated[Optional[StrictStr], Field(description="Controls whether or not to include a count of all the items across all pages.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="controls the sorting order and sorting based on which column")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsEvents200Response]:
        """analytics_events

        Count of active events in the time range ordered by event.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param event_name: To select the specific events.
        :type event_name: List[str]
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :type skip: int
        :param inlinecount: Controls whether or not to include a count of all the items across all pages.
        :type inlinecount: str
        :param orderby: controls the sorting order and sorting based on which column
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            event_name=event_name,
            top=top,
            skip=skip,
            inlinecount=inlinecount,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEvents200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_events_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        event_name: Annotated[Optional[List[StrictStr]], Field(description="To select the specific events.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.")] = None,
        inlinecount: Annotated[Optional[StrictStr], Field(description="Controls whether or not to include a count of all the items across all pages.")] = None,
        orderby: Annotated[Optional[StrictStr], Field(description="controls the sorting order and sorting based on which column")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_events

        Count of active events in the time range ordered by event.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param event_name: To select the specific events.
        :type event_name: List[str]
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
        :type skip: int
        :param inlinecount: Controls whether or not to include a count of all the items across all pages.
        :type inlinecount: str
        :param orderby: controls the sorting order and sorting based on which column
        :type orderby: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            event_name=event_name,
            top=top,
            skip=skip,
            inlinecount=inlinecount,
            orderby=orderby,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsEvents200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_events_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        versions,
        event_name,
        top,
        skip,
        inlinecount,
        orderby,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
            'event_name': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        if event_name is not None:
            
            _query_params.append(('event_name', event_name))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if skip is not None:
            
            _query_params.append(('$skip', skip))
            
        if inlinecount is not None:
            
            _query_params.append(('$inlinecount', inlinecount))
            
        if orderby is not None:
            
            _query_params.append(('$orderby', orderby))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_events_delete(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """analytics_events_delete

        Delete the set of Events with the specified event names.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_delete_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_events_delete_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """analytics_events_delete

        Delete the set of Events with the specified event names.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_delete_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_events_delete_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_events_delete

        Delete the set of Events with the specified event names.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_delete_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_events_delete_serialize(
        self,
        event_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_events_delete_logs(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """analytics_events_delete_logs

        Delete the set of Events with the specified event names.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_delete_logs_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_events_delete_logs_with_http_info(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """analytics_events_delete_logs

        Delete the set of Events with the specified event names.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_delete_logs_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_events_delete_logs_without_preload_content(
        self,
        event_name: Annotated[StrictStr, Field(description="The id of the event.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_events_delete_logs

        Delete the set of Events with the specified event names.

        :param event_name: The id of the event. (required)
        :type event_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_events_delete_logs_serialize(
            event_name=event_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_events_delete_logs_serialize(
        self,
        event_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_name is not None:
            _path_params['event_name'] = event_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_generic_log_flow(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        start: Annotated[Optional[datetime], Field(description="Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsGenericLogFlow200Response:
        """analytics_generic_log_flow

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
        :type start: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_generic_log_flow_serialize(
            owner_name=owner_name,
            app_name=app_name,
            start=start,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGenericLogFlow200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_generic_log_flow_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        start: Annotated[Optional[datetime], Field(description="Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsGenericLogFlow200Response]:
        """analytics_generic_log_flow

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
        :type start: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_generic_log_flow_serialize(
            owner_name=owner_name,
            app_name=app_name,
            start=start,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGenericLogFlow200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_generic_log_flow_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        start: Annotated[Optional[datetime], Field(description="Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_generic_log_flow

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
        :type start: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_generic_log_flow_serialize(
            owner_name=owner_name,
            app_name=app_name,
            start=start,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGenericLogFlow200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_generic_log_flow_serialize(
        self,
        owner_name,
        app_name,
        start,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_get_audience(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsGetAudience200Response:
        """analytics_get_audience

        Gets audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_get_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGetAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_get_audience_with_http_info(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsGetAudience200Response]:
        """analytics_get_audience

        Gets audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_get_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGetAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_get_audience_without_preload_content(
        self,
        audience_name: Annotated[str, Field(strict=True, max_length=64, description="The name of the audience")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_get_audience

        Gets audience definition.

        :param audience_name: The name of the audience (required)
        :type audience_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_get_audience_serialize(
            audience_name=audience_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsGetAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_get_audience_serialize(
        self,
        audience_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if audience_name is not None:
            _path_params['audience_name'] = audience_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_language_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsLanguageCounts200Response:
        """analytics_language_counts

        Languages in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_language_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsLanguageCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_language_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsLanguageCounts200Response]:
        """analytics_language_counts

        Languages in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_language_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsLanguageCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_language_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_language_counts

        Languages in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_language_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsLanguageCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_language_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        top,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/languages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_list_audiences(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        include_disabled: Annotated[Optional[StrictBool], Field(description="Include disabled audience definitions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsListAudiences200Response:
        """analytics_list_audiences

        Get list of audiences.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param include_disabled: Include disabled audience definitions
        :type include_disabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_audiences_serialize(
            owner_name=owner_name,
            app_name=app_name,
            include_disabled=include_disabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListAudiences200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_list_audiences_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        include_disabled: Annotated[Optional[StrictBool], Field(description="Include disabled audience definitions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsListAudiences200Response]:
        """analytics_list_audiences

        Get list of audiences.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param include_disabled: Include disabled audience definitions
        :type include_disabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_audiences_serialize(
            owner_name=owner_name,
            app_name=app_name,
            include_disabled=include_disabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListAudiences200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_list_audiences_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        include_disabled: Annotated[Optional[StrictBool], Field(description="Include disabled audience definitions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_list_audiences

        Get list of audiences.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param include_disabled: Include disabled audience definitions
        :type include_disabled: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_audiences_serialize(
            owner_name=owner_name,
            app_name=app_name,
            include_disabled=include_disabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListAudiences200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_list_audiences_serialize(
        self,
        owner_name,
        app_name,
        include_disabled,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if include_disabled is not None:
            
            _query_params.append(('include_disabled', include_disabled))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_list_custom_properties(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsListCustomProperties200Response:
        """analytics_list_custom_properties

        Get list of custom properties.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_custom_properties_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListCustomProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_list_custom_properties_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsListCustomProperties200Response]:
        """analytics_list_custom_properties

        Get list of custom properties.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_custom_properties_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListCustomProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_list_custom_properties_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_list_custom_properties

        Get list of custom properties.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_custom_properties_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListCustomProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_list_custom_properties_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_list_device_properties(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsListCustomProperties200Response:
        """analytics_list_device_properties

        Get list of device properties.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_device_properties_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListCustomProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_list_device_properties_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsListCustomProperties200Response]:
        """analytics_list_device_properties

        Get list of device properties.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_device_properties_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListCustomProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_list_device_properties_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_list_device_properties

        Get list of device properties.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_device_properties_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListCustomProperties200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_list_device_properties_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_list_device_property_values(
        self,
        property_name: Annotated[StrictStr, Field(description="Device property")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        contains: Annotated[Optional[StrictStr], Field(description="Contains string")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsListDevicePropertyValues200Response:
        """analytics_list_device_property_values

        Get list of device property values.

        :param property_name: Device property (required)
        :type property_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param contains: Contains string
        :type contains: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_device_property_values_serialize(
            property_name=property_name,
            owner_name=owner_name,
            app_name=app_name,
            contains=contains,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListDevicePropertyValues200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_list_device_property_values_with_http_info(
        self,
        property_name: Annotated[StrictStr, Field(description="Device property")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        contains: Annotated[Optional[StrictStr], Field(description="Contains string")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsListDevicePropertyValues200Response]:
        """analytics_list_device_property_values

        Get list of device property values.

        :param property_name: Device property (required)
        :type property_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param contains: Contains string
        :type contains: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_device_property_values_serialize(
            property_name=property_name,
            owner_name=owner_name,
            app_name=app_name,
            contains=contains,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListDevicePropertyValues200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_list_device_property_values_without_preload_content(
        self,
        property_name: Annotated[StrictStr, Field(description="Device property")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        contains: Annotated[Optional[StrictStr], Field(description="Contains string")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_list_device_property_values

        Get list of device property values.

        :param property_name: Device property (required)
        :type property_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param contains: Contains string
        :type contains: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_list_device_property_values_serialize(
            property_name=property_name,
            owner_name=owner_name,
            app_name=app_name,
            contains=contains,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsListDevicePropertyValues200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_list_device_property_values_serialize(
        self,
        property_name,
        owner_name,
        app_name,
        contains,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if property_name is not None:
            _path_params['property_name'] = property_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if contains is not None:
            
            _query_params.append(('contains', contains))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_log_flow(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        start: Annotated[Optional[datetime], Field(description="Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsLogFlow200Response:
        """analytics_log_flow

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
        :type start: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_log_flow_serialize(
            owner_name=owner_name,
            app_name=app_name,
            start=start,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsLogFlow200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_log_flow_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        start: Annotated[Optional[datetime], Field(description="Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsLogFlow200Response]:
        """analytics_log_flow

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
        :type start: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_log_flow_serialize(
            owner_name=owner_name,
            app_name=app_name,
            start=start,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsLogFlow200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_log_flow_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        start: Annotated[Optional[datetime], Field(description="Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_log_flow

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
        :type start: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_log_flow_serialize(
            owner_name=owner_name,
            app_name=app_name,
            start=start,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsLogFlow200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_log_flow_serialize(
        self,
        owner_name,
        app_name,
        start,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_model_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsModelCounts200Response:
        """analytics_model_counts

        Models in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_model_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsModelCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_model_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsModelCounts200Response]:
        """analytics_model_counts

        Models in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_model_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsModelCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_model_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_model_counts

        Models in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_model_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsModelCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_model_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        top,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/models',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_operating_system_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsOperatingSystemCounts200Response:
        """analytics_operating_system_counts

        OSes in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_operating_system_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsOperatingSystemCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_operating_system_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsOperatingSystemCounts200Response]:
        """analytics_operating_system_counts

        OSes in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_operating_system_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsOperatingSystemCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_operating_system_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_operating_system_counts

        OSes in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_operating_system_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsOperatingSystemCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_operating_system_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        top,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/oses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_per_device_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsPerDeviceCounts200Response:
        """analytics_per_device_counts

        Count of sessions per device in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_per_device_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsPerDeviceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_per_device_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsPerDeviceCounts200Response]:
        """analytics_per_device_counts

        Count of sessions per device in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_per_device_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsPerDeviceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_per_device_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_per_device_counts

        Count of sessions per device in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_per_device_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsPerDeviceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_per_device_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_place_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsPlaceCounts200Response:
        """analytics_place_counts

        Places in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_place_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsPlaceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_place_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsPlaceCounts200Response]:
        """analytics_place_counts

        Places in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_place_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsPlaceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_place_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_place_counts

        Places in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_place_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsPlaceCounts200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_place_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        top,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/places',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_session_counts(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AnalyticsDeviceCounts200ResponseDailyInner]:
        """analytics_session_counts

        Count of sessions in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_session_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AnalyticsDeviceCounts200ResponseDailyInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_session_counts_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AnalyticsDeviceCounts200ResponseDailyInner]]:
        """analytics_session_counts

        Count of sessions in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_session_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AnalyticsDeviceCounts200ResponseDailyInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_session_counts_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_session_counts

        Count of sessions in the time range.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_session_counts_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AnalyticsDeviceCounts200ResponseDailyInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_session_counts_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_session_durations_distribution(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsSessionDurationsDistribution200Response:
        """analytics_session_durations_distribution

        Gets session duration.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_session_durations_distribution_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsSessionDurationsDistribution200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_session_durations_distribution_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsSessionDurationsDistribution200Response]:
        """analytics_session_durations_distribution

        Gets session duration.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_session_durations_distribution_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsSessionDurationsDistribution200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_session_durations_distribution_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_session_durations_distribution

        Gets session duration.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_session_durations_distribution_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsSessionDurationsDistribution200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_session_durations_distribution_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_test_audience(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_test_audience_request: Annotated[AnalyticsTestAudienceRequest, Field(description="Audience definition")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsTestAudience200Response:
        """analytics_test_audience

        Tests audience definition.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_test_audience_request: Audience definition (required)
        :type analytics_test_audience_request: AnalyticsTestAudienceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_test_audience_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_test_audience_request=analytics_test_audience_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsTestAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_test_audience_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_test_audience_request: Annotated[AnalyticsTestAudienceRequest, Field(description="Audience definition")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsTestAudience200Response]:
        """analytics_test_audience

        Tests audience definition.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_test_audience_request: Audience definition (required)
        :type analytics_test_audience_request: AnalyticsTestAudienceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_test_audience_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_test_audience_request=analytics_test_audience_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsTestAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_test_audience_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        analytics_test_audience_request: Annotated[AnalyticsTestAudienceRequest, Field(description="Audience definition")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_test_audience

        Tests audience definition.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param analytics_test_audience_request: Audience definition (required)
        :type analytics_test_audience_request: AnalyticsTestAudienceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_test_audience_serialize(
            owner_name=owner_name,
            app_name=app_name,
            analytics_test_audience_request=analytics_test_audience_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsTestAudience200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_test_audience_serialize(
        self,
        owner_name,
        app_name,
        analytics_test_audience_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if analytics_test_audience_request is not None:
            _body_params = analytics_test_audience_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analytics_versions(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsVersions200Response:
        """analytics_versions

        Count of active versions in the time range ordered by version.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_versions_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsVersions200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_versions_with_http_info(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsVersions200Response]:
        """analytics_versions

        Count of active versions in the time range ordered by version.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_versions_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsVersions200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_versions_without_preload_content(
        self,
        start: Annotated[datetime, Field(description="Start date time in data in ISO 8601 date time format.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        end: Annotated[Optional[datetime], Field(description="Last date time in data in ISO 8601 date time format.")] = None,
        top: Annotated[Optional[Annotated[int, Field(le=2000, strict=True, ge=0)]], Field(description="The maximum number of results to return. (0 will fetch all results)")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="To select specific application versions")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics_versions

        Count of active versions in the time range ordered by version.

        :param start: Start date time in data in ISO 8601 date time format. (required)
        :type start: datetime
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param end: Last date time in data in ISO 8601 date time format.
        :type end: datetime
        :param top: The maximum number of results to return. (0 will fetch all results)
        :type top: int
        :param versions: To select specific application versions
        :type versions: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_versions_serialize(
            start=start,
            owner_name=owner_name,
            app_name=app_name,
            end=end,
            top=top,
            versions=versions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsVersions200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_versions_serialize(
        self,
        start,
        owner_name,
        app_name,
        end,
        top,
        versions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'versions': 'pipes',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if start is not None:
            if isinstance(start, datetime):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, datetime):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if top is not None:
            
            _query_params.append(('$top', top))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/analytics/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def app_block_logs(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """app_block_logs

        **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_block_logs_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def app_block_logs_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """app_block_logs

        **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_block_logs_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def app_block_logs_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """app_block_logs

        **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._app_block_logs_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _app_block_logs_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/devices/block_logs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def crashes_list_session_logs(
        self,
        crash_id: Annotated[StrictStr, Field(description="The id of the a crash")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        var_date: Annotated[Optional[datetime], Field(description="Date of data requested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CrashesListSessionLogs200Response:
        """crashes_list_session_logs

        Get session logs by crash ID

        :param crash_id: The id of the a crash (required)
        :type crash_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param var_date: Date of data requested
        :type var_date: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._crashes_list_session_logs_serialize(
            crash_id=crash_id,
            owner_name=owner_name,
            app_name=app_name,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CrashesListSessionLogs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def crashes_list_session_logs_with_http_info(
        self,
        crash_id: Annotated[StrictStr, Field(description="The id of the a crash")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        var_date: Annotated[Optional[datetime], Field(description="Date of data requested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CrashesListSessionLogs200Response]:
        """crashes_list_session_logs

        Get session logs by crash ID

        :param crash_id: The id of the a crash (required)
        :type crash_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param var_date: Date of data requested
        :type var_date: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._crashes_list_session_logs_serialize(
            crash_id=crash_id,
            owner_name=owner_name,
            app_name=app_name,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CrashesListSessionLogs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def crashes_list_session_logs_without_preload_content(
        self,
        crash_id: Annotated[StrictStr, Field(description="The id of the a crash")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        var_date: Annotated[Optional[datetime], Field(description="Date of data requested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """crashes_list_session_logs

        Get session logs by crash ID

        :param crash_id: The id of the a crash (required)
        :type crash_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param var_date: Date of data requested
        :type var_date: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._crashes_list_session_logs_serialize(
            crash_id=crash_id,
            owner_name=owner_name,
            app_name=app_name,
            var_date=var_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CrashesListSessionLogs200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _crashes_list_session_logs_serialize(
        self,
        crash_id,
        owner_name,
        app_name,
        var_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crash_id is not None:
            _path_params['crash_id'] = crash_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if var_date is not None:
            if isinstance(var_date, datetime):
                _query_params.append(
                    (
                        'date',
                        var_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date', var_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_block_logs(
        self,
        install_id: Annotated[StrictStr, Field(description="The id of the device")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """devices_block_logs

        **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 

        :param install_id: The id of the device (required)
        :type install_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_block_logs_serialize(
            install_id=install_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_block_logs_with_http_info(
        self,
        install_id: Annotated[StrictStr, Field(description="The id of the device")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """devices_block_logs

        **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 

        :param install_id: The id of the device (required)
        :type install_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_block_logs_serialize(
            install_id=install_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_block_logs_without_preload_content(
        self,
        install_id: Annotated[StrictStr, Field(description="The id of the device")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_block_logs

        **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 

        :param install_id: The id of the device (required)
        :type install_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_block_logs_serialize(
            install_id=install_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_block_logs_serialize(
        self,
        install_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if install_id is not None:
            _path_params['install_id'] = install_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



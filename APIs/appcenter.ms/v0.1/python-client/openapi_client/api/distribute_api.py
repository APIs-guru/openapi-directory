# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.apple_mapping_create_request import AppleMappingCreateRequest
from openapi_client.models.apple_mapping_get200_response import AppleMappingGet200Response
from openapi_client.models.apple_mapping_test_flight_groups200_response_inner import AppleMappingTestFlightGroups200ResponseInner
from openapi_client.models.devices_get_release_update_devices_status200_response import DevicesGetReleaseUpdateDevicesStatus200Response
from openapi_client.models.devices_list200_response_inner import DevicesList200ResponseInner
from openapi_client.models.devices_register_user_for_device_request import DevicesRegisterUserForDeviceRequest
from openapi_client.models.distibution_releases_install_analytics_request import DistibutionReleasesInstallAnalyticsRequest
from openapi_client.models.provisioning_profile_response import ProvisioningProfileResponse
from openapi_client.models.releases_add_distribution_group201_response import ReleasesAddDistributionGroup201Response
from openapi_client.models.releases_add_distribution_group_request import ReleasesAddDistributionGroupRequest
from openapi_client.models.releases_add_store201_response import ReleasesAddStore201Response
from openapi_client.models.releases_add_store_request import ReleasesAddStoreRequest
from openapi_client.models.releases_add_testers_request import ReleasesAddTestersRequest
from openapi_client.models.releases_create_release_upload201_response import ReleasesCreateReleaseUpload201Response
from openapi_client.models.releases_create_release_upload_request import ReleasesCreateReleaseUploadRequest
from openapi_client.models.releases_get_latest_by_distribution_group200_response import ReleasesGetLatestByDistributionGroup200Response
from openapi_client.models.releases_get_public_groups_for_release_by_hash200_response_inner import ReleasesGetPublicGroupsForReleaseByHash200ResponseInner
from openapi_client.models.releases_get_release_upload_status200_response import ReleasesGetReleaseUploadStatus200Response
from openapi_client.models.releases_list_by_distribution_group200_response_inner import ReleasesListByDistributionGroup200ResponseInner
from openapi_client.models.releases_list_latest200_response_inner import ReleasesListLatest200ResponseInner
from openapi_client.models.releases_put_distribution_group_request import ReleasesPutDistributionGroupRequest
from openapi_client.models.releases_update200_response import ReleasesUpdate200Response
from openapi_client.models.releases_update_details200_response import ReleasesUpdateDetails200Response
from openapi_client.models.releases_update_details_request import ReleasesUpdateDetailsRequest
from openapi_client.models.releases_update_release_upload_status200_response import ReleasesUpdateReleaseUploadStatus200Response
from openapi_client.models.releases_update_release_upload_status_request import ReleasesUpdateReleaseUploadStatusRequest
from openapi_client.models.releases_update_request import ReleasesUpdateRequest
from openapi_client.models.store_notifications_get_notification_by_app_id200_response import StoreNotificationsGetNotificationByAppId200Response
from openapi_client.models.store_releases_get_latest200_response_inner import StoreReleasesGetLatest200ResponseInner
from openapi_client.models.store_releases_get_publish_error200_response import StoreReleasesGetPublishError200Response
from openapi_client.models.store_releases_get_real_time_status_by_release_id200_response import StoreReleasesGetRealTimeStatusByReleaseId200Response
from openapi_client.models.store_releases_list200_response_inner import StoreReleasesList200ResponseInner
from openapi_client.models.stores_create_request import StoresCreateRequest
from openapi_client.models.stores_list200_response_inner import StoresList200ResponseInner
from openapi_client.models.stores_patch_request import StoresPatchRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DistributeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def apple_mapping_create(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        apple_mapping_create_request: Annotated[AppleMappingCreateRequest, Field(description="The apple app mapping object")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppleMappingGet200Response:
        """apple_mapping_create

        Create a mapping for an existing app in apple store for the specified application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param apple_mapping_create_request: The apple app mapping object (required)
        :type apple_mapping_create_request: AppleMappingCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_create_serialize(
            owner_name=owner_name,
            app_name=app_name,
            apple_mapping_create_request=apple_mapping_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AppleMappingGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apple_mapping_create_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        apple_mapping_create_request: Annotated[AppleMappingCreateRequest, Field(description="The apple app mapping object")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppleMappingGet200Response]:
        """apple_mapping_create

        Create a mapping for an existing app in apple store for the specified application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param apple_mapping_create_request: The apple app mapping object (required)
        :type apple_mapping_create_request: AppleMappingCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_create_serialize(
            owner_name=owner_name,
            app_name=app_name,
            apple_mapping_create_request=apple_mapping_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AppleMappingGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apple_mapping_create_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        apple_mapping_create_request: Annotated[AppleMappingCreateRequest, Field(description="The apple app mapping object")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apple_mapping_create

        Create a mapping for an existing app in apple store for the specified application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param apple_mapping_create_request: The apple app mapping object (required)
        :type apple_mapping_create_request: AppleMappingCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_create_serialize(
            owner_name=owner_name,
            app_name=app_name,
            apple_mapping_create_request=apple_mapping_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "AppleMappingGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apple_mapping_create_serialize(
        self,
        owner_name,
        app_name,
        apple_mapping_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if apple_mapping_create_request is not None:
            _body_params = apple_mapping_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/apple_mapping',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apple_mapping_delete(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """apple_mapping_delete

        Delete mapping of apple app to an existing app in apple store.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_delete_serialize(
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apple_mapping_delete_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """apple_mapping_delete

        Delete mapping of apple app to an existing app in apple store.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_delete_serialize(
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apple_mapping_delete_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apple_mapping_delete

        Delete mapping of apple app to an existing app in apple store.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_delete_serialize(
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apple_mapping_delete_serialize(
        self,
        owner_name,
        app_name,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/apple_mapping',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apple_mapping_get(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AppleMappingGet200Response:
        """apple_mapping_get

        Get mapping of apple app to an existing app in apple store.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_get_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppleMappingGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apple_mapping_get_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AppleMappingGet200Response]:
        """apple_mapping_get

        Get mapping of apple app to an existing app in apple store.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_get_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppleMappingGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apple_mapping_get_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """apple_mapping_get

        Get mapping of apple app to an existing app in apple store.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apple_mapping_get_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AppleMappingGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apple_mapping_get_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/apple_mapping',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def apple_mapping_test_flight_groups(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AppleMappingTestFlightGroups200ResponseInner]:
        """(Deprecated) apple_mapping_test_flight_groups

        Fetch all apple test flight groups

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups is deprecated.", DeprecationWarning)

        _param = self._apple_mapping_test_flight_groups_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AppleMappingTestFlightGroups200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apple_mapping_test_flight_groups_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AppleMappingTestFlightGroups200ResponseInner]]:
        """(Deprecated) apple_mapping_test_flight_groups

        Fetch all apple test flight groups

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups is deprecated.", DeprecationWarning)

        _param = self._apple_mapping_test_flight_groups_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AppleMappingTestFlightGroups200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apple_mapping_test_flight_groups_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) apple_mapping_test_flight_groups

        Fetch all apple test flight groups

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups is deprecated.", DeprecationWarning)

        _param = self._apple_mapping_test_flight_groups_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AppleMappingTestFlightGroups200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apple_mapping_test_flight_groups_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_device_details(
        self,
        device_udid: Annotated[StrictStr, Field(description="The UDID of the device")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DevicesList200ResponseInner:
        """devices_device_details

        Returns the device details.

        :param device_udid: The UDID of the device (required)
        :type device_udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_device_details_serialize(
            device_udid=device_udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesList200ResponseInner",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_device_details_with_http_info(
        self,
        device_udid: Annotated[StrictStr, Field(description="The UDID of the device")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DevicesList200ResponseInner]:
        """devices_device_details

        Returns the device details.

        :param device_udid: The UDID of the device (required)
        :type device_udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_device_details_serialize(
            device_udid=device_udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesList200ResponseInner",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_device_details_without_preload_content(
        self,
        device_udid: Annotated[StrictStr, Field(description="The UDID of the device")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_device_details

        Returns the device details.

        :param device_udid: The UDID of the device (required)
        :type device_udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_device_details_serialize(
            device_udid=device_udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesList200ResponseInner",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_device_details_serialize(
        self,
        device_udid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_udid is not None:
            _path_params['device_udid'] = device_udid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/user/devices/{device_udid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_get_release_update_devices_status(
        self,
        release_id: Annotated[StrictStr, Field(description="The ID of the release.")],
        resign_id: Annotated[StrictStr, Field(description="The ID of the resign operation.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        include_provisioning_profile: Annotated[Optional[StrictBool], Field(description="A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DevicesGetReleaseUpdateDevicesStatus200Response:
        """devices_get_release_update_devices_status

        Returns the resign status to the caller

        :param release_id: The ID of the release. (required)
        :type release_id: str
        :param resign_id: The ID of the resign operation. (required)
        :type resign_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param include_provisioning_profile: A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.
        :type include_provisioning_profile: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_get_release_update_devices_status_serialize(
            release_id=release_id,
            resign_id=resign_id,
            owner_name=owner_name,
            app_name=app_name,
            include_provisioning_profile=include_provisioning_profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesGetReleaseUpdateDevicesStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_get_release_update_devices_status_with_http_info(
        self,
        release_id: Annotated[StrictStr, Field(description="The ID of the release.")],
        resign_id: Annotated[StrictStr, Field(description="The ID of the resign operation.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        include_provisioning_profile: Annotated[Optional[StrictBool], Field(description="A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DevicesGetReleaseUpdateDevicesStatus200Response]:
        """devices_get_release_update_devices_status

        Returns the resign status to the caller

        :param release_id: The ID of the release. (required)
        :type release_id: str
        :param resign_id: The ID of the resign operation. (required)
        :type resign_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param include_provisioning_profile: A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.
        :type include_provisioning_profile: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_get_release_update_devices_status_serialize(
            release_id=release_id,
            resign_id=resign_id,
            owner_name=owner_name,
            app_name=app_name,
            include_provisioning_profile=include_provisioning_profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesGetReleaseUpdateDevicesStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_get_release_update_devices_status_without_preload_content(
        self,
        release_id: Annotated[StrictStr, Field(description="The ID of the release.")],
        resign_id: Annotated[StrictStr, Field(description="The ID of the resign operation.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        include_provisioning_profile: Annotated[Optional[StrictBool], Field(description="A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_get_release_update_devices_status

        Returns the resign status to the caller

        :param release_id: The ID of the release. (required)
        :type release_id: str
        :param resign_id: The ID of the resign operation. (required)
        :type resign_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param include_provisioning_profile: A boolean value that indicates if the provisioning profile should be return in addition to the status. When set to true, the provisioning profile will be returned only when status is 'complete' or 'preparing_for_testers'.
        :type include_provisioning_profile: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_get_release_update_devices_status_serialize(
            release_id=release_id,
            resign_id=resign_id,
            owner_name=owner_name,
            app_name=app_name,
            include_provisioning_profile=include_provisioning_profile,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesGetReleaseUpdateDevicesStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_get_release_update_devices_status_serialize(
        self,
        release_id,
        resign_id,
        owner_name,
        app_name,
        include_provisioning_profile,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if resign_id is not None:
            _path_params['resign_id'] = resign_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if include_provisioning_profile is not None:
            
            _query_params.append(('include_provisioning_profile', include_provisioning_profile))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_list(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        release_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[DevicesList200ResponseInner]:
        """devices_list

        Returns all devices associated with the given distribution group

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param release_id: when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.
        :type release_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_list_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DevicesList200ResponseInner]",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_list_with_http_info(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        release_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[DevicesList200ResponseInner]]:
        """devices_list

        Returns all devices associated with the given distribution group

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param release_id: when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.
        :type release_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_list_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DevicesList200ResponseInner]",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_list_without_preload_content(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        release_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_list

        Returns all devices associated with the given distribution group

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param release_id: when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.
        :type release_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_list_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DevicesList200ResponseInner]",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_list_serialize(
        self,
        distribution_group_name,
        owner_name,
        app_name,
        release_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if distribution_group_name is not None:
            _path_params['distribution_group_name'] = distribution_group_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if release_id is not None:
            
            _query_params.append(('release_id', release_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_list_csv_format(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        unprovisioned_only: Annotated[Optional[StrictBool], Field(description="when true, filters out provisioned devices")] = None,
        udids: Annotated[Optional[List[StrictStr]], Field(description="multiple UDIDs which should be part of the resulting CSV.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """devices_list_csv_format

        Returns all devices associated with the given distribution group.

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param unprovisioned_only: when true, filters out provisioned devices
        :type unprovisioned_only: bool
        :param udids: multiple UDIDs which should be part of the resulting CSV.
        :type udids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_list_csv_format_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            unprovisioned_only=unprovisioned_only,
            udids=udids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '500': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_list_csv_format_with_http_info(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        unprovisioned_only: Annotated[Optional[StrictBool], Field(description="when true, filters out provisioned devices")] = None,
        udids: Annotated[Optional[List[StrictStr]], Field(description="multiple UDIDs which should be part of the resulting CSV.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """devices_list_csv_format

        Returns all devices associated with the given distribution group.

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param unprovisioned_only: when true, filters out provisioned devices
        :type unprovisioned_only: bool
        :param udids: multiple UDIDs which should be part of the resulting CSV.
        :type udids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_list_csv_format_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            unprovisioned_only=unprovisioned_only,
            udids=udids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '500': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_list_csv_format_without_preload_content(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        unprovisioned_only: Annotated[Optional[StrictBool], Field(description="when true, filters out provisioned devices")] = None,
        udids: Annotated[Optional[List[StrictStr]], Field(description="multiple UDIDs which should be part of the resulting CSV.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_list_csv_format

        Returns all devices associated with the given distribution group.

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param unprovisioned_only: when true, filters out provisioned devices
        :type unprovisioned_only: bool
        :param udids: multiple UDIDs which should be part of the resulting CSV.
        :type udids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_list_csv_format_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            unprovisioned_only=unprovisioned_only,
            udids=udids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '500': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_list_csv_format_serialize(
        self,
        distribution_group_name,
        owner_name,
        app_name,
        unprovisioned_only,
        udids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'udids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if distribution_group_name is not None:
            _path_params['distribution_group_name'] = distribution_group_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if unprovisioned_only is not None:
            
            _query_params.append(('unprovisioned_only', unprovisioned_only))
            
        if udids is not None:
            
            _query_params.append(('udids', udids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_register_user_for_device(
        self,
        user_id: Annotated[StrictStr, Field(description="The ID of the user")],
        devices_register_user_for_device_request: Annotated[DevicesRegisterUserForDeviceRequest, Field(description="The device info.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DevicesList200ResponseInner:
        """devices_register_user_for_device

        Registers a user for an existing device

        :param user_id: The ID of the user (required)
        :type user_id: str
        :param devices_register_user_for_device_request: The device info. (required)
        :type devices_register_user_for_device_request: DevicesRegisterUserForDeviceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_register_user_for_device_serialize(
            user_id=user_id,
            devices_register_user_for_device_request=devices_register_user_for_device_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesList200ResponseInner",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_register_user_for_device_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="The ID of the user")],
        devices_register_user_for_device_request: Annotated[DevicesRegisterUserForDeviceRequest, Field(description="The device info.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DevicesList200ResponseInner]:
        """devices_register_user_for_device

        Registers a user for an existing device

        :param user_id: The ID of the user (required)
        :type user_id: str
        :param devices_register_user_for_device_request: The device info. (required)
        :type devices_register_user_for_device_request: DevicesRegisterUserForDeviceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_register_user_for_device_serialize(
            user_id=user_id,
            devices_register_user_for_device_request=devices_register_user_for_device_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesList200ResponseInner",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_register_user_for_device_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="The ID of the user")],
        devices_register_user_for_device_request: Annotated[DevicesRegisterUserForDeviceRequest, Field(description="The device info.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_register_user_for_device

        Registers a user for an existing device

        :param user_id: The ID of the user (required)
        :type user_id: str
        :param devices_register_user_for_device_request: The device info. (required)
        :type devices_register_user_for_device_request: DevicesRegisterUserForDeviceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_register_user_for_device_serialize(
            user_id=user_id,
            devices_register_user_for_device_request=devices_register_user_for_device_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DevicesList200ResponseInner",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_register_user_for_device_serialize(
        self,
        user_id,
        devices_register_user_for_device_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if devices_register_user_for_device_request is not None:
            _body_params = devices_register_user_for_device_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/users/{user_id}/devices/register',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_remove_user_device(
        self,
        device_udid: Annotated[StrictStr, Field(description="The UDID of the device")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """devices_remove_user_device

        Removes an existing device from a user

        :param device_udid: The UDID of the device (required)
        :type device_udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_remove_user_device_serialize(
            device_udid=device_udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_remove_user_device_with_http_info(
        self,
        device_udid: Annotated[StrictStr, Field(description="The UDID of the device")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """devices_remove_user_device

        Removes an existing device from a user

        :param device_udid: The UDID of the device (required)
        :type device_udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_remove_user_device_serialize(
            device_udid=device_udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_remove_user_device_without_preload_content(
        self,
        device_udid: Annotated[StrictStr, Field(description="The UDID of the device")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_remove_user_device

        Removes an existing device from a user

        :param device_udid: The UDID of the device (required)
        :type device_udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_remove_user_device_serialize(
            device_udid=device_udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_remove_user_device_serialize(
        self,
        device_udid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_udid is not None:
            _path_params['device_udid'] = device_udid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/user/devices/{device_udid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def devices_user_devices_list(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[DevicesList200ResponseInner]:
        """devices_user_devices_list

        Returns all devices associated with the given user.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_user_devices_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DevicesList200ResponseInner]",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def devices_user_devices_list_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[DevicesList200ResponseInner]]:
        """devices_user_devices_list

        Returns all devices associated with the given user.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_user_devices_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DevicesList200ResponseInner]",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def devices_user_devices_list_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """devices_user_devices_list

        Returns all devices associated with the given user.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._devices_user_devices_list_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DevicesList200ResponseInner]",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _devices_user_devices_list_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/user/devices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def distibution_releases_install_analytics(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distibution_releases_install_analytics_request: Annotated[DistibutionReleasesInstallAnalyticsRequest, Field(description="The install analytics request payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """distibution_releases_install_analytics

        Notify download(s) for the provided distribution release(s).

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distibution_releases_install_analytics_request: The install analytics request payload (required)
        :type distibution_releases_install_analytics_request: DistibutionReleasesInstallAnalyticsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distibution_releases_install_analytics_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distibution_releases_install_analytics_request=distibution_releases_install_analytics_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def distibution_releases_install_analytics_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distibution_releases_install_analytics_request: Annotated[DistibutionReleasesInstallAnalyticsRequest, Field(description="The install analytics request payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """distibution_releases_install_analytics

        Notify download(s) for the provided distribution release(s).

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distibution_releases_install_analytics_request: The install analytics request payload (required)
        :type distibution_releases_install_analytics_request: DistibutionReleasesInstallAnalyticsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distibution_releases_install_analytics_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distibution_releases_install_analytics_request=distibution_releases_install_analytics_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def distibution_releases_install_analytics_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distibution_releases_install_analytics_request: Annotated[DistibutionReleasesInstallAnalyticsRequest, Field(description="The install analytics request payload")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """distibution_releases_install_analytics

        Notify download(s) for the provided distribution release(s).

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distibution_releases_install_analytics_request: The install analytics request payload (required)
        :type distibution_releases_install_analytics_request: DistibutionReleasesInstallAnalyticsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distibution_releases_install_analytics_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distibution_releases_install_analytics_request=distibution_releases_install_analytics_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _distibution_releases_install_analytics_serialize(
        self,
        owner_name,
        app_name,
        distibution_releases_install_analytics_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if distibution_releases_install_analytics_request is not None:
            _body_params = distibution_releases_install_analytics_request



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/public/apps/{owner_name}/{app_name}/install_analytics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def provisioning_profile(
        self,
        release_id: Annotated[StrictInt, Field(description="The release_id")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProvisioningProfileResponse:
        """provisioning_profile

        Return information about the provisioning profile. Only available for iOS.

        :param release_id: The release_id (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._provisioning_profile_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProvisioningProfileResponse",
            '400': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def provisioning_profile_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The release_id")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProvisioningProfileResponse]:
        """provisioning_profile

        Return information about the provisioning profile. Only available for iOS.

        :param release_id: The release_id (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._provisioning_profile_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProvisioningProfileResponse",
            '400': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def provisioning_profile_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The release_id")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """provisioning_profile

        Return information about the provisioning profile. Only available for iOS.

        :param release_id: The release_id (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._provisioning_profile_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProvisioningProfileResponse",
            '400': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _provisioning_profile_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_add_distribution_group(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_distribution_group_request: Annotated[ReleasesAddDistributionGroupRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesAddDistributionGroup201Response:
        """releases_add_distribution_group

        Distributes a release to a group

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_distribution_group_request: The release information. (required)
        :type releases_add_distribution_group_request: ReleasesAddDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_distribution_group_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_distribution_group_request=releases_add_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddDistributionGroup201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_add_distribution_group_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_distribution_group_request: Annotated[ReleasesAddDistributionGroupRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesAddDistributionGroup201Response]:
        """releases_add_distribution_group

        Distributes a release to a group

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_distribution_group_request: The release information. (required)
        :type releases_add_distribution_group_request: ReleasesAddDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_distribution_group_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_distribution_group_request=releases_add_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddDistributionGroup201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_add_distribution_group_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_distribution_group_request: Annotated[ReleasesAddDistributionGroupRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_add_distribution_group

        Distributes a release to a group

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_distribution_group_request: The release information. (required)
        :type releases_add_distribution_group_request: ReleasesAddDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_distribution_group_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_distribution_group_request=releases_add_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddDistributionGroup201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_add_distribution_group_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        releases_add_distribution_group_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_add_distribution_group_request is not None:
            _body_params = releases_add_distribution_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_add_store(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_store_request: Annotated[ReleasesAddStoreRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesAddStore201Response:
        """releases_add_store

        Distributes a release to a store

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_store_request: The release information. (required)
        :type releases_add_store_request: ReleasesAddStoreRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_store_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_store_request=releases_add_store_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddStore201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_add_store_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_store_request: Annotated[ReleasesAddStoreRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesAddStore201Response]:
        """releases_add_store

        Distributes a release to a store

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_store_request: The release information. (required)
        :type releases_add_store_request: ReleasesAddStoreRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_store_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_store_request=releases_add_store_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddStore201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_add_store_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_store_request: Annotated[ReleasesAddStoreRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_add_store

        Distributes a release to a store

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_store_request: The release information. (required)
        :type releases_add_store_request: ReleasesAddStoreRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_store_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_store_request=releases_add_store_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddStore201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_add_store_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        releases_add_store_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_add_store_request is not None:
            _body_params = releases_add_store_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_add_testers(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_testers_request: Annotated[ReleasesAddTestersRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesAddDistributionGroup201Response:
        """releases_add_testers

        Distributes a release to a user

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_testers_request: The release information. (required)
        :type releases_add_testers_request: ReleasesAddTestersRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_testers_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_testers_request=releases_add_testers_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddDistributionGroup201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_add_testers_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_testers_request: Annotated[ReleasesAddTestersRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesAddDistributionGroup201Response]:
        """releases_add_testers

        Distributes a release to a user

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_testers_request: The release information. (required)
        :type releases_add_testers_request: ReleasesAddTestersRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_testers_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_testers_request=releases_add_testers_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddDistributionGroup201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_add_testers_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_add_testers_request: Annotated[ReleasesAddTestersRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_add_testers

        Distributes a release to a user

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_add_testers_request: The release information. (required)
        :type releases_add_testers_request: ReleasesAddTestersRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_add_testers_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_add_testers_request=releases_add_testers_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesAddDistributionGroup201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_add_testers_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        releases_add_testers_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_add_testers_request is not None:
            _body_params = releases_add_testers_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_available_to_tester(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        published_only: Annotated[Optional[StrictBool], Field(description="when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ReleasesListLatest200ResponseInner]:
        """(Deprecated) releases_available_to_tester

        Return detailed information about releases avaiable to a tester.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param published_only: when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
        :type published_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester is deprecated.", DeprecationWarning)

        _param = self._releases_available_to_tester_serialize(
            owner_name=owner_name,
            app_name=app_name,
            published_only=published_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_available_to_tester_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        published_only: Annotated[Optional[StrictBool], Field(description="when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ReleasesListLatest200ResponseInner]]:
        """(Deprecated) releases_available_to_tester

        Return detailed information about releases avaiable to a tester.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param published_only: when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
        :type published_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester is deprecated.", DeprecationWarning)

        _param = self._releases_available_to_tester_serialize(
            owner_name=owner_name,
            app_name=app_name,
            published_only=published_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_available_to_tester_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        published_only: Annotated[Optional[StrictBool], Field(description="when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) releases_available_to_tester

        Return detailed information about releases avaiable to a tester.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param published_only: when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
        :type published_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester is deprecated.", DeprecationWarning)

        _param = self._releases_available_to_tester_serialize(
            owner_name=owner_name,
            app_name=app_name,
            published_only=published_only,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_available_to_tester_serialize(
        self,
        owner_name,
        app_name,
        published_only,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if published_only is not None:
            
            _query_params.append(('published_only', published_only))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_create_release_upload(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_create_release_upload_request: Annotated[Optional[ReleasesCreateReleaseUploadRequest], Field(description="Optional parameters to create releases with user defined metadata")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesCreateReleaseUpload201Response:
        """releases_create_release_upload

        Initiate a new release upload. This API is part of multi-step upload process.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_create_release_upload_request: Optional parameters to create releases with user defined metadata
        :type releases_create_release_upload_request: ReleasesCreateReleaseUploadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_create_release_upload_serialize(
            owner_name=owner_name,
            app_name=app_name,
            releases_create_release_upload_request=releases_create_release_upload_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesCreateReleaseUpload201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_create_release_upload_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_create_release_upload_request: Annotated[Optional[ReleasesCreateReleaseUploadRequest], Field(description="Optional parameters to create releases with user defined metadata")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesCreateReleaseUpload201Response]:
        """releases_create_release_upload

        Initiate a new release upload. This API is part of multi-step upload process.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_create_release_upload_request: Optional parameters to create releases with user defined metadata
        :type releases_create_release_upload_request: ReleasesCreateReleaseUploadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_create_release_upload_serialize(
            owner_name=owner_name,
            app_name=app_name,
            releases_create_release_upload_request=releases_create_release_upload_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesCreateReleaseUpload201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_create_release_upload_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_create_release_upload_request: Annotated[Optional[ReleasesCreateReleaseUploadRequest], Field(description="Optional parameters to create releases with user defined metadata")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_create_release_upload

        Initiate a new release upload. This API is part of multi-step upload process.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_create_release_upload_request: Optional parameters to create releases with user defined metadata
        :type releases_create_release_upload_request: ReleasesCreateReleaseUploadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_create_release_upload_serialize(
            owner_name=owner_name,
            app_name=app_name,
            releases_create_release_upload_request=releases_create_release_upload_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReleasesCreateReleaseUpload201Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_create_release_upload_serialize(
        self,
        owner_name,
        app_name,
        releases_create_release_upload_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_create_release_upload_request is not None:
            _body_params = releases_create_release_upload_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/uploads/releases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_delete(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_delete

        Deletes a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '500': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_delete_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_delete

        Deletes a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '500': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_delete_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_delete

        Deletes a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '500': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_delete_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_delete_distribution_group(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        group_id: Annotated[StrictStr, Field(description="The id of the distribution group")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_delete_distribution_group

        Delete the given distribution group from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param group_id: The id of the distribution group (required)
        :type group_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_group_serialize(
            release_id=release_id,
            group_id=group_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_delete_distribution_group_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        group_id: Annotated[StrictStr, Field(description="The id of the distribution group")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_delete_distribution_group

        Delete the given distribution group from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param group_id: The id of the distribution group (required)
        :type group_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_group_serialize(
            release_id=release_id,
            group_id=group_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_delete_distribution_group_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        group_id: Annotated[StrictStr, Field(description="The id of the distribution group")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_delete_distribution_group

        Delete the given distribution group from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param group_id: The id of the distribution group (required)
        :type group_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_group_serialize(
            release_id=release_id,
            group_id=group_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_delete_distribution_group_serialize(
        self,
        release_id,
        group_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if group_id is not None:
            _path_params['group_id'] = group_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_delete_distribution_store(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        store_id: Annotated[StrictStr, Field(description="The id of the distribution store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_delete_distribution_store

        Delete the given distribution store from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param store_id: The id of the distribution store (required)
        :type store_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_store_serialize(
            release_id=release_id,
            store_id=store_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_delete_distribution_store_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        store_id: Annotated[StrictStr, Field(description="The id of the distribution store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_delete_distribution_store

        Delete the given distribution store from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param store_id: The id of the distribution store (required)
        :type store_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_store_serialize(
            release_id=release_id,
            store_id=store_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_delete_distribution_store_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        store_id: Annotated[StrictStr, Field(description="The id of the distribution store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_delete_distribution_store

        Delete the given distribution store from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param store_id: The id of the distribution store (required)
        :type store_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_store_serialize(
            release_id=release_id,
            store_id=store_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_delete_distribution_store_serialize(
        self,
        release_id,
        store_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if store_id is not None:
            _path_params['store_id'] = store_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_delete_distribution_tester(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_delete_distribution_tester

        Delete the given tester from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_tester_serialize(
            release_id=release_id,
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_delete_distribution_tester_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_delete_distribution_tester

        Delete the given tester from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_tester_serialize(
            release_id=release_id,
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_delete_distribution_tester_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_delete_distribution_tester

        Delete the given tester from the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_distribution_tester_serialize(
            release_id=release_id,
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_delete_distribution_tester_serialize(
        self,
        release_id,
        tester_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if tester_id is not None:
            _path_params['tester_id'] = tester_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_delete_tester_from_destinations(
        self,
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_delete_tester_from_destinations

        Delete the given tester from the all releases

        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_tester_from_destinations_serialize(
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_delete_tester_from_destinations_with_http_info(
        self,
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_delete_tester_from_destinations

        Delete the given tester from the all releases

        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_tester_from_destinations_serialize(
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_delete_tester_from_destinations_without_preload_content(
        self,
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_delete_tester_from_destinations

        Delete the given tester from the all releases

        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_tester_from_destinations_serialize(
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_delete_tester_from_destinations_serialize(
        self,
        tester_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if tester_id is not None:
            _path_params['tester_id'] = tester_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_delete_with_distribution_group_id(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        release_id: Annotated[StrictInt, Field(description="The ID identifying the unique release.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_delete_with_distribution_group_id

        Deletes a release with id 'release_id' in a given distribution group.

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param release_id: The ID identifying the unique release. (required)
        :type release_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_with_distribution_group_id_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distribution_group_name=distribution_group_name,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_delete_with_distribution_group_id_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        release_id: Annotated[StrictInt, Field(description="The ID identifying the unique release.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_delete_with_distribution_group_id

        Deletes a release with id 'release_id' in a given distribution group.

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param release_id: The ID identifying the unique release. (required)
        :type release_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_with_distribution_group_id_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distribution_group_name=distribution_group_name,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_delete_with_distribution_group_id_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        release_id: Annotated[StrictInt, Field(description="The ID identifying the unique release.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_delete_with_distribution_group_id

        Deletes a release with id 'release_id' in a given distribution group.

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param release_id: The ID identifying the unique release. (required)
        :type release_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_delete_with_distribution_group_id_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distribution_group_name=distribution_group_name,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_delete_with_distribution_group_id_serialize(
        self,
        owner_name,
        app_name,
        distribution_group_name,
        release_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        if distribution_group_name is not None:
            _path_params['distribution_group_name'] = distribution_group_name
        if release_id is not None:
            _path_params['release_id'] = release_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_ios_manifest(
        self,
        app_id: Annotated[StrictStr, Field(description="The ID of the application")],
        release_id: Annotated[StrictInt, Field(description="The release_id")],
        token: Annotated[StrictStr, Field(description="A hash that authorizes the download if it matches the release info.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_get_ios_manifest

        Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.

        :param app_id: The ID of the application (required)
        :type app_id: str
        :param release_id: The release_id (required)
        :type release_id: int
        :param token: A hash that authorizes the download if it matches the release info. (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_ios_manifest_serialize(
            app_id=app_id,
            release_id=release_id,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_ios_manifest_with_http_info(
        self,
        app_id: Annotated[StrictStr, Field(description="The ID of the application")],
        release_id: Annotated[StrictInt, Field(description="The release_id")],
        token: Annotated[StrictStr, Field(description="A hash that authorizes the download if it matches the release info.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_get_ios_manifest

        Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.

        :param app_id: The ID of the application (required)
        :type app_id: str
        :param release_id: The release_id (required)
        :type release_id: int
        :param token: A hash that authorizes the download if it matches the release info. (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_ios_manifest_serialize(
            app_id=app_id,
            release_id=release_id,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_ios_manifest_without_preload_content(
        self,
        app_id: Annotated[StrictStr, Field(description="The ID of the application")],
        release_id: Annotated[StrictInt, Field(description="The release_id")],
        token: Annotated[StrictStr, Field(description="A hash that authorizes the download if it matches the release info.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_ios_manifest

        Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.

        :param app_id: The ID of the application (required)
        :type app_id: str
        :param release_id: The release_id (required)
        :type release_id: int
        :param token: A hash that authorizes the download if it matches the release info. (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_ios_manifest_serialize(
            app_id=app_id,
            release_id=release_id,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_ios_manifest_serialize(
        self,
        app_id,
        release_id,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_id is not None:
            _path_params['app_id'] = app_id
        if release_id is not None:
            _path_params['release_id'] = release_id
        # process the query parameters
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_latest_by_distribution_group(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        release_id: Annotated[StrictStr, Field(description="Also supports the constant `latest`, which will return the latest release in the distribution group.")],
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesGetLatestByDistributionGroup200Response:
        """releases_get_latest_by_distribution_group

        Return detailed information about a distributed release in a given distribution group.

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param release_id: Also supports the constant `latest`, which will return the latest release in the distribution group. (required)
        :type release_id: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_distribution_group_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distribution_group_name=distribution_group_name,
            release_id=release_id,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '501': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_latest_by_distribution_group_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        release_id: Annotated[StrictStr, Field(description="Also supports the constant `latest`, which will return the latest release in the distribution group.")],
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesGetLatestByDistributionGroup200Response]:
        """releases_get_latest_by_distribution_group

        Return detailed information about a distributed release in a given distribution group.

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param release_id: Also supports the constant `latest`, which will return the latest release in the distribution group. (required)
        :type release_id: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_distribution_group_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distribution_group_name=distribution_group_name,
            release_id=release_id,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '501': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_latest_by_distribution_group_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the app owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the app")],
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        release_id: Annotated[StrictStr, Field(description="Also supports the constant `latest`, which will return the latest release in the distribution group.")],
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_latest_by_distribution_group

        Return detailed information about a distributed release in a given distribution group.

        :param owner_name: The name of the app owner (required)
        :type owner_name: str
        :param app_name: The name of the app (required)
        :type app_name: str
        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param release_id: Also supports the constant `latest`, which will return the latest release in the distribution group. (required)
        :type release_id: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_distribution_group_serialize(
            owner_name=owner_name,
            app_name=app_name,
            distribution_group_name=distribution_group_name,
            release_id=release_id,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
            '501': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_latest_by_distribution_group_serialize(
        self,
        owner_name,
        app_name,
        distribution_group_name,
        release_id,
        is_install_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        if distribution_group_name is not None:
            _path_params['distribution_group_name'] = distribution_group_name
        if release_id is not None:
            _path_params['release_id'] = release_id
        # process the query parameters
        if is_install_page is not None:
            
            _query_params.append(('is_install_page', is_install_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_latest_by_hash(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        release_hash: Annotated[StrictStr, Field(description="The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.")],
        udid: Annotated[Optional[StrictStr], Field(description="When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesGetLatestByDistributionGroup200Response:
        """releases_get_latest_by_hash

        If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param release_hash: The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user. (required)
        :type release_hash: str
        :param udid: When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
        :type udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_hash_serialize(
            app_secret=app_secret,
            release_hash=release_hash,
            udid=udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_latest_by_hash_with_http_info(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        release_hash: Annotated[StrictStr, Field(description="The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.")],
        udid: Annotated[Optional[StrictStr], Field(description="When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesGetLatestByDistributionGroup200Response]:
        """releases_get_latest_by_hash

        If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param release_hash: The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user. (required)
        :type release_hash: str
        :param udid: When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
        :type udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_hash_serialize(
            app_secret=app_secret,
            release_hash=release_hash,
            udid=udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_latest_by_hash_without_preload_content(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        release_hash: Annotated[StrictStr, Field(description="The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user.")],
        udid: Annotated[Optional[StrictStr], Field(description="When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_latest_by_hash

        If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param release_hash: The hash of the release or 'latest' to get the latest release from all the distribution groups assigned to the current user. (required)
        :type release_hash: str
        :param udid: When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
        :type udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_hash_serialize(
            app_secret=app_secret,
            release_hash=release_hash,
            udid=udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_latest_by_hash_serialize(
        self,
        app_secret,
        release_hash,
        udid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_secret is not None:
            _path_params['app_secret'] = app_secret
        if release_hash is not None:
            _path_params['release_hash'] = release_hash
        # process the query parameters
        if udid is not None:
            
            _query_params.append(('udid', udid))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/sdk/apps/{app_secret}/releases/{release_hash}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_latest_by_public_distribution_group(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        distribution_group_id: Annotated[StrictStr, Field(description="the id for destination")],
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesGetLatestByDistributionGroup200Response:
        """releases_get_latest_by_public_distribution_group

        Get a release with 'latest' for the given public group.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param distribution_group_id: the id for destination (required)
        :type distribution_group_id: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_public_distribution_group_serialize(
            app_secret=app_secret,
            distribution_group_id=distribution_group_id,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_latest_by_public_distribution_group_with_http_info(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        distribution_group_id: Annotated[StrictStr, Field(description="the id for destination")],
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesGetLatestByDistributionGroup200Response]:
        """releases_get_latest_by_public_distribution_group

        Get a release with 'latest' for the given public group.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param distribution_group_id: the id for destination (required)
        :type distribution_group_id: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_public_distribution_group_serialize(
            app_secret=app_secret,
            distribution_group_id=distribution_group_id,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_latest_by_public_distribution_group_without_preload_content(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        distribution_group_id: Annotated[StrictStr, Field(description="the id for destination")],
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_latest_by_public_distribution_group

        Get a release with 'latest' for the given public group.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param distribution_group_id: the id for destination (required)
        :type distribution_group_id: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_public_distribution_group_serialize(
            app_secret=app_secret,
            distribution_group_id=distribution_group_id,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '403': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_latest_by_public_distribution_group_serialize(
        self,
        app_secret,
        distribution_group_id,
        is_install_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_secret is not None:
            _path_params['app_secret'] = app_secret
        if distribution_group_id is not None:
            _path_params['distribution_group_id'] = distribution_group_id
        # process the query parameters
        if is_install_page is not None:
            
            _query_params.append(('is_install_page', is_install_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_latest_by_user(
        self,
        release_id: Annotated[StrictStr, Field(description="The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        udid: Annotated[Optional[StrictStr], Field(description="when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.")] = None,
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesGetLatestByDistributionGroup200Response:
        """releases_get_latest_by_user

        Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).

        :param release_id: The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user. (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param udid: when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.
        :type udid: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_user_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            udid=udid,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_latest_by_user_with_http_info(
        self,
        release_id: Annotated[StrictStr, Field(description="The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        udid: Annotated[Optional[StrictStr], Field(description="when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.")] = None,
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesGetLatestByDistributionGroup200Response]:
        """releases_get_latest_by_user

        Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).

        :param release_id: The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user. (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param udid: when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.
        :type udid: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_user_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            udid=udid,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_latest_by_user_without_preload_content(
        self,
        release_id: Annotated[StrictStr, Field(description="The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        udid: Annotated[Optional[StrictStr], Field(description="when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.")] = None,
        is_install_page: Annotated[Optional[StrictBool], Field(description="The check if the request is from Install page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_latest_by_user

        Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).

        :param release_id: The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user. (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param udid: when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.
        :type udid: str
        :param is_install_page: The check if the request is from Install page
        :type is_install_page: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_by_user_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            udid=udid,
            is_install_page=is_install_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_latest_by_user_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        udid,
        is_install_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if udid is not None:
            
            _query_params.append(('udid', udid))
            
        if is_install_page is not None:
            
            _query_params.append(('is_install_page', is_install_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_latest_private_release(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        udid: Annotated[Optional[StrictStr], Field(description="When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesGetLatestByDistributionGroup200Response:
        """releases_get_latest_private_release

        Get the latest release distributed to a private group the given user is a member of for the given app.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param udid: When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
        :type udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_private_release_serialize(
            app_secret=app_secret,
            udid=udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_latest_private_release_with_http_info(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        udid: Annotated[Optional[StrictStr], Field(description="When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesGetLatestByDistributionGroup200Response]:
        """releases_get_latest_private_release

        Get the latest release distributed to a private group the given user is a member of for the given app.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param udid: When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
        :type udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_private_release_serialize(
            app_secret=app_secret,
            udid=udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_latest_private_release_without_preload_content(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        udid: Annotated[Optional[StrictStr], Field(description="When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_latest_private_release

        Get the latest release distributed to a private group the given user is a member of for the given app.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param udid: When passing `udid` in the query string, a provisioning check for the given device ID will be done. Will be ignored for non-iOS platforms.
        :type udid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_latest_private_release_serialize(
            app_secret=app_secret,
            udid=udid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_latest_private_release_serialize(
        self,
        app_secret,
        udid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_secret is not None:
            _path_params['app_secret'] = app_secret
        # process the query parameters
        if udid is not None:
            
            _query_params.append(('udid', udid))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/sdk/apps/{app_secret}/releases/private/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_latest_public_release(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesGetLatestByDistributionGroup200Response:
        """(Deprecated) releases_get_latest_public_release

        Get the latest public release for the given app.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/public/sdk/apps/{app_secret}/releases/latest is deprecated.", DeprecationWarning)

        _param = self._releases_get_latest_public_release_serialize(
            app_secret=app_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_latest_public_release_with_http_info(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesGetLatestByDistributionGroup200Response]:
        """(Deprecated) releases_get_latest_public_release

        Get the latest public release for the given app.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/public/sdk/apps/{app_secret}/releases/latest is deprecated.", DeprecationWarning)

        _param = self._releases_get_latest_public_release_serialize(
            app_secret=app_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_latest_public_release_without_preload_content(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) releases_get_latest_public_release

        Get the latest public release for the given app.

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /v0.1/public/sdk/apps/{app_secret}/releases/latest is deprecated.", DeprecationWarning)

        _param = self._releases_get_latest_public_release_serialize(
            app_secret=app_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetLatestByDistributionGroup200Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_latest_public_release_serialize(
        self,
        app_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_secret is not None:
            _path_params['app_secret'] = app_secret
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/public/sdk/apps/{app_secret}/releases/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_public_groups_for_release_by_hash(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        release_hash: Annotated[StrictStr, Field(description="The hash of the release")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ReleasesGetPublicGroupsForReleaseByHash200ResponseInner]:
        """releases_get_public_groups_for_release_by_hash

        Get all public distribution groups that a given release has been distributed to

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param release_hash: The hash of the release (required)
        :type release_hash: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_public_groups_for_release_by_hash_serialize(
            app_secret=app_secret,
            release_hash=release_hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesGetPublicGroupsForReleaseByHash200ResponseInner]",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_public_groups_for_release_by_hash_with_http_info(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        release_hash: Annotated[StrictStr, Field(description="The hash of the release")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ReleasesGetPublicGroupsForReleaseByHash200ResponseInner]]:
        """releases_get_public_groups_for_release_by_hash

        Get all public distribution groups that a given release has been distributed to

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param release_hash: The hash of the release (required)
        :type release_hash: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_public_groups_for_release_by_hash_serialize(
            app_secret=app_secret,
            release_hash=release_hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesGetPublicGroupsForReleaseByHash200ResponseInner]",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_public_groups_for_release_by_hash_without_preload_content(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the target application")],
        release_hash: Annotated[StrictStr, Field(description="The hash of the release")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_public_groups_for_release_by_hash

        Get all public distribution groups that a given release has been distributed to

        :param app_secret: The secret of the target application (required)
        :type app_secret: str
        :param release_hash: The hash of the release (required)
        :type release_hash: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_public_groups_for_release_by_hash_serialize(
            app_secret=app_secret,
            release_hash=release_hash,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesGetPublicGroupsForReleaseByHash200ResponseInner]",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_public_groups_for_release_by_hash_serialize(
        self,
        app_secret,
        release_hash,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_secret is not None:
            _path_params['app_secret'] = app_secret
        if release_hash is not None:
            _path_params['release_hash'] = release_hash
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_release_upload_status(
        self,
        upload_id: Annotated[StrictStr, Field(description="The ID of the release upload")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesGetReleaseUploadStatus200Response:
        """releases_get_release_upload_status

        Get the current status of the release upload.

        :param upload_id: The ID of the release upload (required)
        :type upload_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_release_upload_status_serialize(
            upload_id=upload_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetReleaseUploadStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_release_upload_status_with_http_info(
        self,
        upload_id: Annotated[StrictStr, Field(description="The ID of the release upload")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesGetReleaseUploadStatus200Response]:
        """releases_get_release_upload_status

        Get the current status of the release upload.

        :param upload_id: The ID of the release upload (required)
        :type upload_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_release_upload_status_serialize(
            upload_id=upload_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetReleaseUploadStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_release_upload_status_without_preload_content(
        self,
        upload_id: Annotated[StrictStr, Field(description="The ID of the release upload")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_release_upload_status

        Get the current status of the release upload.

        :param upload_id: The ID of the release upload (required)
        :type upload_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_release_upload_status_serialize(
            upload_id=upload_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesGetReleaseUploadStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_release_upload_status_serialize(
        self,
        upload_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if upload_id is not None:
            _path_params['upload_id'] = upload_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_get_sparkle_feed(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_get_sparkle_feed

        Gets the sparkle feed of the releases that are distributed to all the public distribution groups.

        :param app_secret: The secret of the application. (required)
        :type app_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_sparkle_feed_serialize(
            app_secret=app_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_get_sparkle_feed_with_http_info(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_get_sparkle_feed

        Gets the sparkle feed of the releases that are distributed to all the public distribution groups.

        :param app_secret: The secret of the application. (required)
        :type app_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_sparkle_feed_serialize(
            app_secret=app_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_get_sparkle_feed_without_preload_content(
        self,
        app_secret: Annotated[StrictStr, Field(description="The secret of the application.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_get_sparkle_feed

        Gets the sparkle feed of the releases that are distributed to all the public distribution groups.

        :param app_secret: The secret of the application. (required)
        :type app_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_get_sparkle_feed_serialize(
            app_secret=app_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_get_sparkle_feed_serialize(
        self,
        app_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if app_secret is not None:
            _path_params['app_secret'] = app_secret
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/public/sparkle/apps/{app_secret}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_list(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        published_only: Annotated[Optional[StrictBool], Field(description="When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.")] = None,
        scope: Annotated[Optional[StrictStr], Field(description="When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.")] = None,
        top: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of releases to return")] = None,
        release_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The id of a release")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ReleasesListLatest200ResponseInner]:
        """releases_list

        Return basic information about releases.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param published_only: When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
        :type published_only: bool
        :param scope: When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.
        :type scope: str
        :param top: The number of releases to return
        :type top: float
        :param release_id: The id of a release
        :type release_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_serialize(
            owner_name=owner_name,
            app_name=app_name,
            published_only=published_only,
            scope=scope,
            top=top,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_list_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        published_only: Annotated[Optional[StrictBool], Field(description="When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.")] = None,
        scope: Annotated[Optional[StrictStr], Field(description="When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.")] = None,
        top: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of releases to return")] = None,
        release_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The id of a release")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ReleasesListLatest200ResponseInner]]:
        """releases_list

        Return basic information about releases.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param published_only: When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
        :type published_only: bool
        :param scope: When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.
        :type scope: str
        :param top: The number of releases to return
        :type top: float
        :param release_id: The id of a release
        :type release_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_serialize(
            owner_name=owner_name,
            app_name=app_name,
            published_only=published_only,
            scope=scope,
            top=top,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_list_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        published_only: Annotated[Optional[StrictBool], Field(description="When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.")] = None,
        scope: Annotated[Optional[StrictStr], Field(description="When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.")] = None,
        top: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of releases to return")] = None,
        release_id: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The id of a release")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_list

        Return basic information about releases.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param published_only: When *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
        :type published_only: bool
        :param scope: When the scope is 'tester', only includes releases that have been distributed to groups that the user belongs to.
        :type scope: str
        :param top: The number of releases to return
        :type top: float
        :param release_id: The id of a release
        :type release_id: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_serialize(
            owner_name=owner_name,
            app_name=app_name,
            published_only=published_only,
            scope=scope,
            top=top,
            release_id=release_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_list_serialize(
        self,
        owner_name,
        app_name,
        published_only,
        scope,
        top,
        release_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if published_only is not None:
            
            _query_params.append(('published_only', published_only))
            
        if scope is not None:
            
            _query_params.append(('scope', scope))
            
        if top is not None:
            
            _query_params.append(('top', top))
            
        if release_id is not None:
            
            _query_params.append(('releaseId', release_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_list_by_distribution_group(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ReleasesListByDistributionGroup200ResponseInner]:
        """releases_list_by_distribution_group

        Return basic information about distributed releases in a given distribution group.

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_by_distribution_group_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListByDistributionGroup200ResponseInner]",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_list_by_distribution_group_with_http_info(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ReleasesListByDistributionGroup200ResponseInner]]:
        """releases_list_by_distribution_group

        Return basic information about distributed releases in a given distribution group.

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_by_distribution_group_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListByDistributionGroup200ResponseInner]",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_list_by_distribution_group_without_preload_content(
        self,
        distribution_group_name: Annotated[StrictStr, Field(description="The name of the distribution group.")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_list_by_distribution_group

        Return basic information about distributed releases in a given distribution group.

        :param distribution_group_name: The name of the distribution group. (required)
        :type distribution_group_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_by_distribution_group_serialize(
            distribution_group_name=distribution_group_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListByDistributionGroup200ResponseInner]",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_list_by_distribution_group_serialize(
        self,
        distribution_group_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if distribution_group_name is not None:
            _path_params['distribution_group_name'] = distribution_group_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_list_latest(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ReleasesListLatest200ResponseInner]:
        """releases_list_latest

        Get the latest release from every distribution group associated with an application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_latest_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_list_latest_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ReleasesListLatest200ResponseInner]]:
        """releases_list_latest

        Get the latest release from every distribution group associated with an application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_latest_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_list_latest_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_list_latest

        Get the latest release from every distribution group associated with an application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_list_latest_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReleasesListLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_list_latest_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/recent_releases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_put_distribution_group(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        group_id: Annotated[StrictStr, Field(description="The id of the releases destination")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_put_distribution_group_request: Optional[ReleasesPutDistributionGroupRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_put_distribution_group

        Update details about the specified distribution group associated with the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param group_id: The id of the releases destination (required)
        :type group_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_put_distribution_group_request:
        :type releases_put_distribution_group_request: ReleasesPutDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_put_distribution_group_serialize(
            release_id=release_id,
            group_id=group_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_put_distribution_group_request=releases_put_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_put_distribution_group_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        group_id: Annotated[StrictStr, Field(description="The id of the releases destination")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_put_distribution_group_request: Optional[ReleasesPutDistributionGroupRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_put_distribution_group

        Update details about the specified distribution group associated with the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param group_id: The id of the releases destination (required)
        :type group_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_put_distribution_group_request:
        :type releases_put_distribution_group_request: ReleasesPutDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_put_distribution_group_serialize(
            release_id=release_id,
            group_id=group_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_put_distribution_group_request=releases_put_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_put_distribution_group_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        group_id: Annotated[StrictStr, Field(description="The id of the releases destination")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_put_distribution_group_request: Optional[ReleasesPutDistributionGroupRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_put_distribution_group

        Update details about the specified distribution group associated with the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param group_id: The id of the releases destination (required)
        :type group_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_put_distribution_group_request:
        :type releases_put_distribution_group_request: ReleasesPutDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_put_distribution_group_serialize(
            release_id=release_id,
            group_id=group_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_put_distribution_group_request=releases_put_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_put_distribution_group_serialize(
        self,
        release_id,
        group_id,
        owner_name,
        app_name,
        releases_put_distribution_group_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if group_id is not None:
            _path_params['group_id'] = group_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_put_distribution_group_request is not None:
            _body_params = releases_put_distribution_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_put_distribution_tester(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_put_distribution_group_request: Optional[ReleasesPutDistributionGroupRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """releases_put_distribution_tester

        Update details about the specified tester associated with the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_put_distribution_group_request:
        :type releases_put_distribution_group_request: ReleasesPutDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_put_distribution_tester_serialize(
            release_id=release_id,
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_put_distribution_group_request=releases_put_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_put_distribution_tester_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_put_distribution_group_request: Optional[ReleasesPutDistributionGroupRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """releases_put_distribution_tester

        Update details about the specified tester associated with the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_put_distribution_group_request:
        :type releases_put_distribution_group_request: ReleasesPutDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_put_distribution_tester_serialize(
            release_id=release_id,
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_put_distribution_group_request=releases_put_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_put_distribution_tester_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        tester_id: Annotated[StrictStr, Field(description="The id of the tester")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_put_distribution_group_request: Optional[ReleasesPutDistributionGroupRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_put_distribution_tester

        Update details about the specified tester associated with the release

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param tester_id: The id of the tester (required)
        :type tester_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_put_distribution_group_request:
        :type releases_put_distribution_group_request: ReleasesPutDistributionGroupRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_put_distribution_tester_serialize(
            release_id=release_id,
            tester_id=tester_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_put_distribution_group_request=releases_put_distribution_group_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_put_distribution_tester_serialize(
        self,
        release_id,
        tester_id,
        owner_name,
        app_name,
        releases_put_distribution_group_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if tester_id is not None:
            _path_params['tester_id'] = tester_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_put_distribution_group_request is not None:
            _body_params = releases_put_distribution_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_update(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_request: Annotated[ReleasesUpdateRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesUpdate200Response:
        """releases_update

        Updates a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_request: The release information. (required)
        :type releases_update_request: ReleasesUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_request=releases_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdate200Response",
            '400': "ReleasesUpdateDetails400Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_update_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_request: Annotated[ReleasesUpdateRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesUpdate200Response]:
        """releases_update

        Updates a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_request: The release information. (required)
        :type releases_update_request: ReleasesUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_request=releases_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdate200Response",
            '400': "ReleasesUpdateDetails400Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_update_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_request: Annotated[ReleasesUpdateRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_update

        Updates a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_request: The release information. (required)
        :type releases_update_request: ReleasesUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_request=releases_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdate200Response",
            '400': "ReleasesUpdateDetails400Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_update_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        releases_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_update_request is not None:
            _body_params = releases_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'text/plain'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_update_details(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_details_request: Annotated[ReleasesUpdateDetailsRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesUpdateDetails200Response:
        """releases_update_details

        Update details of a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_details_request: The release information. (required)
        :type releases_update_details_request: ReleasesUpdateDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_details_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_details_request=releases_update_details_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdateDetails200Response",
            '400': "ReleasesUpdateDetails400Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_update_details_with_http_info(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_details_request: Annotated[ReleasesUpdateDetailsRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesUpdateDetails200Response]:
        """releases_update_details

        Update details of a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_details_request: The release information. (required)
        :type releases_update_details_request: ReleasesUpdateDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_details_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_details_request=releases_update_details_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdateDetails200Response",
            '400': "ReleasesUpdateDetails400Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_update_details_without_preload_content(
        self,
        release_id: Annotated[StrictInt, Field(description="The ID of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_details_request: Annotated[ReleasesUpdateDetailsRequest, Field(description="The release information.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_update_details

        Update details of a release.

        :param release_id: The ID of the release (required)
        :type release_id: int
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_details_request: The release information. (required)
        :type releases_update_details_request: ReleasesUpdateDetailsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_details_serialize(
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_details_request=releases_update_details_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdateDetails200Response",
            '400': "ReleasesUpdateDetails400Response",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_update_details_serialize(
        self,
        release_id,
        owner_name,
        app_name,
        releases_update_details_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_update_details_request is not None:
            _body_params = releases_update_details_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def releases_update_release_upload_status(
        self,
        upload_id: Annotated[StrictStr, Field(description="The ID of the release upload")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_release_upload_status_request: Annotated[ReleasesUpdateReleaseUploadStatusRequest, Field(description="The release upload status information.")],
        extract: Annotated[Optional[StrictBool], Field(description="A flag that indicates to extract release or not, true by default")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReleasesUpdateReleaseUploadStatus200Response:
        """releases_update_release_upload_status

        Update the current status of the release upload.

        :param upload_id: The ID of the release upload (required)
        :type upload_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_release_upload_status_request: The release upload status information. (required)
        :type releases_update_release_upload_status_request: ReleasesUpdateReleaseUploadStatusRequest
        :param extract: A flag that indicates to extract release or not, true by default
        :type extract: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_release_upload_status_serialize(
            upload_id=upload_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_release_upload_status_request=releases_update_release_upload_status_request,
            extract=extract,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdateReleaseUploadStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def releases_update_release_upload_status_with_http_info(
        self,
        upload_id: Annotated[StrictStr, Field(description="The ID of the release upload")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_release_upload_status_request: Annotated[ReleasesUpdateReleaseUploadStatusRequest, Field(description="The release upload status information.")],
        extract: Annotated[Optional[StrictBool], Field(description="A flag that indicates to extract release or not, true by default")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReleasesUpdateReleaseUploadStatus200Response]:
        """releases_update_release_upload_status

        Update the current status of the release upload.

        :param upload_id: The ID of the release upload (required)
        :type upload_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_release_upload_status_request: The release upload status information. (required)
        :type releases_update_release_upload_status_request: ReleasesUpdateReleaseUploadStatusRequest
        :param extract: A flag that indicates to extract release or not, true by default
        :type extract: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_release_upload_status_serialize(
            upload_id=upload_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_release_upload_status_request=releases_update_release_upload_status_request,
            extract=extract,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdateReleaseUploadStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def releases_update_release_upload_status_without_preload_content(
        self,
        upload_id: Annotated[StrictStr, Field(description="The ID of the release upload")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        releases_update_release_upload_status_request: Annotated[ReleasesUpdateReleaseUploadStatusRequest, Field(description="The release upload status information.")],
        extract: Annotated[Optional[StrictBool], Field(description="A flag that indicates to extract release or not, true by default")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """releases_update_release_upload_status

        Update the current status of the release upload.

        :param upload_id: The ID of the release upload (required)
        :type upload_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param releases_update_release_upload_status_request: The release upload status information. (required)
        :type releases_update_release_upload_status_request: ReleasesUpdateReleaseUploadStatusRequest
        :param extract: A flag that indicates to extract release or not, true by default
        :type extract: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._releases_update_release_upload_status_serialize(
            upload_id=upload_id,
            owner_name=owner_name,
            app_name=app_name,
            releases_update_release_upload_status_request=releases_update_release_upload_status_request,
            extract=extract,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReleasesUpdateReleaseUploadStatus200Response",
            '400': "OrganizationsListAdministeredDefaultResponseError",
            '404': "OrganizationsListAdministeredDefaultResponseError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _releases_update_release_upload_status_serialize(
        self,
        upload_id,
        owner_name,
        app_name,
        releases_update_release_upload_status_request,
        extract,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if upload_id is not None:
            _path_params['upload_id'] = upload_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        if extract is not None:
            
            _query_params.append(('extract', extract))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if releases_update_release_upload_status_request is not None:
            _body_params = releases_update_release_upload_status_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_notifications_get_notification_by_app_id(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoreNotificationsGetNotificationByAppId200Response:
        """store_notifications_get_notification_by_app_id

        Application specific store service status

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_notifications_get_notification_by_app_id_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreNotificationsGetNotificationByAppId200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_notifications_get_notification_by_app_id_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoreNotificationsGetNotificationByAppId200Response]:
        """store_notifications_get_notification_by_app_id

        Application specific store service status

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_notifications_get_notification_by_app_id_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreNotificationsGetNotificationByAppId200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_notifications_get_notification_by_app_id_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_notifications_get_notification_by_app_id

        Application specific store service status

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_notifications_get_notification_by_app_id_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreNotificationsGetNotificationByAppId200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_notifications_get_notification_by_app_id_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/store_service_status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_release_publish_logs_get(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The ID of the realease")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """store_release_publish_logs_get

        Returns publish logs for a particular release published to a particular store

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The ID of the realease (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_release_publish_logs_get_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_release_publish_logs_get_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The ID of the realease")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """store_release_publish_logs_get

        Returns publish logs for a particular release published to a particular store

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The ID of the realease (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_release_publish_logs_get_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_release_publish_logs_get_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The ID of the realease")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_release_publish_logs_get

        Returns publish logs for a particular release published to a particular store

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The ID of the realease (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_release_publish_logs_get_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_release_publish_logs_get_serialize(
        self,
        store_name,
        release_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_releases_delete(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """store_releases_delete

        delete the release with release Id

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_delete_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_releases_delete_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """store_releases_delete

        delete the release with release Id

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_delete_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_releases_delete_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_releases_delete

        delete the release with release Id

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_delete_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_releases_delete_serialize(
        self,
        store_name,
        release_id,
        owner_name,
        app_name,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_releases_get(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[StoreReleasesGetLatest200ResponseInner]:
        """store_releases_get

        Return releases published in a store for releaseId and storeId

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The name of the store (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesGetLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_releases_get_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[StoreReleasesGetLatest200ResponseInner]]:
        """store_releases_get

        Return releases published in a store for releaseId and storeId

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The name of the store (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesGetLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_releases_get_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_releases_get

        Return releases published in a store for releaseId and storeId

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The name of the store (required)
        :type release_id: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesGetLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_releases_get_serialize(
        self,
        store_name,
        release_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_releases_get_latest(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[StoreReleasesGetLatest200ResponseInner]:
        """store_releases_get_latest

        Returns the latest release published in a store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_latest_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesGetLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_releases_get_latest_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[StoreReleasesGetLatest200ResponseInner]]:
        """store_releases_get_latest

        Returns the latest release published in a store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_latest_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesGetLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_releases_get_latest_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_releases_get_latest

        Returns the latest release published in a store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_latest_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesGetLatest200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_releases_get_latest_serialize(
        self,
        store_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_releases_get_publish_error(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoreReleasesGetPublishError200Response:
        """store_releases_get_publish_error

        Return the Error Details of release which failed in publishing.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: float
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_publish_error_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreReleasesGetPublishError200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_releases_get_publish_error_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoreReleasesGetPublishError200Response]:
        """store_releases_get_publish_error

        Return the Error Details of release which failed in publishing.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: float
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_publish_error_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreReleasesGetPublishError200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_releases_get_publish_error_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_releases_get_publish_error

        Return the Error Details of release which failed in publishing.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: float
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_publish_error_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreReleasesGetPublishError200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_releases_get_publish_error_serialize(
        self,
        store_name,
        release_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_releases_get_real_time_status_by_release_id(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoreReleasesGetRealTimeStatusByReleaseId200Response:
        """store_releases_get_real_time_status_by_release_id

        Return the Real time Status publishing of release from store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: float
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_real_time_status_by_release_id_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreReleasesGetRealTimeStatusByReleaseId200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_releases_get_real_time_status_by_release_id_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoreReleasesGetRealTimeStatusByReleaseId200Response]:
        """store_releases_get_real_time_status_by_release_id

        Return the Real time Status publishing of release from store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: float
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_real_time_status_by_release_id_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreReleasesGetRealTimeStatusByReleaseId200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_releases_get_real_time_status_by_release_id_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        release_id: Annotated[Union[StrictFloat, StrictInt], Field(description="The id of the release")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_releases_get_real_time_status_by_release_id

        Return the Real time Status publishing of release from store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param release_id: The id of the release (required)
        :type release_id: float
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_get_real_time_status_by_release_id_serialize(
            store_name=store_name,
            release_id=release_id,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreReleasesGetRealTimeStatusByReleaseId200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_releases_get_real_time_status_by_release_id_serialize(
        self,
        store_name,
        release_id,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if release_id is not None:
            _path_params['release_id'] = release_id
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_releases_list(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[StoreReleasesList200ResponseInner]:
        """store_releases_list

        Return all releases published  in a store

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_list_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesList200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_releases_list_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[StoreReleasesList200ResponseInner]]:
        """store_releases_list

        Return all releases published  in a store

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_list_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesList200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_releases_list_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """store_releases_list

        Return all releases published  in a store

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_releases_list_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoreReleasesList200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_releases_list_serialize(
        self,
        store_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stores_create(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        stores_create_request: Annotated[StoresCreateRequest, Field(description="The store request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoresList200ResponseInner:
        """stores_create

        Create a new external store for the specified application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param stores_create_request: The store request (required)
        :type stores_create_request: StoresCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_create_serialize(
            owner_name=owner_name,
            app_name=app_name,
            stores_create_request=stores_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StoresList200ResponseInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stores_create_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        stores_create_request: Annotated[StoresCreateRequest, Field(description="The store request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoresList200ResponseInner]:
        """stores_create

        Create a new external store for the specified application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param stores_create_request: The store request (required)
        :type stores_create_request: StoresCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_create_serialize(
            owner_name=owner_name,
            app_name=app_name,
            stores_create_request=stores_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StoresList200ResponseInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stores_create_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        stores_create_request: Annotated[StoresCreateRequest, Field(description="The store request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """stores_create

        Create a new external store for the specified application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param stores_create_request: The store request (required)
        :type stores_create_request: StoresCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_create_serialize(
            owner_name=owner_name,
            app_name=app_name,
            stores_create_request=stores_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StoresList200ResponseInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stores_create_serialize(
        self,
        owner_name,
        app_name,
        stores_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if stores_create_request is not None:
            _body_params = stores_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stores_delete(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """stores_delete

        delete the store based on specific store name.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_delete_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stores_delete_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """stores_delete

        delete the store based on specific store name.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_delete_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stores_delete_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        body: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """stores_delete

        delete the store based on specific store name.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param body:
        :type body: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_delete_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stores_delete_serialize(
        self,
        store_name,
        owner_name,
        app_name,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            _body_params = body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stores_get(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoresList200ResponseInner:
        """stores_get

        Return the store details for specified store name.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_get_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoresList200ResponseInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stores_get_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoresList200ResponseInner]:
        """stores_get

        Return the store details for specified store name.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_get_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoresList200ResponseInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stores_get_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """stores_get

        Return the store details for specified store name.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_get_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoresList200ResponseInner",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stores_get_serialize(
        self,
        store_name,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stores_list(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[StoresList200ResponseInner]:
        """stores_list

        Get all the store details from Storage store table for a particular application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_list_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoresList200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stores_list_with_http_info(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[StoresList200ResponseInner]]:
        """stores_list

        Get all the store details from Storage store table for a particular application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_list_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoresList200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stores_list_without_preload_content(
        self,
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """stores_list

        Get all the store details from Storage store table for a particular application.

        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_list_serialize(
            owner_name=owner_name,
            app_name=app_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[StoresList200ResponseInner]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stores_list_serialize(
        self,
        owner_name,
        app_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def stores_patch(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        stores_patch_request: Annotated[StoresPatchRequest, Field(description="Store update request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """stores_patch

        Update the store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param stores_patch_request: Store update request (required)
        :type stores_patch_request: StoresPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_patch_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            stores_patch_request=stores_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def stores_patch_with_http_info(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        stores_patch_request: Annotated[StoresPatchRequest, Field(description="Store update request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """stores_patch

        Update the store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param stores_patch_request: Store update request (required)
        :type stores_patch_request: StoresPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_patch_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            stores_patch_request=stores_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def stores_patch_without_preload_content(
        self,
        store_name: Annotated[StrictStr, Field(description="The name of the store")],
        owner_name: Annotated[StrictStr, Field(description="The name of the owner")],
        app_name: Annotated[StrictStr, Field(description="The name of the application")],
        stores_patch_request: Annotated[StoresPatchRequest, Field(description="Store update request")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """stores_patch

        Update the store.

        :param store_name: The name of the store (required)
        :type store_name: str
        :param owner_name: The name of the owner (required)
        :type owner_name: str
        :param app_name: The name of the application (required)
        :type app_name: str
        :param stores_patch_request: Store update request (required)
        :type stores_patch_request: StoresPatchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._stores_patch_serialize(
            store_name=store_name,
            owner_name=owner_name,
            app_name=app_name,
            stores_patch_request=stores_patch_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _stores_patch_serialize(
        self,
        store_name,
        owner_name,
        app_name,
        stores_patch_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if store_name is not None:
            _path_params['store_name'] = store_name
        if owner_name is not None:
            _path_params['owner_name'] = owner_name
        if app_name is not None:
            _path_params['app_name'] = app_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if stores_patch_request is not None:
            _body_params = stores_patch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIToken'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



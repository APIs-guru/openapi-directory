# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_memberships_validation_response import AppMembershipsValidationResponse

class TestAppMembershipsValidationResponse(unittest.TestCase):
    """AppMembershipsValidationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppMembershipsValidationResponse:
        """Test AppMembershipsValidationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppMembershipsValidationResponse`
        """
        model = AppMembershipsValidationResponse()
        if include_optional:
            return AppMembershipsValidationResponse(
                app_users_with_missing_memberships = [
                    openapi_client.models.app_memberships_validation_response_app_users_with_missing_memberships_inner.AppMembershipsValidationResponse_app_users_with_missing_memberships_inner(
                        app_id = '', 
                        origin = '', 
                        permissions = [
                            ''
                            ], 
                        user_id = '', )
                    ],
                distribution_group_users_with_missing_memberships = [
                    openapi_client.models.app_memberships_validation_response_distribution_group_users_with_missing_memberships_inner.AppMembershipsValidationResponse_distribution_group_users_with_missing_memberships_inner(
                        distribution_group_id = '', 
                        origin = '', 
                        user_id = '', )
                    ],
                excess_app_memberships = openapi_client.models.app_memberships_validation_response_excess_app_memberships.AppMembershipsValidationResponse_excess_app_memberships(
                    app_users_memberships = [
                        openapi_client.models.app_memberships_response_memberships_inner.AppMembershipsResponse_memberships_inner(
                            app_id = '', 
                            origin = 'appcenter', 
                            permissions = [
                                ''
                                ], 
                            source_id = '', 
                            source_type = 'user', 
                            user_id = '', )
                        ], 
                    distribution_group_memberships = [
                        openapi_client.models.app_memberships_response_memberships_inner.AppMembershipsResponse_memberships_inner(
                            app_id = '', 
                            origin = 'appcenter', 
                            source_id = '', 
                            source_type = 'user', 
                            user_id = '', )
                        ], 
                    organization_admin_memberships = [
                        
                        ], ),
                organization_admins_with_missing_memberships = [
                    openapi_client.models.app_memberships_validation_response_organization_admins_with_missing_memberships_inner.AppMembershipsValidationResponse_organization_admins_with_missing_memberships_inner(
                        organization_id = '', 
                        origin = '', 
                        role = '', 
                        user_id = '', )
                    ]
            )
        else:
            return AppMembershipsValidationResponse(
        )
        """

    def testAppMembershipsValidationResponse(self):
        """Test AppMembershipsValidationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

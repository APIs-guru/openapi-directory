# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.branch_configuration_with_id import BranchConfigurationWithId

class TestBranchConfigurationWithId(unittest.TestCase):
    """BranchConfigurationWithId unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BranchConfigurationWithId:
        """Test BranchConfigurationWithId
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BranchConfigurationWithId`
        """
        model = BranchConfigurationWithId()
        if include_optional:
            return BranchConfigurationWithId(
                artifact_versioning = openapi_client.models.branch_configurations_get_200_response_all_of_artifact_versioning.branchConfigurations_get_200_response_allOf_artifactVersioning(
                    build_number_format = 'buildId', ),
                badge_is_enabled = True,
                clone_from_branch = '',
                signed = True,
                tests_enabled = True,
                toolsets = openapi_client.models.branch_configurations_get_200_response_all_of_toolsets.branchConfigurations_get_200_response_allOf_toolsets(
                    android = openapi_client.models.branch_configurations_get_200_response_all_of_toolsets_android.branchConfigurations_get_200_response_allOf_toolsets_android(
                        automatic_signing = True, 
                        build_variant = 'release', 
                        gradle_wrapper_path = 'android/gradlew', 
                        is_root = True, 
                        key_alias = '', 
                        key_password = '', 
                        keystore_encoded = '', 
                        keystore_filename = '', 
                        keystore_password = '', 
                        module = 'app', 
                        run_lint = True, 
                        run_tests = True, ), 
                    javascript = openapi_client.models.branch_configurations_get_200_response_all_of_toolsets_javascript.branchConfigurations_get_200_response_allOf_toolsets_javascript(
                        package_json_path = '', 
                        react_native_version = '', 
                        run_tests = True, ), 
                    xamarin = openapi_client.models.branch_configurations_get_200_response_all_of_toolsets_xamarin.branchConfigurations_get_200_response_allOf_toolsets_xamarin(
                        args = '', 
                        configuration = '', 
                        is_sim_build = True, 
                        mono_version = '', 
                        p12_file = '', 
                        p12_pwd = '', 
                        prov_profile = '', 
                        sdk_bundle = '', 
                        sln_path = '', 
                        symlink = '', ), 
                    xcode = openapi_client.models.branch_configurations_get_200_response_all_of_toolsets_xcode.branchConfigurations_get_200_response_allOf_toolsets_xcode(
                        app_extension_provisioning_profile_files = [
                            openapi_client.models.branch_configurations_get_200_response_all_of_toolsets_xcode_app_extension_provisioning_profile_files_inner.branchConfigurations_get_200_response_allOf_toolsets_xcode_appExtensionProvisioningProfileFiles_inner(
                                file_id = '', 
                                file_name = '', 
                                target_bundle_identifier = '', 
                                upload_id = '', )
                            ], 
                        archive_configuration = '', 
                        automatic_signing = True, 
                        cartfile_path = '', 
                        certificate_encoded = '', 
                        certificate_file_id = '', 
                        certificate_filename = '', 
                        certificate_password = '', 
                        certificate_upload_id = '', 
                        force_legacy_build_system = True, 
                        podfile_path = '', 
                        project_or_workspace_path = '', 
                        provisioning_profile_encoded = '', 
                        provisioning_profile_file_id = '', 
                        provisioning_profile_filename = '', 
                        provisioning_profile_upload_id = '', 
                        scheme = '', 
                        target_to_archive = '', 
                        team_id = '', 
                        xcode_project_sha = '', 
                        xcode_version = '', ), ),
                trigger = 'continous',
                id = 56
            )
        else:
            return BranchConfigurationWithId(
                id = 56,
        )
        """

    def testBranchConfigurationWithId(self):
        """Test BranchConfigurationWithId"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Boards(BaseModel):
    """
    Boards
    """ # noqa: E501
    closed: Optional[StrictStr] = Field(default=None, description=" true or false")
    desc: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384")
    id_board_source: Optional[StrictStr] = Field(default=None, description="The id of the board to copy into the new board", alias="idBoardSource")
    id_organization: Optional[StrictStr] = Field(default=None, description="The id or name of the organization to add the board to.", alias="idOrganization")
    keep_from_source: Optional[StrictStr] = Field(default=None, description="Components of the source board to copy.", alias="keepFromSource")
    label_names_blue: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384", alias="labelNames/blue")
    label_names_green: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384", alias="labelNames/green")
    label_names_orange: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384", alias="labelNames/orange")
    label_names_purple: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384", alias="labelNames/purple")
    label_names_red: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384", alias="labelNames/red")
    label_names_yellow: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384", alias="labelNames/yellow")
    name: Optional[StrictStr] = Field(default=None, description="a string with a length from 1 to 16384")
    power_ups: Optional[StrictStr] = Field(default=None, description="all or a comma-separated list of: calendar, cardAging, recap or voting", alias="powerUps")
    prefs_background: Optional[StrictStr] = Field(default=None, description="A standard background name, or the id of a custom background", alias="prefs/background")
    prefs_calendar_feed_enabled: Optional[StrictStr] = Field(default=None, description=" true or false", alias="prefs/calendarFeedEnabled")
    prefs_card_aging: Optional[StrictStr] = Field(default=None, description="One of: pirate or regular", alias="prefs/cardAging")
    prefs_card_covers: Optional[StrictStr] = Field(default=None, description=" true or false", alias="prefs/cardCovers")
    prefs_comments: Optional[StrictStr] = Field(default=None, description="One of: disabled, members, observers, org or public", alias="prefs/comments")
    prefs_invitations: Optional[StrictStr] = Field(default=None, description="One of: admins or members", alias="prefs/invitations")
    prefs_permission_level: Optional[StrictStr] = Field(default=None, description="One of: org, private or public", alias="prefs/permissionLevel")
    prefs_self_join: Optional[StrictStr] = Field(default=None, description=" true or false", alias="prefs/selfJoin")
    prefs_voting: Optional[StrictStr] = Field(default=None, description="One of: disabled, members, observers, org or public", alias="prefs/voting")
    prefs_background: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384")
    prefs_card_aging: Optional[StrictStr] = Field(default=None, description="One of: pirate or regular", alias="prefs_cardAging")
    prefs_card_covers: Optional[StrictStr] = Field(default=None, description=" true or false", alias="prefs_cardCovers")
    prefs_comments: Optional[StrictStr] = Field(default=None, description="One of: disabled, members, observers, org or public")
    prefs_invitations: Optional[StrictStr] = Field(default=None, description="One of: admins or members")
    prefs_permission_level: Optional[StrictStr] = Field(default=None, description="One of: org, private or public", alias="prefs_permissionLevel")
    prefs_self_join: Optional[StrictStr] = Field(default=None, description=" true or false", alias="prefs_selfJoin")
    prefs_voting: Optional[StrictStr] = Field(default=None, description="One of: disabled, members, observers, org or public")
    subscribed: Optional[StrictStr] = Field(default=None, description=" true or false")
    __properties: ClassVar[List[str]] = ["closed", "desc", "idBoardSource", "idOrganization", "keepFromSource", "labelNames/blue", "labelNames/green", "labelNames/orange", "labelNames/purple", "labelNames/red", "labelNames/yellow", "name", "powerUps", "prefs/background", "prefs/calendarFeedEnabled", "prefs/cardAging", "prefs/cardCovers", "prefs/comments", "prefs/invitations", "prefs/permissionLevel", "prefs/selfJoin", "prefs/voting", "prefs_background", "prefs_cardAging", "prefs_cardCovers", "prefs_comments", "prefs_invitations", "prefs_permissionLevel", "prefs_selfJoin", "prefs_voting", "subscribed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Boards from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Boards from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "closed": obj.get("closed"),
            "desc": obj.get("desc"),
            "idBoardSource": obj.get("idBoardSource"),
            "idOrganization": obj.get("idOrganization"),
            "keepFromSource": obj.get("keepFromSource"),
            "labelNames/blue": obj.get("labelNames/blue"),
            "labelNames/green": obj.get("labelNames/green"),
            "labelNames/orange": obj.get("labelNames/orange"),
            "labelNames/purple": obj.get("labelNames/purple"),
            "labelNames/red": obj.get("labelNames/red"),
            "labelNames/yellow": obj.get("labelNames/yellow"),
            "name": obj.get("name"),
            "powerUps": obj.get("powerUps"),
            "prefs/background": obj.get("prefs/background"),
            "prefs/calendarFeedEnabled": obj.get("prefs/calendarFeedEnabled"),
            "prefs/cardAging": obj.get("prefs/cardAging"),
            "prefs/cardCovers": obj.get("prefs/cardCovers"),
            "prefs/comments": obj.get("prefs/comments"),
            "prefs/invitations": obj.get("prefs/invitations"),
            "prefs/permissionLevel": obj.get("prefs/permissionLevel"),
            "prefs/selfJoin": obj.get("prefs/selfJoin"),
            "prefs/voting": obj.get("prefs/voting"),
            "prefs_background": obj.get("prefs_background"),
            "prefs_cardAging": obj.get("prefs_cardAging"),
            "prefs_cardCovers": obj.get("prefs_cardCovers"),
            "prefs_comments": obj.get("prefs_comments"),
            "prefs_invitations": obj.get("prefs_invitations"),
            "prefs_permissionLevel": obj.get("prefs_permissionLevel"),
            "prefs_selfJoin": obj.get("prefs_selfJoin"),
            "prefs_voting": obj.get("prefs_voting"),
            "subscribed": obj.get("subscribed")
        })
        return _obj



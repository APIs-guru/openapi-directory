# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Organizations(BaseModel):
    """
    Organizations
    """ # noqa: E501
    desc: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384")
    display_name: Optional[StrictStr] = Field(default=None, description="A string with a length of at least 1.  Cannot begin or end with a space.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384")
    prefs_associated_domain: Optional[StrictStr] = Field(default=None, description="The google apps domain to link this org to.", alias="prefs/associatedDomain")
    prefs_board_visibility_restrict_org: Optional[StrictStr] = Field(default=None, description="One of: admin, none or org", alias="prefs/boardVisibilityRestrict/org")
    prefs_board_visibility_restrict_private: Optional[StrictStr] = Field(default=None, description="One of: admin, none or org", alias="prefs/boardVisibilityRestrict/private")
    prefs_board_visibility_restrict_public: Optional[StrictStr] = Field(default=None, description="One of: admin, none or org", alias="prefs/boardVisibilityRestrict/public")
    prefs_external_members_disabled: Optional[StrictStr] = Field(default=None, description=" true or false", alias="prefs/externalMembersDisabled")
    prefs_google_apps_version: Optional[StrictStr] = Field(default=None, description="a number from 1 to 2", alias="prefs/googleAppsVersion")
    prefs_org_invite_restrict: Optional[StrictStr] = Field(default=None, description="An email address with optional expansion tokens", alias="prefs/orgInviteRestrict")
    prefs_permission_level: Optional[StrictStr] = Field(default=None, description="One of: private or public", alias="prefs/permissionLevel")
    website: Optional[StrictStr] = Field(default=None, description="A URL starting with http:// or https:// or null")
    __properties: ClassVar[List[str]] = ["desc", "displayName", "name", "prefs/associatedDomain", "prefs/boardVisibilityRestrict/org", "prefs/boardVisibilityRestrict/private", "prefs/boardVisibilityRestrict/public", "prefs/externalMembersDisabled", "prefs/googleAppsVersion", "prefs/orgInviteRestrict", "prefs/permissionLevel", "website"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organizations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organizations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "desc": obj.get("desc"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "prefs/associatedDomain": obj.get("prefs/associatedDomain"),
            "prefs/boardVisibilityRestrict/org": obj.get("prefs/boardVisibilityRestrict/org"),
            "prefs/boardVisibilityRestrict/private": obj.get("prefs/boardVisibilityRestrict/private"),
            "prefs/boardVisibilityRestrict/public": obj.get("prefs/boardVisibilityRestrict/public"),
            "prefs/externalMembersDisabled": obj.get("prefs/externalMembersDisabled"),
            "prefs/googleAppsVersion": obj.get("prefs/googleAppsVersion"),
            "prefs/orgInviteRestrict": obj.get("prefs/orgInviteRestrict"),
            "prefs/permissionLevel": obj.get("prefs/permissionLevel"),
            "website": obj.get("website")
        })
        return _obj



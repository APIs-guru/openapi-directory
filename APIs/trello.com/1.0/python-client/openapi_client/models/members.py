# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Members(BaseModel):
    """
    Members
    """ # noqa: E501
    avatar_source: Optional[StrictStr] = Field(default=None, description="One of: gravatar, none or upload", alias="avatarSource")
    bio: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 16384")
    full_name: Optional[StrictStr] = Field(default=None, description="A string with a length of at least 1.  Cannot begin or end with a space.", alias="fullName")
    initials: Optional[StrictStr] = Field(default=None, description="A string with a length from 1 to 4.  Cannot begin or end with a space")
    prefs_color_blind: Optional[StrictStr] = Field(default=None, description=" true or false", alias="prefs/colorBlind")
    prefs_locale: Optional[StrictStr] = Field(default=None, description="a string with a length from 0 to 255", alias="prefs/locale")
    prefs_minutes_between_summaries: Optional[StrictStr] = Field(default=None, description="-1 (disabled), 1 or 60", alias="prefs/minutesBetweenSummaries")
    username: Optional[StrictStr] = Field(default=None, description="A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.")
    __properties: ClassVar[List[str]] = ["avatarSource", "bio", "fullName", "initials", "prefs/colorBlind", "prefs/locale", "prefs/minutesBetweenSummaries", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Members from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Members from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatarSource": obj.get("avatarSource"),
            "bio": obj.get("bio"),
            "fullName": obj.get("fullName"),
            "initials": obj.get("initials"),
            "prefs/colorBlind": obj.get("prefs/colorBlind"),
            "prefs/locale": obj.get("prefs/locale"),
            "prefs/minutesBetweenSummaries": obj.get("prefs/minutesBetweenSummaries"),
            "username": obj.get("username")
        })
        return _obj



# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.checklists import Checklists
from openapi_client.models.checklists_check_items import ChecklistsCheckItems
from openapi_client.models.checklists_id_card import ChecklistsIdCard
from openapi_client.models.checklists_name import ChecklistsName
from openapi_client.models.checklists_pos import ChecklistsPos

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ChecklistApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_checklists(
        self,
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists: Annotated[Checklists, Field(description="Attributes of \"Checklists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addChecklists()


        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists: Attributes of \"Checklists\" to be added. (required)
        :type checklists: Checklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_checklists_serialize(
            key=key,
            token=token,
            checklists=checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_checklists_with_http_info(
        self,
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists: Annotated[Checklists, Field(description="Attributes of \"Checklists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addChecklists()


        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists: Attributes of \"Checklists\" to be added. (required)
        :type checklists: Checklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_checklists_serialize(
            key=key,
            token=token,
            checklists=checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_checklists_without_preload_content(
        self,
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists: Annotated[Checklists, Field(description="Attributes of \"Checklists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addChecklists()


        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists: Attributes of \"Checklists\" to be added. (required)
        :type checklists: Checklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_checklists_serialize(
            key=key,
            token=token,
            checklists=checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_checklists_serialize(
        self,
        key,
        token,
        checklists,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if checklists is not None:
            _body_params = checklists



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/checklists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_checklists_check_items_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_check_items: Annotated[ChecklistsCheckItems, Field(description="Attributes of \"Checklists Check Items\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addChecklistsCheckItemsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_check_items: Attributes of \"Checklists Check Items\" to be added. (required)
        :type checklists_check_items: ChecklistsCheckItems
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_checklists_check_items_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_check_items=checklists_check_items,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_checklists_check_items_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_check_items: Annotated[ChecklistsCheckItems, Field(description="Attributes of \"Checklists Check Items\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addChecklistsCheckItemsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_check_items: Attributes of \"Checklists Check Items\" to be added. (required)
        :type checklists_check_items: ChecklistsCheckItems
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_checklists_check_items_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_check_items=checklists_check_items,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_checklists_check_items_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_check_items: Annotated[ChecklistsCheckItems, Field(description="Attributes of \"Checklists Check Items\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addChecklistsCheckItemsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_check_items: Attributes of \"Checklists Check Items\" to be added. (required)
        :type checklists_check_items: ChecklistsCheckItems
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_checklists_check_items_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_check_items=checklists_check_items,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_checklists_check_items_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        checklists_check_items,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if checklists_check_items is not None:
            _body_params = checklists_check_items



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/checklists/{idChecklist}/checkItems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_checklists_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_checklists_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_checklists_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_checklists_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/checklists/{idChecklist}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_checklists_check_items_by_id_checklist_by_id_check_item(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        id_check_item: Annotated[StrictStr, Field(description="idCheckItem")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param id_check_item: idCheckItem (required)
        :type id_check_item: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
            id_checklist=id_checklist,
            id_check_item=id_check_item,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_checklists_check_items_by_id_checklist_by_id_check_item_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        id_check_item: Annotated[StrictStr, Field(description="idCheckItem")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param id_check_item: idCheckItem (required)
        :type id_check_item: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
            id_checklist=id_checklist,
            id_check_item=id_check_item,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_checklists_check_items_by_id_checklist_by_id_check_item_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        id_check_item: Annotated[StrictStr, Field(description="idCheckItem")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param id_check_item: idCheckItem (required)
        :type id_check_item: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
            id_checklist=id_checklist,
            id_check_item=id_check_item,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
        self,
        id_checklist,
        id_check_item,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        if id_check_item is not None:
            _path_params['idCheckItem'] = id_check_item
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/checklists/{idChecklist}/checkItems/{idCheckItem}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_board_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsBoardByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_board_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_board_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsBoardByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_board_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_board_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsBoardByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_board_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_board_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}/board',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_board_by_id_checklist_by_field(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsBoardByIdChecklistByField()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_board_by_id_checklist_by_field_serialize(
            id_checklist=id_checklist,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_board_by_id_checklist_by_field_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsBoardByIdChecklistByField()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_board_by_id_checklist_by_field_serialize(
            id_checklist=id_checklist,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_board_by_id_checklist_by_field_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsBoardByIdChecklistByField()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_board_by_id_checklist_by_field_serialize(
            id_checklist=id_checklist,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_board_by_id_checklist_by_field_serialize(
        self,
        id_checklist,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}/board/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        check_items: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        check_item_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param check_items: One of: all or none
        :type check_items: str
        :param check_item_fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type check_item_fields: str
        :param fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            check_items=check_items,
            check_item_fields=check_item_fields,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        check_items: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        check_item_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param check_items: One of: all or none
        :type check_items: str
        :param check_item_fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type check_item_fields: str
        :param fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            check_items=check_items,
            check_item_fields=check_item_fields,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        check_items: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        check_item_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param check_items: One of: all or none
        :type check_items: str
        :param check_item_fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type check_item_fields: str
        :param fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            check_items=check_items,
            check_item_fields=check_item_fields,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        cards,
        card_fields,
        check_items,
        check_item_fields,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if cards is not None:
            
            _query_params.append(('cards', cards))
            
        if card_fields is not None:
            
            _query_params.append(('card_fields', card_fields))
            
        if check_items is not None:
            
            _query_params.append(('checkItems', check_items))
            
        if check_item_fields is not None:
            
            _query_params.append(('checkItem_fields', check_item_fields))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_by_id_checklist_by_field(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsByIdChecklistByField()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_by_id_checklist_by_field_serialize(
            id_checklist=id_checklist,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_by_id_checklist_by_field_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsByIdChecklistByField()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_by_id_checklist_by_field_serialize(
            id_checklist=id_checklist,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_by_id_checklist_by_field_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsByIdChecklistByField()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_by_id_checklist_by_field_serialize(
            id_checklist=id_checklist,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_by_id_checklist_by_field_serialize(
        self,
        id_checklist,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_cards_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsCardsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none or open
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_cards_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_cards_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsCardsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none or open
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_cards_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_cards_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsCardsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none or open
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_cards_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_cards_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        actions,
        attachments,
        attachment_fields,
        stickers,
        members,
        member_fields,
        check_item_states,
        checklists,
        limit,
        since,
        before,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if attachments is not None:
            
            _query_params.append(('attachments', attachments))
            
        if attachment_fields is not None:
            
            _query_params.append(('attachment_fields', attachment_fields))
            
        if stickers is not None:
            
            _query_params.append(('stickers', stickers))
            
        if members is not None:
            
            _query_params.append(('members', members))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if check_item_states is not None:
            
            _query_params.append(('checkItemStates', check_item_states))
            
        if checklists is not None:
            
            _query_params.append(('checklists', checklists))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if since is not None:
            
            _query_params.append(('since', since))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}/cards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_cards_by_id_checklist_by_filter(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsCardsByIdChecklistByFilter()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_cards_by_id_checklist_by_filter_serialize(
            id_checklist=id_checklist,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_cards_by_id_checklist_by_filter_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsCardsByIdChecklistByFilter()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_cards_by_id_checklist_by_filter_serialize(
            id_checklist=id_checklist,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_cards_by_id_checklist_by_filter_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsCardsByIdChecklistByFilter()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_cards_by_id_checklist_by_filter_serialize(
            id_checklist=id_checklist,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_cards_by_id_checklist_by_filter_serialize(
        self,
        id_checklist,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}/cards/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_check_items_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsCheckItemsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_check_items_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_check_items_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsCheckItemsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_check_items_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_check_items_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsCheckItemsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_check_items_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_check_items_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}/checkItems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_checklists_check_items_by_id_checklist_by_id_check_item(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        id_check_item: Annotated[StrictStr, Field(description="idCheckItem")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getChecklistsCheckItemsByIdChecklistByIdCheckItem()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param id_check_item: idCheckItem (required)
        :type id_check_item: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
            id_checklist=id_checklist,
            id_check_item=id_check_item,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_checklists_check_items_by_id_checklist_by_id_check_item_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        id_check_item: Annotated[StrictStr, Field(description="idCheckItem")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getChecklistsCheckItemsByIdChecklistByIdCheckItem()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param id_check_item: idCheckItem (required)
        :type id_check_item: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
            id_checklist=id_checklist,
            id_check_item=id_check_item,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_checklists_check_items_by_id_checklist_by_id_check_item_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        id_check_item: Annotated[StrictStr, Field(description="idCheckItem")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getChecklistsCheckItemsByIdChecklistByIdCheckItem()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param id_check_item: idCheckItem (required)
        :type id_check_item: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
            id_checklist=id_checklist,
            id_check_item=id_check_item,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_checklists_check_items_by_id_checklist_by_id_check_item_serialize(
        self,
        id_checklist,
        id_check_item,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        if id_check_item is not None:
            _path_params['idCheckItem'] = id_check_item
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/checklists/{idChecklist}/checkItems/{idCheckItem}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_checklists_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists: Annotated[Checklists, Field(description="Attributes of \"Checklists\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists: Attributes of \"Checklists\" to be updated. (required)
        :type checklists: Checklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists=checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_checklists_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists: Annotated[Checklists, Field(description="Attributes of \"Checklists\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists: Attributes of \"Checklists\" to be updated. (required)
        :type checklists: Checklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists=checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_checklists_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists: Annotated[Checklists, Field(description="Attributes of \"Checklists\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateChecklistsByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists: Attributes of \"Checklists\" to be updated. (required)
        :type checklists: Checklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists=checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_checklists_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        checklists,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if checklists is not None:
            _body_params = checklists



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/checklists/{idChecklist}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_checklists_id_card_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_id_card: Annotated[ChecklistsIdCard, Field(description="Attributes of \"Checklists Id Card\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateChecklistsIdCardByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_id_card: Attributes of \"Checklists Id Card\" to be updated. (required)
        :type checklists_id_card: ChecklistsIdCard
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_id_card_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_id_card=checklists_id_card,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_checklists_id_card_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_id_card: Annotated[ChecklistsIdCard, Field(description="Attributes of \"Checklists Id Card\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateChecklistsIdCardByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_id_card: Attributes of \"Checklists Id Card\" to be updated. (required)
        :type checklists_id_card: ChecklistsIdCard
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_id_card_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_id_card=checklists_id_card,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_checklists_id_card_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_id_card: Annotated[ChecklistsIdCard, Field(description="Attributes of \"Checklists Id Card\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateChecklistsIdCardByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_id_card: Attributes of \"Checklists Id Card\" to be updated. (required)
        :type checklists_id_card: ChecklistsIdCard
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_id_card_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_id_card=checklists_id_card,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_checklists_id_card_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        checklists_id_card,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if checklists_id_card is not None:
            _body_params = checklists_id_card



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/checklists/{idChecklist}/idCard',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_checklists_name_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_name: Annotated[ChecklistsName, Field(description="Attributes of \"Checklists Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateChecklistsNameByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_name: Attributes of \"Checklists Name\" to be updated. (required)
        :type checklists_name: ChecklistsName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_name_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_name=checklists_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_checklists_name_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_name: Annotated[ChecklistsName, Field(description="Attributes of \"Checklists Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateChecklistsNameByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_name: Attributes of \"Checklists Name\" to be updated. (required)
        :type checklists_name: ChecklistsName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_name_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_name=checklists_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_checklists_name_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_name: Annotated[ChecklistsName, Field(description="Attributes of \"Checklists Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateChecklistsNameByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_name: Attributes of \"Checklists Name\" to be updated. (required)
        :type checklists_name: ChecklistsName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_name_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_name=checklists_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_checklists_name_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        checklists_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if checklists_name is not None:
            _body_params = checklists_name



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/checklists/{idChecklist}/name',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_checklists_pos_by_id_checklist(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_pos: Annotated[ChecklistsPos, Field(description="Attributes of \"Checklists Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateChecklistsPosByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_pos: Attributes of \"Checklists Pos\" to be updated. (required)
        :type checklists_pos: ChecklistsPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_pos_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_pos=checklists_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_checklists_pos_by_id_checklist_with_http_info(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_pos: Annotated[ChecklistsPos, Field(description="Attributes of \"Checklists Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateChecklistsPosByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_pos: Attributes of \"Checklists Pos\" to be updated. (required)
        :type checklists_pos: ChecklistsPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_pos_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_pos=checklists_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_checklists_pos_by_id_checklist_without_preload_content(
        self,
        id_checklist: Annotated[StrictStr, Field(description="idChecklist")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        checklists_pos: Annotated[ChecklistsPos, Field(description="Attributes of \"Checklists Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateChecklistsPosByIdChecklist()


        :param id_checklist: idChecklist (required)
        :type id_checklist: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param checklists_pos: Attributes of \"Checklists Pos\" to be updated. (required)
        :type checklists_pos: ChecklistsPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_checklists_pos_by_id_checklist_serialize(
            id_checklist=id_checklist,
            key=key,
            token=token,
            checklists_pos=checklists_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_checklists_pos_by_id_checklist_serialize(
        self,
        id_checklist,
        key,
        token,
        checklists_pos,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_checklist is not None:
            _path_params['idChecklist'] = id_checklist
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if checklists_pos is not None:
            _body_params = checklists_pos



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/checklists/{idChecklist}/pos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



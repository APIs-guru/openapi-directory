# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_search(
        self,
        query: Annotated[StrictStr, Field(description="a string with a length from 1 to 16384")],
        id_organizations: Annotated[StrictStr, Field(description="A comma-separated list of objectIds, 24-character hex strings")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        id_boards: Annotated[Optional[StrictStr], Field(description="A comma-separated list of objectIds, 24-character hex strings")] = None,
        id_cards: Annotated[Optional[StrictStr], Field(description="A comma-separated list of objectIds, 24-character hex strings")] = None,
        model_types: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: actions, boards, cards, members or organizations")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        boards_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        cards_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        cards_page: Annotated[Optional[StrictStr], Field(description="a number from 0 to 100")] = None,
        card_board: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_list: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organizations_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        partial: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getSearch()


        :param query: a string with a length from 1 to 16384 (required)
        :type query: str
        :param id_organizations: A comma-separated list of objectIds, 24-character hex strings (required)
        :type id_organizations: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param id_boards: A comma-separated list of objectIds, 24-character hex strings
        :type id_boards: str
        :param id_cards: A comma-separated list of objectIds, 24-character hex strings
        :type id_cards: str
        :param model_types: all or a comma-separated list of: actions, boards, cards, members or organizations
        :type model_types: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param boards_limit: a number from 1 to 1000
        :type boards_limit: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param cards_limit: a number from 1 to 1000
        :type cards_limit: str
        :param cards_page: a number from 0 to 100
        :type cards_page: str
        :param card_board:  true or false
        :type card_board: str
        :param card_list:  true or false
        :type card_list: str
        :param card_members:  true or false
        :type card_members: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organizations_limit: a number from 1 to 1000
        :type organizations_limit: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param members_limit: a number from 1 to 1000
        :type members_limit: str
        :param partial:  true or false
        :type partial: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_serialize(
            query=query,
            id_organizations=id_organizations,
            key=key,
            token=token,
            id_boards=id_boards,
            id_cards=id_cards,
            model_types=model_types,
            board_fields=board_fields,
            boards_limit=boards_limit,
            card_fields=card_fields,
            cards_limit=cards_limit,
            cards_page=cards_page,
            card_board=card_board,
            card_list=card_list,
            card_members=card_members,
            card_stickers=card_stickers,
            card_attachments=card_attachments,
            organization_fields=organization_fields,
            organizations_limit=organizations_limit,
            member_fields=member_fields,
            members_limit=members_limit,
            partial=partial,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_search_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="a string with a length from 1 to 16384")],
        id_organizations: Annotated[StrictStr, Field(description="A comma-separated list of objectIds, 24-character hex strings")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        id_boards: Annotated[Optional[StrictStr], Field(description="A comma-separated list of objectIds, 24-character hex strings")] = None,
        id_cards: Annotated[Optional[StrictStr], Field(description="A comma-separated list of objectIds, 24-character hex strings")] = None,
        model_types: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: actions, boards, cards, members or organizations")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        boards_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        cards_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        cards_page: Annotated[Optional[StrictStr], Field(description="a number from 0 to 100")] = None,
        card_board: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_list: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organizations_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        partial: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getSearch()


        :param query: a string with a length from 1 to 16384 (required)
        :type query: str
        :param id_organizations: A comma-separated list of objectIds, 24-character hex strings (required)
        :type id_organizations: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param id_boards: A comma-separated list of objectIds, 24-character hex strings
        :type id_boards: str
        :param id_cards: A comma-separated list of objectIds, 24-character hex strings
        :type id_cards: str
        :param model_types: all or a comma-separated list of: actions, boards, cards, members or organizations
        :type model_types: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param boards_limit: a number from 1 to 1000
        :type boards_limit: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param cards_limit: a number from 1 to 1000
        :type cards_limit: str
        :param cards_page: a number from 0 to 100
        :type cards_page: str
        :param card_board:  true or false
        :type card_board: str
        :param card_list:  true or false
        :type card_list: str
        :param card_members:  true or false
        :type card_members: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organizations_limit: a number from 1 to 1000
        :type organizations_limit: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param members_limit: a number from 1 to 1000
        :type members_limit: str
        :param partial:  true or false
        :type partial: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_serialize(
            query=query,
            id_organizations=id_organizations,
            key=key,
            token=token,
            id_boards=id_boards,
            id_cards=id_cards,
            model_types=model_types,
            board_fields=board_fields,
            boards_limit=boards_limit,
            card_fields=card_fields,
            cards_limit=cards_limit,
            cards_page=cards_page,
            card_board=card_board,
            card_list=card_list,
            card_members=card_members,
            card_stickers=card_stickers,
            card_attachments=card_attachments,
            organization_fields=organization_fields,
            organizations_limit=organizations_limit,
            member_fields=member_fields,
            members_limit=members_limit,
            partial=partial,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_search_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="a string with a length from 1 to 16384")],
        id_organizations: Annotated[StrictStr, Field(description="A comma-separated list of objectIds, 24-character hex strings")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        id_boards: Annotated[Optional[StrictStr], Field(description="A comma-separated list of objectIds, 24-character hex strings")] = None,
        id_cards: Annotated[Optional[StrictStr], Field(description="A comma-separated list of objectIds, 24-character hex strings")] = None,
        model_types: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: actions, boards, cards, members or organizations")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        boards_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        cards_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        cards_page: Annotated[Optional[StrictStr], Field(description="a number from 0 to 100")] = None,
        card_board: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_list: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organizations_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        partial: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getSearch()


        :param query: a string with a length from 1 to 16384 (required)
        :type query: str
        :param id_organizations: A comma-separated list of objectIds, 24-character hex strings (required)
        :type id_organizations: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param id_boards: A comma-separated list of objectIds, 24-character hex strings
        :type id_boards: str
        :param id_cards: A comma-separated list of objectIds, 24-character hex strings
        :type id_cards: str
        :param model_types: all or a comma-separated list of: actions, boards, cards, members or organizations
        :type model_types: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param boards_limit: a number from 1 to 1000
        :type boards_limit: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param cards_limit: a number from 1 to 1000
        :type cards_limit: str
        :param cards_page: a number from 0 to 100
        :type cards_page: str
        :param card_board:  true or false
        :type card_board: str
        :param card_list:  true or false
        :type card_list: str
        :param card_members:  true or false
        :type card_members: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organizations_limit: a number from 1 to 1000
        :type organizations_limit: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param members_limit: a number from 1 to 1000
        :type members_limit: str
        :param partial:  true or false
        :type partial: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_serialize(
            query=query,
            id_organizations=id_organizations,
            key=key,
            token=token,
            id_boards=id_boards,
            id_cards=id_cards,
            model_types=model_types,
            board_fields=board_fields,
            boards_limit=boards_limit,
            card_fields=card_fields,
            cards_limit=cards_limit,
            cards_page=cards_page,
            card_board=card_board,
            card_list=card_list,
            card_members=card_members,
            card_stickers=card_stickers,
            card_attachments=card_attachments,
            organization_fields=organization_fields,
            organizations_limit=organizations_limit,
            member_fields=member_fields,
            members_limit=members_limit,
            partial=partial,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_search_serialize(
        self,
        query,
        id_organizations,
        key,
        token,
        id_boards,
        id_cards,
        model_types,
        board_fields,
        boards_limit,
        card_fields,
        cards_limit,
        cards_page,
        card_board,
        card_list,
        card_members,
        card_stickers,
        card_attachments,
        organization_fields,
        organizations_limit,
        member_fields,
        members_limit,
        partial,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if id_boards is not None:
            
            _query_params.append(('idBoards', id_boards))
            
        if id_organizations is not None:
            
            _query_params.append(('idOrganizations', id_organizations))
            
        if id_cards is not None:
            
            _query_params.append(('idCards', id_cards))
            
        if model_types is not None:
            
            _query_params.append(('modelTypes', model_types))
            
        if board_fields is not None:
            
            _query_params.append(('board_fields', board_fields))
            
        if boards_limit is not None:
            
            _query_params.append(('boards_limit', boards_limit))
            
        if card_fields is not None:
            
            _query_params.append(('card_fields', card_fields))
            
        if cards_limit is not None:
            
            _query_params.append(('cards_limit', cards_limit))
            
        if cards_page is not None:
            
            _query_params.append(('cards_page', cards_page))
            
        if card_board is not None:
            
            _query_params.append(('card_board', card_board))
            
        if card_list is not None:
            
            _query_params.append(('card_list', card_list))
            
        if card_members is not None:
            
            _query_params.append(('card_members', card_members))
            
        if card_stickers is not None:
            
            _query_params.append(('card_stickers', card_stickers))
            
        if card_attachments is not None:
            
            _query_params.append(('card_attachments', card_attachments))
            
        if organization_fields is not None:
            
            _query_params.append(('organization_fields', organization_fields))
            
        if organizations_limit is not None:
            
            _query_params.append(('organizations_limit', organizations_limit))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if members_limit is not None:
            
            _query_params.append(('members_limit', members_limit))
            
        if partial is not None:
            
            _query_params.append(('partial', partial))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_search_members(
        self,
        query: Annotated[StrictStr, Field(description="a string with a length from 1 to 16384")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 20")] = None,
        id_board: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        id_organization: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        only_org_members: Annotated[Optional[StrictStr], Field(description="A boolean")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getSearchMembers()


        :param query: a string with a length from 1 to 16384 (required)
        :type query: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param limit: a number from 1 to 20
        :type limit: str
        :param id_board: An id, or null
        :type id_board: str
        :param id_organization: An id, or null
        :type id_organization: str
        :param only_org_members: A boolean
        :type only_org_members: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_members_serialize(
            query=query,
            key=key,
            token=token,
            limit=limit,
            id_board=id_board,
            id_organization=id_organization,
            only_org_members=only_org_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_search_members_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="a string with a length from 1 to 16384")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 20")] = None,
        id_board: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        id_organization: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        only_org_members: Annotated[Optional[StrictStr], Field(description="A boolean")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getSearchMembers()


        :param query: a string with a length from 1 to 16384 (required)
        :type query: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param limit: a number from 1 to 20
        :type limit: str
        :param id_board: An id, or null
        :type id_board: str
        :param id_organization: An id, or null
        :type id_organization: str
        :param only_org_members: A boolean
        :type only_org_members: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_members_serialize(
            query=query,
            key=key,
            token=token,
            limit=limit,
            id_board=id_board,
            id_organization=id_organization,
            only_org_members=only_org_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_search_members_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="a string with a length from 1 to 16384")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 20")] = None,
        id_board: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        id_organization: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        only_org_members: Annotated[Optional[StrictStr], Field(description="A boolean")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getSearchMembers()


        :param query: a string with a length from 1 to 16384 (required)
        :type query: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param limit: a number from 1 to 20
        :type limit: str
        :param id_board: An id, or null
        :type id_board: str
        :param id_organization: An id, or null
        :type id_organization: str
        :param only_org_members: A boolean
        :type only_org_members: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_search_members_serialize(
            query=query,
            key=key,
            token=token,
            limit=limit,
            id_board=id_board,
            id_organization=id_organization,
            only_org_members=only_org_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_search_members_serialize(
        self,
        query,
        key,
        token,
        limit,
        id_board,
        id_organization,
        only_org_members,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if id_board is not None:
            
            _query_params.append(('idBoard', id_board))
            
        if id_organization is not None:
            
            _query_params.append(('idOrganization', id_organization))
            
        if only_org_members is not None:
            
            _query_params.append(('onlyOrgMembers', only_org_members))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/members',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



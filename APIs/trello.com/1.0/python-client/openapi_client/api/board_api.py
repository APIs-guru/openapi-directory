# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.boards import Boards
from openapi_client.models.boards_checklists import BoardsChecklists
from openapi_client.models.boards_closed import BoardsClosed
from openapi_client.models.boards_desc import BoardsDesc
from openapi_client.models.boards_id_organization import BoardsIdOrganization
from openapi_client.models.boards_labels import BoardsLabels
from openapi_client.models.boards_lists import BoardsLists
from openapi_client.models.boards_members import BoardsMembers
from openapi_client.models.boards_memberships import BoardsMemberships
from openapi_client.models.boards_name import BoardsName
from openapi_client.models.boards_power_ups import BoardsPowerUps
from openapi_client.models.boards_subscribed import BoardsSubscribed
from openapi_client.models.label_names_blue import LabelNamesBlue
from openapi_client.models.label_names_green import LabelNamesGreen
from openapi_client.models.label_names_orange import LabelNamesOrange
from openapi_client.models.label_names_purple import LabelNamesPurple
from openapi_client.models.label_names_red import LabelNamesRed
from openapi_client.models.label_names_yellow import LabelNamesYellow
from openapi_client.models.my_prefs_email_position import MyPrefsEmailPosition
from openapi_client.models.my_prefs_id_email_list import MyPrefsIdEmailList
from openapi_client.models.my_prefs_show_list_guide import MyPrefsShowListGuide
from openapi_client.models.my_prefs_show_sidebar import MyPrefsShowSidebar
from openapi_client.models.my_prefs_show_sidebar_activity import MyPrefsShowSidebarActivity
from openapi_client.models.my_prefs_show_sidebar_board_actions import MyPrefsShowSidebarBoardActions
from openapi_client.models.my_prefs_show_sidebar_members import MyPrefsShowSidebarMembers
from openapi_client.models.prefs_background import PrefsBackground
from openapi_client.models.prefs_calendar_feed_enabled import PrefsCalendarFeedEnabled
from openapi_client.models.prefs_card_aging import PrefsCardAging
from openapi_client.models.prefs_card_covers import PrefsCardCovers
from openapi_client.models.prefs_comments import PrefsComments
from openapi_client.models.prefs_invitations import PrefsInvitations
from openapi_client.models.prefs_permission_level import PrefsPermissionLevel
from openapi_client.models.prefs_self_join import PrefsSelfJoin
from openapi_client.models.prefs_voting import PrefsVoting

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BoardApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_boards(
        self,
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards: Annotated[Boards, Field(description="Attributes of \"Boards\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoards()


        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards: Attributes of \"Boards\" to be added. (required)
        :type boards: Boards
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_serialize(
            key=key,
            token=token,
            boards=boards,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_with_http_info(
        self,
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards: Annotated[Boards, Field(description="Attributes of \"Boards\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoards()


        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards: Attributes of \"Boards\" to be added. (required)
        :type boards: Boards
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_serialize(
            key=key,
            token=token,
            boards=boards,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_without_preload_content(
        self,
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards: Annotated[Boards, Field(description="Attributes of \"Boards\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoards()


        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards: Attributes of \"Boards\" to be added. (required)
        :type boards: Boards
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_serialize(
            key=key,
            token=token,
            boards=boards,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_serialize(
        self,
        key,
        token,
        boards,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards is not None:
            _body_params = boards



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_boards_calendar_key_generate_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoardsCalendarKeyGenerateByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_calendar_key_generate_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_calendar_key_generate_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoardsCalendarKeyGenerateByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_calendar_key_generate_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_calendar_key_generate_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoardsCalendarKeyGenerateByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_calendar_key_generate_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_calendar_key_generate_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards/{idBoard}/calendarKey/generate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_boards_checklists_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_checklists: Annotated[BoardsChecklists, Field(description="Attributes of \"Boards Checklists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoardsChecklistsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_checklists: Attributes of \"Boards Checklists\" to be added. (required)
        :type boards_checklists: BoardsChecklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_checklists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_checklists=boards_checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_checklists_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_checklists: Annotated[BoardsChecklists, Field(description="Attributes of \"Boards Checklists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoardsChecklistsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_checklists: Attributes of \"Boards Checklists\" to be added. (required)
        :type boards_checklists: BoardsChecklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_checklists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_checklists=boards_checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_checklists_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_checklists: Annotated[BoardsChecklists, Field(description="Attributes of \"Boards Checklists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoardsChecklistsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_checklists: Attributes of \"Boards Checklists\" to be added. (required)
        :type boards_checklists: BoardsChecklists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_checklists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_checklists=boards_checklists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_checklists_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_checklists,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_checklists is not None:
            _body_params = boards_checklists



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards/{idBoard}/checklists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_boards_email_key_generate_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoardsEmailKeyGenerateByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_email_key_generate_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_email_key_generate_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoardsEmailKeyGenerateByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_email_key_generate_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_email_key_generate_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoardsEmailKeyGenerateByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_email_key_generate_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_email_key_generate_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards/{idBoard}/emailKey/generate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_boards_labels_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_labels: Annotated[BoardsLabels, Field(description="Attributes of \"Boards Labels\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoardsLabelsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_labels: Attributes of \"Boards Labels\" to be added. (required)
        :type boards_labels: BoardsLabels
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_labels_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_labels=boards_labels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_labels_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_labels: Annotated[BoardsLabels, Field(description="Attributes of \"Boards Labels\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoardsLabelsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_labels: Attributes of \"Boards Labels\" to be added. (required)
        :type boards_labels: BoardsLabels
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_labels_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_labels=boards_labels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_labels_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_labels: Annotated[BoardsLabels, Field(description="Attributes of \"Boards Labels\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoardsLabelsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_labels: Attributes of \"Boards Labels\" to be added. (required)
        :type boards_labels: BoardsLabels
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_labels_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_labels=boards_labels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_labels_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_labels,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_labels is not None:
            _body_params = boards_labels



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards/{idBoard}/labels',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_boards_lists_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_lists: Annotated[BoardsLists, Field(description="Attributes of \"Boards Lists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoardsListsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_lists: Attributes of \"Boards Lists\" to be added. (required)
        :type boards_lists: BoardsLists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_lists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_lists=boards_lists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_lists_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_lists: Annotated[BoardsLists, Field(description="Attributes of \"Boards Lists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoardsListsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_lists: Attributes of \"Boards Lists\" to be added. (required)
        :type boards_lists: BoardsLists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_lists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_lists=boards_lists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_lists_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_lists: Annotated[BoardsLists, Field(description="Attributes of \"Boards Lists\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoardsListsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_lists: Attributes of \"Boards Lists\" to be added. (required)
        :type boards_lists: BoardsLists
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_lists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_lists=boards_lists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_lists_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_lists,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_lists is not None:
            _body_params = boards_lists



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards/{idBoard}/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_boards_mark_as_viewed_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoardsMarkAsViewedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_mark_as_viewed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_mark_as_viewed_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoardsMarkAsViewedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_mark_as_viewed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_mark_as_viewed_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoardsMarkAsViewedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_mark_as_viewed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_mark_as_viewed_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards/{idBoard}/markAsViewed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_boards_power_ups_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_power_ups: Annotated[BoardsPowerUps, Field(description="Attributes of \"Boards Power Ups\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addBoardsPowerUpsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_power_ups: Attributes of \"Boards Power Ups\" to be added. (required)
        :type boards_power_ups: BoardsPowerUps
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_power_ups_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_power_ups=boards_power_ups,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_boards_power_ups_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_power_ups: Annotated[BoardsPowerUps, Field(description="Attributes of \"Boards Power Ups\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addBoardsPowerUpsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_power_ups: Attributes of \"Boards Power Ups\" to be added. (required)
        :type boards_power_ups: BoardsPowerUps
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_power_ups_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_power_ups=boards_power_ups,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_boards_power_ups_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_power_ups: Annotated[BoardsPowerUps, Field(description="Attributes of \"Boards Power Ups\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addBoardsPowerUpsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_power_ups: Attributes of \"Boards Power Ups\" to be added. (required)
        :type boards_power_ups: BoardsPowerUps
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_boards_power_ups_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_power_ups=boards_power_ups,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_boards_power_ups_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_power_ups,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_power_ups is not None:
            _body_params = boards_power_ups



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/boards/{idBoard}/powerUps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_boards_members_by_id_board_by_id_member(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteBoardsMembersByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_boards_members_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_boards_members_by_id_board_by_id_member_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteBoardsMembersByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_boards_members_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_boards_members_by_id_board_by_id_member_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteBoardsMembersByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_boards_members_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_boards_members_by_id_board_by_id_member_serialize(
        self,
        id_board,
        id_member,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/boards/{idBoard}/members/{idMember}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_boards_power_ups_by_id_board_by_power_up(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        power_up: Annotated[StrictStr, Field(description="powerUp")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteBoardsPowerUpsByIdBoardByPowerUp()


        :param id_board: board_id (required)
        :type id_board: str
        :param power_up: powerUp (required)
        :type power_up: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_boards_power_ups_by_id_board_by_power_up_serialize(
            id_board=id_board,
            power_up=power_up,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_boards_power_ups_by_id_board_by_power_up_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        power_up: Annotated[StrictStr, Field(description="powerUp")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteBoardsPowerUpsByIdBoardByPowerUp()


        :param id_board: board_id (required)
        :type id_board: str
        :param power_up: powerUp (required)
        :type power_up: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_boards_power_ups_by_id_board_by_power_up_serialize(
            id_board=id_board,
            power_up=power_up,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_boards_power_ups_by_id_board_by_power_up_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        power_up: Annotated[StrictStr, Field(description="powerUp")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteBoardsPowerUpsByIdBoardByPowerUp()


        :param id_board: board_id (required)
        :type id_board: str
        :param power_up: powerUp (required)
        :type power_up: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_boards_power_ups_by_id_board_by_power_up_serialize(
            id_board=id_board,
            power_up=power_up,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_boards_power_ups_by_id_board_by_power_up_serialize(
        self,
        id_board,
        power_up,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if power_up is not None:
            _path_params['powerUp'] = power_up
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/boards/{idBoard}/powerUps/{powerUp}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_actions_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Page * limit must be less than 1000")] = None,
        id_models: Annotated[Optional[StrictStr], Field(description="Only return actions related to these model ids")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsActionsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param format: One of: count, list or minimal
        :type format: str
        :param since: A date, null or lastView
        :type since: str
        :param before: A date, or null
        :type before: str
        :param page: Page * limit must be less than 1000
        :type page: str
        :param id_models: Only return actions related to these model ids
        :type id_models: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_actions_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            fields=fields,
            limit=limit,
            format=format,
            since=since,
            before=before,
            page=page,
            id_models=id_models,
            member=member,
            member_fields=member_fields,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_actions_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Page * limit must be less than 1000")] = None,
        id_models: Annotated[Optional[StrictStr], Field(description="Only return actions related to these model ids")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsActionsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param format: One of: count, list or minimal
        :type format: str
        :param since: A date, null or lastView
        :type since: str
        :param before: A date, or null
        :type before: str
        :param page: Page * limit must be less than 1000
        :type page: str
        :param id_models: Only return actions related to these model ids
        :type id_models: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_actions_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            fields=fields,
            limit=limit,
            format=format,
            since=since,
            before=before,
            page=page,
            id_models=id_models,
            member=member,
            member_fields=member_fields,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_actions_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Page * limit must be less than 1000")] = None,
        id_models: Annotated[Optional[StrictStr], Field(description="Only return actions related to these model ids")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsActionsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param format: One of: count, list or minimal
        :type format: str
        :param since: A date, null or lastView
        :type since: str
        :param before: A date, or null
        :type before: str
        :param page: Page * limit must be less than 1000
        :type page: str
        :param id_models: Only return actions related to these model ids
        :type id_models: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_actions_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            fields=fields,
            limit=limit,
            format=format,
            since=since,
            before=before,
            page=page,
            id_models=id_models,
            member=member,
            member_fields=member_fields,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_actions_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        entities,
        display,
        filter,
        fields,
        limit,
        format,
        since,
        before,
        page,
        id_models,
        member,
        member_fields,
        member_creator,
        member_creator_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if entities is not None:
            
            _query_params.append(('entities', entities))
            
        if display is not None:
            
            _query_params.append(('display', display))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if since is not None:
            
            _query_params.append(('since', since))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if id_models is not None:
            
            _query_params.append(('idModels', id_models))
            
        if member is not None:
            
            _query_params.append(('member', member))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if member_creator is not None:
            
            _query_params.append(('memberCreator', member_creator))
            
        if member_creator_fields is not None:
            
            _query_params.append(('memberCreator_fields', member_creator_fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/actions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_board_stars_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: mine or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsBoardStarsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: mine or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_board_stars_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_board_stars_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: mine or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsBoardStarsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: mine or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_board_stars_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_board_stars_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: mine or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsBoardStarsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: mine or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_board_stars_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_board_stars_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/boardStars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        action_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        action_member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        action_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        card_attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        card_checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_stars: Annotated[Optional[StrictStr], Field(description="One of: mine or none")] = None,
        labels: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        label_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        labels_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        list_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        memberships_member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        memberships_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members_invited: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        members_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        checklist_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organization_memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        my_prefs: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_format: One of: count, list or minimal
        :type actions_format: str
        :param actions_since: A date, null or lastView
        :type actions_since: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_member:  true or false
        :type action_member: str
        :param action_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_fields: str
        :param action_member_creator:  true or false
        :type action_member_creator: str
        :param action_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_creator_fields: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param card_attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type card_attachment_fields: str
        :param card_checklists: One of: all or none
        :type card_checklists: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param board_stars: One of: mine or none
        :type board_stars: str
        :param labels: One of: all or none
        :type labels: str
        :param label_fields: all or a comma-separated list of: color, idBoard, name or uses
        :type label_fields: str
        :param labels_limit: a number from 0 to 1000
        :type labels_limit: str
        :param lists: One of: all, closed, none or open
        :type lists: str
        :param list_fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type list_fields: str
        :param memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type memberships: str
        :param memberships_member:  true or false
        :type memberships_member: str
        :param memberships_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type memberships_member_fields: str
        :param members: One of: admins, all, none, normal or owners
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param members_invited: One of: admins, all, none, normal or owners
        :type members_invited: str
        :param members_invited_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type members_invited_fields: str
        :param checklists: One of: all or none
        :type checklists: str
        :param checklist_fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type checklist_fields: str
        :param organization:  true or false
        :type organization: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organization_memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type organization_memberships: str
        :param my_prefs:  true or false
        :type my_prefs: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_format=actions_format,
            actions_since=actions_since,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_member=action_member,
            action_member_fields=action_member_fields,
            action_member_creator=action_member_creator,
            action_member_creator_fields=action_member_creator_fields,
            cards=cards,
            card_fields=card_fields,
            card_attachments=card_attachments,
            card_attachment_fields=card_attachment_fields,
            card_checklists=card_checklists,
            card_stickers=card_stickers,
            board_stars=board_stars,
            labels=labels,
            label_fields=label_fields,
            labels_limit=labels_limit,
            lists=lists,
            list_fields=list_fields,
            memberships=memberships,
            memberships_member=memberships_member,
            memberships_member_fields=memberships_member_fields,
            members=members,
            member_fields=member_fields,
            members_invited=members_invited,
            members_invited_fields=members_invited_fields,
            checklists=checklists,
            checklist_fields=checklist_fields,
            organization=organization,
            organization_fields=organization_fields,
            organization_memberships=organization_memberships,
            my_prefs=my_prefs,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        action_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        action_member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        action_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        card_attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        card_checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_stars: Annotated[Optional[StrictStr], Field(description="One of: mine or none")] = None,
        labels: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        label_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        labels_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        list_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        memberships_member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        memberships_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members_invited: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        members_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        checklist_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organization_memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        my_prefs: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_format: One of: count, list or minimal
        :type actions_format: str
        :param actions_since: A date, null or lastView
        :type actions_since: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_member:  true or false
        :type action_member: str
        :param action_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_fields: str
        :param action_member_creator:  true or false
        :type action_member_creator: str
        :param action_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_creator_fields: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param card_attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type card_attachment_fields: str
        :param card_checklists: One of: all or none
        :type card_checklists: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param board_stars: One of: mine or none
        :type board_stars: str
        :param labels: One of: all or none
        :type labels: str
        :param label_fields: all or a comma-separated list of: color, idBoard, name or uses
        :type label_fields: str
        :param labels_limit: a number from 0 to 1000
        :type labels_limit: str
        :param lists: One of: all, closed, none or open
        :type lists: str
        :param list_fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type list_fields: str
        :param memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type memberships: str
        :param memberships_member:  true or false
        :type memberships_member: str
        :param memberships_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type memberships_member_fields: str
        :param members: One of: admins, all, none, normal or owners
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param members_invited: One of: admins, all, none, normal or owners
        :type members_invited: str
        :param members_invited_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type members_invited_fields: str
        :param checklists: One of: all or none
        :type checklists: str
        :param checklist_fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type checklist_fields: str
        :param organization:  true or false
        :type organization: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organization_memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type organization_memberships: str
        :param my_prefs:  true or false
        :type my_prefs: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_format=actions_format,
            actions_since=actions_since,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_member=action_member,
            action_member_fields=action_member_fields,
            action_member_creator=action_member_creator,
            action_member_creator_fields=action_member_creator_fields,
            cards=cards,
            card_fields=card_fields,
            card_attachments=card_attachments,
            card_attachment_fields=card_attachment_fields,
            card_checklists=card_checklists,
            card_stickers=card_stickers,
            board_stars=board_stars,
            labels=labels,
            label_fields=label_fields,
            labels_limit=labels_limit,
            lists=lists,
            list_fields=list_fields,
            memberships=memberships,
            memberships_member=memberships_member,
            memberships_member_fields=memberships_member_fields,
            members=members,
            member_fields=member_fields,
            members_invited=members_invited,
            members_invited_fields=members_invited_fields,
            checklists=checklists,
            checklist_fields=checklist_fields,
            organization=organization,
            organization_fields=organization_fields,
            organization_memberships=organization_memberships,
            my_prefs=my_prefs,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        action_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        action_member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        action_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        card_attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        card_checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_stars: Annotated[Optional[StrictStr], Field(description="One of: mine or none")] = None,
        labels: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        label_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        labels_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        list_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        memberships_member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        memberships_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members_invited: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        members_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        checklist_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organization_memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        my_prefs: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_format: One of: count, list or minimal
        :type actions_format: str
        :param actions_since: A date, null or lastView
        :type actions_since: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_member:  true or false
        :type action_member: str
        :param action_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_fields: str
        :param action_member_creator:  true or false
        :type action_member_creator: str
        :param action_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_creator_fields: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param card_attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type card_attachment_fields: str
        :param card_checklists: One of: all or none
        :type card_checklists: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param board_stars: One of: mine or none
        :type board_stars: str
        :param labels: One of: all or none
        :type labels: str
        :param label_fields: all or a comma-separated list of: color, idBoard, name or uses
        :type label_fields: str
        :param labels_limit: a number from 0 to 1000
        :type labels_limit: str
        :param lists: One of: all, closed, none or open
        :type lists: str
        :param list_fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type list_fields: str
        :param memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type memberships: str
        :param memberships_member:  true or false
        :type memberships_member: str
        :param memberships_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type memberships_member_fields: str
        :param members: One of: admins, all, none, normal or owners
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param members_invited: One of: admins, all, none, normal or owners
        :type members_invited: str
        :param members_invited_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type members_invited_fields: str
        :param checklists: One of: all or none
        :type checklists: str
        :param checklist_fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type checklist_fields: str
        :param organization:  true or false
        :type organization: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organization_memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type organization_memberships: str
        :param my_prefs:  true or false
        :type my_prefs: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_format=actions_format,
            actions_since=actions_since,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_member=action_member,
            action_member_fields=action_member_fields,
            action_member_creator=action_member_creator,
            action_member_creator_fields=action_member_creator_fields,
            cards=cards,
            card_fields=card_fields,
            card_attachments=card_attachments,
            card_attachment_fields=card_attachment_fields,
            card_checklists=card_checklists,
            card_stickers=card_stickers,
            board_stars=board_stars,
            labels=labels,
            label_fields=label_fields,
            labels_limit=labels_limit,
            lists=lists,
            list_fields=list_fields,
            memberships=memberships,
            memberships_member=memberships_member,
            memberships_member_fields=memberships_member_fields,
            members=members,
            member_fields=member_fields,
            members_invited=members_invited,
            members_invited_fields=members_invited_fields,
            checklists=checklists,
            checklist_fields=checklist_fields,
            organization=organization,
            organization_fields=organization_fields,
            organization_memberships=organization_memberships,
            my_prefs=my_prefs,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        actions,
        actions_entities,
        actions_display,
        actions_format,
        actions_since,
        actions_limit,
        action_fields,
        action_member,
        action_member_fields,
        action_member_creator,
        action_member_creator_fields,
        cards,
        card_fields,
        card_attachments,
        card_attachment_fields,
        card_checklists,
        card_stickers,
        board_stars,
        labels,
        label_fields,
        labels_limit,
        lists,
        list_fields,
        memberships,
        memberships_member,
        memberships_member_fields,
        members,
        member_fields,
        members_invited,
        members_invited_fields,
        checklists,
        checklist_fields,
        organization,
        organization_fields,
        organization_memberships,
        my_prefs,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if actions_entities is not None:
            
            _query_params.append(('actions_entities', actions_entities))
            
        if actions_display is not None:
            
            _query_params.append(('actions_display', actions_display))
            
        if actions_format is not None:
            
            _query_params.append(('actions_format', actions_format))
            
        if actions_since is not None:
            
            _query_params.append(('actions_since', actions_since))
            
        if actions_limit is not None:
            
            _query_params.append(('actions_limit', actions_limit))
            
        if action_fields is not None:
            
            _query_params.append(('action_fields', action_fields))
            
        if action_member is not None:
            
            _query_params.append(('action_member', action_member))
            
        if action_member_fields is not None:
            
            _query_params.append(('action_member_fields', action_member_fields))
            
        if action_member_creator is not None:
            
            _query_params.append(('action_memberCreator', action_member_creator))
            
        if action_member_creator_fields is not None:
            
            _query_params.append(('action_memberCreator_fields', action_member_creator_fields))
            
        if cards is not None:
            
            _query_params.append(('cards', cards))
            
        if card_fields is not None:
            
            _query_params.append(('card_fields', card_fields))
            
        if card_attachments is not None:
            
            _query_params.append(('card_attachments', card_attachments))
            
        if card_attachment_fields is not None:
            
            _query_params.append(('card_attachment_fields', card_attachment_fields))
            
        if card_checklists is not None:
            
            _query_params.append(('card_checklists', card_checklists))
            
        if card_stickers is not None:
            
            _query_params.append(('card_stickers', card_stickers))
            
        if board_stars is not None:
            
            _query_params.append(('boardStars', board_stars))
            
        if labels is not None:
            
            _query_params.append(('labels', labels))
            
        if label_fields is not None:
            
            _query_params.append(('label_fields', label_fields))
            
        if labels_limit is not None:
            
            _query_params.append(('labels_limit', labels_limit))
            
        if lists is not None:
            
            _query_params.append(('lists', lists))
            
        if list_fields is not None:
            
            _query_params.append(('list_fields', list_fields))
            
        if memberships is not None:
            
            _query_params.append(('memberships', memberships))
            
        if memberships_member is not None:
            
            _query_params.append(('memberships_member', memberships_member))
            
        if memberships_member_fields is not None:
            
            _query_params.append(('memberships_member_fields', memberships_member_fields))
            
        if members is not None:
            
            _query_params.append(('members', members))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if members_invited is not None:
            
            _query_params.append(('membersInvited', members_invited))
            
        if members_invited_fields is not None:
            
            _query_params.append(('membersInvited_fields', members_invited_fields))
            
        if checklists is not None:
            
            _query_params.append(('checklists', checklists))
            
        if checklist_fields is not None:
            
            _query_params.append(('checklist_fields', checklist_fields))
            
        if organization is not None:
            
            _query_params.append(('organization', organization))
            
        if organization_fields is not None:
            
            _query_params.append(('organization_fields', organization_fields))
            
        if organization_memberships is not None:
            
            _query_params.append(('organization_memberships', organization_memberships))
            
        if my_prefs is not None:
            
            _query_params.append(('myPrefs', my_prefs))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_by_id_board_by_field(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_by_id_board_by_field_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_by_id_board_by_field_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_by_id_board_by_field_serialize(
        self,
        id_board,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_cards_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsCardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_cards_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsCardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_cards_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsCardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_cards_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        actions,
        attachments,
        attachment_fields,
        stickers,
        members,
        member_fields,
        check_item_states,
        checklists,
        limit,
        since,
        before,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if attachments is not None:
            
            _query_params.append(('attachments', attachments))
            
        if attachment_fields is not None:
            
            _query_params.append(('attachment_fields', attachment_fields))
            
        if stickers is not None:
            
            _query_params.append(('stickers', stickers))
            
        if members is not None:
            
            _query_params.append(('members', members))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if check_item_states is not None:
            
            _query_params.append(('checkItemStates', check_item_states))
            
        if checklists is not None:
            
            _query_params.append(('checklists', checklists))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if since is not None:
            
            _query_params.append(('since', since))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/cards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_cards_by_id_board_by_filter(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsCardsByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_cards_by_id_board_by_filter_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsCardsByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_cards_by_id_board_by_filter_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsCardsByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_cards_by_id_board_by_filter_serialize(
        self,
        id_board,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/cards/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_cards_by_id_board_by_id_card(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_card: Annotated[StrictStr, Field(description="idCard")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        check_item_state_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idCheckItem or state")] = None,
        labels: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        checklist_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsCardsByIdBoardByIdCard()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_card: idCard (required)
        :type id_card: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_creator_fields: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param check_item_state_fields: all or a comma-separated list of: idCheckItem or state
        :type check_item_state_fields: str
        :param labels:  true or false
        :type labels: str
        :param checklists: One of: all or none
        :type checklists: str
        :param checklist_fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type checklist_fields: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_by_id_card_serialize(
            id_board=id_board,
            id_card=id_card,
            key=key,
            token=token,
            attachments=attachments,
            attachment_fields=attachment_fields,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_member_creator_fields=action_member_creator_fields,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            check_item_state_fields=check_item_state_fields,
            labels=labels,
            checklists=checklists,
            checklist_fields=checklist_fields,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_cards_by_id_board_by_id_card_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_card: Annotated[StrictStr, Field(description="idCard")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        check_item_state_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idCheckItem or state")] = None,
        labels: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        checklist_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsCardsByIdBoardByIdCard()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_card: idCard (required)
        :type id_card: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_creator_fields: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param check_item_state_fields: all or a comma-separated list of: idCheckItem or state
        :type check_item_state_fields: str
        :param labels:  true or false
        :type labels: str
        :param checklists: One of: all or none
        :type checklists: str
        :param checklist_fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type checklist_fields: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_by_id_card_serialize(
            id_board=id_board,
            id_card=id_card,
            key=key,
            token=token,
            attachments=attachments,
            attachment_fields=attachment_fields,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_member_creator_fields=action_member_creator_fields,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            check_item_state_fields=check_item_state_fields,
            labels=labels,
            checklists=checklists,
            checklist_fields=checklist_fields,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_cards_by_id_board_by_id_card_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_card: Annotated[StrictStr, Field(description="idCard")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        check_item_state_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idCheckItem or state")] = None,
        labels: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        checklist_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsCardsByIdBoardByIdCard()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_card: idCard (required)
        :type id_card: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type action_member_creator_fields: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param check_item_state_fields: all or a comma-separated list of: idCheckItem or state
        :type check_item_state_fields: str
        :param labels:  true or false
        :type labels: str
        :param checklists: One of: all or none
        :type checklists: str
        :param checklist_fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type checklist_fields: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_cards_by_id_board_by_id_card_serialize(
            id_board=id_board,
            id_card=id_card,
            key=key,
            token=token,
            attachments=attachments,
            attachment_fields=attachment_fields,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_member_creator_fields=action_member_creator_fields,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            check_item_state_fields=check_item_state_fields,
            labels=labels,
            checklists=checklists,
            checklist_fields=checklist_fields,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_cards_by_id_board_by_id_card_serialize(
        self,
        id_board,
        id_card,
        key,
        token,
        attachments,
        attachment_fields,
        actions,
        actions_entities,
        actions_display,
        actions_limit,
        action_fields,
        action_member_creator_fields,
        members,
        member_fields,
        check_item_states,
        check_item_state_fields,
        labels,
        checklists,
        checklist_fields,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if id_card is not None:
            _path_params['idCard'] = id_card
        # process the query parameters
        if attachments is not None:
            
            _query_params.append(('attachments', attachments))
            
        if attachment_fields is not None:
            
            _query_params.append(('attachment_fields', attachment_fields))
            
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if actions_entities is not None:
            
            _query_params.append(('actions_entities', actions_entities))
            
        if actions_display is not None:
            
            _query_params.append(('actions_display', actions_display))
            
        if actions_limit is not None:
            
            _query_params.append(('actions_limit', actions_limit))
            
        if action_fields is not None:
            
            _query_params.append(('action_fields', action_fields))
            
        if action_member_creator_fields is not None:
            
            _query_params.append(('action_memberCreator_fields', action_member_creator_fields))
            
        if members is not None:
            
            _query_params.append(('members', members))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if check_item_states is not None:
            
            _query_params.append(('checkItemStates', check_item_states))
            
        if check_item_state_fields is not None:
            
            _query_params.append(('checkItemState_fields', check_item_state_fields))
            
        if labels is not None:
            
            _query_params.append(('labels', labels))
            
        if checklists is not None:
            
            _query_params.append(('checklists', checklists))
            
        if checklist_fields is not None:
            
            _query_params.append(('checklist_fields', checklist_fields))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/cards/{idCard}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_checklists_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        check_items: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        check_item_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsChecklistsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param check_items: One of: all or none
        :type check_items: str
        :param check_item_fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type check_item_fields: str
        :param filter: One of: all or none
        :type filter: str
        :param fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_checklists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            check_items=check_items,
            check_item_fields=check_item_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_checklists_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        check_items: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        check_item_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsChecklistsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param check_items: One of: all or none
        :type check_items: str
        :param check_item_fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type check_item_fields: str
        :param filter: One of: all or none
        :type filter: str
        :param fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_checklists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            check_items=check_items,
            check_item_fields=check_item_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_checklists_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        check_items: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        check_item_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name, nameData, pos, state or type")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: idBoard, idCard, name or pos")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsChecklistsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param check_items: One of: all or none
        :type check_items: str
        :param check_item_fields: all or a comma-separated list of: name, nameData, pos, state or type
        :type check_item_fields: str
        :param filter: One of: all or none
        :type filter: str
        :param fields: all or a comma-separated list of: idBoard, idCard, name or pos
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_checklists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            check_items=check_items,
            check_item_fields=check_item_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_checklists_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        cards,
        card_fields,
        check_items,
        check_item_fields,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if cards is not None:
            
            _query_params.append(('cards', cards))
            
        if card_fields is not None:
            
            _query_params.append(('card_fields', card_fields))
            
        if check_items is not None:
            
            _query_params.append(('checkItems', check_items))
            
        if check_item_fields is not None:
            
            _query_params.append(('checkItem_fields', check_item_fields))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/checklists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_deltas_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        tags: Annotated[StrictStr, Field(description="A valid tag for subscribing")],
        ix_last_update: Annotated[StrictStr, Field(description="a number from -1 to Infinity")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsDeltasByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param tags: A valid tag for subscribing (required)
        :type tags: str
        :param ix_last_update: a number from -1 to Infinity (required)
        :type ix_last_update: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_deltas_by_id_board_serialize(
            id_board=id_board,
            tags=tags,
            ix_last_update=ix_last_update,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_deltas_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        tags: Annotated[StrictStr, Field(description="A valid tag for subscribing")],
        ix_last_update: Annotated[StrictStr, Field(description="a number from -1 to Infinity")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsDeltasByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param tags: A valid tag for subscribing (required)
        :type tags: str
        :param ix_last_update: a number from -1 to Infinity (required)
        :type ix_last_update: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_deltas_by_id_board_serialize(
            id_board=id_board,
            tags=tags,
            ix_last_update=ix_last_update,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_deltas_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        tags: Annotated[StrictStr, Field(description="A valid tag for subscribing")],
        ix_last_update: Annotated[StrictStr, Field(description="a number from -1 to Infinity")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsDeltasByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param tags: A valid tag for subscribing (required)
        :type tags: str
        :param ix_last_update: a number from -1 to Infinity (required)
        :type ix_last_update: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_deltas_by_id_board_serialize(
            id_board=id_board,
            tags=tags,
            ix_last_update=ix_last_update,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_deltas_by_id_board_serialize(
        self,
        id_board,
        tags,
        ix_last_update,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if ix_last_update is not None:
            
            _query_params.append(('ixLastUpdate', ix_last_update))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/deltas',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_labels_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsLabelsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: color, idBoard, name or uses
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_labels_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_labels_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsLabelsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: color, idBoard, name or uses
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_labels_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_labels_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsLabelsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: color, idBoard, name or uses
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_labels_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_labels_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        fields,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/labels',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_labels_by_id_board_by_id_label(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_label: Annotated[StrictStr, Field(description="idLabel")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsLabelsByIdBoardByIdLabel()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_label: idLabel (required)
        :type id_label: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: color, idBoard, name or uses
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_labels_by_id_board_by_id_label_serialize(
            id_board=id_board,
            id_label=id_label,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_labels_by_id_board_by_id_label_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_label: Annotated[StrictStr, Field(description="idLabel")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsLabelsByIdBoardByIdLabel()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_label: idLabel (required)
        :type id_label: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: color, idBoard, name or uses
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_labels_by_id_board_by_id_label_serialize(
            id_board=id_board,
            id_label=id_label,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_labels_by_id_board_by_id_label_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_label: Annotated[StrictStr, Field(description="idLabel")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: color, idBoard, name or uses")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsLabelsByIdBoardByIdLabel()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_label: idLabel (required)
        :type id_label: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: color, idBoard, name or uses
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_labels_by_id_board_by_id_label_serialize(
            id_board=id_board,
            id_label=id_label,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_labels_by_id_board_by_id_label_serialize(
        self,
        id_board,
        id_label,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if id_label is not None:
            _path_params['idLabel'] = id_label
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/labels/{idLabel}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_lists_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsListsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param filter: One of: all, closed, none or open
        :type filter: str
        :param fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_lists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_lists_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsListsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param filter: One of: all, closed, none or open
        :type filter: str
        :param fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_lists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_lists_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsListsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param filter: One of: all, closed, none or open
        :type filter: str
        :param fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_lists_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            cards=cards,
            card_fields=card_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_lists_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        cards,
        card_fields,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if cards is not None:
            
            _query_params.append(('cards', cards))
            
        if card_fields is not None:
            
            _query_params.append(('card_fields', card_fields))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/lists',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_lists_by_id_board_by_filter(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsListsByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_lists_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_lists_by_id_board_by_filter_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsListsByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_lists_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_lists_by_id_board_by_filter_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsListsByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_lists_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_lists_by_id_board_by_filter_serialize(
        self,
        id_board,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/lists/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_members_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        activity: Annotated[Optional[StrictStr], Field(description="true or false ; works for premium organizations only.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: admins, all, none, normal or owners
        :type filter: str
        :param fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type fields: str
        :param activity: true or false ; works for premium organizations only.
        :type activity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            activity=activity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_members_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        activity: Annotated[Optional[StrictStr], Field(description="true or false ; works for premium organizations only.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: admins, all, none, normal or owners
        :type filter: str
        :param fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type fields: str
        :param activity: true or false ; works for premium organizations only.
        :type activity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            activity=activity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_members_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: admins, all, none, normal or owners")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        activity: Annotated[Optional[StrictStr], Field(description="true or false ; works for premium organizations only.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: admins, all, none, normal or owners
        :type filter: str
        :param fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type fields: str
        :param activity: true or false ; works for premium organizations only.
        :type activity: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            activity=activity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_members_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        filter,
        fields,
        activity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if activity is not None:
            
            _query_params.append(('activity', activity))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/members',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_members_by_id_board_by_filter(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMembersByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_members_by_id_board_by_filter_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMembersByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_members_by_id_board_by_filter_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMembersByIdBoardByFilter()


        :param id_board: board_id (required)
        :type id_board: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_by_id_board_by_filter_serialize(
            id_board=id_board,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_members_by_id_board_by_filter_serialize(
        self,
        id_board,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/members/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_members_cards_by_id_board_by_id_member(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        board: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        list: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        list_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMembersCardsByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param board:  true or false
        :type board: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param list:  true or false
        :type list: str
        :param list_fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type list_fields: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_cards_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            board=board,
            board_fields=board_fields,
            list=list,
            list_fields=list_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_members_cards_by_id_board_by_id_member_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        board: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        list: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        list_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMembersCardsByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param board:  true or false
        :type board: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param list:  true or false
        :type list: str
        :param list_fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type list_fields: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_cards_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            board=board,
            board_fields=board_fields,
            list=list,
            list_fields=list_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_members_cards_by_id_board_by_id_member_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        board: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        list: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        list_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, idBoard, name, pos or subscribed")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMembersCardsByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param board:  true or false
        :type board: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param list:  true or false
        :type list: str
        :param list_fields: all or a comma-separated list of: closed, idBoard, name, pos or subscribed
        :type list_fields: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_cards_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            board=board,
            board_fields=board_fields,
            list=list,
            list_fields=list_fields,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_members_cards_by_id_board_by_id_member_serialize(
        self,
        id_board,
        id_member,
        key,
        token,
        actions,
        attachments,
        attachment_fields,
        members,
        member_fields,
        check_item_states,
        checklists,
        board,
        board_fields,
        list,
        list_fields,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if attachments is not None:
            
            _query_params.append(('attachments', attachments))
            
        if attachment_fields is not None:
            
            _query_params.append(('attachment_fields', attachment_fields))
            
        if members is not None:
            
            _query_params.append(('members', members))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if check_item_states is not None:
            
            _query_params.append(('checkItemStates', check_item_states))
            
        if checklists is not None:
            
            _query_params.append(('checklists', checklists))
            
        if board is not None:
            
            _query_params.append(('board', board))
            
        if board_fields is not None:
            
            _query_params.append(('board_fields', board_fields))
            
        if list is not None:
            
            _query_params.append(('list', list))
            
        if list_fields is not None:
            
            _query_params.append(('list_fields', list_fields))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/members/{idMember}/cards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_members_invited_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMembersInvitedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_invited_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_members_invited_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMembersInvitedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_invited_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_members_invited_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMembersInvitedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_invited_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_members_invited_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/membersInvited',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_members_invited_by_id_board_by_field(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMembersInvitedByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_invited_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_members_invited_by_id_board_by_field_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMembersInvitedByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_invited_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_members_invited_by_id_board_by_field_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMembersInvitedByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_members_invited_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_members_invited_by_id_board_by_field_serialize(
        self,
        id_board,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/membersInvited/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_memberships_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMembershipsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type filter: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_memberships_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            member=member,
            member_fields=member_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_memberships_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMembershipsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type filter: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_memberships_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            member=member,
            member_fields=member_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_memberships_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMembershipsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type filter: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_memberships_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            filter=filter,
            member=member,
            member_fields=member_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_memberships_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        filter,
        member,
        member_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if member is not None:
            
            _query_params.append(('member', member))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/memberships',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_memberships_by_id_board_by_id_membership(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_membership: Annotated[StrictStr, Field(description="idMembership")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMembershipsByIdBoardByIdMembership()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_membership: idMembership (required)
        :type id_membership: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_memberships_by_id_board_by_id_membership_serialize(
            id_board=id_board,
            id_membership=id_membership,
            key=key,
            token=token,
            member=member,
            member_fields=member_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_memberships_by_id_board_by_id_membership_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_membership: Annotated[StrictStr, Field(description="idMembership")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMembershipsByIdBoardByIdMembership()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_membership: idMembership (required)
        :type id_membership: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_memberships_by_id_board_by_id_membership_serialize(
            id_board=id_board,
            id_membership=id_membership,
            key=key,
            token=token,
            member=member,
            member_fields=member_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_memberships_by_id_board_by_id_membership_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_membership: Annotated[StrictStr, Field(description="idMembership")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMembershipsByIdBoardByIdMembership()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_membership: idMembership (required)
        :type id_membership: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_memberships_by_id_board_by_id_membership_serialize(
            id_board=id_board,
            id_membership=id_membership,
            key=key,
            token=token,
            member=member,
            member_fields=member_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_memberships_by_id_board_by_id_membership_serialize(
        self,
        id_board,
        id_membership,
        key,
        token,
        member,
        member_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if id_membership is not None:
            _path_params['idMembership'] = id_membership
        # process the query parameters
        if member is not None:
            
            _query_params.append(('member', member))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/memberships/{idMembership}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_my_prefs_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsMyPrefsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_my_prefs_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_my_prefs_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsMyPrefsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_my_prefs_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_my_prefs_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsMyPrefsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_my_prefs_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_my_prefs_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/myPrefs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_organization_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsOrganizationByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_organization_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_organization_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsOrganizationByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_organization_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_organization_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsOrganizationByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_organization_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_organization_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/organization',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_boards_organization_by_id_board_by_field(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getBoardsOrganizationByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_organization_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_boards_organization_by_id_board_by_field_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getBoardsOrganizationByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_organization_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_boards_organization_by_id_board_by_field_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getBoardsOrganizationByIdBoardByField()


        :param id_board: board_id (required)
        :type id_board: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_boards_organization_by_id_board_by_field_serialize(
            id_board=id_board,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_boards_organization_by_id_board_by_field_serialize(
        self,
        id_board,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/boards/{idBoard}/organization/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards: Annotated[Boards, Field(description="Attributes of \"Boards\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards: Attributes of \"Boards\" to be updated. (required)
        :type boards: Boards
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards=boards,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards: Annotated[Boards, Field(description="Attributes of \"Boards\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards: Attributes of \"Boards\" to be updated. (required)
        :type boards: Boards
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards=boards,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards: Annotated[Boards, Field(description="Attributes of \"Boards\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards: Attributes of \"Boards\" to be updated. (required)
        :type boards: Boards
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards=boards,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards is not None:
            _body_params = boards



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_closed_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_closed: Annotated[BoardsClosed, Field(description="Attributes of \"Boards Closed\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsClosedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_closed: Attributes of \"Boards Closed\" to be updated. (required)
        :type boards_closed: BoardsClosed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_closed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_closed=boards_closed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_closed_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_closed: Annotated[BoardsClosed, Field(description="Attributes of \"Boards Closed\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsClosedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_closed: Attributes of \"Boards Closed\" to be updated. (required)
        :type boards_closed: BoardsClosed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_closed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_closed=boards_closed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_closed_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_closed: Annotated[BoardsClosed, Field(description="Attributes of \"Boards Closed\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsClosedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_closed: Attributes of \"Boards Closed\" to be updated. (required)
        :type boards_closed: BoardsClosed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_closed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_closed=boards_closed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_closed_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_closed,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_closed is not None:
            _body_params = boards_closed



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/closed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_desc_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_desc: Annotated[BoardsDesc, Field(description="Attributes of \"Boards Desc\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsDescByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_desc: Attributes of \"Boards Desc\" to be updated. (required)
        :type boards_desc: BoardsDesc
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_desc_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_desc=boards_desc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_desc_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_desc: Annotated[BoardsDesc, Field(description="Attributes of \"Boards Desc\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsDescByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_desc: Attributes of \"Boards Desc\" to be updated. (required)
        :type boards_desc: BoardsDesc
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_desc_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_desc=boards_desc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_desc_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_desc: Annotated[BoardsDesc, Field(description="Attributes of \"Boards Desc\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsDescByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_desc: Attributes of \"Boards Desc\" to be updated. (required)
        :type boards_desc: BoardsDesc
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_desc_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_desc=boards_desc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_desc_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_desc,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_desc is not None:
            _body_params = boards_desc



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/desc',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_id_organization_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_id_organization: Annotated[BoardsIdOrganization, Field(description="Attributes of \"Boards Id Organization\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsIdOrganizationByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_id_organization: Attributes of \"Boards Id Organization\" to be updated. (required)
        :type boards_id_organization: BoardsIdOrganization
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_id_organization_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_id_organization=boards_id_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_id_organization_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_id_organization: Annotated[BoardsIdOrganization, Field(description="Attributes of \"Boards Id Organization\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsIdOrganizationByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_id_organization: Attributes of \"Boards Id Organization\" to be updated. (required)
        :type boards_id_organization: BoardsIdOrganization
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_id_organization_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_id_organization=boards_id_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_id_organization_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_id_organization: Annotated[BoardsIdOrganization, Field(description="Attributes of \"Boards Id Organization\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsIdOrganizationByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_id_organization: Attributes of \"Boards Id Organization\" to be updated. (required)
        :type boards_id_organization: BoardsIdOrganization
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_id_organization_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_id_organization=boards_id_organization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_id_organization_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_id_organization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_id_organization is not None:
            _body_params = boards_id_organization



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/idOrganization',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_label_names_blue_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_blue: Annotated[LabelNamesBlue, Field(description="Attributes of \"Label Names Blue\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsLabelNamesBlueByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_blue: Attributes of \"Label Names Blue\" to be updated. (required)
        :type label_names_blue: LabelNamesBlue
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_blue_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_blue=label_names_blue,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_label_names_blue_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_blue: Annotated[LabelNamesBlue, Field(description="Attributes of \"Label Names Blue\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsLabelNamesBlueByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_blue: Attributes of \"Label Names Blue\" to be updated. (required)
        :type label_names_blue: LabelNamesBlue
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_blue_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_blue=label_names_blue,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_label_names_blue_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_blue: Annotated[LabelNamesBlue, Field(description="Attributes of \"Label Names Blue\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsLabelNamesBlueByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_blue: Attributes of \"Label Names Blue\" to be updated. (required)
        :type label_names_blue: LabelNamesBlue
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_blue_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_blue=label_names_blue,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_label_names_blue_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        label_names_blue,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if label_names_blue is not None:
            _body_params = label_names_blue



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/labelNames/blue',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_label_names_green_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_green: Annotated[LabelNamesGreen, Field(description="Attributes of \"Label Names Green\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsLabelNamesGreenByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_green: Attributes of \"Label Names Green\" to be updated. (required)
        :type label_names_green: LabelNamesGreen
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_green_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_green=label_names_green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_label_names_green_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_green: Annotated[LabelNamesGreen, Field(description="Attributes of \"Label Names Green\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsLabelNamesGreenByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_green: Attributes of \"Label Names Green\" to be updated. (required)
        :type label_names_green: LabelNamesGreen
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_green_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_green=label_names_green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_label_names_green_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_green: Annotated[LabelNamesGreen, Field(description="Attributes of \"Label Names Green\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsLabelNamesGreenByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_green: Attributes of \"Label Names Green\" to be updated. (required)
        :type label_names_green: LabelNamesGreen
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_green_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_green=label_names_green,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_label_names_green_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        label_names_green,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if label_names_green is not None:
            _body_params = label_names_green



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/labelNames/green',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_label_names_orange_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_orange: Annotated[LabelNamesOrange, Field(description="Attributes of \"Label Names Orange\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsLabelNamesOrangeByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_orange: Attributes of \"Label Names Orange\" to be updated. (required)
        :type label_names_orange: LabelNamesOrange
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_orange_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_orange=label_names_orange,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_label_names_orange_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_orange: Annotated[LabelNamesOrange, Field(description="Attributes of \"Label Names Orange\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsLabelNamesOrangeByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_orange: Attributes of \"Label Names Orange\" to be updated. (required)
        :type label_names_orange: LabelNamesOrange
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_orange_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_orange=label_names_orange,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_label_names_orange_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_orange: Annotated[LabelNamesOrange, Field(description="Attributes of \"Label Names Orange\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsLabelNamesOrangeByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_orange: Attributes of \"Label Names Orange\" to be updated. (required)
        :type label_names_orange: LabelNamesOrange
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_orange_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_orange=label_names_orange,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_label_names_orange_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        label_names_orange,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if label_names_orange is not None:
            _body_params = label_names_orange



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/labelNames/orange',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_label_names_purple_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_purple: Annotated[LabelNamesPurple, Field(description="Attributes of \"Label Names Purple\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsLabelNamesPurpleByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_purple: Attributes of \"Label Names Purple\" to be updated. (required)
        :type label_names_purple: LabelNamesPurple
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_purple_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_purple=label_names_purple,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_label_names_purple_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_purple: Annotated[LabelNamesPurple, Field(description="Attributes of \"Label Names Purple\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsLabelNamesPurpleByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_purple: Attributes of \"Label Names Purple\" to be updated. (required)
        :type label_names_purple: LabelNamesPurple
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_purple_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_purple=label_names_purple,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_label_names_purple_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_purple: Annotated[LabelNamesPurple, Field(description="Attributes of \"Label Names Purple\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsLabelNamesPurpleByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_purple: Attributes of \"Label Names Purple\" to be updated. (required)
        :type label_names_purple: LabelNamesPurple
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_purple_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_purple=label_names_purple,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_label_names_purple_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        label_names_purple,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if label_names_purple is not None:
            _body_params = label_names_purple



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/labelNames/purple',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_label_names_red_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_red: Annotated[LabelNamesRed, Field(description="Attributes of \"Label Names Red\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsLabelNamesRedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_red: Attributes of \"Label Names Red\" to be updated. (required)
        :type label_names_red: LabelNamesRed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_red_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_red=label_names_red,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_label_names_red_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_red: Annotated[LabelNamesRed, Field(description="Attributes of \"Label Names Red\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsLabelNamesRedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_red: Attributes of \"Label Names Red\" to be updated. (required)
        :type label_names_red: LabelNamesRed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_red_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_red=label_names_red,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_label_names_red_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_red: Annotated[LabelNamesRed, Field(description="Attributes of \"Label Names Red\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsLabelNamesRedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_red: Attributes of \"Label Names Red\" to be updated. (required)
        :type label_names_red: LabelNamesRed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_red_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_red=label_names_red,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_label_names_red_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        label_names_red,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if label_names_red is not None:
            _body_params = label_names_red



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/labelNames/red',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_label_names_yellow_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_yellow: Annotated[LabelNamesYellow, Field(description="Attributes of \"Label Names Yellow\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsLabelNamesYellowByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_yellow: Attributes of \"Label Names Yellow\" to be updated. (required)
        :type label_names_yellow: LabelNamesYellow
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_yellow_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_yellow=label_names_yellow,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_label_names_yellow_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_yellow: Annotated[LabelNamesYellow, Field(description="Attributes of \"Label Names Yellow\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsLabelNamesYellowByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_yellow: Attributes of \"Label Names Yellow\" to be updated. (required)
        :type label_names_yellow: LabelNamesYellow
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_yellow_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_yellow=label_names_yellow,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_label_names_yellow_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        label_names_yellow: Annotated[LabelNamesYellow, Field(description="Attributes of \"Label Names Yellow\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsLabelNamesYellowByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param label_names_yellow: Attributes of \"Label Names Yellow\" to be updated. (required)
        :type label_names_yellow: LabelNamesYellow
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_label_names_yellow_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            label_names_yellow=label_names_yellow,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_label_names_yellow_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        label_names_yellow,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if label_names_yellow is not None:
            _body_params = label_names_yellow



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/labelNames/yellow',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_members_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_members: Annotated[BoardsMembers, Field(description="Attributes of \"Boards Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_members: Attributes of \"Boards Members\" to be updated. (required)
        :type boards_members: BoardsMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_members=boards_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_members_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_members: Annotated[BoardsMembers, Field(description="Attributes of \"Boards Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_members: Attributes of \"Boards Members\" to be updated. (required)
        :type boards_members: BoardsMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_members=boards_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_members_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_members: Annotated[BoardsMembers, Field(description="Attributes of \"Boards Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_members: Attributes of \"Boards Members\" to be updated. (required)
        :type boards_members: BoardsMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_members=boards_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_members_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_members,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_members is not None:
            _body_params = boards_members



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/members',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_members_by_id_board_by_id_member(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_members: Annotated[BoardsMembers, Field(description="Attributes of \"Boards Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMembersByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_members: Attributes of \"Boards Members\" to be updated. (required)
        :type boards_members: BoardsMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_members_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            boards_members=boards_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_members_by_id_board_by_id_member_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_members: Annotated[BoardsMembers, Field(description="Attributes of \"Boards Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMembersByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_members: Attributes of \"Boards Members\" to be updated. (required)
        :type boards_members: BoardsMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_members_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            boards_members=boards_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_members_by_id_board_by_id_member_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_member: Annotated[StrictStr, Field(description="idMember")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_members: Annotated[BoardsMembers, Field(description="Attributes of \"Boards Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMembersByIdBoardByIdMember()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_member: idMember (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_members: Attributes of \"Boards Members\" to be updated. (required)
        :type boards_members: BoardsMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_members_by_id_board_by_id_member_serialize(
            id_board=id_board,
            id_member=id_member,
            key=key,
            token=token,
            boards_members=boards_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_members_by_id_board_by_id_member_serialize(
        self,
        id_board,
        id_member,
        key,
        token,
        boards_members,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_members is not None:
            _body_params = boards_members



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/members/{idMember}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_memberships_by_id_board_by_id_membership(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_membership: Annotated[StrictStr, Field(description="idMembership")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_memberships: Annotated[BoardsMemberships, Field(description="Attributes of \"Boards Memberships\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMembershipsByIdBoardByIdMembership()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_membership: idMembership (required)
        :type id_membership: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_memberships: Attributes of \"Boards Memberships\" to be updated. (required)
        :type boards_memberships: BoardsMemberships
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_memberships_by_id_board_by_id_membership_serialize(
            id_board=id_board,
            id_membership=id_membership,
            key=key,
            token=token,
            boards_memberships=boards_memberships,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_memberships_by_id_board_by_id_membership_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_membership: Annotated[StrictStr, Field(description="idMembership")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_memberships: Annotated[BoardsMemberships, Field(description="Attributes of \"Boards Memberships\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMembershipsByIdBoardByIdMembership()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_membership: idMembership (required)
        :type id_membership: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_memberships: Attributes of \"Boards Memberships\" to be updated. (required)
        :type boards_memberships: BoardsMemberships
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_memberships_by_id_board_by_id_membership_serialize(
            id_board=id_board,
            id_membership=id_membership,
            key=key,
            token=token,
            boards_memberships=boards_memberships,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_memberships_by_id_board_by_id_membership_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        id_membership: Annotated[StrictStr, Field(description="idMembership")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_memberships: Annotated[BoardsMemberships, Field(description="Attributes of \"Boards Memberships\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMembershipsByIdBoardByIdMembership()


        :param id_board: board_id (required)
        :type id_board: str
        :param id_membership: idMembership (required)
        :type id_membership: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_memberships: Attributes of \"Boards Memberships\" to be updated. (required)
        :type boards_memberships: BoardsMemberships
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_memberships_by_id_board_by_id_membership_serialize(
            id_board=id_board,
            id_membership=id_membership,
            key=key,
            token=token,
            boards_memberships=boards_memberships,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_memberships_by_id_board_by_id_membership_serialize(
        self,
        id_board,
        id_membership,
        key,
        token,
        boards_memberships,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        if id_membership is not None:
            _path_params['idMembership'] = id_membership
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_memberships is not None:
            _body_params = boards_memberships



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/memberships/{idMembership}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_my_prefs_email_position_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_email_position: Annotated[MyPrefsEmailPosition, Field(description="Attributes of \"My Prefs Email Position\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMyPrefsEmailPositionByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_email_position: Attributes of \"My Prefs Email Position\" to be updated. (required)
        :type my_prefs_email_position: MyPrefsEmailPosition
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_email_position_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_email_position=my_prefs_email_position,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_my_prefs_email_position_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_email_position: Annotated[MyPrefsEmailPosition, Field(description="Attributes of \"My Prefs Email Position\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMyPrefsEmailPositionByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_email_position: Attributes of \"My Prefs Email Position\" to be updated. (required)
        :type my_prefs_email_position: MyPrefsEmailPosition
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_email_position_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_email_position=my_prefs_email_position,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_my_prefs_email_position_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_email_position: Annotated[MyPrefsEmailPosition, Field(description="Attributes of \"My Prefs Email Position\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMyPrefsEmailPositionByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_email_position: Attributes of \"My Prefs Email Position\" to be updated. (required)
        :type my_prefs_email_position: MyPrefsEmailPosition
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_email_position_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_email_position=my_prefs_email_position,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_my_prefs_email_position_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        my_prefs_email_position,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if my_prefs_email_position is not None:
            _body_params = my_prefs_email_position



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/myPrefs/emailPosition',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_my_prefs_id_email_list_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_id_email_list: Annotated[MyPrefsIdEmailList, Field(description="Attributes of \"My Prefs Id Email List\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMyPrefsIdEmailListByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_id_email_list: Attributes of \"My Prefs Id Email List\" to be updated. (required)
        :type my_prefs_id_email_list: MyPrefsIdEmailList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_id_email_list_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_id_email_list=my_prefs_id_email_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_my_prefs_id_email_list_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_id_email_list: Annotated[MyPrefsIdEmailList, Field(description="Attributes of \"My Prefs Id Email List\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMyPrefsIdEmailListByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_id_email_list: Attributes of \"My Prefs Id Email List\" to be updated. (required)
        :type my_prefs_id_email_list: MyPrefsIdEmailList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_id_email_list_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_id_email_list=my_prefs_id_email_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_my_prefs_id_email_list_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_id_email_list: Annotated[MyPrefsIdEmailList, Field(description="Attributes of \"My Prefs Id Email List\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMyPrefsIdEmailListByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_id_email_list: Attributes of \"My Prefs Id Email List\" to be updated. (required)
        :type my_prefs_id_email_list: MyPrefsIdEmailList
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_id_email_list_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_id_email_list=my_prefs_id_email_list,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_my_prefs_id_email_list_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        my_prefs_id_email_list,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if my_prefs_id_email_list is not None:
            _body_params = my_prefs_id_email_list



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/myPrefs/idEmailList',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_my_prefs_show_list_guide_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_list_guide: Annotated[MyPrefsShowListGuide, Field(description="Attributes of \"My Prefs Show List Guide\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMyPrefsShowListGuideByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_list_guide: Attributes of \"My Prefs Show List Guide\" to be updated. (required)
        :type my_prefs_show_list_guide: MyPrefsShowListGuide
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_list_guide_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_list_guide=my_prefs_show_list_guide,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_my_prefs_show_list_guide_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_list_guide: Annotated[MyPrefsShowListGuide, Field(description="Attributes of \"My Prefs Show List Guide\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMyPrefsShowListGuideByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_list_guide: Attributes of \"My Prefs Show List Guide\" to be updated. (required)
        :type my_prefs_show_list_guide: MyPrefsShowListGuide
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_list_guide_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_list_guide=my_prefs_show_list_guide,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_my_prefs_show_list_guide_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_list_guide: Annotated[MyPrefsShowListGuide, Field(description="Attributes of \"My Prefs Show List Guide\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMyPrefsShowListGuideByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_list_guide: Attributes of \"My Prefs Show List Guide\" to be updated. (required)
        :type my_prefs_show_list_guide: MyPrefsShowListGuide
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_list_guide_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_list_guide=my_prefs_show_list_guide,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_my_prefs_show_list_guide_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        my_prefs_show_list_guide,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if my_prefs_show_list_guide is not None:
            _body_params = my_prefs_show_list_guide



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/myPrefs/showListGuide',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_my_prefs_show_sidebar_activity_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_activity: Annotated[MyPrefsShowSidebarActivity, Field(description="Attributes of \"My Prefs Show Sidebar Activity\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMyPrefsShowSidebarActivityByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_activity: Attributes of \"My Prefs Show Sidebar Activity\" to be updated. (required)
        :type my_prefs_show_sidebar_activity: MyPrefsShowSidebarActivity
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_activity_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_activity=my_prefs_show_sidebar_activity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_my_prefs_show_sidebar_activity_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_activity: Annotated[MyPrefsShowSidebarActivity, Field(description="Attributes of \"My Prefs Show Sidebar Activity\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMyPrefsShowSidebarActivityByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_activity: Attributes of \"My Prefs Show Sidebar Activity\" to be updated. (required)
        :type my_prefs_show_sidebar_activity: MyPrefsShowSidebarActivity
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_activity_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_activity=my_prefs_show_sidebar_activity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_my_prefs_show_sidebar_activity_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_activity: Annotated[MyPrefsShowSidebarActivity, Field(description="Attributes of \"My Prefs Show Sidebar Activity\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMyPrefsShowSidebarActivityByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_activity: Attributes of \"My Prefs Show Sidebar Activity\" to be updated. (required)
        :type my_prefs_show_sidebar_activity: MyPrefsShowSidebarActivity
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_activity_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_activity=my_prefs_show_sidebar_activity,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_my_prefs_show_sidebar_activity_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        my_prefs_show_sidebar_activity,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if my_prefs_show_sidebar_activity is not None:
            _body_params = my_prefs_show_sidebar_activity



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/myPrefs/showSidebarActivity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_my_prefs_show_sidebar_board_actions_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_board_actions: Annotated[MyPrefsShowSidebarBoardActions, Field(description="Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_board_actions: Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated. (required)
        :type my_prefs_show_sidebar_board_actions: MyPrefsShowSidebarBoardActions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_board_actions_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_board_actions=my_prefs_show_sidebar_board_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_my_prefs_show_sidebar_board_actions_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_board_actions: Annotated[MyPrefsShowSidebarBoardActions, Field(description="Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_board_actions: Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated. (required)
        :type my_prefs_show_sidebar_board_actions: MyPrefsShowSidebarBoardActions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_board_actions_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_board_actions=my_prefs_show_sidebar_board_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_my_prefs_show_sidebar_board_actions_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_board_actions: Annotated[MyPrefsShowSidebarBoardActions, Field(description="Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_board_actions: Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated. (required)
        :type my_prefs_show_sidebar_board_actions: MyPrefsShowSidebarBoardActions
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_board_actions_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_board_actions=my_prefs_show_sidebar_board_actions,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_my_prefs_show_sidebar_board_actions_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        my_prefs_show_sidebar_board_actions,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if my_prefs_show_sidebar_board_actions is not None:
            _body_params = my_prefs_show_sidebar_board_actions



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/myPrefs/showSidebarBoardActions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_my_prefs_show_sidebar_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar: Annotated[MyPrefsShowSidebar, Field(description="Attributes of \"My Prefs Show Sidebar\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMyPrefsShowSidebarByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar: Attributes of \"My Prefs Show Sidebar\" to be updated. (required)
        :type my_prefs_show_sidebar: MyPrefsShowSidebar
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar=my_prefs_show_sidebar,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_my_prefs_show_sidebar_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar: Annotated[MyPrefsShowSidebar, Field(description="Attributes of \"My Prefs Show Sidebar\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMyPrefsShowSidebarByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar: Attributes of \"My Prefs Show Sidebar\" to be updated. (required)
        :type my_prefs_show_sidebar: MyPrefsShowSidebar
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar=my_prefs_show_sidebar,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_my_prefs_show_sidebar_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar: Annotated[MyPrefsShowSidebar, Field(description="Attributes of \"My Prefs Show Sidebar\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMyPrefsShowSidebarByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar: Attributes of \"My Prefs Show Sidebar\" to be updated. (required)
        :type my_prefs_show_sidebar: MyPrefsShowSidebar
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar=my_prefs_show_sidebar,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_my_prefs_show_sidebar_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        my_prefs_show_sidebar,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if my_prefs_show_sidebar is not None:
            _body_params = my_prefs_show_sidebar



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/myPrefs/showSidebar',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_my_prefs_show_sidebar_members_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_members: Annotated[MyPrefsShowSidebarMembers, Field(description="Attributes of \"My Prefs Show Sidebar Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsMyPrefsShowSidebarMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_members: Attributes of \"My Prefs Show Sidebar Members\" to be updated. (required)
        :type my_prefs_show_sidebar_members: MyPrefsShowSidebarMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_members=my_prefs_show_sidebar_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_my_prefs_show_sidebar_members_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_members: Annotated[MyPrefsShowSidebarMembers, Field(description="Attributes of \"My Prefs Show Sidebar Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsMyPrefsShowSidebarMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_members: Attributes of \"My Prefs Show Sidebar Members\" to be updated. (required)
        :type my_prefs_show_sidebar_members: MyPrefsShowSidebarMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_members=my_prefs_show_sidebar_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_my_prefs_show_sidebar_members_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        my_prefs_show_sidebar_members: Annotated[MyPrefsShowSidebarMembers, Field(description="Attributes of \"My Prefs Show Sidebar Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsMyPrefsShowSidebarMembersByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param my_prefs_show_sidebar_members: Attributes of \"My Prefs Show Sidebar Members\" to be updated. (required)
        :type my_prefs_show_sidebar_members: MyPrefsShowSidebarMembers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_my_prefs_show_sidebar_members_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            my_prefs_show_sidebar_members=my_prefs_show_sidebar_members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_my_prefs_show_sidebar_members_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        my_prefs_show_sidebar_members,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if my_prefs_show_sidebar_members is not None:
            _body_params = my_prefs_show_sidebar_members



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/myPrefs/showSidebarMembers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_name_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_name: Annotated[BoardsName, Field(description="Attributes of \"Boards Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsNameByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_name: Attributes of \"Boards Name\" to be updated. (required)
        :type boards_name: BoardsName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_name_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_name=boards_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_name_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_name: Annotated[BoardsName, Field(description="Attributes of \"Boards Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsNameByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_name: Attributes of \"Boards Name\" to be updated. (required)
        :type boards_name: BoardsName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_name_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_name=boards_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_name_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_name: Annotated[BoardsName, Field(description="Attributes of \"Boards Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsNameByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_name: Attributes of \"Boards Name\" to be updated. (required)
        :type boards_name: BoardsName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_name_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_name=boards_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_name_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_name is not None:
            _body_params = boards_name



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/name',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_background_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_background: Annotated[PrefsBackground, Field(description="Attributes of \"Prefs Background\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsBackgroundByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_background: Attributes of \"Prefs Background\" to be updated. (required)
        :type prefs_background: PrefsBackground
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_background_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_background=prefs_background,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_background_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_background: Annotated[PrefsBackground, Field(description="Attributes of \"Prefs Background\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsBackgroundByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_background: Attributes of \"Prefs Background\" to be updated. (required)
        :type prefs_background: PrefsBackground
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_background_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_background=prefs_background,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_background_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_background: Annotated[PrefsBackground, Field(description="Attributes of \"Prefs Background\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsBackgroundByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_background: Attributes of \"Prefs Background\" to be updated. (required)
        :type prefs_background: PrefsBackground
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_background_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_background=prefs_background,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_background_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_background,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_background is not None:
            _body_params = prefs_background



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/background',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_calendar_feed_enabled_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_calendar_feed_enabled: Annotated[PrefsCalendarFeedEnabled, Field(description="Attributes of \"Prefs Calendar Feed Enabled\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsCalendarFeedEnabledByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_calendar_feed_enabled: Attributes of \"Prefs Calendar Feed Enabled\" to be updated. (required)
        :type prefs_calendar_feed_enabled: PrefsCalendarFeedEnabled
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_calendar_feed_enabled_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_calendar_feed_enabled=prefs_calendar_feed_enabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_calendar_feed_enabled_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_calendar_feed_enabled: Annotated[PrefsCalendarFeedEnabled, Field(description="Attributes of \"Prefs Calendar Feed Enabled\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsCalendarFeedEnabledByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_calendar_feed_enabled: Attributes of \"Prefs Calendar Feed Enabled\" to be updated. (required)
        :type prefs_calendar_feed_enabled: PrefsCalendarFeedEnabled
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_calendar_feed_enabled_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_calendar_feed_enabled=prefs_calendar_feed_enabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_calendar_feed_enabled_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_calendar_feed_enabled: Annotated[PrefsCalendarFeedEnabled, Field(description="Attributes of \"Prefs Calendar Feed Enabled\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsCalendarFeedEnabledByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_calendar_feed_enabled: Attributes of \"Prefs Calendar Feed Enabled\" to be updated. (required)
        :type prefs_calendar_feed_enabled: PrefsCalendarFeedEnabled
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_calendar_feed_enabled_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_calendar_feed_enabled=prefs_calendar_feed_enabled,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_calendar_feed_enabled_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_calendar_feed_enabled,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_calendar_feed_enabled is not None:
            _body_params = prefs_calendar_feed_enabled



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/calendarFeedEnabled',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_card_aging_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_card_aging: Annotated[PrefsCardAging, Field(description="Attributes of \"Prefs Card Aging\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsCardAgingByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_card_aging: Attributes of \"Prefs Card Aging\" to be updated. (required)
        :type prefs_card_aging: PrefsCardAging
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_card_aging_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_card_aging=prefs_card_aging,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_card_aging_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_card_aging: Annotated[PrefsCardAging, Field(description="Attributes of \"Prefs Card Aging\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsCardAgingByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_card_aging: Attributes of \"Prefs Card Aging\" to be updated. (required)
        :type prefs_card_aging: PrefsCardAging
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_card_aging_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_card_aging=prefs_card_aging,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_card_aging_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_card_aging: Annotated[PrefsCardAging, Field(description="Attributes of \"Prefs Card Aging\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsCardAgingByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_card_aging: Attributes of \"Prefs Card Aging\" to be updated. (required)
        :type prefs_card_aging: PrefsCardAging
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_card_aging_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_card_aging=prefs_card_aging,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_card_aging_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_card_aging,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_card_aging is not None:
            _body_params = prefs_card_aging



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/cardAging',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_card_covers_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_card_covers: Annotated[PrefsCardCovers, Field(description="Attributes of \"Prefs Card Covers\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsCardCoversByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_card_covers: Attributes of \"Prefs Card Covers\" to be updated. (required)
        :type prefs_card_covers: PrefsCardCovers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_card_covers_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_card_covers=prefs_card_covers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_card_covers_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_card_covers: Annotated[PrefsCardCovers, Field(description="Attributes of \"Prefs Card Covers\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsCardCoversByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_card_covers: Attributes of \"Prefs Card Covers\" to be updated. (required)
        :type prefs_card_covers: PrefsCardCovers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_card_covers_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_card_covers=prefs_card_covers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_card_covers_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_card_covers: Annotated[PrefsCardCovers, Field(description="Attributes of \"Prefs Card Covers\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsCardCoversByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_card_covers: Attributes of \"Prefs Card Covers\" to be updated. (required)
        :type prefs_card_covers: PrefsCardCovers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_card_covers_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_card_covers=prefs_card_covers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_card_covers_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_card_covers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_card_covers is not None:
            _body_params = prefs_card_covers



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/cardCovers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_comments_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_comments: Annotated[PrefsComments, Field(description="Attributes of \"Prefs Comments\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsCommentsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_comments: Attributes of \"Prefs Comments\" to be updated. (required)
        :type prefs_comments: PrefsComments
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_comments_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_comments=prefs_comments,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_comments_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_comments: Annotated[PrefsComments, Field(description="Attributes of \"Prefs Comments\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsCommentsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_comments: Attributes of \"Prefs Comments\" to be updated. (required)
        :type prefs_comments: PrefsComments
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_comments_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_comments=prefs_comments,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_comments_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_comments: Annotated[PrefsComments, Field(description="Attributes of \"Prefs Comments\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsCommentsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_comments: Attributes of \"Prefs Comments\" to be updated. (required)
        :type prefs_comments: PrefsComments
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_comments_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_comments=prefs_comments,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_comments_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_comments,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_comments is not None:
            _body_params = prefs_comments



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/comments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_invitations_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_invitations: Annotated[PrefsInvitations, Field(description="Attributes of \"Prefs Invitations\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsInvitationsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_invitations: Attributes of \"Prefs Invitations\" to be updated. (required)
        :type prefs_invitations: PrefsInvitations
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_invitations_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_invitations=prefs_invitations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_invitations_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_invitations: Annotated[PrefsInvitations, Field(description="Attributes of \"Prefs Invitations\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsInvitationsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_invitations: Attributes of \"Prefs Invitations\" to be updated. (required)
        :type prefs_invitations: PrefsInvitations
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_invitations_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_invitations=prefs_invitations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_invitations_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_invitations: Annotated[PrefsInvitations, Field(description="Attributes of \"Prefs Invitations\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsInvitationsByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_invitations: Attributes of \"Prefs Invitations\" to be updated. (required)
        :type prefs_invitations: PrefsInvitations
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_invitations_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_invitations=prefs_invitations,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_invitations_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_invitations,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_invitations is not None:
            _body_params = prefs_invitations



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/invitations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_permission_level_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_permission_level: Annotated[PrefsPermissionLevel, Field(description="Attributes of \"Prefs Permission Level\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsPermissionLevelByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_permission_level: Attributes of \"Prefs Permission Level\" to be updated. (required)
        :type prefs_permission_level: PrefsPermissionLevel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_permission_level_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_permission_level=prefs_permission_level,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_permission_level_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_permission_level: Annotated[PrefsPermissionLevel, Field(description="Attributes of \"Prefs Permission Level\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsPermissionLevelByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_permission_level: Attributes of \"Prefs Permission Level\" to be updated. (required)
        :type prefs_permission_level: PrefsPermissionLevel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_permission_level_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_permission_level=prefs_permission_level,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_permission_level_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_permission_level: Annotated[PrefsPermissionLevel, Field(description="Attributes of \"Prefs Permission Level\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsPermissionLevelByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_permission_level: Attributes of \"Prefs Permission Level\" to be updated. (required)
        :type prefs_permission_level: PrefsPermissionLevel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_permission_level_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_permission_level=prefs_permission_level,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_permission_level_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_permission_level,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_permission_level is not None:
            _body_params = prefs_permission_level



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/permissionLevel',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_self_join_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_self_join: Annotated[PrefsSelfJoin, Field(description="Attributes of \"Prefs Self Join\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsSelfJoinByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_self_join: Attributes of \"Prefs Self Join\" to be updated. (required)
        :type prefs_self_join: PrefsSelfJoin
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_self_join_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_self_join=prefs_self_join,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_self_join_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_self_join: Annotated[PrefsSelfJoin, Field(description="Attributes of \"Prefs Self Join\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsSelfJoinByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_self_join: Attributes of \"Prefs Self Join\" to be updated. (required)
        :type prefs_self_join: PrefsSelfJoin
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_self_join_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_self_join=prefs_self_join,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_self_join_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_self_join: Annotated[PrefsSelfJoin, Field(description="Attributes of \"Prefs Self Join\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsSelfJoinByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_self_join: Attributes of \"Prefs Self Join\" to be updated. (required)
        :type prefs_self_join: PrefsSelfJoin
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_self_join_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_self_join=prefs_self_join,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_self_join_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_self_join,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_self_join is not None:
            _body_params = prefs_self_join



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/selfJoin',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_prefs_voting_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_voting: Annotated[PrefsVoting, Field(description="Attributes of \"Prefs Voting\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsPrefsVotingByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_voting: Attributes of \"Prefs Voting\" to be updated. (required)
        :type prefs_voting: PrefsVoting
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_voting_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_voting=prefs_voting,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_prefs_voting_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_voting: Annotated[PrefsVoting, Field(description="Attributes of \"Prefs Voting\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsPrefsVotingByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_voting: Attributes of \"Prefs Voting\" to be updated. (required)
        :type prefs_voting: PrefsVoting
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_voting_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_voting=prefs_voting,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_prefs_voting_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_voting: Annotated[PrefsVoting, Field(description="Attributes of \"Prefs Voting\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsPrefsVotingByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_voting: Attributes of \"Prefs Voting\" to be updated. (required)
        :type prefs_voting: PrefsVoting
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_prefs_voting_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            prefs_voting=prefs_voting,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_prefs_voting_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        prefs_voting,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_voting is not None:
            _body_params = prefs_voting



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/prefs/voting',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_boards_subscribed_by_id_board(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_subscribed: Annotated[BoardsSubscribed, Field(description="Attributes of \"Boards Subscribed\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateBoardsSubscribedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_subscribed: Attributes of \"Boards Subscribed\" to be updated. (required)
        :type boards_subscribed: BoardsSubscribed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_subscribed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_subscribed=boards_subscribed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_boards_subscribed_by_id_board_with_http_info(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_subscribed: Annotated[BoardsSubscribed, Field(description="Attributes of \"Boards Subscribed\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateBoardsSubscribedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_subscribed: Attributes of \"Boards Subscribed\" to be updated. (required)
        :type boards_subscribed: BoardsSubscribed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_subscribed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_subscribed=boards_subscribed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_boards_subscribed_by_id_board_without_preload_content(
        self,
        id_board: Annotated[StrictStr, Field(description="board_id")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        boards_subscribed: Annotated[BoardsSubscribed, Field(description="Attributes of \"Boards Subscribed\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateBoardsSubscribedByIdBoard()


        :param id_board: board_id (required)
        :type id_board: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param boards_subscribed: Attributes of \"Boards Subscribed\" to be updated. (required)
        :type boards_subscribed: BoardsSubscribed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_boards_subscribed_by_id_board_serialize(
            id_board=id_board,
            key=key,
            token=token,
            boards_subscribed=boards_subscribed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_boards_subscribed_by_id_board_serialize(
        self,
        id_board,
        key,
        token,
        boards_subscribed,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_board is not None:
            _path_params['idBoard'] = id_board
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if boards_subscribed is not None:
            _body_params = boards_subscribed



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/boards/{idBoard}/subscribed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Trello

    This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.members import Members
from openapi_client.models.members_avatar import MembersAvatar
from openapi_client.models.members_avatar_source import MembersAvatarSource
from openapi_client.models.members_bio import MembersBio
from openapi_client.models.members_board_backgrounds import MembersBoardBackgrounds
from openapi_client.models.members_board_stars import MembersBoardStars
from openapi_client.models.members_board_stars_id_board import MembersBoardStarsIdBoard
from openapi_client.models.members_board_stars_pos import MembersBoardStarsPos
from openapi_client.models.members_custom_board_backgrounds import MembersCustomBoardBackgrounds
from openapi_client.models.members_custom_emoji import MembersCustomEmoji
from openapi_client.models.members_custom_stickers import MembersCustomStickers
from openapi_client.models.members_full_name import MembersFullName
from openapi_client.models.members_initials import MembersInitials
from openapi_client.models.members_one_time_messages_dismissed import MembersOneTimeMessagesDismissed
from openapi_client.models.members_saved_searches import MembersSavedSearches
from openapi_client.models.members_saved_searches_name import MembersSavedSearchesName
from openapi_client.models.members_saved_searches_pos import MembersSavedSearchesPos
from openapi_client.models.members_saved_searches_query import MembersSavedSearchesQuery
from openapi_client.models.members_username import MembersUsername
from openapi_client.models.prefs_color_blind import PrefsColorBlind
from openapi_client.models.prefs_locale import PrefsLocale
from openapi_client.models.prefs_minutes_between_summaries import PrefsMinutesBetweenSummaries

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MemberApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_members_avatar_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_avatar: Annotated[MembersAvatar, Field(description="Attributes of \"Members Avatar\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersAvatarByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_avatar: Attributes of \"Members Avatar\" to be added. (required)
        :type members_avatar: MembersAvatar
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_avatar_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_avatar=members_avatar,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_avatar_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_avatar: Annotated[MembersAvatar, Field(description="Attributes of \"Members Avatar\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersAvatarByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_avatar: Attributes of \"Members Avatar\" to be added. (required)
        :type members_avatar: MembersAvatar
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_avatar_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_avatar=members_avatar,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_avatar_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_avatar: Annotated[MembersAvatar, Field(description="Attributes of \"Members Avatar\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersAvatarByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_avatar: Attributes of \"Members Avatar\" to be added. (required)
        :type members_avatar: MembersAvatar
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_avatar_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_avatar=members_avatar,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_avatar_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_avatar,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_avatar is not None:
            _body_params = members_avatar



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/avatar',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_members_board_backgrounds_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_backgrounds: Annotated[MembersBoardBackgrounds, Field(description="Attributes of \"Members Board Backgrounds\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_backgrounds: Attributes of \"Members Board Backgrounds\" to be added. (required)
        :type members_board_backgrounds: MembersBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_board_backgrounds=members_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_board_backgrounds_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_backgrounds: Annotated[MembersBoardBackgrounds, Field(description="Attributes of \"Members Board Backgrounds\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_backgrounds: Attributes of \"Members Board Backgrounds\" to be added. (required)
        :type members_board_backgrounds: MembersBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_board_backgrounds=members_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_board_backgrounds_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_backgrounds: Annotated[MembersBoardBackgrounds, Field(description="Attributes of \"Members Board Backgrounds\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_backgrounds: Attributes of \"Members Board Backgrounds\" to be added. (required)
        :type members_board_backgrounds: MembersBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_board_backgrounds=members_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_board_backgrounds_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_board_backgrounds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_board_backgrounds is not None:
            _body_params = members_board_backgrounds



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/boardBackgrounds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_members_board_stars_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars: Annotated[MembersBoardStars, Field(description="Attributes of \"Members Board Stars\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersBoardStarsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars: Attributes of \"Members Board Stars\" to be added. (required)
        :type members_board_stars: MembersBoardStars
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_board_stars_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_board_stars=members_board_stars,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_board_stars_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars: Annotated[MembersBoardStars, Field(description="Attributes of \"Members Board Stars\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersBoardStarsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars: Attributes of \"Members Board Stars\" to be added. (required)
        :type members_board_stars: MembersBoardStars
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_board_stars_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_board_stars=members_board_stars,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_board_stars_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars: Annotated[MembersBoardStars, Field(description="Attributes of \"Members Board Stars\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersBoardStarsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars: Attributes of \"Members Board Stars\" to be added. (required)
        :type members_board_stars: MembersBoardStars
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_board_stars_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_board_stars=members_board_stars,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_board_stars_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_board_stars,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_board_stars is not None:
            _body_params = members_board_stars



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/boardStars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_members_custom_board_backgrounds_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_board_backgrounds: Annotated[MembersCustomBoardBackgrounds, Field(description="Attributes of \"Members Custom Board Backgrounds\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersCustomBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_board_backgrounds: Attributes of \"Members Custom Board Backgrounds\" to be added. (required)
        :type members_custom_board_backgrounds: MembersCustomBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_board_backgrounds=members_custom_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_custom_board_backgrounds_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_board_backgrounds: Annotated[MembersCustomBoardBackgrounds, Field(description="Attributes of \"Members Custom Board Backgrounds\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersCustomBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_board_backgrounds: Attributes of \"Members Custom Board Backgrounds\" to be added. (required)
        :type members_custom_board_backgrounds: MembersCustomBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_board_backgrounds=members_custom_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_custom_board_backgrounds_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_board_backgrounds: Annotated[MembersCustomBoardBackgrounds, Field(description="Attributes of \"Members Custom Board Backgrounds\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersCustomBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_board_backgrounds: Attributes of \"Members Custom Board Backgrounds\" to be added. (required)
        :type members_custom_board_backgrounds: MembersCustomBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_board_backgrounds=members_custom_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_custom_board_backgrounds_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_custom_board_backgrounds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_custom_board_backgrounds is not None:
            _body_params = members_custom_board_backgrounds



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/customBoardBackgrounds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_members_custom_emoji_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_emoji: Annotated[MembersCustomEmoji, Field(description="Attributes of \"Members Custom Emoji\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersCustomEmojiByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_emoji: Attributes of \"Members Custom Emoji\" to be added. (required)
        :type members_custom_emoji: MembersCustomEmoji
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_emoji_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_emoji=members_custom_emoji,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_custom_emoji_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_emoji: Annotated[MembersCustomEmoji, Field(description="Attributes of \"Members Custom Emoji\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersCustomEmojiByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_emoji: Attributes of \"Members Custom Emoji\" to be added. (required)
        :type members_custom_emoji: MembersCustomEmoji
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_emoji_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_emoji=members_custom_emoji,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_custom_emoji_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_emoji: Annotated[MembersCustomEmoji, Field(description="Attributes of \"Members Custom Emoji\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersCustomEmojiByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_emoji: Attributes of \"Members Custom Emoji\" to be added. (required)
        :type members_custom_emoji: MembersCustomEmoji
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_emoji_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_emoji=members_custom_emoji,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_custom_emoji_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_custom_emoji,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_custom_emoji is not None:
            _body_params = members_custom_emoji



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/customEmoji',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_members_custom_stickers_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_stickers: Annotated[MembersCustomStickers, Field(description="Attributes of \"Members Custom Stickers\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersCustomStickersByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_stickers: Attributes of \"Members Custom Stickers\" to be added. (required)
        :type members_custom_stickers: MembersCustomStickers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_stickers_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_stickers=members_custom_stickers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_custom_stickers_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_stickers: Annotated[MembersCustomStickers, Field(description="Attributes of \"Members Custom Stickers\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersCustomStickersByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_stickers: Attributes of \"Members Custom Stickers\" to be added. (required)
        :type members_custom_stickers: MembersCustomStickers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_stickers_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_stickers=members_custom_stickers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_custom_stickers_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_stickers: Annotated[MembersCustomStickers, Field(description="Attributes of \"Members Custom Stickers\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersCustomStickersByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_stickers: Attributes of \"Members Custom Stickers\" to be added. (required)
        :type members_custom_stickers: MembersCustomStickers
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_custom_stickers_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_custom_stickers=members_custom_stickers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_custom_stickers_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_custom_stickers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_custom_stickers is not None:
            _body_params = members_custom_stickers



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/customStickers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_members_one_time_messages_dismissed_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_one_time_messages_dismissed: Annotated[MembersOneTimeMessagesDismissed, Field(description="Attributes of \"Members One Time Messages Dismissed\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersOneTimeMessagesDismissedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_one_time_messages_dismissed: Attributes of \"Members One Time Messages Dismissed\" to be added. (required)
        :type members_one_time_messages_dismissed: MembersOneTimeMessagesDismissed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_one_time_messages_dismissed_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_one_time_messages_dismissed=members_one_time_messages_dismissed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_one_time_messages_dismissed_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_one_time_messages_dismissed: Annotated[MembersOneTimeMessagesDismissed, Field(description="Attributes of \"Members One Time Messages Dismissed\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersOneTimeMessagesDismissedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_one_time_messages_dismissed: Attributes of \"Members One Time Messages Dismissed\" to be added. (required)
        :type members_one_time_messages_dismissed: MembersOneTimeMessagesDismissed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_one_time_messages_dismissed_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_one_time_messages_dismissed=members_one_time_messages_dismissed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_one_time_messages_dismissed_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_one_time_messages_dismissed: Annotated[MembersOneTimeMessagesDismissed, Field(description="Attributes of \"Members One Time Messages Dismissed\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersOneTimeMessagesDismissedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_one_time_messages_dismissed: Attributes of \"Members One Time Messages Dismissed\" to be added. (required)
        :type members_one_time_messages_dismissed: MembersOneTimeMessagesDismissed
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_one_time_messages_dismissed_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_one_time_messages_dismissed=members_one_time_messages_dismissed,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_one_time_messages_dismissed_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_one_time_messages_dismissed,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_one_time_messages_dismissed is not None:
            _body_params = members_one_time_messages_dismissed



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/oneTimeMessagesDismissed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_members_saved_searches_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches: Annotated[MembersSavedSearches, Field(description="Attributes of \"Members Saved Searches\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """addMembersSavedSearchesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches: Attributes of \"Members Saved Searches\" to be added. (required)
        :type members_saved_searches: MembersSavedSearches
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_saved_searches_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_saved_searches=members_saved_searches,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_members_saved_searches_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches: Annotated[MembersSavedSearches, Field(description="Attributes of \"Members Saved Searches\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """addMembersSavedSearchesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches: Attributes of \"Members Saved Searches\" to be added. (required)
        :type members_saved_searches: MembersSavedSearches
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_saved_searches_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_saved_searches=members_saved_searches,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_members_saved_searches_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches: Annotated[MembersSavedSearches, Field(description="Attributes of \"Members Saved Searches\" to be added.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """addMembersSavedSearchesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches: Attributes of \"Members Saved Searches\" to be added. (required)
        :type members_saved_searches: MembersSavedSearches
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_members_saved_searches_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_saved_searches=members_saved_searches,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_members_saved_searches_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_saved_searches,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_saved_searches is not None:
            _body_params = members_saved_searches



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/members/{idMember}/savedSearches',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_members_board_backgrounds_by_id_member_by_id_board_background(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_members_board_backgrounds_by_id_member_by_id_board_background_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_members_board_backgrounds_by_id_member_by_id_board_background_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
        self,
        id_member,
        id_board_background,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_background is not None:
            _path_params['idBoardBackground'] = id_board_background
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/members/{idMember}/boardBackgrounds/{idBoardBackground}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_members_board_stars_by_id_member_by_id_board_star(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_members_board_stars_by_id_member_by_id_board_star_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_members_board_stars_by_id_member_by_id_board_star_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_members_board_stars_by_id_member_by_id_board_star_serialize(
        self,
        id_member,
        id_board_star,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_star is not None:
            _path_params['idBoardStar'] = id_board_star
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/members/{idMember}/boardStars/{idBoardStar}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_members_custom_board_backgrounds_by_id_member_by_id_board_background(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_members_custom_board_backgrounds_by_id_member_by_id_board_background_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_members_custom_board_backgrounds_by_id_member_by_id_board_background_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
        self,
        id_member,
        id_board_background,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_background is not None:
            _path_params['idBoardBackground'] = id_board_background
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/members/{idMember}/customBoardBackgrounds/{idBoardBackground}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_members_custom_stickers_by_id_member_by_id_custom_sticker(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_sticker: Annotated[StrictStr, Field(description="idCustomSticker")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteMembersCustomStickersByIdMemberByIdCustomSticker()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_sticker: idCustomSticker (required)
        :type id_custom_sticker: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
            id_member=id_member,
            id_custom_sticker=id_custom_sticker,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_members_custom_stickers_by_id_member_by_id_custom_sticker_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_sticker: Annotated[StrictStr, Field(description="idCustomSticker")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteMembersCustomStickersByIdMemberByIdCustomSticker()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_sticker: idCustomSticker (required)
        :type id_custom_sticker: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
            id_member=id_member,
            id_custom_sticker=id_custom_sticker,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_members_custom_stickers_by_id_member_by_id_custom_sticker_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_sticker: Annotated[StrictStr, Field(description="idCustomSticker")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteMembersCustomStickersByIdMemberByIdCustomSticker()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_sticker: idCustomSticker (required)
        :type id_custom_sticker: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
            id_member=id_member,
            id_custom_sticker=id_custom_sticker,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
        self,
        id_member,
        id_custom_sticker,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_custom_sticker is not None:
            _path_params['idCustomSticker'] = id_custom_sticker
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/members/{idMember}/customStickers/{idCustomSticker}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_members_saved_searches_by_id_member_by_id_saved_search(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """deleteMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_members_saved_searches_by_id_member_by_id_saved_search_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """deleteMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_members_saved_searches_by_id_member_by_id_saved_search_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_members_saved_searches_by_id_member_by_id_saved_search_serialize(
        self,
        id_member,
        id_saved_search,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_saved_search is not None:
            _path_params['idSavedSearch'] = id_saved_search
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/members/{idMember}/savedSearches/{idSavedSearch}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_actions_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Page * limit must be less than 1000")] = None,
        id_models: Annotated[Optional[StrictStr], Field(description="Only return actions related to these model ids")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersActionsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param format: One of: count, list or minimal
        :type format: str
        :param since: A date, null or lastView
        :type since: str
        :param before: A date, or null
        :type before: str
        :param page: Page * limit must be less than 1000
        :type page: str
        :param id_models: Only return actions related to these model ids
        :type id_models: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_actions_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            fields=fields,
            limit=limit,
            format=format,
            since=since,
            before=before,
            page=page,
            id_models=id_models,
            member=member,
            member_fields=member_fields,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_actions_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Page * limit must be less than 1000")] = None,
        id_models: Annotated[Optional[StrictStr], Field(description="Only return actions related to these model ids")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersActionsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param format: One of: count, list or minimal
        :type format: str
        :param since: A date, null or lastView
        :type since: str
        :param before: A date, or null
        :type before: str
        :param page: Page * limit must be less than 1000
        :type page: str
        :param id_models: Only return actions related to these model ids
        :type id_models: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_actions_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            fields=fields,
            limit=limit,
            format=format,
            since=since,
            before=before,
            page=page,
            id_models=id_models,
            member=member,
            member_fields=member_fields,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_actions_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        page: Annotated[Optional[StrictStr], Field(description="Page * limit must be less than 1000")] = None,
        id_models: Annotated[Optional[StrictStr], Field(description="Only return actions related to these model ids")] = None,
        member: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersActionsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type fields: str
        :param limit: a number from 0 to 1000
        :type limit: str
        :param format: One of: count, list or minimal
        :type format: str
        :param since: A date, null or lastView
        :type since: str
        :param before: A date, or null
        :type before: str
        :param page: Page * limit must be less than 1000
        :type page: str
        :param id_models: Only return actions related to these model ids
        :type id_models: str
        :param member:  true or false
        :type member: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_actions_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            fields=fields,
            limit=limit,
            format=format,
            since=since,
            before=before,
            page=page,
            id_models=id_models,
            member=member,
            member_fields=member_fields,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_actions_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        entities,
        display,
        filter,
        fields,
        limit,
        format,
        since,
        before,
        page,
        id_models,
        member,
        member_fields,
        member_creator,
        member_creator_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if entities is not None:
            
            _query_params.append(('entities', entities))
            
        if display is not None:
            
            _query_params.append(('display', display))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if since is not None:
            
            _query_params.append(('since', since))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if id_models is not None:
            
            _query_params.append(('idModels', id_models))
            
        if member is not None:
            
            _query_params.append(('member', member))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if member_creator is not None:
            
            _query_params.append(('memberCreator', member_creator))
            
        if member_creator_fields is not None:
            
            _query_params.append(('memberCreator_fields', member_creator_fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/actions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_board_backgrounds_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, custom, default, none or premium")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all, custom, default, none or premium
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_board_backgrounds_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, custom, default, none or premium")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all, custom, default, none or premium
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_board_backgrounds_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, custom, default, none or premium")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all, custom, default, none or premium
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_board_backgrounds_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boardBackgrounds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_board_backgrounds_by_id_member_by_id_board_background(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_board_backgrounds_by_id_member_by_id_board_background_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_board_backgrounds_by_id_member_by_id_board_background_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
        self,
        id_member,
        id_board_background,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_background is not None:
            _path_params['idBoardBackground'] = id_board_background
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boardBackgrounds/{idBoardBackground}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_board_stars_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardStarsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_stars_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_board_stars_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardStarsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_stars_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_board_stars_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardStarsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_stars_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_board_stars_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boardStars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_board_stars_by_id_member_by_id_board_star(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_board_stars_by_id_member_by_id_board_star_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_board_stars_by_id_member_by_id_board_star_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_board_stars_by_id_member_by_id_board_star_serialize(
        self,
        id_member,
        id_board_star,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_star is not None:
            _path_params['idBoardStar'] = id_board_star
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boardStars/{idBoardStar}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_boards_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type filter: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param actions_format: One of: count, list or minimal
        :type actions_format: str
        :param actions_since: A date, null or lastView
        :type actions_since: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type memberships: str
        :param organization:  true or false
        :type organization: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param lists: One of: all, closed, none or open
        :type lists: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            actions=actions,
            actions_entities=actions_entities,
            actions_limit=actions_limit,
            actions_format=actions_format,
            actions_since=actions_since,
            action_fields=action_fields,
            memberships=memberships,
            organization=organization,
            organization_fields=organization_fields,
            lists=lists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_boards_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type filter: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param actions_format: One of: count, list or minimal
        :type actions_format: str
        :param actions_since: A date, null or lastView
        :type actions_since: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type memberships: str
        :param organization:  true or false
        :type organization: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param lists: One of: all, closed, none or open
        :type lists: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            actions=actions,
            actions_entities=actions_entities,
            actions_limit=actions_limit,
            actions_format=actions_format,
            actions_since=actions_since,
            action_fields=action_fields,
            memberships=memberships,
            organization=organization,
            organization_fields=organization_fields,
            lists=lists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_boards_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type filter: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param actions_format: One of: count, list or minimal
        :type actions_format: str
        :param actions_since: A date, null or lastView
        :type actions_since: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type memberships: str
        :param organization:  true or false
        :type organization: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param lists: One of: all, closed, none or open
        :type lists: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            actions=actions,
            actions_entities=actions_entities,
            actions_limit=actions_limit,
            actions_format=actions_format,
            actions_since=actions_since,
            action_fields=action_fields,
            memberships=memberships,
            organization=organization,
            organization_fields=organization_fields,
            lists=lists,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_boards_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        filter,
        fields,
        actions,
        actions_entities,
        actions_limit,
        actions_format,
        actions_since,
        action_fields,
        memberships,
        organization,
        organization_fields,
        lists,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if actions_entities is not None:
            
            _query_params.append(('actions_entities', actions_entities))
            
        if actions_limit is not None:
            
            _query_params.append(('actions_limit', actions_limit))
            
        if actions_format is not None:
            
            _query_params.append(('actions_format', actions_format))
            
        if actions_since is not None:
            
            _query_params.append(('actions_since', actions_since))
            
        if action_fields is not None:
            
            _query_params.append(('action_fields', action_fields))
            
        if memberships is not None:
            
            _query_params.append(('memberships', memberships))
            
        if organization is not None:
            
            _query_params.append(('organization', organization))
            
        if organization_fields is not None:
            
            _query_params.append(('organization_fields', organization_fields))
            
        if lists is not None:
            
            _query_params.append(('lists', lists))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_boards_by_id_member_by_filter(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_boards_by_id_member_by_filter_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_boards_by_id_member_by_filter_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_boards_by_id_member_by_filter_serialize(
        self,
        id_member,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boards/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_boards_invited_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardsInvitedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_invited_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_boards_invited_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardsInvitedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_invited_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_boards_invited_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardsInvitedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_invited_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_boards_invited_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boardsInvited',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_boards_invited_by_id_member_by_field(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersBoardsInvitedByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_invited_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_boards_invited_by_id_member_by_field_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersBoardsInvitedByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_invited_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_boards_invited_by_id_member_by_field_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersBoardsInvitedByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_boards_invited_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_boards_invited_by_id_member_by_field_serialize(
        self,
        id_member,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/boardsInvited/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        action_before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        card_members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        card_attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        boards: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        board_actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        board_actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        board_actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        board_actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        board_action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        board_lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        board_memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        board_organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        boards_invited: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        boards_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        board_stars: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        saved_searches: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organizations: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organization_paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organizations_invited: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        organizations_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        notifications: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard")] = None,
        notifications_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notifications_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notifications_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        notification_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator, type or unread")] = None,
        notification_member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notification_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        notification_before: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        notification_since: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        tokens: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_backgrounds: Annotated[Optional[StrictStr], Field(description="One of: all, custom, default, none or premium")] = None,
        custom_board_backgrounds: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        custom_stickers: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        custom_emoji: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersByIdMember()

        If you specify 'me' as the username, this call will respond as if you had supplied the username associated with the supplied token

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_since: A date, null or lastView
        :type action_since: str
        :param action_before: A date, or null
        :type action_before: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param card_members:  true or false
        :type card_members: str
        :param card_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type card_member_fields: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param card_attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type card_attachment_fields: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param boards: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type boards: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param board_actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type board_actions: str
        :param board_actions_entities:  true or false
        :type board_actions_entities: str
        :param board_actions_display:  true or false
        :type board_actions_display: str
        :param board_actions_format: One of: count, list or minimal
        :type board_actions_format: str
        :param board_actions_since: A date, null or lastView
        :type board_actions_since: str
        :param board_actions_limit: a number from 0 to 1000
        :type board_actions_limit: str
        :param board_action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type board_action_fields: str
        :param board_lists: One of: all, closed, none or open
        :type board_lists: str
        :param board_memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type board_memberships: str
        :param board_organization:  true or false
        :type board_organization: str
        :param board_organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type board_organization_fields: str
        :param boards_invited: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type boards_invited: str
        :param boards_invited_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type boards_invited_fields: str
        :param board_stars:  true or false
        :type board_stars: str
        :param saved_searches:  true or false
        :type saved_searches: str
        :param organizations: One of: all, members, none or public
        :type organizations: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organization_paid_account:  true or false
        :type organization_paid_account: str
        :param organizations_invited: One of: all, members, none or public
        :type organizations_invited: str
        :param organizations_invited_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organizations_invited_fields: str
        :param notifications: all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
        :type notifications: str
        :param notifications_entities:  true or false
        :type notifications_entities: str
        :param notifications_display:  true or false
        :type notifications_display: str
        :param notifications_limit: a number from 1 to 1000
        :type notifications_limit: str
        :param notification_fields: all or a comma-separated list of: data, date, idMemberCreator, type or unread
        :type notification_fields: str
        :param notification_member_creator:  true or false
        :type notification_member_creator: str
        :param notification_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type notification_member_creator_fields: str
        :param notification_before: An id, or null
        :type notification_before: str
        :param notification_since: An id, or null
        :type notification_since: str
        :param tokens: One of: all or none
        :type tokens: str
        :param paid_account:  true or false
        :type paid_account: str
        :param board_backgrounds: One of: all, custom, default, none or premium
        :type board_backgrounds: str
        :param custom_board_backgrounds: One of: all or none
        :type custom_board_backgrounds: str
        :param custom_stickers: One of: all or none
        :type custom_stickers: str
        :param custom_emoji: One of: all or none
        :type custom_emoji: str
        :param fields: all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_since=action_since,
            action_before=action_before,
            cards=cards,
            card_fields=card_fields,
            card_members=card_members,
            card_member_fields=card_member_fields,
            card_attachments=card_attachments,
            card_attachment_fields=card_attachment_fields,
            card_stickers=card_stickers,
            boards=boards,
            board_fields=board_fields,
            board_actions=board_actions,
            board_actions_entities=board_actions_entities,
            board_actions_display=board_actions_display,
            board_actions_format=board_actions_format,
            board_actions_since=board_actions_since,
            board_actions_limit=board_actions_limit,
            board_action_fields=board_action_fields,
            board_lists=board_lists,
            board_memberships=board_memberships,
            board_organization=board_organization,
            board_organization_fields=board_organization_fields,
            boards_invited=boards_invited,
            boards_invited_fields=boards_invited_fields,
            board_stars=board_stars,
            saved_searches=saved_searches,
            organizations=organizations,
            organization_fields=organization_fields,
            organization_paid_account=organization_paid_account,
            organizations_invited=organizations_invited,
            organizations_invited_fields=organizations_invited_fields,
            notifications=notifications,
            notifications_entities=notifications_entities,
            notifications_display=notifications_display,
            notifications_limit=notifications_limit,
            notification_fields=notification_fields,
            notification_member_creator=notification_member_creator,
            notification_member_creator_fields=notification_member_creator_fields,
            notification_before=notification_before,
            notification_since=notification_since,
            tokens=tokens,
            paid_account=paid_account,
            board_backgrounds=board_backgrounds,
            custom_board_backgrounds=custom_board_backgrounds,
            custom_stickers=custom_stickers,
            custom_emoji=custom_emoji,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        action_before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        card_members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        card_attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        boards: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        board_actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        board_actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        board_actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        board_actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        board_action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        board_lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        board_memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        board_organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        boards_invited: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        boards_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        board_stars: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        saved_searches: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organizations: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organization_paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organizations_invited: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        organizations_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        notifications: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard")] = None,
        notifications_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notifications_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notifications_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        notification_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator, type or unread")] = None,
        notification_member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notification_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        notification_before: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        notification_since: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        tokens: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_backgrounds: Annotated[Optional[StrictStr], Field(description="One of: all, custom, default, none or premium")] = None,
        custom_board_backgrounds: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        custom_stickers: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        custom_emoji: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersByIdMember()

        If you specify 'me' as the username, this call will respond as if you had supplied the username associated with the supplied token

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_since: A date, null or lastView
        :type action_since: str
        :param action_before: A date, or null
        :type action_before: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param card_members:  true or false
        :type card_members: str
        :param card_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type card_member_fields: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param card_attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type card_attachment_fields: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param boards: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type boards: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param board_actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type board_actions: str
        :param board_actions_entities:  true or false
        :type board_actions_entities: str
        :param board_actions_display:  true or false
        :type board_actions_display: str
        :param board_actions_format: One of: count, list or minimal
        :type board_actions_format: str
        :param board_actions_since: A date, null or lastView
        :type board_actions_since: str
        :param board_actions_limit: a number from 0 to 1000
        :type board_actions_limit: str
        :param board_action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type board_action_fields: str
        :param board_lists: One of: all, closed, none or open
        :type board_lists: str
        :param board_memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type board_memberships: str
        :param board_organization:  true or false
        :type board_organization: str
        :param board_organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type board_organization_fields: str
        :param boards_invited: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type boards_invited: str
        :param boards_invited_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type boards_invited_fields: str
        :param board_stars:  true or false
        :type board_stars: str
        :param saved_searches:  true or false
        :type saved_searches: str
        :param organizations: One of: all, members, none or public
        :type organizations: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organization_paid_account:  true or false
        :type organization_paid_account: str
        :param organizations_invited: One of: all, members, none or public
        :type organizations_invited: str
        :param organizations_invited_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organizations_invited_fields: str
        :param notifications: all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
        :type notifications: str
        :param notifications_entities:  true or false
        :type notifications_entities: str
        :param notifications_display:  true or false
        :type notifications_display: str
        :param notifications_limit: a number from 1 to 1000
        :type notifications_limit: str
        :param notification_fields: all or a comma-separated list of: data, date, idMemberCreator, type or unread
        :type notification_fields: str
        :param notification_member_creator:  true or false
        :type notification_member_creator: str
        :param notification_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type notification_member_creator_fields: str
        :param notification_before: An id, or null
        :type notification_before: str
        :param notification_since: An id, or null
        :type notification_since: str
        :param tokens: One of: all or none
        :type tokens: str
        :param paid_account:  true or false
        :type paid_account: str
        :param board_backgrounds: One of: all, custom, default, none or premium
        :type board_backgrounds: str
        :param custom_board_backgrounds: One of: all or none
        :type custom_board_backgrounds: str
        :param custom_stickers: One of: all or none
        :type custom_stickers: str
        :param custom_emoji: One of: all or none
        :type custom_emoji: str
        :param fields: all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_since=action_since,
            action_before=action_before,
            cards=cards,
            card_fields=card_fields,
            card_members=card_members,
            card_member_fields=card_member_fields,
            card_attachments=card_attachments,
            card_attachment_fields=card_attachment_fields,
            card_stickers=card_stickers,
            boards=boards,
            board_fields=board_fields,
            board_actions=board_actions,
            board_actions_entities=board_actions_entities,
            board_actions_display=board_actions_display,
            board_actions_format=board_actions_format,
            board_actions_since=board_actions_since,
            board_actions_limit=board_actions_limit,
            board_action_fields=board_action_fields,
            board_lists=board_lists,
            board_memberships=board_memberships,
            board_organization=board_organization,
            board_organization_fields=board_organization_fields,
            boards_invited=boards_invited,
            boards_invited_fields=boards_invited_fields,
            board_stars=board_stars,
            saved_searches=saved_searches,
            organizations=organizations,
            organization_fields=organization_fields,
            organization_paid_account=organization_paid_account,
            organizations_invited=organizations_invited,
            organizations_invited_fields=organizations_invited_fields,
            notifications=notifications,
            notifications_entities=notifications_entities,
            notifications_display=notifications_display,
            notifications_limit=notifications_limit,
            notification_fields=notification_fields,
            notification_member_creator=notification_member_creator,
            notification_member_creator_fields=notification_member_creator_fields,
            notification_before=notification_before,
            notification_since=notification_since,
            tokens=tokens,
            paid_account=paid_account,
            board_backgrounds=board_backgrounds,
            custom_board_backgrounds=custom_board_backgrounds,
            custom_stickers=custom_stickers,
            custom_emoji=custom_emoji,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        action_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        action_before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        cards: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        card_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        card_members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        card_member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        card_attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        card_attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        card_stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        boards: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        board_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        board_actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        board_actions_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_actions_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_actions_format: Annotated[Optional[StrictStr], Field(description="One of: count, list or minimal")] = None,
        board_actions_since: Annotated[Optional[StrictStr], Field(description="A date, null or lastView")] = None,
        board_actions_limit: Annotated[Optional[StrictStr], Field(description="a number from 0 to 1000")] = None,
        board_action_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator or type")] = None,
        board_lists: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none or open")] = None,
        board_memberships: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: active, admin, deactivated, me or normal")] = None,
        board_organization: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        boards_invited: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned")] = None,
        boards_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url")] = None,
        board_stars: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        saved_searches: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organizations: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        organization_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        organization_paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        organizations_invited: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        organizations_invited_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        notifications: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard")] = None,
        notifications_entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notifications_display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notifications_limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        notification_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator, type or unread")] = None,
        notification_member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        notification_member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        notification_before: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        notification_since: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        tokens: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        board_backgrounds: Annotated[Optional[StrictStr], Field(description="One of: all, custom, default, none or premium")] = None,
        custom_board_backgrounds: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        custom_stickers: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        custom_emoji: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersByIdMember()

        If you specify 'me' as the username, this call will respond as if you had supplied the username associated with the supplied token

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param actions_entities:  true or false
        :type actions_entities: str
        :param actions_display:  true or false
        :type actions_display: str
        :param actions_limit: a number from 0 to 1000
        :type actions_limit: str
        :param action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type action_fields: str
        :param action_since: A date, null or lastView
        :type action_since: str
        :param action_before: A date, or null
        :type action_before: str
        :param cards: One of: all, closed, none, open or visible
        :type cards: str
        :param card_fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type card_fields: str
        :param card_members:  true or false
        :type card_members: str
        :param card_member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type card_member_fields: str
        :param card_attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type card_attachments: str
        :param card_attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type card_attachment_fields: str
        :param card_stickers:  true or false
        :type card_stickers: str
        :param boards: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type boards: str
        :param board_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type board_fields: str
        :param board_actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type board_actions: str
        :param board_actions_entities:  true or false
        :type board_actions_entities: str
        :param board_actions_display:  true or false
        :type board_actions_display: str
        :param board_actions_format: One of: count, list or minimal
        :type board_actions_format: str
        :param board_actions_since: A date, null or lastView
        :type board_actions_since: str
        :param board_actions_limit: a number from 0 to 1000
        :type board_actions_limit: str
        :param board_action_fields: all or a comma-separated list of: data, date, idMemberCreator or type
        :type board_action_fields: str
        :param board_lists: One of: all, closed, none or open
        :type board_lists: str
        :param board_memberships: all or a comma-separated list of: active, admin, deactivated, me or normal
        :type board_memberships: str
        :param board_organization:  true or false
        :type board_organization: str
        :param board_organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type board_organization_fields: str
        :param boards_invited: all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
        :type boards_invited: str
        :param boards_invited_fields: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
        :type boards_invited_fields: str
        :param board_stars:  true or false
        :type board_stars: str
        :param saved_searches:  true or false
        :type saved_searches: str
        :param organizations: One of: all, members, none or public
        :type organizations: str
        :param organization_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organization_fields: str
        :param organization_paid_account:  true or false
        :type organization_paid_account: str
        :param organizations_invited: One of: all, members, none or public
        :type organizations_invited: str
        :param organizations_invited_fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type organizations_invited_fields: str
        :param notifications: all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
        :type notifications: str
        :param notifications_entities:  true or false
        :type notifications_entities: str
        :param notifications_display:  true or false
        :type notifications_display: str
        :param notifications_limit: a number from 1 to 1000
        :type notifications_limit: str
        :param notification_fields: all or a comma-separated list of: data, date, idMemberCreator, type or unread
        :type notification_fields: str
        :param notification_member_creator:  true or false
        :type notification_member_creator: str
        :param notification_member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type notification_member_creator_fields: str
        :param notification_before: An id, or null
        :type notification_before: str
        :param notification_since: An id, or null
        :type notification_since: str
        :param tokens: One of: all or none
        :type tokens: str
        :param paid_account:  true or false
        :type paid_account: str
        :param board_backgrounds: One of: all, custom, default, none or premium
        :type board_backgrounds: str
        :param custom_board_backgrounds: One of: all or none
        :type custom_board_backgrounds: str
        :param custom_stickers: One of: all or none
        :type custom_stickers: str
        :param custom_emoji: One of: all or none
        :type custom_emoji: str
        :param fields: all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            actions_entities=actions_entities,
            actions_display=actions_display,
            actions_limit=actions_limit,
            action_fields=action_fields,
            action_since=action_since,
            action_before=action_before,
            cards=cards,
            card_fields=card_fields,
            card_members=card_members,
            card_member_fields=card_member_fields,
            card_attachments=card_attachments,
            card_attachment_fields=card_attachment_fields,
            card_stickers=card_stickers,
            boards=boards,
            board_fields=board_fields,
            board_actions=board_actions,
            board_actions_entities=board_actions_entities,
            board_actions_display=board_actions_display,
            board_actions_format=board_actions_format,
            board_actions_since=board_actions_since,
            board_actions_limit=board_actions_limit,
            board_action_fields=board_action_fields,
            board_lists=board_lists,
            board_memberships=board_memberships,
            board_organization=board_organization,
            board_organization_fields=board_organization_fields,
            boards_invited=boards_invited,
            boards_invited_fields=boards_invited_fields,
            board_stars=board_stars,
            saved_searches=saved_searches,
            organizations=organizations,
            organization_fields=organization_fields,
            organization_paid_account=organization_paid_account,
            organizations_invited=organizations_invited,
            organizations_invited_fields=organizations_invited_fields,
            notifications=notifications,
            notifications_entities=notifications_entities,
            notifications_display=notifications_display,
            notifications_limit=notifications_limit,
            notification_fields=notification_fields,
            notification_member_creator=notification_member_creator,
            notification_member_creator_fields=notification_member_creator_fields,
            notification_before=notification_before,
            notification_since=notification_since,
            tokens=tokens,
            paid_account=paid_account,
            board_backgrounds=board_backgrounds,
            custom_board_backgrounds=custom_board_backgrounds,
            custom_stickers=custom_stickers,
            custom_emoji=custom_emoji,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        actions,
        actions_entities,
        actions_display,
        actions_limit,
        action_fields,
        action_since,
        action_before,
        cards,
        card_fields,
        card_members,
        card_member_fields,
        card_attachments,
        card_attachment_fields,
        card_stickers,
        boards,
        board_fields,
        board_actions,
        board_actions_entities,
        board_actions_display,
        board_actions_format,
        board_actions_since,
        board_actions_limit,
        board_action_fields,
        board_lists,
        board_memberships,
        board_organization,
        board_organization_fields,
        boards_invited,
        boards_invited_fields,
        board_stars,
        saved_searches,
        organizations,
        organization_fields,
        organization_paid_account,
        organizations_invited,
        organizations_invited_fields,
        notifications,
        notifications_entities,
        notifications_display,
        notifications_limit,
        notification_fields,
        notification_member_creator,
        notification_member_creator_fields,
        notification_before,
        notification_since,
        tokens,
        paid_account,
        board_backgrounds,
        custom_board_backgrounds,
        custom_stickers,
        custom_emoji,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if actions_entities is not None:
            
            _query_params.append(('actions_entities', actions_entities))
            
        if actions_display is not None:
            
            _query_params.append(('actions_display', actions_display))
            
        if actions_limit is not None:
            
            _query_params.append(('actions_limit', actions_limit))
            
        if action_fields is not None:
            
            _query_params.append(('action_fields', action_fields))
            
        if action_since is not None:
            
            _query_params.append(('action_since', action_since))
            
        if action_before is not None:
            
            _query_params.append(('action_before', action_before))
            
        if cards is not None:
            
            _query_params.append(('cards', cards))
            
        if card_fields is not None:
            
            _query_params.append(('card_fields', card_fields))
            
        if card_members is not None:
            
            _query_params.append(('card_members', card_members))
            
        if card_member_fields is not None:
            
            _query_params.append(('card_member_fields', card_member_fields))
            
        if card_attachments is not None:
            
            _query_params.append(('card_attachments', card_attachments))
            
        if card_attachment_fields is not None:
            
            _query_params.append(('card_attachment_fields', card_attachment_fields))
            
        if card_stickers is not None:
            
            _query_params.append(('card_stickers', card_stickers))
            
        if boards is not None:
            
            _query_params.append(('boards', boards))
            
        if board_fields is not None:
            
            _query_params.append(('board_fields', board_fields))
            
        if board_actions is not None:
            
            _query_params.append(('board_actions', board_actions))
            
        if board_actions_entities is not None:
            
            _query_params.append(('board_actions_entities', board_actions_entities))
            
        if board_actions_display is not None:
            
            _query_params.append(('board_actions_display', board_actions_display))
            
        if board_actions_format is not None:
            
            _query_params.append(('board_actions_format', board_actions_format))
            
        if board_actions_since is not None:
            
            _query_params.append(('board_actions_since', board_actions_since))
            
        if board_actions_limit is not None:
            
            _query_params.append(('board_actions_limit', board_actions_limit))
            
        if board_action_fields is not None:
            
            _query_params.append(('board_action_fields', board_action_fields))
            
        if board_lists is not None:
            
            _query_params.append(('board_lists', board_lists))
            
        if board_memberships is not None:
            
            _query_params.append(('board_memberships', board_memberships))
            
        if board_organization is not None:
            
            _query_params.append(('board_organization', board_organization))
            
        if board_organization_fields is not None:
            
            _query_params.append(('board_organization_fields', board_organization_fields))
            
        if boards_invited is not None:
            
            _query_params.append(('boardsInvited', boards_invited))
            
        if boards_invited_fields is not None:
            
            _query_params.append(('boardsInvited_fields', boards_invited_fields))
            
        if board_stars is not None:
            
            _query_params.append(('boardStars', board_stars))
            
        if saved_searches is not None:
            
            _query_params.append(('savedSearches', saved_searches))
            
        if organizations is not None:
            
            _query_params.append(('organizations', organizations))
            
        if organization_fields is not None:
            
            _query_params.append(('organization_fields', organization_fields))
            
        if organization_paid_account is not None:
            
            _query_params.append(('organization_paid_account', organization_paid_account))
            
        if organizations_invited is not None:
            
            _query_params.append(('organizationsInvited', organizations_invited))
            
        if organizations_invited_fields is not None:
            
            _query_params.append(('organizationsInvited_fields', organizations_invited_fields))
            
        if notifications is not None:
            
            _query_params.append(('notifications', notifications))
            
        if notifications_entities is not None:
            
            _query_params.append(('notifications_entities', notifications_entities))
            
        if notifications_display is not None:
            
            _query_params.append(('notifications_display', notifications_display))
            
        if notifications_limit is not None:
            
            _query_params.append(('notifications_limit', notifications_limit))
            
        if notification_fields is not None:
            
            _query_params.append(('notification_fields', notification_fields))
            
        if notification_member_creator is not None:
            
            _query_params.append(('notification_memberCreator', notification_member_creator))
            
        if notification_member_creator_fields is not None:
            
            _query_params.append(('notification_memberCreator_fields', notification_member_creator_fields))
            
        if notification_before is not None:
            
            _query_params.append(('notification_before', notification_before))
            
        if notification_since is not None:
            
            _query_params.append(('notification_since', notification_since))
            
        if tokens is not None:
            
            _query_params.append(('tokens', tokens))
            
        if paid_account is not None:
            
            _query_params.append(('paid_account', paid_account))
            
        if board_backgrounds is not None:
            
            _query_params.append(('boardBackgrounds', board_backgrounds))
            
        if custom_board_backgrounds is not None:
            
            _query_params.append(('customBoardBackgrounds', custom_board_backgrounds))
            
        if custom_stickers is not None:
            
            _query_params.append(('customStickers', custom_stickers))
            
        if custom_emoji is not None:
            
            _query_params.append(('customEmoji', custom_emoji))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_by_id_member_by_field(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_by_id_member_by_field_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_by_id_member_by_field_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_by_id_member_by_field_serialize(
        self,
        id_member,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_cards_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCardsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_cards_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_cards_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCardsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_cards_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_cards_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        actions: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization")] = None,
        attachments: Annotated[Optional[StrictStr], Field(description="A boolean value or &quot;cover&quot; for only card cover attachments")] = None,
        attachment_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url")] = None,
        stickers: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        members: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        check_item_states: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        checklists: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        since: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        before: Annotated[Optional[StrictStr], Field(description="A date, or null")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, closed, none, open or visible")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCardsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param actions: all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
        :type actions: str
        :param attachments: A boolean value or &quot;cover&quot; for only card cover attachments
        :type attachments: str
        :param attachment_fields: all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
        :type attachment_fields: str
        :param stickers:  true or false
        :type stickers: str
        :param members:  true or false
        :type members: str
        :param member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_fields: str
        :param check_item_states:  true or false
        :type check_item_states: str
        :param checklists: One of: all or none
        :type checklists: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param since: A date, or null
        :type since: str
        :param before: A date, or null
        :type before: str
        :param filter: One of: all, closed, none, open or visible
        :type filter: str
        :param fields: all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_cards_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            actions=actions,
            attachments=attachments,
            attachment_fields=attachment_fields,
            stickers=stickers,
            members=members,
            member_fields=member_fields,
            check_item_states=check_item_states,
            checklists=checklists,
            limit=limit,
            since=since,
            before=before,
            filter=filter,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_cards_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        actions,
        attachments,
        attachment_fields,
        stickers,
        members,
        member_fields,
        check_item_states,
        checklists,
        limit,
        since,
        before,
        filter,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if actions is not None:
            
            _query_params.append(('actions', actions))
            
        if attachments is not None:
            
            _query_params.append(('attachments', attachments))
            
        if attachment_fields is not None:
            
            _query_params.append(('attachment_fields', attachment_fields))
            
        if stickers is not None:
            
            _query_params.append(('stickers', stickers))
            
        if members is not None:
            
            _query_params.append(('members', members))
            
        if member_fields is not None:
            
            _query_params.append(('member_fields', member_fields))
            
        if check_item_states is not None:
            
            _query_params.append(('checkItemStates', check_item_states))
            
        if checklists is not None:
            
            _query_params.append(('checklists', checklists))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if since is not None:
            
            _query_params.append(('since', since))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/cards',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_cards_by_id_member_by_filter(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCardsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_cards_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_cards_by_id_member_by_filter_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCardsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_cards_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_cards_by_id_member_by_filter_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCardsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_cards_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_cards_by_id_member_by_filter_serialize(
        self,
        id_member,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/cards/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_custom_board_backgrounds_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCustomBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_custom_board_backgrounds_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCustomBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_custom_board_backgrounds_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCustomBoardBackgroundsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_board_backgrounds_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_custom_board_backgrounds_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/customBoardBackgrounds',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_custom_board_backgrounds_by_id_member_by_id_board_background(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_custom_board_backgrounds_by_id_member_by_id_board_background_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_custom_board_backgrounds_by_id_member_by_id_board_background_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
        self,
        id_member,
        id_board_background,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_background is not None:
            _path_params['idBoardBackground'] = id_board_background
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/customBoardBackgrounds/{idBoardBackground}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_custom_emoji_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCustomEmojiByIdMember()

        This gets the list of all of the user’s uploaded emoji

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_emoji_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_custom_emoji_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCustomEmojiByIdMember()

        This gets the list of all of the user’s uploaded emoji

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_emoji_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_custom_emoji_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCustomEmojiByIdMember()

        This gets the list of all of the user’s uploaded emoji

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_emoji_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_custom_emoji_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/customEmoji',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_custom_emoji_by_id_member_by_id_custom_emoji(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_emoji: Annotated[StrictStr, Field(description="idCustomEmoji")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCustomEmojiByIdMemberByIdCustomEmoji()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_emoji: idCustomEmoji (required)
        :type id_custom_emoji: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: name or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_emoji_by_id_member_by_id_custom_emoji_serialize(
            id_member=id_member,
            id_custom_emoji=id_custom_emoji,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_custom_emoji_by_id_member_by_id_custom_emoji_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_emoji: Annotated[StrictStr, Field(description="idCustomEmoji")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCustomEmojiByIdMemberByIdCustomEmoji()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_emoji: idCustomEmoji (required)
        :type id_custom_emoji: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: name or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_emoji_by_id_member_by_id_custom_emoji_serialize(
            id_member=id_member,
            id_custom_emoji=id_custom_emoji,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_custom_emoji_by_id_member_by_id_custom_emoji_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_emoji: Annotated[StrictStr, Field(description="idCustomEmoji")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: name or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCustomEmojiByIdMemberByIdCustomEmoji()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_emoji: idCustomEmoji (required)
        :type id_custom_emoji: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: name or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_emoji_by_id_member_by_id_custom_emoji_serialize(
            id_member=id_member,
            id_custom_emoji=id_custom_emoji,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_custom_emoji_by_id_member_by_id_custom_emoji_serialize(
        self,
        id_member,
        id_custom_emoji,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_custom_emoji is not None:
            _path_params['idCustomEmoji'] = id_custom_emoji
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/customEmoji/{idCustomEmoji}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_custom_stickers_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCustomStickersByIdMember()

        This gets a list of all of the user’s uploaded stickers

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_stickers_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_custom_stickers_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCustomStickersByIdMember()

        This gets a list of all of the user’s uploaded stickers

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_stickers_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_custom_stickers_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCustomStickersByIdMember()

        This gets a list of all of the user’s uploaded stickers

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_stickers_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_custom_stickers_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/customStickers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_custom_stickers_by_id_member_by_id_custom_sticker(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_sticker: Annotated[StrictStr, Field(description="idCustomSticker")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: scaled or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersCustomStickersByIdMemberByIdCustomSticker()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_sticker: idCustomSticker (required)
        :type id_custom_sticker: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: scaled or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
            id_member=id_member,
            id_custom_sticker=id_custom_sticker,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_custom_stickers_by_id_member_by_id_custom_sticker_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_sticker: Annotated[StrictStr, Field(description="idCustomSticker")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: scaled or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersCustomStickersByIdMemberByIdCustomSticker()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_sticker: idCustomSticker (required)
        :type id_custom_sticker: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: scaled or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
            id_member=id_member,
            id_custom_sticker=id_custom_sticker,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_custom_stickers_by_id_member_by_id_custom_sticker_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_custom_sticker: Annotated[StrictStr, Field(description="idCustomSticker")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: scaled or url")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersCustomStickersByIdMemberByIdCustomSticker()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_custom_sticker: idCustomSticker (required)
        :type id_custom_sticker: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: scaled or url
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
            id_member=id_member,
            id_custom_sticker=id_custom_sticker,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_custom_stickers_by_id_member_by_id_custom_sticker_serialize(
        self,
        id_member,
        id_custom_sticker,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_custom_sticker is not None:
            _path_params['idCustomSticker'] = id_custom_sticker
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/customStickers/{idCustomSticker}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_deltas_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        tags: Annotated[StrictStr, Field(description="A valid tag for subscribing")],
        ix_last_update: Annotated[StrictStr, Field(description="a number from -1 to Infinity")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersDeltasByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param tags: A valid tag for subscribing (required)
        :type tags: str
        :param ix_last_update: a number from -1 to Infinity (required)
        :type ix_last_update: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_deltas_by_id_member_serialize(
            id_member=id_member,
            tags=tags,
            ix_last_update=ix_last_update,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_deltas_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        tags: Annotated[StrictStr, Field(description="A valid tag for subscribing")],
        ix_last_update: Annotated[StrictStr, Field(description="a number from -1 to Infinity")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersDeltasByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param tags: A valid tag for subscribing (required)
        :type tags: str
        :param ix_last_update: a number from -1 to Infinity (required)
        :type ix_last_update: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_deltas_by_id_member_serialize(
            id_member=id_member,
            tags=tags,
            ix_last_update=ix_last_update,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_deltas_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        tags: Annotated[StrictStr, Field(description="A valid tag for subscribing")],
        ix_last_update: Annotated[StrictStr, Field(description="a number from -1 to Infinity")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersDeltasByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param tags: A valid tag for subscribing (required)
        :type tags: str
        :param ix_last_update: a number from -1 to Infinity (required)
        :type ix_last_update: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_deltas_by_id_member_serialize(
            id_member=id_member,
            tags=tags,
            ix_last_update=ix_last_update,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_deltas_by_id_member_serialize(
        self,
        id_member,
        tags,
        ix_last_update,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if ix_last_update is not None:
            
            _query_params.append(('ixLastUpdate', ix_last_update))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/deltas',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_notifications_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard")] = None,
        read_filter: Annotated[Optional[StrictStr], Field(description="One of: all, read or unread")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator, type or unread")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        page: Annotated[Optional[StrictStr], Field(description="a number from 0 to 100")] = None,
        before: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        since: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersNotificationsByIdMember()

        You can only read the notifications for the member associated with the supplied token

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
        :type filter: str
        :param read_filter: One of: all, read or unread
        :type read_filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator, type or unread
        :type fields: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param page: a number from 0 to 100
        :type page: str
        :param before: An id, or null
        :type before: str
        :param since: An id, or null
        :type since: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_notifications_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            read_filter=read_filter,
            fields=fields,
            limit=limit,
            page=page,
            before=before,
            since=since,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_notifications_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard")] = None,
        read_filter: Annotated[Optional[StrictStr], Field(description="One of: all, read or unread")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator, type or unread")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        page: Annotated[Optional[StrictStr], Field(description="a number from 0 to 100")] = None,
        before: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        since: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersNotificationsByIdMember()

        You can only read the notifications for the member associated with the supplied token

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
        :type filter: str
        :param read_filter: One of: all, read or unread
        :type read_filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator, type or unread
        :type fields: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param page: a number from 0 to 100
        :type page: str
        :param before: An id, or null
        :type before: str
        :param since: An id, or null
        :type since: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_notifications_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            read_filter=read_filter,
            fields=fields,
            limit=limit,
            page=page,
            before=before,
            since=since,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_notifications_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        entities: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        display: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard")] = None,
        read_filter: Annotated[Optional[StrictStr], Field(description="One of: all, read or unread")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: data, date, idMemberCreator, type or unread")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="a number from 1 to 1000")] = None,
        page: Annotated[Optional[StrictStr], Field(description="a number from 0 to 100")] = None,
        before: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        since: Annotated[Optional[StrictStr], Field(description="An id, or null")] = None,
        member_creator: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        member_creator_fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersNotificationsByIdMember()

        You can only read the notifications for the member associated with the supplied token

        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param entities:  true or false
        :type entities: str
        :param display:  true or false
        :type display: str
        :param filter: all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
        :type filter: str
        :param read_filter: One of: all, read or unread
        :type read_filter: str
        :param fields: all or a comma-separated list of: data, date, idMemberCreator, type or unread
        :type fields: str
        :param limit: a number from 1 to 1000
        :type limit: str
        :param page: a number from 0 to 100
        :type page: str
        :param before: An id, or null
        :type before: str
        :param since: An id, or null
        :type since: str
        :param member_creator:  true or false
        :type member_creator: str
        :param member_creator_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
        :type member_creator_fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_notifications_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            entities=entities,
            display=display,
            filter=filter,
            read_filter=read_filter,
            fields=fields,
            limit=limit,
            page=page,
            before=before,
            since=since,
            member_creator=member_creator,
            member_creator_fields=member_creator_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_notifications_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        entities,
        display,
        filter,
        read_filter,
        fields,
        limit,
        page,
        before,
        since,
        member_creator,
        member_creator_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if entities is not None:
            
            _query_params.append(('entities', entities))
            
        if display is not None:
            
            _query_params.append(('display', display))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if read_filter is not None:
            
            _query_params.append(('read_filter', read_filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if before is not None:
            
            _query_params.append(('before', before))
            
        if since is not None:
            
            _query_params.append(('since', since))
            
        if member_creator is not None:
            
            _query_params.append(('memberCreator', member_creator))
            
        if member_creator_fields is not None:
            
            _query_params.append(('memberCreator_fields', member_creator_fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/notifications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_notifications_by_id_member_by_filter(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersNotificationsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_notifications_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_notifications_by_id_member_by_filter_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersNotificationsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_notifications_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_notifications_by_id_member_by_filter_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersNotificationsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_notifications_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_notifications_by_id_member_by_filter_serialize(
        self,
        id_member,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/notifications/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_organizations_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersOrganizationsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all, members, none or public
        :type filter: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param paid_account:  true or false
        :type paid_account: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            paid_account=paid_account,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_organizations_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersOrganizationsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all, members, none or public
        :type filter: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param paid_account:  true or false
        :type paid_account: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            paid_account=paid_account,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_organizations_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all, members, none or public")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        paid_account: Annotated[Optional[StrictStr], Field(description=" true or false")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersOrganizationsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all, members, none or public
        :type filter: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param paid_account:  true or false
        :type paid_account: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            fields=fields,
            paid_account=paid_account,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_organizations_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        filter,
        fields,
        paid_account,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if paid_account is not None:
            
            _query_params.append(('paid_account', paid_account))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/organizations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_organizations_by_id_member_by_filter(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersOrganizationsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_organizations_by_id_member_by_filter_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersOrganizationsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_organizations_by_id_member_by_filter_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        filter: Annotated[StrictStr, Field(description="filter")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersOrganizationsByIdMemberByFilter()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param filter: filter (required)
        :type filter: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_by_id_member_by_filter_serialize(
            id_member=id_member,
            filter=filter,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_organizations_by_id_member_by_filter_serialize(
        self,
        id_member,
        filter,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if filter is not None:
            _path_params['filter'] = filter
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/organizations/{filter}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_organizations_invited_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersOrganizationsInvitedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_invited_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_organizations_invited_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersOrganizationsInvitedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_invited_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_organizations_invited_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        fields: Annotated[Optional[StrictStr], Field(description="all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersOrganizationsInvitedByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param fields: all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_invited_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_organizations_invited_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/organizationsInvited',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_organizations_invited_by_id_member_by_field(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersOrganizationsInvitedByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_invited_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_organizations_invited_by_id_member_by_field_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersOrganizationsInvitedByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_invited_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_organizations_invited_by_id_member_by_field_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        var_field: Annotated[StrictStr, Field(description="field")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersOrganizationsInvitedByIdMemberByField()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param var_field: field (required)
        :type var_field: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_organizations_invited_by_id_member_by_field_serialize(
            id_member=id_member,
            var_field=var_field,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_organizations_invited_by_id_member_by_field_serialize(
        self,
        id_member,
        var_field,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if var_field is not None:
            _path_params['field'] = var_field
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/organizationsInvited/{field}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_saved_searches_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersSavedSearchesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_saved_searches_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_saved_searches_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersSavedSearchesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_saved_searches_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_saved_searches_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersSavedSearchesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_saved_searches_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_saved_searches_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/savedSearches',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_saved_searches_by_id_member_by_id_saved_search(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_saved_searches_by_id_member_by_id_saved_search_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_saved_searches_by_id_member_by_id_saved_search_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_saved_searches_by_id_member_by_id_saved_search_serialize(
        self,
        id_member,
        id_saved_search,
        key,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_saved_search is not None:
            _path_params['idSavedSearch'] = id_saved_search
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/savedSearches/{idSavedSearch}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_members_tokens_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """getMembersTokensByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_tokens_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_members_tokens_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """getMembersTokensByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_tokens_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_members_tokens_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        filter: Annotated[Optional[StrictStr], Field(description="One of: all or none")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getMembersTokensByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param filter: One of: all or none
        :type filter: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_members_tokens_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_members_tokens_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/members/{idMember}/tokens',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_avatar_source_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_avatar_source: Annotated[MembersAvatarSource, Field(description="Attributes of \"Members Avatar Source\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersAvatarSourceByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_avatar_source: Attributes of \"Members Avatar Source\" to be updated. (required)
        :type members_avatar_source: MembersAvatarSource
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_avatar_source_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_avatar_source=members_avatar_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_avatar_source_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_avatar_source: Annotated[MembersAvatarSource, Field(description="Attributes of \"Members Avatar Source\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersAvatarSourceByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_avatar_source: Attributes of \"Members Avatar Source\" to be updated. (required)
        :type members_avatar_source: MembersAvatarSource
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_avatar_source_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_avatar_source=members_avatar_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_avatar_source_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_avatar_source: Annotated[MembersAvatarSource, Field(description="Attributes of \"Members Avatar Source\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersAvatarSourceByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_avatar_source: Attributes of \"Members Avatar Source\" to be updated. (required)
        :type members_avatar_source: MembersAvatarSource
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_avatar_source_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_avatar_source=members_avatar_source,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_avatar_source_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_avatar_source,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_avatar_source is not None:
            _body_params = members_avatar_source



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/avatarSource',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_bio_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_bio: Annotated[MembersBio, Field(description="Attributes of \"Members Bio\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersBioByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_bio: Attributes of \"Members Bio\" to be updated. (required)
        :type members_bio: MembersBio
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_bio_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_bio=members_bio,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_bio_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_bio: Annotated[MembersBio, Field(description="Attributes of \"Members Bio\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersBioByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_bio: Attributes of \"Members Bio\" to be updated. (required)
        :type members_bio: MembersBio
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_bio_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_bio=members_bio,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_bio_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_bio: Annotated[MembersBio, Field(description="Attributes of \"Members Bio\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersBioByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_bio: Attributes of \"Members Bio\" to be updated. (required)
        :type members_bio: MembersBio
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_bio_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_bio=members_bio,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_bio_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_bio,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_bio is not None:
            _body_params = members_bio



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/bio',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_board_backgrounds_by_id_member_by_id_board_background(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_backgrounds: Annotated[MembersBoardBackgrounds, Field(description="Attributes of \"Members Board Backgrounds\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_backgrounds: Attributes of \"Members Board Backgrounds\" to be updated. (required)
        :type members_board_backgrounds: MembersBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            members_board_backgrounds=members_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_board_backgrounds_by_id_member_by_id_board_background_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_backgrounds: Annotated[MembersBoardBackgrounds, Field(description="Attributes of \"Members Board Backgrounds\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_backgrounds: Attributes of \"Members Board Backgrounds\" to be updated. (required)
        :type members_board_backgrounds: MembersBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            members_board_backgrounds=members_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_board_backgrounds_by_id_member_by_id_board_background_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_backgrounds: Annotated[MembersBoardBackgrounds, Field(description="Attributes of \"Members Board Backgrounds\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_backgrounds: Attributes of \"Members Board Backgrounds\" to be updated. (required)
        :type members_board_backgrounds: MembersBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            members_board_backgrounds=members_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_board_backgrounds_by_id_member_by_id_board_background_serialize(
        self,
        id_member,
        id_board_background,
        key,
        token,
        members_board_backgrounds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_background is not None:
            _path_params['idBoardBackground'] = id_board_background
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_board_backgrounds is not None:
            _body_params = members_board_backgrounds



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/boardBackgrounds/{idBoardBackground}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_board_stars_by_id_member_by_id_board_star(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars: Annotated[MembersBoardStars, Field(description="Attributes of \"Members Board Stars\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars: Attributes of \"Members Board Stars\" to be updated. (required)
        :type members_board_stars: MembersBoardStars
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars=members_board_stars,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_board_stars_by_id_member_by_id_board_star_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars: Annotated[MembersBoardStars, Field(description="Attributes of \"Members Board Stars\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars: Attributes of \"Members Board Stars\" to be updated. (required)
        :type members_board_stars: MembersBoardStars
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars=members_board_stars,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_board_stars_by_id_member_by_id_board_star_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars: Annotated[MembersBoardStars, Field(description="Attributes of \"Members Board Stars\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersBoardStarsByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars: Attributes of \"Members Board Stars\" to be updated. (required)
        :type members_board_stars: MembersBoardStars
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars=members_board_stars,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_board_stars_by_id_member_by_id_board_star_serialize(
        self,
        id_member,
        id_board_star,
        key,
        token,
        members_board_stars,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_star is not None:
            _path_params['idBoardStar'] = id_board_star
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_board_stars is not None:
            _body_params = members_board_stars



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/boardStars/{idBoardStar}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_board_stars_id_board_by_id_member_by_id_board_star(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars_id_board: Annotated[MembersBoardStarsIdBoard, Field(description="Attributes of \"Members Board Stars Id Board\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars_id_board: Attributes of \"Members Board Stars Id Board\" to be updated. (required)
        :type members_board_stars_id_board: MembersBoardStarsIdBoard
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_id_board_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars_id_board=members_board_stars_id_board,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_board_stars_id_board_by_id_member_by_id_board_star_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars_id_board: Annotated[MembersBoardStarsIdBoard, Field(description="Attributes of \"Members Board Stars Id Board\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars_id_board: Attributes of \"Members Board Stars Id Board\" to be updated. (required)
        :type members_board_stars_id_board: MembersBoardStarsIdBoard
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_id_board_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars_id_board=members_board_stars_id_board,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_board_stars_id_board_by_id_member_by_id_board_star_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars_id_board: Annotated[MembersBoardStarsIdBoard, Field(description="Attributes of \"Members Board Stars Id Board\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars_id_board: Attributes of \"Members Board Stars Id Board\" to be updated. (required)
        :type members_board_stars_id_board: MembersBoardStarsIdBoard
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_id_board_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars_id_board=members_board_stars_id_board,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_board_stars_id_board_by_id_member_by_id_board_star_serialize(
        self,
        id_member,
        id_board_star,
        key,
        token,
        members_board_stars_id_board,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_star is not None:
            _path_params['idBoardStar'] = id_board_star
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_board_stars_id_board is not None:
            _body_params = members_board_stars_id_board



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/boardStars/{idBoardStar}/idBoard',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_board_stars_pos_by_id_member_by_id_board_star(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars_pos: Annotated[MembersBoardStarsPos, Field(description="Attributes of \"Members Board Stars Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersBoardStarsPosByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars_pos: Attributes of \"Members Board Stars Pos\" to be updated. (required)
        :type members_board_stars_pos: MembersBoardStarsPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_pos_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars_pos=members_board_stars_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_board_stars_pos_by_id_member_by_id_board_star_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars_pos: Annotated[MembersBoardStarsPos, Field(description="Attributes of \"Members Board Stars Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersBoardStarsPosByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars_pos: Attributes of \"Members Board Stars Pos\" to be updated. (required)
        :type members_board_stars_pos: MembersBoardStarsPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_pos_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars_pos=members_board_stars_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_board_stars_pos_by_id_member_by_id_board_star_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_star: Annotated[StrictStr, Field(description="idBoardStar")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_board_stars_pos: Annotated[MembersBoardStarsPos, Field(description="Attributes of \"Members Board Stars Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersBoardStarsPosByIdMemberByIdBoardStar()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_star: idBoardStar (required)
        :type id_board_star: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_board_stars_pos: Attributes of \"Members Board Stars Pos\" to be updated. (required)
        :type members_board_stars_pos: MembersBoardStarsPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_board_stars_pos_by_id_member_by_id_board_star_serialize(
            id_member=id_member,
            id_board_star=id_board_star,
            key=key,
            token=token,
            members_board_stars_pos=members_board_stars_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_board_stars_pos_by_id_member_by_id_board_star_serialize(
        self,
        id_member,
        id_board_star,
        key,
        token,
        members_board_stars_pos,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_star is not None:
            _path_params['idBoardStar'] = id_board_star
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_board_stars_pos is not None:
            _body_params = members_board_stars_pos



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/boardStars/{idBoardStar}/pos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members: Annotated[Members, Field(description="Attributes of \"Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members: Attributes of \"Members\" to be updated. (required)
        :type members: Members
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members=members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members: Annotated[Members, Field(description="Attributes of \"Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members: Attributes of \"Members\" to be updated. (required)
        :type members: Members
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members=members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members: Annotated[Members, Field(description="Attributes of \"Members\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members: Attributes of \"Members\" to be updated. (required)
        :type members: Members
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members=members,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members is not None:
            _body_params = members



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_custom_board_backgrounds_by_id_member_by_id_board_background(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_board_backgrounds: Annotated[MembersCustomBoardBackgrounds, Field(description="Attributes of \"Members Custom Board Backgrounds\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_board_backgrounds: Attributes of \"Members Custom Board Backgrounds\" to be updated. (required)
        :type members_custom_board_backgrounds: MembersCustomBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            members_custom_board_backgrounds=members_custom_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_custom_board_backgrounds_by_id_member_by_id_board_background_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_board_backgrounds: Annotated[MembersCustomBoardBackgrounds, Field(description="Attributes of \"Members Custom Board Backgrounds\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_board_backgrounds: Attributes of \"Members Custom Board Backgrounds\" to be updated. (required)
        :type members_custom_board_backgrounds: MembersCustomBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            members_custom_board_backgrounds=members_custom_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_custom_board_backgrounds_by_id_member_by_id_board_background_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_board_background: Annotated[StrictStr, Field(description="idBoardBackground")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_custom_board_backgrounds: Annotated[MembersCustomBoardBackgrounds, Field(description="Attributes of \"Members Custom Board Backgrounds\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_board_background: idBoardBackground (required)
        :type id_board_background: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_custom_board_backgrounds: Attributes of \"Members Custom Board Backgrounds\" to be updated. (required)
        :type members_custom_board_backgrounds: MembersCustomBoardBackgrounds
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
            id_member=id_member,
            id_board_background=id_board_background,
            key=key,
            token=token,
            members_custom_board_backgrounds=members_custom_board_backgrounds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_custom_board_backgrounds_by_id_member_by_id_board_background_serialize(
        self,
        id_member,
        id_board_background,
        key,
        token,
        members_custom_board_backgrounds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_board_background is not None:
            _path_params['idBoardBackground'] = id_board_background
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_custom_board_backgrounds is not None:
            _body_params = members_custom_board_backgrounds



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/customBoardBackgrounds/{idBoardBackground}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_full_name_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_full_name: Annotated[MembersFullName, Field(description="Attributes of \"Members Full Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersFullNameByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_full_name: Attributes of \"Members Full Name\" to be updated. (required)
        :type members_full_name: MembersFullName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_full_name_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_full_name=members_full_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_full_name_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_full_name: Annotated[MembersFullName, Field(description="Attributes of \"Members Full Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersFullNameByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_full_name: Attributes of \"Members Full Name\" to be updated. (required)
        :type members_full_name: MembersFullName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_full_name_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_full_name=members_full_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_full_name_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_full_name: Annotated[MembersFullName, Field(description="Attributes of \"Members Full Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersFullNameByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_full_name: Attributes of \"Members Full Name\" to be updated. (required)
        :type members_full_name: MembersFullName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_full_name_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_full_name=members_full_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_full_name_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_full_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_full_name is not None:
            _body_params = members_full_name



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/fullName',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_initials_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_initials: Annotated[MembersInitials, Field(description="Attributes of \"Members Initials\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersInitialsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_initials: Attributes of \"Members Initials\" to be updated. (required)
        :type members_initials: MembersInitials
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_initials_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_initials=members_initials,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_initials_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_initials: Annotated[MembersInitials, Field(description="Attributes of \"Members Initials\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersInitialsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_initials: Attributes of \"Members Initials\" to be updated. (required)
        :type members_initials: MembersInitials
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_initials_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_initials=members_initials,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_initials_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_initials: Annotated[MembersInitials, Field(description="Attributes of \"Members Initials\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersInitialsByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_initials: Attributes of \"Members Initials\" to be updated. (required)
        :type members_initials: MembersInitials
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_initials_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_initials=members_initials,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_initials_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_initials,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_initials is not None:
            _body_params = members_initials



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/initials',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_prefs_color_blind_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_color_blind: Annotated[PrefsColorBlind, Field(description="Attributes of \"Prefs Color Blind\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersPrefsColorBlindByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_color_blind: Attributes of \"Prefs Color Blind\" to be updated. (required)
        :type prefs_color_blind: PrefsColorBlind
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_color_blind_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_color_blind=prefs_color_blind,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_prefs_color_blind_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_color_blind: Annotated[PrefsColorBlind, Field(description="Attributes of \"Prefs Color Blind\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersPrefsColorBlindByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_color_blind: Attributes of \"Prefs Color Blind\" to be updated. (required)
        :type prefs_color_blind: PrefsColorBlind
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_color_blind_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_color_blind=prefs_color_blind,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_prefs_color_blind_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_color_blind: Annotated[PrefsColorBlind, Field(description="Attributes of \"Prefs Color Blind\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersPrefsColorBlindByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_color_blind: Attributes of \"Prefs Color Blind\" to be updated. (required)
        :type prefs_color_blind: PrefsColorBlind
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_color_blind_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_color_blind=prefs_color_blind,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_prefs_color_blind_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        prefs_color_blind,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_color_blind is not None:
            _body_params = prefs_color_blind



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/prefs/colorBlind',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_prefs_locale_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_locale: Annotated[PrefsLocale, Field(description="Attributes of \"Prefs Locale\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersPrefsLocaleByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_locale: Attributes of \"Prefs Locale\" to be updated. (required)
        :type prefs_locale: PrefsLocale
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_locale_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_locale=prefs_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_prefs_locale_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_locale: Annotated[PrefsLocale, Field(description="Attributes of \"Prefs Locale\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersPrefsLocaleByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_locale: Attributes of \"Prefs Locale\" to be updated. (required)
        :type prefs_locale: PrefsLocale
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_locale_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_locale=prefs_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_prefs_locale_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_locale: Annotated[PrefsLocale, Field(description="Attributes of \"Prefs Locale\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersPrefsLocaleByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_locale: Attributes of \"Prefs Locale\" to be updated. (required)
        :type prefs_locale: PrefsLocale
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_locale_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_locale=prefs_locale,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_prefs_locale_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        prefs_locale,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_locale is not None:
            _body_params = prefs_locale



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/prefs/locale',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_prefs_minutes_between_summaries_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_minutes_between_summaries: Annotated[PrefsMinutesBetweenSummaries, Field(description="Attributes of \"Prefs Minutes Between Summaries\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersPrefsMinutesBetweenSummariesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_minutes_between_summaries: Attributes of \"Prefs Minutes Between Summaries\" to be updated. (required)
        :type prefs_minutes_between_summaries: PrefsMinutesBetweenSummaries
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_minutes_between_summaries_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_minutes_between_summaries=prefs_minutes_between_summaries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_prefs_minutes_between_summaries_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_minutes_between_summaries: Annotated[PrefsMinutesBetweenSummaries, Field(description="Attributes of \"Prefs Minutes Between Summaries\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersPrefsMinutesBetweenSummariesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_minutes_between_summaries: Attributes of \"Prefs Minutes Between Summaries\" to be updated. (required)
        :type prefs_minutes_between_summaries: PrefsMinutesBetweenSummaries
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_minutes_between_summaries_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_minutes_between_summaries=prefs_minutes_between_summaries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_prefs_minutes_between_summaries_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        prefs_minutes_between_summaries: Annotated[PrefsMinutesBetweenSummaries, Field(description="Attributes of \"Prefs Minutes Between Summaries\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersPrefsMinutesBetweenSummariesByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param prefs_minutes_between_summaries: Attributes of \"Prefs Minutes Between Summaries\" to be updated. (required)
        :type prefs_minutes_between_summaries: PrefsMinutesBetweenSummaries
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_prefs_minutes_between_summaries_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            prefs_minutes_between_summaries=prefs_minutes_between_summaries,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_prefs_minutes_between_summaries_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        prefs_minutes_between_summaries,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if prefs_minutes_between_summaries is not None:
            _body_params = prefs_minutes_between_summaries



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/prefs/minutesBetweenSummaries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_saved_searches_by_id_member_by_id_saved_search(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches: Annotated[MembersSavedSearches, Field(description="Attributes of \"Members Saved Searches\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches: Attributes of \"Members Saved Searches\" to be updated. (required)
        :type members_saved_searches: MembersSavedSearches
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches=members_saved_searches,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_saved_searches_by_id_member_by_id_saved_search_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches: Annotated[MembersSavedSearches, Field(description="Attributes of \"Members Saved Searches\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches: Attributes of \"Members Saved Searches\" to be updated. (required)
        :type members_saved_searches: MembersSavedSearches
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches=members_saved_searches,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_saved_searches_by_id_member_by_id_saved_search_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches: Annotated[MembersSavedSearches, Field(description="Attributes of \"Members Saved Searches\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersSavedSearchesByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches: Attributes of \"Members Saved Searches\" to be updated. (required)
        :type members_saved_searches: MembersSavedSearches
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches=members_saved_searches,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_saved_searches_by_id_member_by_id_saved_search_serialize(
        self,
        id_member,
        id_saved_search,
        key,
        token,
        members_saved_searches,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_saved_search is not None:
            _path_params['idSavedSearch'] = id_saved_search
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_saved_searches is not None:
            _body_params = members_saved_searches



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/savedSearches/{idSavedSearch}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_saved_searches_name_by_id_member_by_id_saved_search(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_name: Annotated[MembersSavedSearchesName, Field(description="Attributes of \"Members Saved Searches Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_name: Attributes of \"Members Saved Searches Name\" to be updated. (required)
        :type members_saved_searches_name: MembersSavedSearchesName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_name_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_name=members_saved_searches_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_saved_searches_name_by_id_member_by_id_saved_search_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_name: Annotated[MembersSavedSearchesName, Field(description="Attributes of \"Members Saved Searches Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_name: Attributes of \"Members Saved Searches Name\" to be updated. (required)
        :type members_saved_searches_name: MembersSavedSearchesName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_name_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_name=members_saved_searches_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_saved_searches_name_by_id_member_by_id_saved_search_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_name: Annotated[MembersSavedSearchesName, Field(description="Attributes of \"Members Saved Searches Name\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_name: Attributes of \"Members Saved Searches Name\" to be updated. (required)
        :type members_saved_searches_name: MembersSavedSearchesName
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_name_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_name=members_saved_searches_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_saved_searches_name_by_id_member_by_id_saved_search_serialize(
        self,
        id_member,
        id_saved_search,
        key,
        token,
        members_saved_searches_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_saved_search is not None:
            _path_params['idSavedSearch'] = id_saved_search
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_saved_searches_name is not None:
            _body_params = members_saved_searches_name



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/savedSearches/{idSavedSearch}/name',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_saved_searches_pos_by_id_member_by_id_saved_search(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_pos: Annotated[MembersSavedSearchesPos, Field(description="Attributes of \"Members Saved Searches Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_pos: Attributes of \"Members Saved Searches Pos\" to be updated. (required)
        :type members_saved_searches_pos: MembersSavedSearchesPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_pos_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_pos=members_saved_searches_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_saved_searches_pos_by_id_member_by_id_saved_search_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_pos: Annotated[MembersSavedSearchesPos, Field(description="Attributes of \"Members Saved Searches Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_pos: Attributes of \"Members Saved Searches Pos\" to be updated. (required)
        :type members_saved_searches_pos: MembersSavedSearchesPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_pos_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_pos=members_saved_searches_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_saved_searches_pos_by_id_member_by_id_saved_search_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_pos: Annotated[MembersSavedSearchesPos, Field(description="Attributes of \"Members Saved Searches Pos\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_pos: Attributes of \"Members Saved Searches Pos\" to be updated. (required)
        :type members_saved_searches_pos: MembersSavedSearchesPos
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_pos_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_pos=members_saved_searches_pos,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_saved_searches_pos_by_id_member_by_id_saved_search_serialize(
        self,
        id_member,
        id_saved_search,
        key,
        token,
        members_saved_searches_pos,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_saved_search is not None:
            _path_params['idSavedSearch'] = id_saved_search
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_saved_searches_pos is not None:
            _body_params = members_saved_searches_pos



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/savedSearches/{idSavedSearch}/pos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_saved_searches_query_by_id_member_by_id_saved_search(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_query: Annotated[MembersSavedSearchesQuery, Field(description="Attributes of \"Members Saved Searches Query\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_query: Attributes of \"Members Saved Searches Query\" to be updated. (required)
        :type members_saved_searches_query: MembersSavedSearchesQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_query_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_query=members_saved_searches_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_saved_searches_query_by_id_member_by_id_saved_search_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_query: Annotated[MembersSavedSearchesQuery, Field(description="Attributes of \"Members Saved Searches Query\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_query: Attributes of \"Members Saved Searches Query\" to be updated. (required)
        :type members_saved_searches_query: MembersSavedSearchesQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_query_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_query=members_saved_searches_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_saved_searches_query_by_id_member_by_id_saved_search_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        id_saved_search: Annotated[StrictStr, Field(description="idSavedSearch")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_saved_searches_query: Annotated[MembersSavedSearchesQuery, Field(description="Attributes of \"Members Saved Searches Query\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param id_saved_search: idSavedSearch (required)
        :type id_saved_search: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_saved_searches_query: Attributes of \"Members Saved Searches Query\" to be updated. (required)
        :type members_saved_searches_query: MembersSavedSearchesQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_saved_searches_query_by_id_member_by_id_saved_search_serialize(
            id_member=id_member,
            id_saved_search=id_saved_search,
            key=key,
            token=token,
            members_saved_searches_query=members_saved_searches_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_saved_searches_query_by_id_member_by_id_saved_search_serialize(
        self,
        id_member,
        id_saved_search,
        key,
        token,
        members_saved_searches_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        if id_saved_search is not None:
            _path_params['idSavedSearch'] = id_saved_search
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_saved_searches_query is not None:
            _body_params = members_saved_searches_query



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/savedSearches/{idSavedSearch}/query',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_members_username_by_id_member(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_username: Annotated[MembersUsername, Field(description="Attributes of \"Members Username\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """updateMembersUsernameByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_username: Attributes of \"Members Username\" to be updated. (required)
        :type members_username: MembersUsername
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_username_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_username=members_username,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_members_username_by_id_member_with_http_info(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_username: Annotated[MembersUsername, Field(description="Attributes of \"Members Username\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """updateMembersUsernameByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_username: Attributes of \"Members Username\" to be updated. (required)
        :type members_username: MembersUsername
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_username_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_username=members_username,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_members_username_by_id_member_without_preload_content(
        self,
        id_member: Annotated[StrictStr, Field(description="idMember or username")],
        key: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>")],
        token: Annotated[StrictStr, Field(description="<a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>")],
        members_username: Annotated[MembersUsername, Field(description="Attributes of \"Members Username\" to be updated.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateMembersUsernameByIdMember()


        :param id_member: idMember or username (required)
        :type id_member: str
        :param key: <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a> (required)
        :type key: str
        :param token: <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a> (required)
        :type token: str
        :param members_username: Attributes of \"Members Username\" to be updated. (required)
        :type members_username: MembersUsername
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_members_username_by_id_member_serialize(
            id_member=id_member,
            key=key,
            token=token,
            members_username=members_username,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_members_username_by_id_member_serialize(
        self,
        id_member,
        key,
        token,
        members_username,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_member is not None:
            _path_params['idMember'] = id_member
        # process the query parameters
        if key is not None:
            
            _query_params.append(('key', key))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if members_username is not None:
            _body_params = members_username



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'api_token'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/members/{idMember}/username',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



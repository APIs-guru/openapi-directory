# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.api_paged_response_dealer_db_models_voucher import APIPagedResponseDealerDBModelsVoucher
from openapi_client.models.api_paged_response_dealer_db_models_voucher_history import APIPagedResponseDealerDBModelsVoucherHistory
from openapi_client.models.dealer_db_models_voucher import DealerDBModelsVoucher

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class VouchersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_v2_vouchers_voucher_code_get(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to get.")],
        deleted: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DealerDBModelsVoucher:
        """Get a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to get. (required)
        :type voucher_code: str
        :param deleted: Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
        :type deleted: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v2_vouchers_voucher_code_get_serialize(
            voucher_code=voucher_code,
            deleted=deleted,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealerDBModelsVoucher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v2_vouchers_voucher_code_get_with_http_info(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to get.")],
        deleted: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DealerDBModelsVoucher]:
        """Get a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to get. (required)
        :type voucher_code: str
        :param deleted: Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
        :type deleted: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v2_vouchers_voucher_code_get_serialize(
            voucher_code=voucher_code,
            deleted=deleted,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealerDBModelsVoucher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v2_vouchers_voucher_code_get_without_preload_content(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to get.")],
        deleted: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to get. (required)
        :type voucher_code: str
        :param deleted: Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
        :type deleted: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v2_vouchers_voucher_code_get_serialize(
            voucher_code=voucher_code,
            deleted=deleted,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DealerDBModelsVoucher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v2_vouchers_voucher_code_get_serialize(
        self,
        voucher_code,
        deleted,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if voucher_code is not None:
            _path_params['VoucherCode'] = voucher_code
        # process the query parameters
        if deleted is not None:
            
            _query_params.append(('Deleted', deleted))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/json', 
                    'text/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/Vouchers/{VoucherCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vouchers_delete(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to delete. (required)
        :type voucher_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_delete_serialize(
            voucher_code=voucher_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vouchers_delete_with_http_info(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to delete. (required)
        :type voucher_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_delete_serialize(
            voucher_code=voucher_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vouchers_delete_without_preload_content(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to delete.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to delete. (required)
        :type voucher_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_delete_serialize(
            voucher_code=voucher_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vouchers_delete_serialize(
        self,
        voucher_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if voucher_code is not None:
            _path_params['VoucherCode'] = voucher_code
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/Vouchers/{VoucherCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vouchers_get(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Type")] = None,
        dealer_code: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by DealerCode")] = None,
        license_to: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by LicenseTo. Wildcard supported (*).")] = None,
        purpose: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Purpose. Wildcard supported (*).")] = None,
        order_number: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by OrderNumber")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Email. Wildcard supported (*).")] = None,
        modified_by: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by ModifiedBy")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by CreatedDate")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by CreatedDate")] = None,
        punched_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by PunchedDate")] = None,
        punched_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by PunchedDate")] = None,
        punched: Annotated[Optional[StrictBool], Field(description="Optional. Filter vouchers by Punched status")] = None,
        expiration_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by ExpirationDate")] = None,
        expiration_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by ExpirationDate")] = None,
        deleted: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The page limit. The default page limit is 10.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Optional. The page offset. The default page offset is 0.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIPagedResponseDealerDBModelsVoucher:
        """Gets a list of vouchers

        No Documentation Found.

        :param type: Optional. Filter vouchers by Type
        :type type: str
        :param dealer_code: Optional. Filter vouchers by DealerCode
        :type dealer_code: str
        :param license_to: Optional. Filter vouchers by LicenseTo. Wildcard supported (*).
        :type license_to: str
        :param purpose: Optional. Filter vouchers by Purpose. Wildcard supported (*).
        :type purpose: str
        :param order_number: Optional. Filter vouchers by OrderNumber
        :type order_number: str
        :param email: Optional. Filter vouchers by Email. Wildcard supported (*).
        :type email: str
        :param modified_by: Optional. Filter vouchers by ModifiedBy
        :type modified_by: str
        :param created_after: Optional. Filter vouchers by CreatedDate
        :type created_after: datetime
        :param created_before: Optional. Filter vouchers by CreatedDate
        :type created_before: datetime
        :param punched_after: Optional. Filter vouchers by PunchedDate
        :type punched_after: datetime
        :param punched_before: Optional. Filter vouchers by PunchedDate
        :type punched_before: datetime
        :param punched: Optional. Filter vouchers by Punched status
        :type punched: bool
        :param expiration_after: Optional. Filter vouchers by ExpirationDate
        :type expiration_after: datetime
        :param expiration_before: Optional. Filter vouchers by ExpirationDate
        :type expiration_before: datetime
        :param deleted: Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
        :type deleted: str
        :param limit: Optional. The page limit. The default page limit is 10.
        :type limit: int
        :param offset: Optional. The page offset. The default page offset is 0.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_get_serialize(
            type=type,
            dealer_code=dealer_code,
            license_to=license_to,
            purpose=purpose,
            order_number=order_number,
            email=email,
            modified_by=modified_by,
            created_after=created_after,
            created_before=created_before,
            punched_after=punched_after,
            punched_before=punched_before,
            punched=punched,
            expiration_after=expiration_after,
            expiration_before=expiration_before,
            deleted=deleted,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIPagedResponseDealerDBModelsVoucher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vouchers_get_with_http_info(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Type")] = None,
        dealer_code: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by DealerCode")] = None,
        license_to: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by LicenseTo. Wildcard supported (*).")] = None,
        purpose: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Purpose. Wildcard supported (*).")] = None,
        order_number: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by OrderNumber")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Email. Wildcard supported (*).")] = None,
        modified_by: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by ModifiedBy")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by CreatedDate")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by CreatedDate")] = None,
        punched_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by PunchedDate")] = None,
        punched_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by PunchedDate")] = None,
        punched: Annotated[Optional[StrictBool], Field(description="Optional. Filter vouchers by Punched status")] = None,
        expiration_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by ExpirationDate")] = None,
        expiration_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by ExpirationDate")] = None,
        deleted: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The page limit. The default page limit is 10.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Optional. The page offset. The default page offset is 0.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIPagedResponseDealerDBModelsVoucher]:
        """Gets a list of vouchers

        No Documentation Found.

        :param type: Optional. Filter vouchers by Type
        :type type: str
        :param dealer_code: Optional. Filter vouchers by DealerCode
        :type dealer_code: str
        :param license_to: Optional. Filter vouchers by LicenseTo. Wildcard supported (*).
        :type license_to: str
        :param purpose: Optional. Filter vouchers by Purpose. Wildcard supported (*).
        :type purpose: str
        :param order_number: Optional. Filter vouchers by OrderNumber
        :type order_number: str
        :param email: Optional. Filter vouchers by Email. Wildcard supported (*).
        :type email: str
        :param modified_by: Optional. Filter vouchers by ModifiedBy
        :type modified_by: str
        :param created_after: Optional. Filter vouchers by CreatedDate
        :type created_after: datetime
        :param created_before: Optional. Filter vouchers by CreatedDate
        :type created_before: datetime
        :param punched_after: Optional. Filter vouchers by PunchedDate
        :type punched_after: datetime
        :param punched_before: Optional. Filter vouchers by PunchedDate
        :type punched_before: datetime
        :param punched: Optional. Filter vouchers by Punched status
        :type punched: bool
        :param expiration_after: Optional. Filter vouchers by ExpirationDate
        :type expiration_after: datetime
        :param expiration_before: Optional. Filter vouchers by ExpirationDate
        :type expiration_before: datetime
        :param deleted: Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
        :type deleted: str
        :param limit: Optional. The page limit. The default page limit is 10.
        :type limit: int
        :param offset: Optional. The page offset. The default page offset is 0.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_get_serialize(
            type=type,
            dealer_code=dealer_code,
            license_to=license_to,
            purpose=purpose,
            order_number=order_number,
            email=email,
            modified_by=modified_by,
            created_after=created_after,
            created_before=created_before,
            punched_after=punched_after,
            punched_before=punched_before,
            punched=punched,
            expiration_after=expiration_after,
            expiration_before=expiration_before,
            deleted=deleted,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIPagedResponseDealerDBModelsVoucher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vouchers_get_without_preload_content(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Type")] = None,
        dealer_code: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by DealerCode")] = None,
        license_to: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by LicenseTo. Wildcard supported (*).")] = None,
        purpose: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Purpose. Wildcard supported (*).")] = None,
        order_number: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by OrderNumber")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Email. Wildcard supported (*).")] = None,
        modified_by: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by ModifiedBy")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by CreatedDate")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by CreatedDate")] = None,
        punched_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by PunchedDate")] = None,
        punched_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by PunchedDate")] = None,
        punched: Annotated[Optional[StrictBool], Field(description="Optional. Filter vouchers by Punched status")] = None,
        expiration_after: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by ExpirationDate")] = None,
        expiration_before: Annotated[Optional[datetime], Field(description="Optional. Filter vouchers by ExpirationDate")] = None,
        deleted: Annotated[Optional[StrictStr], Field(description="Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The page limit. The default page limit is 10.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Optional. The page offset. The default page offset is 0.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a list of vouchers

        No Documentation Found.

        :param type: Optional. Filter vouchers by Type
        :type type: str
        :param dealer_code: Optional. Filter vouchers by DealerCode
        :type dealer_code: str
        :param license_to: Optional. Filter vouchers by LicenseTo. Wildcard supported (*).
        :type license_to: str
        :param purpose: Optional. Filter vouchers by Purpose. Wildcard supported (*).
        :type purpose: str
        :param order_number: Optional. Filter vouchers by OrderNumber
        :type order_number: str
        :param email: Optional. Filter vouchers by Email. Wildcard supported (*).
        :type email: str
        :param modified_by: Optional. Filter vouchers by ModifiedBy
        :type modified_by: str
        :param created_after: Optional. Filter vouchers by CreatedDate
        :type created_after: datetime
        :param created_before: Optional. Filter vouchers by CreatedDate
        :type created_before: datetime
        :param punched_after: Optional. Filter vouchers by PunchedDate
        :type punched_after: datetime
        :param punched_before: Optional. Filter vouchers by PunchedDate
        :type punched_before: datetime
        :param punched: Optional. Filter vouchers by Punched status
        :type punched: bool
        :param expiration_after: Optional. Filter vouchers by ExpirationDate
        :type expiration_after: datetime
        :param expiration_before: Optional. Filter vouchers by ExpirationDate
        :type expiration_before: datetime
        :param deleted: Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.
        :type deleted: str
        :param limit: Optional. The page limit. The default page limit is 10.
        :type limit: int
        :param offset: Optional. The page offset. The default page offset is 0.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_get_serialize(
            type=type,
            dealer_code=dealer_code,
            license_to=license_to,
            purpose=purpose,
            order_number=order_number,
            email=email,
            modified_by=modified_by,
            created_after=created_after,
            created_before=created_before,
            punched_after=punched_after,
            punched_before=punched_before,
            punched=punched,
            expiration_after=expiration_after,
            expiration_before=expiration_before,
            deleted=deleted,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIPagedResponseDealerDBModelsVoucher",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vouchers_get_serialize(
        self,
        type,
        dealer_code,
        license_to,
        purpose,
        order_number,
        email,
        modified_by,
        created_after,
        created_before,
        punched_after,
        punched_before,
        punched,
        expiration_after,
        expiration_before,
        deleted,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            
            _query_params.append(('Type', type))
            
        if dealer_code is not None:
            
            _query_params.append(('DealerCode', dealer_code))
            
        if license_to is not None:
            
            _query_params.append(('LicenseTo', license_to))
            
        if purpose is not None:
            
            _query_params.append(('Purpose', purpose))
            
        if order_number is not None:
            
            _query_params.append(('OrderNumber', order_number))
            
        if email is not None:
            
            _query_params.append(('Email', email))
            
        if modified_by is not None:
            
            _query_params.append(('ModifiedBy', modified_by))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'CreatedAfter',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('CreatedAfter', created_after))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'CreatedBefore',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('CreatedBefore', created_before))
            
        if punched_after is not None:
            if isinstance(punched_after, datetime):
                _query_params.append(
                    (
                        'PunchedAfter',
                        punched_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('PunchedAfter', punched_after))
            
        if punched_before is not None:
            if isinstance(punched_before, datetime):
                _query_params.append(
                    (
                        'PunchedBefore',
                        punched_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('PunchedBefore', punched_before))
            
        if punched is not None:
            
            _query_params.append(('Punched', punched))
            
        if expiration_after is not None:
            if isinstance(expiration_after, datetime):
                _query_params.append(
                    (
                        'ExpirationAfter',
                        expiration_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ExpirationAfter', expiration_after))
            
        if expiration_before is not None:
            if isinstance(expiration_before, datetime):
                _query_params.append(
                    (
                        'ExpirationBefore',
                        expiration_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('ExpirationBefore', expiration_before))
            
        if deleted is not None:
            
            _query_params.append(('Deleted', deleted))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/Vouchers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vouchers_get_voucher_history(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code to get history for.")],
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The page limit. The default page limit is 10.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Optional. The page offset. The default page offset is 0.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIPagedResponseDealerDBModelsVoucherHistory:
        """Get a voucher's history.

        No Documentation Found.

        :param voucher_code: The voucher code to get history for. (required)
        :type voucher_code: str
        :param limit: Optional. The page limit. The default page limit is 10.
        :type limit: int
        :param offset: Optional. The page offset. The default page offset is 0.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_get_voucher_history_serialize(
            voucher_code=voucher_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIPagedResponseDealerDBModelsVoucherHistory",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vouchers_get_voucher_history_with_http_info(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code to get history for.")],
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The page limit. The default page limit is 10.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Optional. The page offset. The default page offset is 0.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIPagedResponseDealerDBModelsVoucherHistory]:
        """Get a voucher's history.

        No Documentation Found.

        :param voucher_code: The voucher code to get history for. (required)
        :type voucher_code: str
        :param limit: Optional. The page limit. The default page limit is 10.
        :type limit: int
        :param offset: Optional. The page offset. The default page offset is 0.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_get_voucher_history_serialize(
            voucher_code=voucher_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIPagedResponseDealerDBModelsVoucherHistory",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vouchers_get_voucher_history_without_preload_content(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code to get history for.")],
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The page limit. The default page limit is 10.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Optional. The page offset. The default page offset is 0.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a voucher's history.

        No Documentation Found.

        :param voucher_code: The voucher code to get history for. (required)
        :type voucher_code: str
        :param limit: Optional. The page limit. The default page limit is 10.
        :type limit: int
        :param offset: Optional. The page offset. The default page offset is 0.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_get_voucher_history_serialize(
            voucher_code=voucher_code,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIPagedResponseDealerDBModelsVoucherHistory",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vouchers_get_voucher_history_serialize(
        self,
        voucher_code,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if voucher_code is not None:
            _path_params['VoucherCode'] = voucher_code
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/Vouchers/{VoucherCode}/VoucherHistory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vouchers_post(
        self,
        dealer_db_models_voucher: Annotated[DealerDBModelsVoucher, Field(description="The voucher to add.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Create a voucher

        No Documentation Found.

        :param dealer_db_models_voucher: The voucher to add. (required)
        :type dealer_db_models_voucher: DealerDBModelsVoucher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_post_serialize(
            dealer_db_models_voucher=dealer_db_models_voucher,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vouchers_post_with_http_info(
        self,
        dealer_db_models_voucher: Annotated[DealerDBModelsVoucher, Field(description="The voucher to add.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Create a voucher

        No Documentation Found.

        :param dealer_db_models_voucher: The voucher to add. (required)
        :type dealer_db_models_voucher: DealerDBModelsVoucher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_post_serialize(
            dealer_db_models_voucher=dealer_db_models_voucher,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vouchers_post_without_preload_content(
        self,
        dealer_db_models_voucher: Annotated[DealerDBModelsVoucher, Field(description="The voucher to add.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a voucher

        No Documentation Found.

        :param dealer_db_models_voucher: The voucher to add. (required)
        :type dealer_db_models_voucher: DealerDBModelsVoucher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_post_serialize(
            dealer_db_models_voucher=dealer_db_models_voucher,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vouchers_post_serialize(
        self,
        dealer_db_models_voucher,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if dealer_db_models_voucher is not None:
            _body_params = dealer_db_models_voucher


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/json', 
                    'text/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'application/xml', 
                        'text/json', 
                        'text/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/Vouchers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vouchers_put(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to update.")],
        dealer_db_models_voucher: Annotated[DealerDBModelsVoucher, Field(description="The updated voucher.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to update. (required)
        :type voucher_code: str
        :param dealer_db_models_voucher: The updated voucher. (required)
        :type dealer_db_models_voucher: DealerDBModelsVoucher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_put_serialize(
            voucher_code=voucher_code,
            dealer_db_models_voucher=dealer_db_models_voucher,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vouchers_put_with_http_info(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to update.")],
        dealer_db_models_voucher: Annotated[DealerDBModelsVoucher, Field(description="The updated voucher.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to update. (required)
        :type voucher_code: str
        :param dealer_db_models_voucher: The updated voucher. (required)
        :type dealer_db_models_voucher: DealerDBModelsVoucher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_put_serialize(
            voucher_code=voucher_code,
            dealer_db_models_voucher=dealer_db_models_voucher,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vouchers_put_without_preload_content(
        self,
        voucher_code: Annotated[StrictStr, Field(description="The voucher code of the voucher to update.")],
        dealer_db_models_voucher: Annotated[DealerDBModelsVoucher, Field(description="The updated voucher.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a voucher

        No Documentation Found.

        :param voucher_code: The voucher code of the voucher to update. (required)
        :type voucher_code: str
        :param dealer_db_models_voucher: The updated voucher. (required)
        :type dealer_db_models_voucher: DealerDBModelsVoucher
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vouchers_put_serialize(
            voucher_code=voucher_code,
            dealer_db_models_voucher=dealer_db_models_voucher,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vouchers_put_serialize(
        self,
        voucher_code,
        dealer_db_models_voucher,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if voucher_code is not None:
            _path_params['VoucherCode'] = voucher_code
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if dealer_db_models_voucher is not None:
            _body_params = dealer_db_models_voucher



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'application/xml', 
                        'text/json', 
                        'text/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v2/Vouchers/{VoucherCode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



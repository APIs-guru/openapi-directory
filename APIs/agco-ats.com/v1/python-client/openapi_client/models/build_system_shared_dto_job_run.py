# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_system_shared_dto_activity_run import BuildSystemSharedDTOActivityRun
from openapi_client.models.build_system_shared_dto_parameter_value import BuildSystemSharedDTOParameterValue
from typing import Optional, Set
from typing_extensions import Self

class BuildSystemSharedDTOJobRun(BaseModel):
    """
    A DTO for an IJobRun
    """ # noqa: E501
    activity_runs: Optional[List[BuildSystemSharedDTOActivityRun]] = Field(default=None, description="The activity runs belonging to this JobRun", alias="ActivityRuns")
    end_date: Optional[datetime] = Field(default=None, description="The UTC date and time when the job completed", alias="EndDate")
    job_id: Optional[StrictInt] = Field(default=None, description="The ID of the job that defines the run", alias="JobID")
    job_run_id: Optional[StrictInt] = Field(default=None, description="The ID of this JobRun", alias="JobRunID")
    parameters: Optional[List[BuildSystemSharedDTOParameterValue]] = Field(default=None, description="The parameters used for this run of the job", alias="Parameters")
    start_date: Optional[datetime] = Field(default=None, description="The UTC date and time when the job started", alias="StartDate")
    status: Optional[StrictStr] = Field(default=None, description="The status of this JobRun", alias="Status")
    __properties: ClassVar[List[str]] = ["ActivityRuns", "EndDate", "JobID", "JobRunID", "Parameters", "StartDate", "Status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Ready', 'InProgress', 'Succeeded', 'Cancelled', 'Failed']):
            raise ValueError("must be one of enum values ('Ready', 'InProgress', 'Succeeded', 'Cancelled', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildSystemSharedDTOJobRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "activity_runs",
            "parameters",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in activity_runs (list)
        _items = []
        if self.activity_runs:
            for _item_activity_runs in self.activity_runs:
                if _item_activity_runs:
                    _items.append(_item_activity_runs.to_dict())
            _dict['ActivityRuns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['Parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildSystemSharedDTOJobRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivityRuns": [BuildSystemSharedDTOActivityRun.from_dict(_item) for _item in obj["ActivityRuns"]] if obj.get("ActivityRuns") is not None else None,
            "EndDate": obj.get("EndDate"),
            "JobID": obj.get("JobID"),
            "JobRunID": obj.get("JobRunID"),
            "Parameters": [BuildSystemSharedDTOParameterValue.from_dict(_item) for _item in obj["Parameters"]] if obj.get("Parameters") is not None else None,
            "StartDate": obj.get("StartDate"),
            "Status": obj.get("Status")
        })
        return _obj



# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.content_submission_shared_business_entities_content_definition import ContentSubmissionSharedBusinessEntitiesContentDefinition
from openapi_client.models.content_submission_shared_business_entities_content_submission_attribute import ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute
from typing import Optional, Set
from typing_extensions import Self

class ContentSubmissionSharedBusinessEntitiesContentSubmission(BaseModel):
    """
    A content submission
    """ # noqa: E501
    attributes: Optional[List[ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute]] = Field(default=None, description="Attributes of this ContentSubmission", alias="Attributes")
    build_id: Optional[StrictInt] = Field(default=None, description="ReadOnly. The ID of the Azure DevOps Build which will build the content package.", alias="BuildID")
    content_definition_id: Optional[StrictInt] = Field(default=None, description="The ID of the Content Definition.", alias="ContentDefinitionID")
    content_submission_id: Optional[StrictInt] = Field(default=None, description="The ID of this Content Submission.", alias="ContentSubmissionID")
    definition: Optional[ContentSubmissionSharedBusinessEntitiesContentDefinition] = Field(default=None, alias="Definition")
    job_run_id: Optional[StrictInt] = Field(default=None, description="ReadOnly. The ID of the JobRun which will build the content package.", alias="JobRunID")
    package_id: Optional[StrictStr] = Field(default=None, description="The ID of package generated by this content submission.", alias="PackageID")
    release_notes: Optional[StrictStr] = Field(default=None, description="Release Notes for this ContentSubmission", alias="ReleaseNotes")
    repository: Optional[StrictStr] = Field(default=None, description="The SVN repository used as the source of this content submission", alias="Repository")
    revision: Optional[StrictInt] = Field(default=None, description="The SVN revision used as the source of this content submission.", alias="Revision")
    submission_date: Optional[datetime] = Field(default=None, description="Read Only. The UTC date and time the content submission was made.", alias="SubmissionDate")
    user_id: Optional[StrictInt] = Field(default=None, description="Read Only. The ID of the user who submitted the content", alias="UserID")
    version: Optional[StrictInt] = Field(default=None, description="Optional.  The version number assigned to this Content Submission and the resulting Package.              If not provided, version shall be 1 if it is the first content submission for the               ContentDefinitionID otherwise it shall be the highest content submission version for the              specified ContentDefinitionID incremented by 1.", alias="Version")
    __properties: ClassVar[List[str]] = ["Attributes", "BuildID", "ContentDefinitionID", "ContentSubmissionID", "Definition", "JobRunID", "PackageID", "ReleaseNotes", "Repository", "Revision", "SubmissionDate", "UserID", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentSubmissionSharedBusinessEntitiesContentSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['Attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['Definition'] = self.definition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentSubmissionSharedBusinessEntitiesContentSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attributes": [ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute.from_dict(_item) for _item in obj["Attributes"]] if obj.get("Attributes") is not None else None,
            "BuildID": obj.get("BuildID"),
            "ContentDefinitionID": obj.get("ContentDefinitionID"),
            "ContentSubmissionID": obj.get("ContentSubmissionID"),
            "Definition": ContentSubmissionSharedBusinessEntitiesContentDefinition.from_dict(obj["Definition"]) if obj.get("Definition") is not None else None,
            "JobRunID": obj.get("JobRunID"),
            "PackageID": obj.get("PackageID"),
            "ReleaseNotes": obj.get("ReleaseNotes"),
            "Repository": obj.get("Repository"),
            "Revision": obj.get("Revision"),
            "SubmissionDate": obj.get("SubmissionDate"),
            "UserID": obj.get("UserID"),
            "Version": obj.get("Version")
        })
        return _obj



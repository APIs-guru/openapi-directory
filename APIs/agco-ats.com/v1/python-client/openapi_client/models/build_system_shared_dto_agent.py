# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_system_shared_dto_agent_status import BuildSystemSharedDTOAgentStatus
from openapi_client.models.build_system_shared_dto_step_configuration import BuildSystemSharedDTOStepConfiguration
from typing import Optional, Set
from typing_extensions import Self

class BuildSystemSharedDTOAgent(BaseModel):
    """
    A DTO for an IAgent
    """ # noqa: E501
    agent_id: Optional[StrictInt] = Field(default=None, description="The id of the Agent", alias="AgentID")
    keep_alive_interval: StrictInt = Field(description="The 'Heartbeat Interval' used by the Build Agent.", alias="KeepAliveInterval")
    machine_name: StrictStr = Field(description="The machine name of the computer the agent is running on", alias="MachineName")
    status: BuildSystemSharedDTOAgentStatus = Field(alias="Status")
    step_configurations: Optional[List[BuildSystemSharedDTOStepConfiguration]] = Field(default=None, description="The agent's step configurations", alias="StepConfigurations")
    user_id: StrictInt = Field(description="The UserID of the Agent", alias="UserID")
    __properties: ClassVar[List[str]] = ["AgentID", "KeepAliveInterval", "MachineName", "Status", "StepConfigurations", "UserID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildSystemSharedDTOAgent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "step_configurations",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['Status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in step_configurations (list)
        _items = []
        if self.step_configurations:
            for _item_step_configurations in self.step_configurations:
                if _item_step_configurations:
                    _items.append(_item_step_configurations.to_dict())
            _dict['StepConfigurations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildSystemSharedDTOAgent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AgentID": obj.get("AgentID"),
            "KeepAliveInterval": obj.get("KeepAliveInterval"),
            "MachineName": obj.get("MachineName"),
            "Status": BuildSystemSharedDTOAgentStatus.from_dict(obj["Status"]) if obj.get("Status") is not None else None,
            "StepConfigurations": [BuildSystemSharedDTOStepConfiguration.from_dict(_item) for _item in obj["StepConfigurations"]] if obj.get("StepConfigurations") is not None else None,
            "UserID": obj.get("UserID")
        })
        return _obj



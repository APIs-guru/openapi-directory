# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.global_resources_shared_models_translation_set_attribute import GlobalResourcesSharedModelsTranslationSetAttribute
from typing import Optional, Set
from typing_extensions import Self

class GlobalResourcesSharedModelsTranslationSet(BaseModel):
    """
    A set of strings submitted for translation
    """ # noqa: E501
    attributes: Optional[List[GlobalResourcesSharedModelsTranslationSetAttribute]] = Field(default=None, description="Attributes of the Translation Set", alias="Attributes")
    file_ids: List[StrictStr] = Field(description="IDs for files related to this translation set. For example, the original and processed files", alias="FileIDs")
    id: Optional[StrictInt] = Field(default=None, description="The id of the TranslationSet.", alias="Id")
    in_date: Optional[datetime] = Field(default=None, description="Read Only. The date the translation set was returned.", alias="InDate")
    notes: Optional[StrictStr] = Field(default=None, description="Notes on the TranslationSet", alias="Notes")
    out_date: Optional[datetime] = Field(default=None, description="Read Only. The date the translation set was sent out.", alias="OutDate")
    state: StrictStr = Field(description="An enum indicating the state of the translation set", alias="State")
    translation_request_id: Optional[StrictInt] = Field(default=None, description="Read Only. The Id of the TranslationRequest which generated this translation set.", alias="TranslationRequestID")
    __properties: ClassVar[List[str]] = ["Attributes", "FileIDs", "Id", "InDate", "Notes", "OutDate", "State", "TranslationRequestID"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OutForProcessing', 'Processing', 'PendingApproval', 'OutForTranslation', 'Cancelled', 'Completed']):
            raise ValueError("must be one of enum values ('OutForProcessing', 'Processing', 'PendingApproval', 'OutForTranslation', 'Cancelled', 'Completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsTranslationSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['Attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsTranslationSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attributes": [GlobalResourcesSharedModelsTranslationSetAttribute.from_dict(_item) for _item in obj["Attributes"]] if obj.get("Attributes") is not None else None,
            "FileIDs": obj.get("FileIDs"),
            "Id": obj.get("Id"),
            "InDate": obj.get("InDate"),
            "Notes": obj.get("Notes"),
            "OutDate": obj.get("OutDate"),
            "State": obj.get("State"),
            "TranslationRequestID": obj.get("TranslationRequestID")
        })
        return _obj



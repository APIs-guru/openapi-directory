# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorization_codes_shared_models_data_field import AuthorizationCodesSharedModelsDataField
from openapi_client.models.authorization_codes_shared_models_validation_field import AuthorizationCodesSharedModelsValidationField
from typing import Optional, Set
from typing_extensions import Self

class AuthorizationCodesSharedModelsAuthorizationCodeDefinition(BaseModel):
    """
    Represents the model used to define how a type of authorization code is generated.
    """ # noqa: E501
    authorization_id: Optional[StrictStr] = Field(default=None, description="The value used for securing codes generated.", alias="AuthorizationID")
    created_by_user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user that created this definition. Read only.", alias="CreatedByUserID")
    created_date: Optional[datetime] = Field(default=None, description="A timestamp of when this definition was created. Read only.", alias="CreatedDate")
    data_fields: Optional[List[AuthorizationCodesSharedModelsDataField]] = Field(default=None, description="The defined fields to include in authorization codes generated from this definition. May not be updated.", alias="DataFields")
    deleted_by_user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user that deleted this definition. Read only.", alias="DeletedByUserID")
    deleted_date: Optional[datetime] = Field(default=None, description="A timestamp of when this definition was deleted. Read only.", alias="DeletedDate")
    description: Optional[StrictStr] = Field(default=None, description="A description of this definition. May not be updated.", alias="Description")
    duration_accuracy: Optional[StrictInt] = Field(default=None, description="The number of bits used for timestamp verification. Defaults to 5. May not be updated.", alias="DurationAccuracy")
    duration_amount: Optional[StrictInt] = Field(default=None, description="The amount of duration for the specified duration unit used to calculate the Authorization Code. Defaults to 1. May not be updated.", alias="DurationAmount")
    duration_units: Optional[StrictStr] = Field(default=None, description="The units of duration used to calculate the Authorization Code. Defaults to 'Days'. May not be updated.", alias="DurationUnits")
    hash_length: Optional[StrictInt] = Field(default=None, description="The bit length of the hash data which will be used for the authorization code. Defaults to 20. May not be updated.", alias="HashLength")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the authorization code definition. Read only.", alias="ID")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Indicates whether this definition is enabled. True if generating codes is disabled.", alias="IsDeleted")
    name: StrictStr = Field(description="The name of the authorization code definition. May not be updated.", alias="Name")
    random_length: Optional[StrictInt] = Field(default=None, description="The bit length of random data which will be included in the authorization code.  This is necessary to allow creation of \"identical\" authorization codes containing the same timestamp. Defaults to 5. May not be updated.", alias="RandomLength")
    validation_fields: Optional[List[AuthorizationCodesSharedModelsValidationField]] = Field(default=None, description="The defined fields to verify when reading authorization codes generated from this definition. May not be updated.", alias="ValidationFields")
    __properties: ClassVar[List[str]] = ["AuthorizationID", "CreatedByUserID", "CreatedDate", "DataFields", "DeletedByUserID", "DeletedDate", "Description", "DurationAccuracy", "DurationAmount", "DurationUnits", "HashLength", "ID", "IsDeleted", "Name", "RandomLength", "ValidationFields"]

    @field_validator('duration_units')
    def duration_units_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Weeks', 'Days', 'Hours', 'Minutes']):
            raise ValueError("must be one of enum values ('Weeks', 'Days', 'Hours', 'Minutes')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsAuthorizationCodeDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_fields (list)
        _items = []
        if self.data_fields:
            for _item_data_fields in self.data_fields:
                if _item_data_fields:
                    _items.append(_item_data_fields.to_dict())
            _dict['DataFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in validation_fields (list)
        _items = []
        if self.validation_fields:
            for _item_validation_fields in self.validation_fields:
                if _item_validation_fields:
                    _items.append(_item_validation_fields.to_dict())
            _dict['ValidationFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsAuthorizationCodeDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AuthorizationID": obj.get("AuthorizationID"),
            "CreatedByUserID": obj.get("CreatedByUserID"),
            "CreatedDate": obj.get("CreatedDate"),
            "DataFields": [AuthorizationCodesSharedModelsDataField.from_dict(_item) for _item in obj["DataFields"]] if obj.get("DataFields") is not None else None,
            "DeletedByUserID": obj.get("DeletedByUserID"),
            "DeletedDate": obj.get("DeletedDate"),
            "Description": obj.get("Description"),
            "DurationAccuracy": obj.get("DurationAccuracy"),
            "DurationAmount": obj.get("DurationAmount"),
            "DurationUnits": obj.get("DurationUnits"),
            "HashLength": obj.get("HashLength"),
            "ID": obj.get("ID"),
            "IsDeleted": obj.get("IsDeleted"),
            "Name": obj.get("Name"),
            "RandomLength": obj.get("RandomLength"),
            "ValidationFields": [AuthorizationCodesSharedModelsValidationField.from_dict(_item) for _item in obj["ValidationFields"]] if obj.get("ValidationFields") is not None else None
        })
        return _obj



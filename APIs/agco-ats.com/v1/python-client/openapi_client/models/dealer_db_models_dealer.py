# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DealerDBModelsDealer(BaseModel):
    """
    DealerDBModelsDealer
    """ # noqa: E501
    billing_address: Optional[StrictStr] = Field(default=None, alias="BillingAddress")
    billing_address2: Optional[StrictStr] = Field(default=None, alias="BillingAddress2")
    billing_address3: Optional[StrictStr] = Field(default=None, alias="BillingAddress3")
    billing_address4: Optional[StrictStr] = Field(default=None, alias="BillingAddress4")
    billing_city: Optional[StrictStr] = Field(default=None, alias="BillingCity")
    billing_country: Optional[StrictStr] = Field(default=None, alias="BillingCountry")
    billing_country_code: Optional[StrictStr] = Field(default=None, alias="BillingCountryCode")
    billing_state: Optional[StrictStr] = Field(default=None, alias="BillingState")
    billing_zip: Optional[StrictStr] = Field(default=None, alias="BillingZip")
    brands: Optional[List[StrictStr]] = Field(default=None, alias="Brands")
    dealer_code: Optional[StrictStr] = Field(default=None, alias="DealerCode")
    dealer_name: Optional[StrictStr] = Field(default=None, alias="DealerName")
    dealer_status: Optional[StrictStr] = Field(default=None, alias="DealerStatus")
    dealer_status_update_date: Optional[StrictStr] = Field(default=None, alias="DealerStatusUpdateDate")
    filler: Optional[StrictStr] = Field(default=None, alias="Filler")
    is_valid: Optional[StrictBool] = Field(default=None, alias="IsValid")
    language_preference: Optional[StrictStr] = Field(default=None, alias="LanguagePreference")
    region1: Optional[StrictStr] = Field(default=None, alias="Region1")
    region2: Optional[StrictStr] = Field(default=None, alias="Region2")
    region_mapping: Optional[StrictStr] = Field(default=None, alias="RegionMapping")
    role_brand: Optional[StrictStr] = Field(default=None, alias="RoleBrand")
    shipping_address2: Optional[StrictStr] = Field(default=None, alias="ShippingAddress2")
    shipping_address3: Optional[StrictStr] = Field(default=None, alias="ShippingAddress3")
    shipping_address4: Optional[StrictStr] = Field(default=None, alias="ShippingAddress4")
    shipping_city: Optional[StrictStr] = Field(default=None, alias="ShippingCity")
    shipping_country: Optional[StrictStr] = Field(default=None, alias="ShippingCountry")
    shipping_state: Optional[StrictStr] = Field(default=None, alias="ShippingState")
    shipping_street: Optional[StrictStr] = Field(default=None, alias="ShippingStreet")
    shipping_zip: Optional[StrictStr] = Field(default=None, alias="ShippingZip")
    telephone: Optional[StrictStr] = Field(default=None, alias="Telephone")
    vat_code: Optional[StrictStr] = Field(default=None, alias="VATCode")
    __properties: ClassVar[List[str]] = ["BillingAddress", "BillingAddress2", "BillingAddress3", "BillingAddress4", "BillingCity", "BillingCountry", "BillingCountryCode", "BillingState", "BillingZip", "Brands", "DealerCode", "DealerName", "DealerStatus", "DealerStatusUpdateDate", "Filler", "IsValid", "LanguagePreference", "Region1", "Region2", "RegionMapping", "RoleBrand", "ShippingAddress2", "ShippingAddress3", "ShippingAddress4", "ShippingCity", "ShippingCountry", "ShippingState", "ShippingStreet", "ShippingZip", "Telephone", "VATCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DealerDBModelsDealer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "brands",
            "is_valid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DealerDBModelsDealer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BillingAddress": obj.get("BillingAddress"),
            "BillingAddress2": obj.get("BillingAddress2"),
            "BillingAddress3": obj.get("BillingAddress3"),
            "BillingAddress4": obj.get("BillingAddress4"),
            "BillingCity": obj.get("BillingCity"),
            "BillingCountry": obj.get("BillingCountry"),
            "BillingCountryCode": obj.get("BillingCountryCode"),
            "BillingState": obj.get("BillingState"),
            "BillingZip": obj.get("BillingZip"),
            "Brands": obj.get("Brands"),
            "DealerCode": obj.get("DealerCode"),
            "DealerName": obj.get("DealerName"),
            "DealerStatus": obj.get("DealerStatus"),
            "DealerStatusUpdateDate": obj.get("DealerStatusUpdateDate"),
            "Filler": obj.get("Filler"),
            "IsValid": obj.get("IsValid"),
            "LanguagePreference": obj.get("LanguagePreference"),
            "Region1": obj.get("Region1"),
            "Region2": obj.get("Region2"),
            "RegionMapping": obj.get("RegionMapping"),
            "RoleBrand": obj.get("RoleBrand"),
            "ShippingAddress2": obj.get("ShippingAddress2"),
            "ShippingAddress3": obj.get("ShippingAddress3"),
            "ShippingAddress4": obj.get("ShippingAddress4"),
            "ShippingCity": obj.get("ShippingCity"),
            "ShippingCountry": obj.get("ShippingCountry"),
            "ShippingState": obj.get("ShippingState"),
            "ShippingStreet": obj.get("ShippingStreet"),
            "ShippingZip": obj.get("ShippingZip"),
            "Telephone": obj.get("Telephone"),
            "VATCode": obj.get("VATCode")
        })
        return _obj



# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UpdateSystemModelsPackage(BaseModel):
    """
    UpdateSystemModelsPackage
    """ # noqa: E501
    autorun: Optional[StrictBool] = Field(default=None, description="Value is true if package should run automatically. Default value is false.", alias="Autorun")
    crc: StrictStr = Field(description="The CRC used to validate the download.", alias="CRC")
    description: StrictStr = Field(description="The package description", alias="Description")
    localized_name: Optional[StrictStr] = Field(default=None, description="Optional. The StringID used to localize the name of the Package", alias="LocalizedName")
    notes: Optional[StrictStr] = Field(default=None, description="Notes about the package", alias="Notes")
    package_id: Optional[StrictStr] = Field(default=None, description="Read Only. The package ID", alias="PackageID")
    package_type_id: StrictStr = Field(description="The id of the package type this package belongs to.", alias="PackageTypeID")
    previous_version: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="For delta packages, the previous version required.  For non-delta packages, the Previous version is 0.  Default value is 0.", alias="PreviousVersion")
    release_date: datetime = Field(description="The date the package was released", alias="ReleaseDate")
    released: Optional[StrictBool] = Field(default=None, description="True if the package is released.  Default value is False.", alias="Released")
    remove_on_success: Optional[StrictBool] = Field(default=None, description="True to remove the package after successful execution.  Default value is False.", alias="RemoveOnSuccess")
    size: Optional[StrictInt] = Field(default=None, description="The size of the file at the specified URL.  If a size is not supplied at creation time, the size will be determined by the response from the URL.              If the size provided does not match the size in the response from the URL an error will be returned.", alias="Size")
    switches: Optional[StrictStr] = Field(default=None, description="The command line arguments for the package.  Default value is an empty string.", alias="Switches")
    url: StrictStr = Field(description="The Url to download the package from.", alias="Url")
    version: Annotated[int, Field(le=2147483647, strict=True, ge=1)] = Field(description="The version.", alias="Version")
    __properties: ClassVar[List[str]] = ["Autorun", "CRC", "Description", "LocalizedName", "Notes", "PackageID", "PackageTypeID", "PreviousVersion", "ReleaseDate", "Released", "RemoveOnSuccess", "Size", "Switches", "Url", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Autorun": obj.get("Autorun"),
            "CRC": obj.get("CRC"),
            "Description": obj.get("Description"),
            "LocalizedName": obj.get("LocalizedName"),
            "Notes": obj.get("Notes"),
            "PackageID": obj.get("PackageID"),
            "PackageTypeID": obj.get("PackageTypeID"),
            "PreviousVersion": obj.get("PreviousVersion"),
            "ReleaseDate": obj.get("ReleaseDate"),
            "Released": obj.get("Released"),
            "RemoveOnSuccess": obj.get("RemoveOnSuccess"),
            "Size": obj.get("Size"),
            "Switches": obj.get("Switches"),
            "Url": obj.get("Url"),
            "Version": obj.get("Version")
        })
        return _obj



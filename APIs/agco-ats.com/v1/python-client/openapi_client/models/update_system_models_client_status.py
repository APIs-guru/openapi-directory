# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSystemModelsClientStatus(BaseModel):
    """
    UpdateSystemModelsClientStatus
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="The Client ID", alias="ClientID")
    last_checkin: Optional[datetime] = Field(default=None, description="The time of the client's last check-in", alias="LastCheckin")
    minutes_elapsed: Optional[StrictInt] = Field(default=None, description="The number of minutes that have passed since the last check-in", alias="MinutesElapsed")
    report_result: Optional[StrictStr] = Field(default=None, description="The result for the client included in the UpdateGroup's report", alias="ReportResult")
    report_result_is_valid: Optional[StrictBool] = Field(default=None, description="True if the result for the client matches what is expected for the UpdateGroup", alias="ReportResultIsValid")
    report_value: Optional[StrictStr] = Field(default=None, description="The value for the client included in the UpdateGroup's report", alias="ReportValue")
    tag: Optional[StrictStr] = Field(default=None, description="A descriptive name for the client", alias="Tag")
    __properties: ClassVar[List[str]] = ["ClientID", "LastCheckin", "MinutesElapsed", "ReportResult", "ReportResultIsValid", "ReportValue", "Tag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsClientStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsClientStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClientID": obj.get("ClientID"),
            "LastCheckin": obj.get("LastCheckin"),
            "MinutesElapsed": obj.get("MinutesElapsed"),
            "ReportResult": obj.get("ReportResult"),
            "ReportResultIsValid": obj.get("ReportResultIsValid"),
            "ReportValue": obj.get("ReportValue"),
            "Tag": obj.get("Tag")
        })
        return _obj



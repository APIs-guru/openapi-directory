# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_system_shared_interfaces_i_parameter_mapping import BuildSystemSharedInterfacesIParameterMapping
from typing import Optional, Set
from typing_extensions import Self

class BuildSystemSharedInterfacesIActivityStep(BaseModel):
    """
    IActivityStep
    """ # noqa: E501
    activity_id: Optional[StrictInt] = Field(default=None, description="ActivityID", alias="ActivityID")
    activity_step_id: Optional[StrictInt] = Field(default=None, description="ActivityStepID", alias="ActivityStepID")
    implementation_id: Optional[StrictStr] = Field(default=None, description="Implementation ID", alias="ImplementationID")
    parameter_mappings: Optional[List[BuildSystemSharedInterfacesIParameterMapping]] = Field(default=None, description="ParameterMappings", alias="ParameterMappings")
    run_order: Optional[StrictInt] = Field(default=None, description="run order", alias="RunOrder")
    step_id: Optional[StrictInt] = Field(default=None, description="step id", alias="StepID")
    step_name: Optional[StrictStr] = Field(default=None, description="steo name", alias="StepName")
    use_config: Optional[StrictStr] = Field(default=None, description="UseConfig", alias="UseConfig")
    __properties: ClassVar[List[str]] = ["ActivityID", "ActivityStepID", "ImplementationID", "ParameterMappings", "RunOrder", "StepID", "StepName", "UseConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildSystemSharedInterfacesIActivityStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "activity_step_id",
            "implementation_id",
            "step_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameter_mappings (list)
        _items = []
        if self.parameter_mappings:
            for _item_parameter_mappings in self.parameter_mappings:
                if _item_parameter_mappings:
                    _items.append(_item_parameter_mappings.to_dict())
            _dict['ParameterMappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildSystemSharedInterfacesIActivityStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivityID": obj.get("ActivityID"),
            "ActivityStepID": obj.get("ActivityStepID"),
            "ImplementationID": obj.get("ImplementationID"),
            "ParameterMappings": [BuildSystemSharedInterfacesIParameterMapping.from_dict(_item) for _item in obj["ParameterMappings"]] if obj.get("ParameterMappings") is not None else None,
            "RunOrder": obj.get("RunOrder"),
            "StepID": obj.get("StepID"),
            "StepName": obj.get("StepName"),
            "UseConfig": obj.get("UseConfig")
        })
        return _obj



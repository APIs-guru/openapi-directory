# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorization_codes_shared_models_parameter import AuthorizationCodesSharedModelsParameter
from typing import Optional, Set
from typing_extensions import Self

class AuthorizationCodesSharedModelsAuthorizationCode(BaseModel):
    """
    Represents the model containing an authorization code used to unlock a feature in machines and EDT
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="The code to enter to unlock a feature. Read only.", alias="Code")
    created_by_user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user that created this authorization code. Read only.", alias="CreatedByUserID")
    created_date: Optional[datetime] = Field(default=None, description="A timestamp of when this code was created. Read only.", alias="CreatedDate")
    data_parameters: Optional[List[AuthorizationCodesSharedModelsParameter]] = Field(default=None, description="The parameters and values contained as data in this authorization code. May not be updated.", alias="DataParameters")
    definition_id: Optional[StrictStr] = Field(default=None, description="The id of the definition for this authorization code. May not be updated.", alias="DefinitionID")
    deleted_by_user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user that deleted this authorization code. Read only.", alias="DeletedByUserID")
    deleted_date: Optional[datetime] = Field(default=None, description="A timestamp of when this authorization code was deleted. Read only.", alias="DeletedDate")
    effective_date: Optional[datetime] = Field(default=None, description="A date at which this code should begin being valid. Optional. Set on create only.", alias="EffectiveDate")
    id: Optional[StrictInt] = Field(default=None, description="The identifier for the authorization code. Read only.", alias="ID")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Indicates whether this code is deleted.", alias="IsDeleted")
    validation_parameters: Optional[List[AuthorizationCodesSharedModelsParameter]] = Field(default=None, description="The parameters and values used to validate this authorization code. May not be updated.", alias="ValidationParameters")
    __properties: ClassVar[List[str]] = ["Code", "CreatedByUserID", "CreatedDate", "DataParameters", "DefinitionID", "DeletedByUserID", "DeletedDate", "EffectiveDate", "ID", "IsDeleted", "ValidationParameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsAuthorizationCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_parameters (list)
        _items = []
        if self.data_parameters:
            for _item_data_parameters in self.data_parameters:
                if _item_data_parameters:
                    _items.append(_item_data_parameters.to_dict())
            _dict['DataParameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in validation_parameters (list)
        _items = []
        if self.validation_parameters:
            for _item_validation_parameters in self.validation_parameters:
                if _item_validation_parameters:
                    _items.append(_item_validation_parameters.to_dict())
            _dict['ValidationParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsAuthorizationCode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Code": obj.get("Code"),
            "CreatedByUserID": obj.get("CreatedByUserID"),
            "CreatedDate": obj.get("CreatedDate"),
            "DataParameters": [AuthorizationCodesSharedModelsParameter.from_dict(_item) for _item in obj["DataParameters"]] if obj.get("DataParameters") is not None else None,
            "DefinitionID": obj.get("DefinitionID"),
            "DeletedByUserID": obj.get("DeletedByUserID"),
            "DeletedDate": obj.get("DeletedDate"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "ID": obj.get("ID"),
            "IsDeleted": obj.get("IsDeleted"),
            "ValidationParameters": [AuthorizationCodesSharedModelsParameter.from_dict(_item) for _item in obj["ValidationParameters"]] if obj.get("ValidationParameters") is not None else None
        })
        return _obj



# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BuildSystemSharedInterfacesIActivityRunStatus(BaseModel):
    """
    Declares members of objects that communicate the progress of an               asynchronous activity run.
    """ # noqa: E501
    current_step: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of the step the activity is currently running.", alias="CurrentStep")
    status: Optional[StrictStr] = Field(default=None, description="Gets or sets the status of the activity run.", alias="Status")
    step_progress: Optional[StrictInt] = Field(default=None, description="Gets or sets a measurement of the current progress of the current step.", alias="StepProgress")
    step_status: Optional[StrictStr] = Field(default=None, description="Gets or sets a description of the current status of the currently               running step.", alias="StepStatus")
    __properties: ClassVar[List[str]] = ["CurrentStep", "Status", "StepProgress", "StepStatus"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Ready', 'InProgress', 'Succeeded', 'Cancelled', 'Failed']):
            raise ValueError("must be one of enum values ('Ready', 'InProgress', 'Succeeded', 'Cancelled', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildSystemSharedInterfacesIActivityRunStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildSystemSharedInterfacesIActivityRunStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrentStep": obj.get("CurrentStep"),
            "Status": obj.get("Status"),
            "StepProgress": obj.get("StepProgress"),
            "StepStatus": obj.get("StepStatus")
        })
        return _obj



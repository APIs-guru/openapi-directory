# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_system_models_update_metrics_data_active_version_by_client_record import UpdateSystemModelsUpdateMetricsDataActiveVersionByClientRecord
from openapi_client.models.update_system_models_update_metrics_data_current_state_by_client_record import UpdateSystemModelsUpdateMetricsDataCurrentStateByClientRecord
from openapi_client.models.update_system_models_update_metrics_data_package_errors_record import UpdateSystemModelsUpdateMetricsDataPackageErrorsRecord
from typing import Optional, Set
from typing_extensions import Self

class UpdateSystemModelsUpdateMetricsData(BaseModel):
    """
    Model that retrieves the data for UpdateMetrics
    """ # noqa: E501
    active_version: Optional[StrictStr] = Field(default=None, description="Active version (bundle number) of update type.", alias="ActiveVersion")
    active_version_by_client: Optional[List[UpdateSystemModelsUpdateMetricsDataActiveVersionByClientRecord]] = Field(default=None, description="Generic collection that is of type ActiveVersionByClientRecord", alias="ActiveVersionByClient")
    current_state_by_client: Optional[List[UpdateSystemModelsUpdateMetricsDataCurrentStateByClientRecord]] = Field(default=None, description="Generic collection that is of type CurrentStateByClientRecord", alias="CurrentStateByClient")
    cut_off_date: Optional[datetime] = Field(default=None, description="Date that has been configured to only show the most recent clients with a cut off date. (Ex. year from current date)", alias="CutOffDate")
    data_refreshed: Optional[datetime] = Field(default=None, description="Data was refreshed at this time.", alias="DataRefreshed")
    filtered_client_count: Optional[StrictInt] = Field(default=None, description="Sum of clients represented              Filtered by updateType and lastCheckedInDate", alias="FilteredClientCount")
    package_errors: Optional[List[UpdateSystemModelsUpdateMetricsDataPackageErrorsRecord]] = Field(default=None, description="Generic collection that is of type PackageErrorsRecord", alias="PackageErrors")
    total_client_count: Optional[StrictInt] = Field(default=None, description="Total clients we have ever serviced", alias="TotalClientCount")
    __properties: ClassVar[List[str]] = ["ActiveVersion", "ActiveVersionByClient", "CurrentStateByClient", "CutOffDate", "DataRefreshed", "FilteredClientCount", "PackageErrors", "TotalClientCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsUpdateMetricsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_version_by_client (list)
        _items = []
        if self.active_version_by_client:
            for _item_active_version_by_client in self.active_version_by_client:
                if _item_active_version_by_client:
                    _items.append(_item_active_version_by_client.to_dict())
            _dict['ActiveVersionByClient'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in current_state_by_client (list)
        _items = []
        if self.current_state_by_client:
            for _item_current_state_by_client in self.current_state_by_client:
                if _item_current_state_by_client:
                    _items.append(_item_current_state_by_client.to_dict())
            _dict['CurrentStateByClient'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in package_errors (list)
        _items = []
        if self.package_errors:
            for _item_package_errors in self.package_errors:
                if _item_package_errors:
                    _items.append(_item_package_errors.to_dict())
            _dict['PackageErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsUpdateMetricsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActiveVersion": obj.get("ActiveVersion"),
            "ActiveVersionByClient": [UpdateSystemModelsUpdateMetricsDataActiveVersionByClientRecord.from_dict(_item) for _item in obj["ActiveVersionByClient"]] if obj.get("ActiveVersionByClient") is not None else None,
            "CurrentStateByClient": [UpdateSystemModelsUpdateMetricsDataCurrentStateByClientRecord.from_dict(_item) for _item in obj["CurrentStateByClient"]] if obj.get("CurrentStateByClient") is not None else None,
            "CutOffDate": obj.get("CutOffDate"),
            "DataRefreshed": obj.get("DataRefreshed"),
            "FilteredClientCount": obj.get("FilteredClientCount"),
            "PackageErrors": [UpdateSystemModelsUpdateMetricsDataPackageErrorsRecord.from_dict(_item) for _item in obj["PackageErrors"]] if obj.get("PackageErrors") is not None else None,
            "TotalClientCount": obj.get("TotalClientCount")
        })
        return _obj



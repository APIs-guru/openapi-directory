# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AGCOPowerServicesModelsECU(BaseModel):
    """
    An AGCO Power ECU
    """ # noqa: E501
    activation_code: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The code used to activate the ECU. May not be modified. Returned only on activation.", alias="ActivationCode")
    damaged_description: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A description why the ECU cannot be deactivated.", alias="DamagedDescription")
    engine_serial_number: Annotated[str, Field(strict=True)] = Field(description="The serial number of the ECUâ€™s engine", alias="EngineSerialNumber")
    replaces_ecu_serial_number: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The serial number of the ECU that this ECU replaces. Required if activating an ECU..", alias="ReplacesECUSerialNumber")
    serial_number: Annotated[str, Field(strict=True)] = Field(description="The serial number of the ECU", alias="SerialNumber")
    state: StrictStr = Field(description="The state of the ECU", alias="State")
    __properties: ClassVar[List[str]] = ["ActivationCode", "DamagedDescription", "EngineSerialNumber", "ReplacesECUSerialNumber", "SerialNumber", "State"]

    @field_validator('damaged_description')
    def damaged_description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{0,4096}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{0,4096}$/")
        return value

    @field_validator('engine_serial_number')
    def engine_serial_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"(^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMBL][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)", value):
            raise ValueError(r"must validate the regular expression /(^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMBL][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)/")
        return value

    @field_validator('replaces_ecu_serial_number')
    def replaces_ecu_serial_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^0?\d{23}$", value):
            raise ValueError(r"must validate the regular expression /^0?\d{23}$/")
        return value

    @field_validator('serial_number')
    def serial_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0?\d{23}$", value):
            raise ValueError(r"must validate the regular expression /^0?\d{23}$/")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Active', 'Inactive', 'Damaged']):
            raise ValueError("must be one of enum values ('Active', 'Inactive', 'Damaged')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AGCOPowerServicesModelsECU from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AGCOPowerServicesModelsECU from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivationCode": obj.get("ActivationCode"),
            "DamagedDescription": obj.get("DamagedDescription"),
            "EngineSerialNumber": obj.get("EngineSerialNumber"),
            "ReplacesECUSerialNumber": obj.get("ReplacesECUSerialNumber"),
            "SerialNumber": obj.get("SerialNumber"),
            "State": obj.get("State")
        })
        return _obj



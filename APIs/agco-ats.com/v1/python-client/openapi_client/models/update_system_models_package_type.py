# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSystemModelsPackageType(BaseModel):
    """
    UpdateSystemModelsPackageType
    """ # noqa: E501
    attribute: Optional[StrictStr] = Field(default=None, description="The inventory attribute (from the InventoryPackage) used to determine what version of this package type is installed.", alias="Attribute")
    category: Optional[StrictStr] = Field(default=None, description="The inventory category (from the InventoryPackage) used to determine what version of this package type is installed.", alias="Category")
    description: StrictStr = Field(description="The description of the package type", alias="Description")
    icon: Optional[StrictStr] = Field(default=None, description="Optional.  The icon to use for the PackageType, in base 64", alias="Icon")
    inventory_frequency: Optional[StrictInt] = Field(default=None, description="The number of minutes to wait before requesting another inventory.  The default value is 1440 (24 hours).", alias="InventoryFrequency")
    inventory_package: Optional[StrictStr] = Field(default=None, description="The inventory package used to determine what version of this package type is installed.", alias="InventoryPackage")
    localized_description: Optional[StrictStr] = Field(default=None, description="Optional. The StringID used to localize the description of the PackageType", alias="LocalizedDescription")
    localized_name: Optional[StrictStr] = Field(default=None, description="Optional. The StringID used to localize the name of the PackageType", alias="LocalizedName")
    max_delta_packages: Optional[StrictInt] = Field(default=None, description="The maximum number of \"chained\" delta packages to use when updating the client", alias="MaxDeltaPackages")
    package_type_id: Optional[StrictStr] = Field(default=None, description="Read Only. The package type id.", alias="PackageTypeID")
    __properties: ClassVar[List[str]] = ["Attribute", "Category", "Description", "Icon", "InventoryFrequency", "InventoryPackage", "LocalizedDescription", "LocalizedName", "MaxDeltaPackages", "PackageTypeID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPackageType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPackageType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attribute": obj.get("Attribute"),
            "Category": obj.get("Category"),
            "Description": obj.get("Description"),
            "Icon": obj.get("Icon"),
            "InventoryFrequency": obj.get("InventoryFrequency"),
            "InventoryPackage": obj.get("InventoryPackage"),
            "LocalizedDescription": obj.get("LocalizedDescription"),
            "LocalizedName": obj.get("LocalizedName"),
            "MaxDeltaPackages": obj.get("MaxDeltaPackages"),
            "PackageTypeID": obj.get("PackageTypeID")
        })
        return _obj



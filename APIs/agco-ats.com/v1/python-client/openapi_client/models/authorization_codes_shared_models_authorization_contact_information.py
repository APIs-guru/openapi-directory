# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuthorizationCodesSharedModelsAuthorizationContactInformation(BaseModel):
    """
    AuthorizationCodesSharedModelsAuthorizationContactInformation
    """ # noqa: E501
    authorization_code_id: StrictInt = Field(description="AuthorizationCode ID that the contact information ties into.", alias="AuthorizationCodeID")
    code: Optional[StrictStr] = Field(default=None, description="The authorization code. Read Only.", alias="Code")
    contact: StrictStr = Field(description="Name of contact requesting an authorization code. Minimum length of 3 characters.", alias="Contact")
    created_by: Optional[StrictStr] = Field(default=None, description="The name of the user that created this code. Read Only.", alias="CreatedBy")
    created_date: Optional[datetime] = Field(default=None, description="The date the authorization code was created.", alias="CreatedDate")
    dealer_code: StrictStr = Field(description="Dealer code that relates to the dealership. Minimum length of 3 characters.", alias="DealerCode")
    dealership: StrictStr = Field(description="Name of dealership. Minimum length of 3 characters.", alias="Dealership")
    definition_name: Optional[StrictStr] = Field(default=None, description="The name of the definition used for generating this authorization code. Read Only.", alias="DefinitionName")
    email: Optional[StrictStr] = Field(default=None, description="Email of contact.", alias="Email")
    id: Optional[StrictInt] = Field(default=None, description="ID of authorizationContactInformation", alias="ID")
    notes: Optional[StrictStr] = Field(default=None, description="Optional notes used for internal use.", alias="Notes")
    phone: StrictStr = Field(description="Phone number of contact.", alias="Phone")
    __properties: ClassVar[List[str]] = ["AuthorizationCodeID", "Code", "Contact", "CreatedBy", "CreatedDate", "DealerCode", "Dealership", "DefinitionName", "Email", "ID", "Notes", "Phone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsAuthorizationContactInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsAuthorizationContactInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AuthorizationCodeID": obj.get("AuthorizationCodeID"),
            "Code": obj.get("Code"),
            "Contact": obj.get("Contact"),
            "CreatedBy": obj.get("CreatedBy"),
            "CreatedDate": obj.get("CreatedDate"),
            "DealerCode": obj.get("DealerCode"),
            "Dealership": obj.get("Dealership"),
            "DefinitionName": obj.get("DefinitionName"),
            "Email": obj.get("Email"),
            "ID": obj.get("ID"),
            "Notes": obj.get("Notes"),
            "Phone": obj.get("Phone")
        })
        return _obj



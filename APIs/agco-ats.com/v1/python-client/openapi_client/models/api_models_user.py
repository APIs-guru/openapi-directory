# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class APIModelsUser(BaseModel):
    """
    APIModelsUser
    """ # noqa: E501
    change_password: Optional[StrictStr] = Field(default=None, description="Never Returned.  When changing a user's password, this field must contain the new password.", alias="ChangePassword")
    email: Optional[StrictStr] = Field(default=None, description="The user's email address", alias="Email")
    name: Optional[StrictStr] = Field(default=None, description="The user's name", alias="Name")
    password: Optional[StrictStr] = Field(default=None, description="Never Returned.  Required when creating a new user or updating a user.  When changing a user's password this field must contain the current password.", alias="Password")
    user_id: Optional[StrictInt] = Field(default=None, description="The user ID", alias="UserID")
    username: Optional[StrictStr] = Field(default=None, description="The username used for authentication", alias="Username")
    __properties: ClassVar[List[str]] = ["ChangePassword", "Email", "Name", "Password", "UserID", "Username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIModelsUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIModelsUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChangePassword": obj.get("ChangePassword"),
            "Email": obj.get("Email"),
            "Name": obj.get("Name"),
            "Password": obj.get("Password"),
            "UserID": obj.get("UserID"),
            "Username": obj.get("Username")
        })
        return _obj



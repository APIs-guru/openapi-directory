# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UpdateSystemModelsUpdateGroup(BaseModel):
    """
    UpdateSystemModelsUpdateGroup
    """ # noqa: E501
    description: StrictStr = Field(description="The description of the update group", alias="Description")
    id: Optional[StrictStr] = Field(default=None, alias="ID")
    inventory_frequency: Optional[StrictInt] = Field(default=None, description="The time in minutes between inventory checks. Default value is 1440 minutes (one day).", alias="InventoryFrequency")
    inventory_package: Optional[StrictStr] = Field(default=None, description="The Package ID of the package used for inventory", alias="InventoryPackage")
    localized_description: Optional[StrictStr] = Field(default=None, description="Optional. The StringID used to localize the description of the update group", alias="LocalizedDescription")
    localized_name: Optional[StrictStr] = Field(default=None, description="Optional. The StringID used to localize the name of the update group", alias="LocalizedName")
    priority: Annotated[int, Field(le=100, strict=True, ge=1)] = Field(description="The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.", alias="Priority")
    report_field: Optional[StrictStr] = Field(default=None, description="A field to return in the status report for this update group.              Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})", alias="ReportField")
    update_type: StrictStr = Field(description="The update type name", alias="UpdateType")
    validating_field: Optional[StrictStr] = Field(default=None, description="A field used for validation in the status report for this update group.              Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})", alias="ValidatingField")
    value_to_validate: Optional[StrictStr] = Field(default=None, description="The value to validate the ValidationField against.", alias="ValueToValidate")
    version: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The version of the UpdateGroup, this value is incremented with each modification to a related Bundle or PackageType", alias="Version")
    __properties: ClassVar[List[str]] = ["Description", "ID", "InventoryFrequency", "InventoryPackage", "LocalizedDescription", "LocalizedName", "Priority", "ReportField", "UpdateType", "ValidatingField", "ValueToValidate", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsUpdateGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsUpdateGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "ID": obj.get("ID"),
            "InventoryFrequency": obj.get("InventoryFrequency"),
            "InventoryPackage": obj.get("InventoryPackage"),
            "LocalizedDescription": obj.get("LocalizedDescription"),
            "LocalizedName": obj.get("LocalizedName"),
            "Priority": obj.get("Priority"),
            "ReportField": obj.get("ReportField"),
            "UpdateType": obj.get("UpdateType"),
            "ValidatingField": obj.get("ValidatingField"),
            "ValueToValidate": obj.get("ValueToValidate"),
            "Version": obj.get("Version")
        })
        return _obj



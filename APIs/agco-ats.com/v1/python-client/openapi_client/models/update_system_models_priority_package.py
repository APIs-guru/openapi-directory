# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSystemModelsPriorityPackage(BaseModel):
    """
    UpdateSystemModelsPriorityPackage
    """ # noqa: E501
    autorun: Optional[StrictBool] = Field(default=None, description="Read Only. From the package specified by package ID.              Value is true if package should run automatically. Default value is false.", alias="Autorun")
    crc: Optional[StrictStr] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="CRC")
    client_id: StrictStr = Field(description="The ID of the client to receive the priority package", alias="ClientID")
    description: Optional[StrictStr] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="Description")
    notes: Optional[StrictStr] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="Notes")
    package_id: StrictStr = Field(description="The ID of the package to push as a priority package.", alias="PackageID")
    package_type_id: Optional[StrictStr] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="PackageTypeID")
    previous_version: Optional[StrictInt] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="PreviousVersion")
    priority_package_id: Optional[StrictStr] = Field(default=None, description="Read Only. The ID of the priority package.", alias="PriorityPackageID")
    release_date: Optional[datetime] = Field(default=None, description="Read Only. From the package specified by package ID.              The date the package was released", alias="ReleaseDate")
    released: Optional[StrictBool] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="Released")
    remove_on_success: Optional[StrictBool] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="RemoveOnSuccess")
    size: Optional[StrictInt] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="Size")
    switches: Optional[StrictStr] = Field(default=None, description="The command line arguments for the priority package.  Default value is an empty string.", alias="Switches")
    time_stamp: Optional[datetime] = Field(default=None, description="Read Only. The timestamp of the priority package.", alias="TimeStamp")
    url: Optional[StrictStr] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="Url")
    version: Optional[StrictInt] = Field(default=None, description="Read Only. From the package specified by package ID.", alias="Version")
    __properties: ClassVar[List[str]] = ["Autorun", "CRC", "ClientID", "Description", "Notes", "PackageID", "PackageTypeID", "PreviousVersion", "PriorityPackageID", "ReleaseDate", "Released", "RemoveOnSuccess", "Size", "Switches", "TimeStamp", "Url", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPriorityPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPriorityPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Autorun": obj.get("Autorun"),
            "CRC": obj.get("CRC"),
            "ClientID": obj.get("ClientID"),
            "Description": obj.get("Description"),
            "Notes": obj.get("Notes"),
            "PackageID": obj.get("PackageID"),
            "PackageTypeID": obj.get("PackageTypeID"),
            "PreviousVersion": obj.get("PreviousVersion"),
            "PriorityPackageID": obj.get("PriorityPackageID"),
            "ReleaseDate": obj.get("ReleaseDate"),
            "Released": obj.get("Released"),
            "RemoveOnSuccess": obj.get("RemoveOnSuccess"),
            "Size": obj.get("Size"),
            "Switches": obj.get("Switches"),
            "TimeStamp": obj.get("TimeStamp"),
            "Url": obj.get("Url"),
            "Version": obj.get("Version")
        })
        return _obj



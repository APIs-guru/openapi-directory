# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GlobalResourcesSharedModelsTranslationRequest(BaseModel):
    """
    A request to translate specified strings into specified locales
    """ # noqa: E501
    approval_user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user from which approval for the request is required", alias="ApprovalUserId")
    cc_email_addresses: List[StrictStr] = Field(description="Additional email addresses to CC on emails pertaining to the request", alias="CCEmailAddresses")
    charge_to_account: StrictStr = Field(description="The account to charge for the request", alias="ChargeToAccount")
    deadline: datetime = Field(description="The date by which the translations in the request are needed. Defaults to 30 days from the current date", alias="Deadline")
    id: Optional[StrictInt] = Field(default=None, description="The ID of the request", alias="Id")
    locale_ids: List[StrictInt] = Field(description="Locale IDs to which these strings are requested to be translated", alias="LocaleIds")
    notes: StrictStr = Field(description="Additional notes or comments about the request", alias="Notes")
    questions_user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user to which to address questions regarding the request", alias="QuestionsUserId")
    state: StrictStr = Field(description="The state of the request", alias="State")
    submitted_by: Optional[StrictInt] = Field(default=None, description="The ID of the User that submitted the request", alias="SubmittedBy")
    translator_email: Optional[StrictStr] = Field(default=None, description="The email address for the translator", alias="TranslatorEmail")
    translator_name: Optional[StrictStr] = Field(default=None, description="The name of the translator", alias="TranslatorName")
    __properties: ClassVar[List[str]] = ["ApprovalUserId", "CCEmailAddresses", "ChargeToAccount", "Deadline", "Id", "LocaleIds", "Notes", "QuestionsUserId", "State", "SubmittedBy", "TranslatorEmail", "TranslatorName"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NotSubmitted', 'Submitted', 'Cancelled', 'Completed']):
            raise ValueError("must be one of enum values ('NotSubmitted', 'Submitted', 'Cancelled', 'Completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsTranslationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsTranslationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApprovalUserId": obj.get("ApprovalUserId"),
            "CCEmailAddresses": obj.get("CCEmailAddresses"),
            "ChargeToAccount": obj.get("ChargeToAccount"),
            "Deadline": obj.get("Deadline"),
            "Id": obj.get("Id"),
            "LocaleIds": obj.get("LocaleIds"),
            "Notes": obj.get("Notes"),
            "QuestionsUserId": obj.get("QuestionsUserId"),
            "State": obj.get("State"),
            "SubmittedBy": obj.get("SubmittedBy"),
            "TranslatorEmail": obj.get("TranslatorEmail"),
            "TranslatorName": obj.get("TranslatorName")
        })
        return _obj



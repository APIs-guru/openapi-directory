# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSystemModelsPackageStatus(BaseModel):
    """
    UpdateSystemModelsPackageStatus
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="The id of the client", alias="ClientID")
    client_key: Optional[StrictStr] = Field(default=None, description="The client's tag", alias="ClientKey")
    download_time: Optional[StrictStr] = Field(default=None, description="The amount of time spent downloading", alias="DownloadTime")
    downloaded: Optional[StrictStr] = Field(default=None, description="The number of bytes downloaded", alias="Downloaded")
    install_completed: Optional[StrictStr] = Field(default=None, description="The time the package completed", alias="InstallCompleted")
    install_result: Optional[StrictStr] = Field(default=None, description="The package result", alias="InstallResult")
    install_started: Optional[StrictStr] = Field(default=None, description="The time the package was started", alias="InstallStarted")
    install_time: Optional[StrictStr] = Field(default=None, description="The amount of time required to run the package", alias="InstallTime")
    percentage: Optional[StrictStr] = Field(default=None, description="The download completion percentage", alias="Percentage")
    size: Optional[StrictStr] = Field(default=None, description="The total size of the package", alias="Size")
    timestamp: Optional[datetime] = Field(default=None, description="The time the status was last updated", alias="Timestamp")
    __properties: ClassVar[List[str]] = ["ClientID", "ClientKey", "DownloadTime", "Downloaded", "InstallCompleted", "InstallResult", "InstallStarted", "InstallTime", "Percentage", "Size", "Timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPackageStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSystemModelsPackageStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClientID": obj.get("ClientID"),
            "ClientKey": obj.get("ClientKey"),
            "DownloadTime": obj.get("DownloadTime"),
            "Downloaded": obj.get("Downloaded"),
            "InstallCompleted": obj.get("InstallCompleted"),
            "InstallResult": obj.get("InstallResult"),
            "InstallStarted": obj.get("InstallStarted"),
            "InstallTime": obj.get("InstallTime"),
            "Percentage": obj.get("Percentage"),
            "Size": obj.get("Size"),
            "Timestamp": obj.get("Timestamp")
        })
        return _obj



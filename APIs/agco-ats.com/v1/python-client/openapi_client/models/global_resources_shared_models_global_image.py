# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.global_resources_shared_models_global_image_category import GlobalResourcesSharedModelsGlobalImageCategory
from typing import Optional, Set
from typing_extensions import Self

class GlobalResourcesSharedModelsGlobalImage(BaseModel):
    """
    An image from the Global Image library.
    """ # noqa: E501
    crc: StrictStr = Field(description="The Hash of the file (SHA256, HEX-encoded).", alias="CRC")
    categories: Optional[List[GlobalResourcesSharedModelsGlobalImageCategory]] = Field(default=None, description="The category of the file.", alias="Categories")
    var_date: Optional[datetime] = Field(default=None, description="The date of the file.", alias="Date")
    description: StrictStr = Field(description="The description of the file.", alias="Description")
    height: StrictInt = Field(description="The height of the file.", alias="Height")
    id: Optional[StrictStr] = Field(default=None, description="The Id of the GlobalImage Metadata.", alias="Id")
    name: StrictStr = Field(description="The name of the file when downloaded.", alias="Name")
    publisher: Optional[StrictStr] = Field(default=None, description="The Publisher of the file.", alias="Publisher")
    size: Optional[StrictInt] = Field(default=None, description="The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only", alias="Size")
    state: StrictStr = Field(description="Indicates the state of this file. Must be 'Created' when created. Read Only.", alias="State")
    thumbnail_crc: StrictStr = Field(description="The Hash of the thumbnail file (SHA256, HEX-encoded).", alias="ThumbnailCRC")
    thumbnail_size: Optional[StrictInt] = Field(default=None, description="The size of the thumbnail file in bytes. Null until assigned by server when marked as 'Available'. Read Only", alias="ThumbnailSize")
    width: StrictInt = Field(description="The width of the file.", alias="Width")
    __properties: ClassVar[List[str]] = ["CRC", "Categories", "Date", "Description", "Height", "Id", "Name", "Publisher", "Size", "State", "ThumbnailCRC", "ThumbnailSize", "Width"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Created', 'Available', 'Removed']):
            raise ValueError("must be one of enum values ('Created', 'Available', 'Removed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsGlobalImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['Categories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsGlobalImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CRC": obj.get("CRC"),
            "Categories": [GlobalResourcesSharedModelsGlobalImageCategory.from_dict(_item) for _item in obj["Categories"]] if obj.get("Categories") is not None else None,
            "Date": obj.get("Date"),
            "Description": obj.get("Description"),
            "Height": obj.get("Height"),
            "Id": obj.get("Id"),
            "Name": obj.get("Name"),
            "Publisher": obj.get("Publisher"),
            "Size": obj.get("Size"),
            "State": obj.get("State"),
            "ThumbnailCRC": obj.get("ThumbnailCRC"),
            "ThumbnailSize": obj.get("ThumbnailSize"),
            "Width": obj.get("Width")
        })
        return _obj



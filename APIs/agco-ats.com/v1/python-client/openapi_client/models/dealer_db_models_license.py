# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DealerDBModelsLicense(BaseModel):
    """
    DealerDBModelsLicense
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="True if license is active.", alias="Active")
    created_date: Optional[datetime] = Field(default=None, description="The date the license was created.", alias="CreatedDate")
    deactivated_date: Optional[datetime] = Field(default=None, description="The date the license was deactivated.", alias="DeactivatedDate")
    license_activation_type: Optional[StrictStr] = Field(default=None, description="The type of license (e.g. EDT, EDT Lite)", alias="LicenseActivationType")
    license_id: Optional[StrictStr] = Field(default=None, description="The LicenseID", alias="LicenseID")
    license_version: Optional[StrictStr] = Field(default=None, description="The version of the license.", alias="LicenseVersion")
    refresh_date: Optional[datetime] = Field(default=None, description="The date the license was refreshed.", alias="RefreshDate")
    system_info: Optional[StrictStr] = Field(default=None, description="Information about the system which is licensed.", alias="SystemInfo")
    updated_license_version: Optional[StrictStr] = Field(default=None, description="The updated version of the license.  A value in this field indicates that the update has not been confirmed.", alias="UpdatedLicenseVersion")
    voucher_code: Optional[StrictStr] = Field(default=None, description="The voucher code that generated the license.", alias="VoucherCode")
    __properties: ClassVar[List[str]] = ["Active", "CreatedDate", "DeactivatedDate", "LicenseActivationType", "LicenseID", "LicenseVersion", "RefreshDate", "SystemInfo", "UpdatedLicenseVersion", "VoucherCode"]

    @field_validator('license_activation_type')
    def license_activation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EDT', 'EDTLite']):
            raise ValueError("must be one of enum values ('EDT', 'EDTLite')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DealerDBModelsLicense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DealerDBModelsLicense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Active": obj.get("Active"),
            "CreatedDate": obj.get("CreatedDate"),
            "DeactivatedDate": obj.get("DeactivatedDate"),
            "LicenseActivationType": obj.get("LicenseActivationType"),
            "LicenseID": obj.get("LicenseID"),
            "LicenseVersion": obj.get("LicenseVersion"),
            "RefreshDate": obj.get("RefreshDate"),
            "SystemInfo": obj.get("SystemInfo"),
            "UpdatedLicenseVersion": obj.get("UpdatedLicenseVersion"),
            "VoucherCode": obj.get("VoucherCode")
        })
        return _obj



# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GlobalResourcesSharedModelsFileDownload(BaseModel):
    """
    A language used for string translations.
    """ # noqa: E501
    crc: StrictStr = Field(description="The crc of the file (SHA256, HEX-encoded). Must be provided when creating a file.", alias="CRC")
    content_type: StrictStr = Field(description="The type of file; sent as the content-type header.", alias="ContentType")
    description: StrictStr = Field(description="The description of the file.", alias="Description")
    id: Optional[StrictStr] = Field(default=None, description="The Id of the file.", alias="Id")
    is_public: StrictBool = Field(description="Indicates whether this file is available to the public for download.", alias="IsPublic")
    name: StrictStr = Field(description="The name of the file when downloaded.", alias="Name")
    path: StrictStr = Field(description="The Path of the file.", alias="Path")
    size: Optional[StrictInt] = Field(default=None, description="The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only", alias="Size")
    state: StrictStr = Field(description="Indicates the state of this file. Must be 'Created' when created.", alias="State")
    __properties: ClassVar[List[str]] = ["CRC", "ContentType", "Description", "Id", "IsPublic", "Name", "Path", "Size", "State"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Created', 'Available', 'Removed']):
            raise ValueError("must be one of enum values ('Created', 'Available', 'Removed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsFileDownload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalResourcesSharedModelsFileDownload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CRC": obj.get("CRC"),
            "ContentType": obj.get("ContentType"),
            "Description": obj.get("Description"),
            "Id": obj.get("Id"),
            "IsPublic": obj.get("IsPublic"),
            "Name": obj.get("Name"),
            "Path": obj.get("Path"),
            "Size": obj.get("Size"),
            "State": obj.get("State")
        })
        return _obj



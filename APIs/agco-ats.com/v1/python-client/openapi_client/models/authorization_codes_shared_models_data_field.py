# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AuthorizationCodesSharedModelsDataField(BaseModel):
    """
    AuthorizationCodesSharedModelsDataField
    """ # noqa: E501
    digits_precision: Optional[StrictInt] = Field(default=None, description="The number of decimal digits to be used by this data field. Required only by the 'Float' data type. Must be in range 1 - 15.", alias="DigitsPrecision")
    max_exponent: Optional[StrictInt] = Field(default=None, description="The maximum exponent to be used by this data field. Required only by the 'Float' data type. May not be greater than 307.", alias="MaxExponent")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum value that can be represented by this data field. Required only by the 'Decimal' data type.", alias="MaxValue")
    min_exponent: Optional[StrictInt] = Field(default=None, description="The minimum exponent to be used by this data field. Required only by the 'Float' data type. May not be less than -292.", alias="MinExponent")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The minimum value that can be represented by this data field. Required only by the 'Decimal' data type.", alias="MinValue")
    name: StrictStr = Field(description="The name of the field.", alias="Name")
    scale_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The resolution of values that can be represented by this data field. The base value is multiplied by this to compute the final value. Required only by the 'Decimal' data type.", alias="ScaleFactor")
    signed: Optional[StrictBool] = Field(default=None, description="Indicates whether this value is signed. Required only by the 'Float' data type.", alias="Signed")
    type: StrictStr = Field(description="The type of this data field.", alias="Type")
    __properties: ClassVar[List[str]] = ["DigitsPrecision", "MaxExponent", "MaxValue", "MinExponent", "MinValue", "Name", "ScaleFactor", "Signed", "Type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Boolean', 'Decimal', 'Float', 'VariableLengthByteArray']):
            raise ValueError("must be one of enum values ('Boolean', 'Decimal', 'Float', 'VariableLengthByteArray')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsDataField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizationCodesSharedModelsDataField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DigitsPrecision": obj.get("DigitsPrecision"),
            "MaxExponent": obj.get("MaxExponent"),
            "MaxValue": obj.get("MaxValue"),
            "MinExponent": obj.get("MinExponent"),
            "MinValue": obj.get("MinValue"),
            "Name": obj.get("Name"),
            "ScaleFactor": obj.get("ScaleFactor"),
            "Signed": obj.get("Signed"),
            "Type": obj.get("Type")
        })
        return _obj



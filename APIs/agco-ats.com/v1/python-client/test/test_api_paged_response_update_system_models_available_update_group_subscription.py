# coding: utf-8

"""
    AGCO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_paged_response_update_system_models_available_update_group_subscription import APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription

class TestAPIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription(unittest.TestCase):
    """APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription:
        """Test APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription`
        """
        model = APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription()
        if include_optional:
            return APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription(
                entities = [
                    openapi_client.models.update_system/models/available_update_group_subscription.UpdateSystem.Models.AvailableUpdateGroupSubscription(
                        available_subscriptions = [
                            openapi_client.models.update_system/models/available_subscription.UpdateSystem.Models.AvailableSubscription(
                                package_type = openapi_client.models.update_system/models/package_type.UpdateSystem.Models.PackageType(
                                    attribute = '', 
                                    category = '', 
                                    description = '', 
                                    icon = '', 
                                    inventory_frequency = 56, 
                                    inventory_package = '', 
                                    localized_description = '', 
                                    localized_name = '', 
                                    max_delta_packages = 56, 
                                    package_type_id = '', ), 
                                subscription_type = 'Required', )
                            ], 
                        update_group = openapi_client.models.update_system/models/update_group.UpdateSystem.Models.UpdateGroup(
                            description = '', 
                            id = '', 
                            inventory_frequency = 56, 
                            inventory_package = '', 
                            localized_description = '', 
                            localized_name = '', 
                            priority = 1, 
                            report_field = '', 
                            update_type = '', 
                            validating_field = '', 
                            value_to_validate = '', 
                            version = 'YQ==', ), )
                    ],
                metadata = openapi_client.models.api/paged_response_metadata.API.PagedResponseMetadata(
                    limit = 56, 
                    offset = 56, 
                    total_count = 56, )
            )
        else:
            return APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription(
                entities = [
                    openapi_client.models.update_system/models/available_update_group_subscription.UpdateSystem.Models.AvailableUpdateGroupSubscription(
                        available_subscriptions = [
                            openapi_client.models.update_system/models/available_subscription.UpdateSystem.Models.AvailableSubscription(
                                package_type = openapi_client.models.update_system/models/package_type.UpdateSystem.Models.PackageType(
                                    attribute = '', 
                                    category = '', 
                                    description = '', 
                                    icon = '', 
                                    inventory_frequency = 56, 
                                    inventory_package = '', 
                                    localized_description = '', 
                                    localized_name = '', 
                                    max_delta_packages = 56, 
                                    package_type_id = '', ), 
                                subscription_type = 'Required', )
                            ], 
                        update_group = openapi_client.models.update_system/models/update_group.UpdateSystem.Models.UpdateGroup(
                            description = '', 
                            id = '', 
                            inventory_frequency = 56, 
                            inventory_package = '', 
                            localized_description = '', 
                            localized_name = '', 
                            priority = 1, 
                            report_field = '', 
                            update_type = '', 
                            validating_field = '', 
                            value_to_validate = '', 
                            version = 'YQ==', ), )
                    ],
                metadata = openapi_client.models.api/paged_response_metadata.API.PagedResponseMetadata(
                    limit = 56, 
                    offset = 56, 
                    total_count = 56, ),
        )
        """

    def testAPIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription(self):
        """Test APIPagedResponseUpdateSystemModelsAvailableUpdateGroupSubscription"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

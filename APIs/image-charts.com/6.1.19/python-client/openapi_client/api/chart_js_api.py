# coding: utf-8

"""
    Image-Charts

    Charts, simple as a URL. A safe and fast replacement for Google Image Charts

    The version of the OpenAPI document: 6.1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ChartJsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_chartjs280(
        self,
        c: Annotated[Optional[StrictStr], Field(description="Javascript/JSON definition of the chart. Use a Chart.js configuration object.")] = None,
        chart: Annotated[Optional[StrictStr], Field(description="Javascript/JSON definition of the chart. Use a Chart.js configuration object.")] = None,
        width: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Width of the chart")] = None,
        height: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Height of the chart")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"")] = None,
        bkg: Annotated[Optional[StrictStr], Field(description="Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"")] = None,
        encoding: Annotated[Optional[StrictStr], Field(description="Encoding of your \"chart\" parameter. Accepted values are url and base64.")] = None,
        icac: Annotated[Optional[StrictStr], Field(description="image-charts enterprise `account_id`")] = None,
        ichm: Annotated[Optional[StrictStr], Field(description="HMAC-SHA256 signature required to activate paid features")] = None,
        icretina: Annotated[Optional[StrictStr], Field(description="retina mode")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Chart.js as image API

        Image-charts

        :param c: Javascript/JSON definition of the chart. Use a Chart.js configuration object.
        :type c: str
        :param chart: Javascript/JSON definition of the chart. Use a Chart.js configuration object.
        :type chart: str
        :param width: Width of the chart
        :type width: int
        :param height: Height of the chart
        :type height: int
        :param background_color: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
        :type background_color: str
        :param bkg: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
        :type bkg: str
        :param encoding: Encoding of your \"chart\" parameter. Accepted values are url and base64.
        :type encoding: str
        :param icac: image-charts enterprise `account_id`
        :type icac: str
        :param ichm: HMAC-SHA256 signature required to activate paid features
        :type ichm: str
        :param icretina: retina mode
        :type icretina: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_chartjs280_serialize(
            c=c,
            chart=chart,
            width=width,
            height=height,
            background_color=background_color,
            bkg=bkg,
            encoding=encoding,
            icac=icac,
            ichm=ichm,
            icretina=icretina,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_chartjs280_with_http_info(
        self,
        c: Annotated[Optional[StrictStr], Field(description="Javascript/JSON definition of the chart. Use a Chart.js configuration object.")] = None,
        chart: Annotated[Optional[StrictStr], Field(description="Javascript/JSON definition of the chart. Use a Chart.js configuration object.")] = None,
        width: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Width of the chart")] = None,
        height: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Height of the chart")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"")] = None,
        bkg: Annotated[Optional[StrictStr], Field(description="Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"")] = None,
        encoding: Annotated[Optional[StrictStr], Field(description="Encoding of your \"chart\" parameter. Accepted values are url and base64.")] = None,
        icac: Annotated[Optional[StrictStr], Field(description="image-charts enterprise `account_id`")] = None,
        ichm: Annotated[Optional[StrictStr], Field(description="HMAC-SHA256 signature required to activate paid features")] = None,
        icretina: Annotated[Optional[StrictStr], Field(description="retina mode")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Chart.js as image API

        Image-charts

        :param c: Javascript/JSON definition of the chart. Use a Chart.js configuration object.
        :type c: str
        :param chart: Javascript/JSON definition of the chart. Use a Chart.js configuration object.
        :type chart: str
        :param width: Width of the chart
        :type width: int
        :param height: Height of the chart
        :type height: int
        :param background_color: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
        :type background_color: str
        :param bkg: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
        :type bkg: str
        :param encoding: Encoding of your \"chart\" parameter. Accepted values are url and base64.
        :type encoding: str
        :param icac: image-charts enterprise `account_id`
        :type icac: str
        :param ichm: HMAC-SHA256 signature required to activate paid features
        :type ichm: str
        :param icretina: retina mode
        :type icretina: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_chartjs280_serialize(
            c=c,
            chart=chart,
            width=width,
            height=height,
            background_color=background_color,
            bkg=bkg,
            encoding=encoding,
            icac=icac,
            ichm=ichm,
            icretina=icretina,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_chartjs280_without_preload_content(
        self,
        c: Annotated[Optional[StrictStr], Field(description="Javascript/JSON definition of the chart. Use a Chart.js configuration object.")] = None,
        chart: Annotated[Optional[StrictStr], Field(description="Javascript/JSON definition of the chart. Use a Chart.js configuration object.")] = None,
        width: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Width of the chart")] = None,
        height: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Height of the chart")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"")] = None,
        bkg: Annotated[Optional[StrictStr], Field(description="Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"")] = None,
        encoding: Annotated[Optional[StrictStr], Field(description="Encoding of your \"chart\" parameter. Accepted values are url and base64.")] = None,
        icac: Annotated[Optional[StrictStr], Field(description="image-charts enterprise `account_id`")] = None,
        ichm: Annotated[Optional[StrictStr], Field(description="HMAC-SHA256 signature required to activate paid features")] = None,
        icretina: Annotated[Optional[StrictStr], Field(description="retina mode")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Chart.js as image API

        Image-charts

        :param c: Javascript/JSON definition of the chart. Use a Chart.js configuration object.
        :type c: str
        :param chart: Javascript/JSON definition of the chart. Use a Chart.js configuration object.
        :type chart: str
        :param width: Width of the chart
        :type width: int
        :param height: Height of the chart
        :type height: int
        :param background_color: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
        :type background_color: str
        :param bkg: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
        :type bkg: str
        :param encoding: Encoding of your \"chart\" parameter. Accepted values are url and base64.
        :type encoding: str
        :param icac: image-charts enterprise `account_id`
        :type icac: str
        :param ichm: HMAC-SHA256 signature required to activate paid features
        :type ichm: str
        :param icretina: retina mode
        :type icretina: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_chartjs280_serialize(
            c=c,
            chart=chart,
            width=width,
            height=height,
            background_color=background_color,
            bkg=bkg,
            encoding=encoding,
            icac=icac,
            ichm=ichm,
            icretina=icretina,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_chartjs280_serialize(
        self,
        c,
        chart,
        width,
        height,
        background_color,
        bkg,
        encoding,
        icac,
        ichm,
        icretina,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if c is not None:
            
            _query_params.append(('c', c))
            
        if chart is not None:
            
            _query_params.append(('chart', chart))
            
        if width is not None:
            
            _query_params.append(('width', width))
            
        if height is not None:
            
            _query_params.append(('height', height))
            
        if background_color is not None:
            
            _query_params.append(('backgroundColor', background_color))
            
        if bkg is not None:
            
            _query_params.append(('bkg', bkg))
            
        if encoding is not None:
            
            _query_params.append(('encoding', encoding))
            
        if icac is not None:
            
            _query_params.append(('icac', icac))
            
        if ichm is not None:
            
            _query_params.append(('ichm', ichm))
            
        if icretina is not None:
            
            _query_params.append(('icretina', icretina))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/png', 
                    'application/gif', 
                    'image/svg+xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/chart.js/2.8.0',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



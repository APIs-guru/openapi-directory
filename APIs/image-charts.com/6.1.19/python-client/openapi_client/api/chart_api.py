# coding: utf-8

"""
    Image-Charts

    Charts, simple as a URL. A safe and fast replacement for Google Image Charts

    The version of the OpenAPI document: 6.1.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ChartApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_chart(
        self,
        cht: Annotated[StrictStr, Field(description="Chart type")],
        chl: Annotated[str, Field(strict=True, description="bar, pie slice, doughnut slice and polar slice chart labels")],
        chd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart data")] = None,
        chds: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="data format with custom scaling")] = None,
        choe: Annotated[Optional[StrictStr], Field(description="QRCode data encoding")] = None,
        chld: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="QRCode error correction level and optional margin")] = None,
        chxr: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Axis data-range")] = None,
        chxp: Annotated[Optional[StrictStr], Field(description="axis label positions")] = None,
        chof: Annotated[Optional[StrictStr], Field(description="Image output format")] = None,
        chs: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Chart size (<width>x<height>)")] = None,
        chdl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Text for each series, to display in the legend")] = None,
        chdls: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Chart legend text and style")] = None,
        chg: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Solid or dotted grid lines")] = None,
        chco: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="series colors")] = None,
        chtt: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart title")] = None,
        chts: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart title colors and font size")] = None,
        chxt: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Display values on your axis lines or change which axes are shown")] = None,
        chxl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Custom string axis labels on any axis")] = None,
        chxs: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Font size, color for axis labels, both custom labels and default label values")] = None,
        chm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="compound charts and line fills")] = None,
        chls: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="line thickness and solid/dashed style")] = None,
        chlps: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Position and style of labels on data")] = None,
        chma: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart margins")] = None,
        chdlp: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Position of the legend and order of the legend entries")] = None,
        chf: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Background Fills")] = None,
        chbh: Annotated[Optional[StrictStr], Field(description="Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don't specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width.")] = None,
        chbr: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Bar corner radius. Display bars with rounded corner.")] = None,
        chan: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="gif configuration")] = None,
        chli: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="doughnut chart inside label")] = None,
        icac: Annotated[Optional[StrictStr], Field(description="image-charts enterprise `account_id`")] = None,
        ichm: Annotated[Optional[StrictStr], Field(description="HMAC-SHA256 signature required to activate paid features")] = None,
        icff: Annotated[Optional[StrictStr], Field(description="Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API")] = None,
        icfs: Annotated[Optional[StrictStr], Field(description="Default font style for all text")] = None,
        iclocale: Annotated[Optional[StrictStr], Field(description="localization (ISO 639-1)")] = None,
        icwt: Annotated[Optional[StrictBool], Field(description="(Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account")] = None,
        icretina: Annotated[Optional[StrictStr], Field(description="retina mode")] = None,
        icqrb: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Background color for QR Codes")] = None,
        icqrf: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Foreground color for QR Codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Image-Charts API

        Image-charts

        :param cht: Chart type (required)
        :type cht: str
        :param chl: bar, pie slice, doughnut slice and polar slice chart labels (required)
        :type chl: str
        :param chd: chart data
        :type chd: str
        :param chds: data format with custom scaling
        :type chds: str
        :param choe: QRCode data encoding
        :type choe: str
        :param chld: QRCode error correction level and optional margin
        :type chld: str
        :param chxr: Axis data-range
        :type chxr: str
        :param chxp: axis label positions
        :type chxp: str
        :param chof: Image output format
        :type chof: str
        :param chs: Chart size (<width>x<height>)
        :type chs: str
        :param chdl: Text for each series, to display in the legend
        :type chdl: str
        :param chdls: Chart legend text and style
        :type chdls: str
        :param chg: Solid or dotted grid lines
        :type chg: str
        :param chco: series colors
        :type chco: str
        :param chtt: chart title
        :type chtt: str
        :param chts: chart title colors and font size
        :type chts: str
        :param chxt: Display values on your axis lines or change which axes are shown
        :type chxt: str
        :param chxl: Custom string axis labels on any axis
        :type chxl: str
        :param chxs: Font size, color for axis labels, both custom labels and default label values
        :type chxs: str
        :param chm: compound charts and line fills
        :type chm: str
        :param chls: line thickness and solid/dashed style
        :type chls: str
        :param chlps: Position and style of labels on data
        :type chlps: str
        :param chma: chart margins
        :type chma: str
        :param chdlp: Position of the legend and order of the legend entries
        :type chdlp: str
        :param chf: Background Fills
        :type chf: str
        :param chbh: Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don't specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width.
        :type chbh: str
        :param chbr: Bar corner radius. Display bars with rounded corner.
        :type chbr: str
        :param chan: gif configuration
        :type chan: str
        :param chli: doughnut chart inside label
        :type chli: str
        :param icac: image-charts enterprise `account_id`
        :type icac: str
        :param ichm: HMAC-SHA256 signature required to activate paid features
        :type ichm: str
        :param icff: Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API
        :type icff: str
        :param icfs: Default font style for all text
        :type icfs: str
        :param iclocale: localization (ISO 639-1)
        :type iclocale: str
        :param icwt: (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account
        :type icwt: bool
        :param icretina: retina mode
        :type icretina: str
        :param icqrb: Background color for QR Codes
        :type icqrb: str
        :param icqrf: Foreground color for QR Codes
        :type icqrf: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_chart_serialize(
            cht=cht,
            chl=chl,
            chd=chd,
            chds=chds,
            choe=choe,
            chld=chld,
            chxr=chxr,
            chxp=chxp,
            chof=chof,
            chs=chs,
            chdl=chdl,
            chdls=chdls,
            chg=chg,
            chco=chco,
            chtt=chtt,
            chts=chts,
            chxt=chxt,
            chxl=chxl,
            chxs=chxs,
            chm=chm,
            chls=chls,
            chlps=chlps,
            chma=chma,
            chdlp=chdlp,
            chf=chf,
            chbh=chbh,
            chbr=chbr,
            chan=chan,
            chli=chli,
            icac=icac,
            ichm=ichm,
            icff=icff,
            icfs=icfs,
            iclocale=iclocale,
            icwt=icwt,
            icretina=icretina,
            icqrb=icqrb,
            icqrf=icqrf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_chart_with_http_info(
        self,
        cht: Annotated[StrictStr, Field(description="Chart type")],
        chl: Annotated[str, Field(strict=True, description="bar, pie slice, doughnut slice and polar slice chart labels")],
        chd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart data")] = None,
        chds: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="data format with custom scaling")] = None,
        choe: Annotated[Optional[StrictStr], Field(description="QRCode data encoding")] = None,
        chld: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="QRCode error correction level and optional margin")] = None,
        chxr: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Axis data-range")] = None,
        chxp: Annotated[Optional[StrictStr], Field(description="axis label positions")] = None,
        chof: Annotated[Optional[StrictStr], Field(description="Image output format")] = None,
        chs: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Chart size (<width>x<height>)")] = None,
        chdl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Text for each series, to display in the legend")] = None,
        chdls: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Chart legend text and style")] = None,
        chg: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Solid or dotted grid lines")] = None,
        chco: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="series colors")] = None,
        chtt: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart title")] = None,
        chts: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart title colors and font size")] = None,
        chxt: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Display values on your axis lines or change which axes are shown")] = None,
        chxl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Custom string axis labels on any axis")] = None,
        chxs: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Font size, color for axis labels, both custom labels and default label values")] = None,
        chm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="compound charts and line fills")] = None,
        chls: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="line thickness and solid/dashed style")] = None,
        chlps: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Position and style of labels on data")] = None,
        chma: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart margins")] = None,
        chdlp: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Position of the legend and order of the legend entries")] = None,
        chf: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Background Fills")] = None,
        chbh: Annotated[Optional[StrictStr], Field(description="Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don't specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width.")] = None,
        chbr: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Bar corner radius. Display bars with rounded corner.")] = None,
        chan: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="gif configuration")] = None,
        chli: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="doughnut chart inside label")] = None,
        icac: Annotated[Optional[StrictStr], Field(description="image-charts enterprise `account_id`")] = None,
        ichm: Annotated[Optional[StrictStr], Field(description="HMAC-SHA256 signature required to activate paid features")] = None,
        icff: Annotated[Optional[StrictStr], Field(description="Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API")] = None,
        icfs: Annotated[Optional[StrictStr], Field(description="Default font style for all text")] = None,
        iclocale: Annotated[Optional[StrictStr], Field(description="localization (ISO 639-1)")] = None,
        icwt: Annotated[Optional[StrictBool], Field(description="(Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account")] = None,
        icretina: Annotated[Optional[StrictStr], Field(description="retina mode")] = None,
        icqrb: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Background color for QR Codes")] = None,
        icqrf: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Foreground color for QR Codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Image-Charts API

        Image-charts

        :param cht: Chart type (required)
        :type cht: str
        :param chl: bar, pie slice, doughnut slice and polar slice chart labels (required)
        :type chl: str
        :param chd: chart data
        :type chd: str
        :param chds: data format with custom scaling
        :type chds: str
        :param choe: QRCode data encoding
        :type choe: str
        :param chld: QRCode error correction level and optional margin
        :type chld: str
        :param chxr: Axis data-range
        :type chxr: str
        :param chxp: axis label positions
        :type chxp: str
        :param chof: Image output format
        :type chof: str
        :param chs: Chart size (<width>x<height>)
        :type chs: str
        :param chdl: Text for each series, to display in the legend
        :type chdl: str
        :param chdls: Chart legend text and style
        :type chdls: str
        :param chg: Solid or dotted grid lines
        :type chg: str
        :param chco: series colors
        :type chco: str
        :param chtt: chart title
        :type chtt: str
        :param chts: chart title colors and font size
        :type chts: str
        :param chxt: Display values on your axis lines or change which axes are shown
        :type chxt: str
        :param chxl: Custom string axis labels on any axis
        :type chxl: str
        :param chxs: Font size, color for axis labels, both custom labels and default label values
        :type chxs: str
        :param chm: compound charts and line fills
        :type chm: str
        :param chls: line thickness and solid/dashed style
        :type chls: str
        :param chlps: Position and style of labels on data
        :type chlps: str
        :param chma: chart margins
        :type chma: str
        :param chdlp: Position of the legend and order of the legend entries
        :type chdlp: str
        :param chf: Background Fills
        :type chf: str
        :param chbh: Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don't specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width.
        :type chbh: str
        :param chbr: Bar corner radius. Display bars with rounded corner.
        :type chbr: str
        :param chan: gif configuration
        :type chan: str
        :param chli: doughnut chart inside label
        :type chli: str
        :param icac: image-charts enterprise `account_id`
        :type icac: str
        :param ichm: HMAC-SHA256 signature required to activate paid features
        :type ichm: str
        :param icff: Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API
        :type icff: str
        :param icfs: Default font style for all text
        :type icfs: str
        :param iclocale: localization (ISO 639-1)
        :type iclocale: str
        :param icwt: (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account
        :type icwt: bool
        :param icretina: retina mode
        :type icretina: str
        :param icqrb: Background color for QR Codes
        :type icqrb: str
        :param icqrf: Foreground color for QR Codes
        :type icqrf: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_chart_serialize(
            cht=cht,
            chl=chl,
            chd=chd,
            chds=chds,
            choe=choe,
            chld=chld,
            chxr=chxr,
            chxp=chxp,
            chof=chof,
            chs=chs,
            chdl=chdl,
            chdls=chdls,
            chg=chg,
            chco=chco,
            chtt=chtt,
            chts=chts,
            chxt=chxt,
            chxl=chxl,
            chxs=chxs,
            chm=chm,
            chls=chls,
            chlps=chlps,
            chma=chma,
            chdlp=chdlp,
            chf=chf,
            chbh=chbh,
            chbr=chbr,
            chan=chan,
            chli=chli,
            icac=icac,
            ichm=ichm,
            icff=icff,
            icfs=icfs,
            iclocale=iclocale,
            icwt=icwt,
            icretina=icretina,
            icqrb=icqrb,
            icqrf=icqrf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_chart_without_preload_content(
        self,
        cht: Annotated[StrictStr, Field(description="Chart type")],
        chl: Annotated[str, Field(strict=True, description="bar, pie slice, doughnut slice and polar slice chart labels")],
        chd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart data")] = None,
        chds: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="data format with custom scaling")] = None,
        choe: Annotated[Optional[StrictStr], Field(description="QRCode data encoding")] = None,
        chld: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="QRCode error correction level and optional margin")] = None,
        chxr: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Axis data-range")] = None,
        chxp: Annotated[Optional[StrictStr], Field(description="axis label positions")] = None,
        chof: Annotated[Optional[StrictStr], Field(description="Image output format")] = None,
        chs: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Chart size (<width>x<height>)")] = None,
        chdl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Text for each series, to display in the legend")] = None,
        chdls: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Chart legend text and style")] = None,
        chg: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Solid or dotted grid lines")] = None,
        chco: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="series colors")] = None,
        chtt: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart title")] = None,
        chts: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart title colors and font size")] = None,
        chxt: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Display values on your axis lines or change which axes are shown")] = None,
        chxl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Custom string axis labels on any axis")] = None,
        chxs: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Font size, color for axis labels, both custom labels and default label values")] = None,
        chm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="compound charts and line fills")] = None,
        chls: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="line thickness and solid/dashed style")] = None,
        chlps: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Position and style of labels on data")] = None,
        chma: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="chart margins")] = None,
        chdlp: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Position of the legend and order of the legend entries")] = None,
        chf: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Background Fills")] = None,
        chbh: Annotated[Optional[StrictStr], Field(description="Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don't specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width.")] = None,
        chbr: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Bar corner radius. Display bars with rounded corner.")] = None,
        chan: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="gif configuration")] = None,
        chli: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="doughnut chart inside label")] = None,
        icac: Annotated[Optional[StrictStr], Field(description="image-charts enterprise `account_id`")] = None,
        ichm: Annotated[Optional[StrictStr], Field(description="HMAC-SHA256 signature required to activate paid features")] = None,
        icff: Annotated[Optional[StrictStr], Field(description="Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API")] = None,
        icfs: Annotated[Optional[StrictStr], Field(description="Default font style for all text")] = None,
        iclocale: Annotated[Optional[StrictStr], Field(description="localization (ISO 639-1)")] = None,
        icwt: Annotated[Optional[StrictBool], Field(description="(Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account")] = None,
        icretina: Annotated[Optional[StrictStr], Field(description="retina mode")] = None,
        icqrb: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Background color for QR Codes")] = None,
        icqrf: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Foreground color for QR Codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Image-Charts API

        Image-charts

        :param cht: Chart type (required)
        :type cht: str
        :param chl: bar, pie slice, doughnut slice and polar slice chart labels (required)
        :type chl: str
        :param chd: chart data
        :type chd: str
        :param chds: data format with custom scaling
        :type chds: str
        :param choe: QRCode data encoding
        :type choe: str
        :param chld: QRCode error correction level and optional margin
        :type chld: str
        :param chxr: Axis data-range
        :type chxr: str
        :param chxp: axis label positions
        :type chxp: str
        :param chof: Image output format
        :type chof: str
        :param chs: Chart size (<width>x<height>)
        :type chs: str
        :param chdl: Text for each series, to display in the legend
        :type chdl: str
        :param chdls: Chart legend text and style
        :type chdls: str
        :param chg: Solid or dotted grid lines
        :type chg: str
        :param chco: series colors
        :type chco: str
        :param chtt: chart title
        :type chtt: str
        :param chts: chart title colors and font size
        :type chts: str
        :param chxt: Display values on your axis lines or change which axes are shown
        :type chxt: str
        :param chxl: Custom string axis labels on any axis
        :type chxl: str
        :param chxs: Font size, color for axis labels, both custom labels and default label values
        :type chxs: str
        :param chm: compound charts and line fills
        :type chm: str
        :param chls: line thickness and solid/dashed style
        :type chls: str
        :param chlps: Position and style of labels on data
        :type chlps: str
        :param chma: chart margins
        :type chma: str
        :param chdlp: Position of the legend and order of the legend entries
        :type chdlp: str
        :param chf: Background Fills
        :type chf: str
        :param chbh: Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don't specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width.
        :type chbh: str
        :param chbr: Bar corner radius. Display bars with rounded corner.
        :type chbr: str
        :param chan: gif configuration
        :type chan: str
        :param chli: doughnut chart inside label
        :type chli: str
        :param icac: image-charts enterprise `account_id`
        :type icac: str
        :param ichm: HMAC-SHA256 signature required to activate paid features
        :type ichm: str
        :param icff: Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API
        :type icff: str
        :param icfs: Default font style for all text
        :type icfs: str
        :param iclocale: localization (ISO 639-1)
        :type iclocale: str
        :param icwt: (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account
        :type icwt: bool
        :param icretina: retina mode
        :type icretina: str
        :param icqrb: Background color for QR Codes
        :type icqrb: str
        :param icqrf: Foreground color for QR Codes
        :type icqrf: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_chart_serialize(
            cht=cht,
            chl=chl,
            chd=chd,
            chds=chds,
            choe=choe,
            chld=chld,
            chxr=chxr,
            chxp=chxp,
            chof=chof,
            chs=chs,
            chdl=chdl,
            chdls=chdls,
            chg=chg,
            chco=chco,
            chtt=chtt,
            chts=chts,
            chxt=chxt,
            chxl=chxl,
            chxs=chxs,
            chm=chm,
            chls=chls,
            chlps=chlps,
            chma=chma,
            chdlp=chdlp,
            chf=chf,
            chbh=chbh,
            chbr=chbr,
            chan=chan,
            chli=chli,
            icac=icac,
            ichm=ichm,
            icff=icff,
            icfs=icfs,
            iclocale=iclocale,
            icwt=icwt,
            icretina=icretina,
            icqrb=icqrb,
            icqrf=icqrf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_chart_serialize(
        self,
        cht,
        chl,
        chd,
        chds,
        choe,
        chld,
        chxr,
        chxp,
        chof,
        chs,
        chdl,
        chdls,
        chg,
        chco,
        chtt,
        chts,
        chxt,
        chxl,
        chxs,
        chm,
        chls,
        chlps,
        chma,
        chdlp,
        chf,
        chbh,
        chbr,
        chan,
        chli,
        icac,
        ichm,
        icff,
        icfs,
        iclocale,
        icwt,
        icretina,
        icqrb,
        icqrf,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cht is not None:
            
            _query_params.append(('cht', cht))
            
        if chd is not None:
            
            _query_params.append(('chd', chd))
            
        if chds is not None:
            
            _query_params.append(('chds', chds))
            
        if choe is not None:
            
            _query_params.append(('choe', choe))
            
        if chld is not None:
            
            _query_params.append(('chld', chld))
            
        if chxr is not None:
            
            _query_params.append(('chxr', chxr))
            
        if chxp is not None:
            
            _query_params.append(('chxp', chxp))
            
        if chof is not None:
            
            _query_params.append(('chof', chof))
            
        if chs is not None:
            
            _query_params.append(('chs', chs))
            
        if chdl is not None:
            
            _query_params.append(('chdl', chdl))
            
        if chdls is not None:
            
            _query_params.append(('chdls', chdls))
            
        if chg is not None:
            
            _query_params.append(('chg', chg))
            
        if chco is not None:
            
            _query_params.append(('chco', chco))
            
        if chtt is not None:
            
            _query_params.append(('chtt', chtt))
            
        if chts is not None:
            
            _query_params.append(('chts', chts))
            
        if chxt is not None:
            
            _query_params.append(('chxt', chxt))
            
        if chxl is not None:
            
            _query_params.append(('chxl', chxl))
            
        if chxs is not None:
            
            _query_params.append(('chxs', chxs))
            
        if chm is not None:
            
            _query_params.append(('chm', chm))
            
        if chls is not None:
            
            _query_params.append(('chls', chls))
            
        if chl is not None:
            
            _query_params.append(('chl', chl))
            
        if chlps is not None:
            
            _query_params.append(('chlps', chlps))
            
        if chma is not None:
            
            _query_params.append(('chma', chma))
            
        if chdlp is not None:
            
            _query_params.append(('chdlp', chdlp))
            
        if chf is not None:
            
            _query_params.append(('chf', chf))
            
        if chbh is not None:
            
            _query_params.append(('chbh', chbh))
            
        if chbr is not None:
            
            _query_params.append(('chbr', chbr))
            
        if chan is not None:
            
            _query_params.append(('chan', chan))
            
        if chli is not None:
            
            _query_params.append(('chli', chli))
            
        if icac is not None:
            
            _query_params.append(('icac', icac))
            
        if ichm is not None:
            
            _query_params.append(('ichm', ichm))
            
        if icff is not None:
            
            _query_params.append(('icff', icff))
            
        if icfs is not None:
            
            _query_params.append(('icfs', icfs))
            
        if iclocale is not None:
            
            _query_params.append(('iclocale', iclocale))
            
        if icwt is not None:
            
            _query_params.append(('icwt', icwt))
            
        if icretina is not None:
            
            _query_params.append(('icretina', icretina))
            
        if icqrb is not None:
            
            _query_params.append(('icqrb', icqrb))
            
        if icqrf is not None:
            
            _query_params.append(('icqrf', icqrf))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/png', 
                    'application/gif', 
                    'image/svg+xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/chart',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



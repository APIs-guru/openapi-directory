# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.transport_mastodon_get import TransportMastodonGet

class TestTransportMastodonGet(unittest.TestCase):
    """TransportMastodonGet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransportMastodonGet:
        """Test TransportMastodonGet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransportMastodonGet`
        """
        model = TransportMastodonGet()
        if include_optional:
            return TransportMastodonGet(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_segment_code = '',
                id = '',
                mastodon_access_token = '',
                mastodon_host = '',
                partition = '',
                resource_owner = '',
                transport_name = ''
            )
        else:
            return TransportMastodonGet(
                mastodon_access_token = '',
                mastodon_host = '',
                partition = '',
                transport_name = '',
        )
        """

    def testTransportMastodonGet(self):
        """Test TransportMastodonGet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

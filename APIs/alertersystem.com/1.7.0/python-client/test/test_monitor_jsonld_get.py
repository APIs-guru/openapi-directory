# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.monitor_jsonld_get import MonitorJsonldGet

class TestMonitorJsonldGet(unittest.TestCase):
    """MonitorJsonldGet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MonitorJsonldGet:
        """Test MonitorJsonldGet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MonitorJsonldGet`
        """
        model = MonitorJsonldGet()
        if include_optional:
            return MonitorJsonldGet(
                context = None,
                id = '',
                type = '',
                alert_payload_extended = '',
                alert_payload_short = '',
                alert_services = [
                    ''
                    ],
                allow_unauthenticated_pings = True,
                content_check_must_not_exist = True,
                content_check_text = '',
                content_check_url = '',
                content_check_xpath_filter = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_segment_code = '',
                grace_seconds = 56,
                humanized_interval = '',
                id = '',
                internal_monitor_name = '',
                interval_days = 0,
                interval_hours = 0,
                interval_minutes = 0,
                interval_months = 0,
                interval_seconds = 0,
                interval_years = 0,
                is_monitor_paused = True,
                last_ping_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                monitor_name = '',
                monitor_notes = '',
                monitor_status_code = '',
                monitor_type_code = '',
                next_ping_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                partition = '',
                ping_secret = '',
                public_description = '',
                resource_owner = '',
                start_monitor_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                start_monitor_at_utc = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                system_messages = [
                    ''
                    ],
                timezone_code = '',
                web_response_seconds_limit = 0,
                web_response_url = ''
            )
        else:
            return MonitorJsonldGet(
                monitor_name = '',
                monitor_type_code = '',
                partition = '',
                timezone_code = '',
        )
        """

    def testMonitorJsonldGet(self):
        """Test MonitorJsonldGet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

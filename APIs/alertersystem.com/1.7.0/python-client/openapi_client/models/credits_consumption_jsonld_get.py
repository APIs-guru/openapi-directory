# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_log_jsonld_get_context import AlertLogJsonldGetContext
from typing import Optional, Set
from typing_extensions import Self

class CreditsConsumptionJsonldGet(BaseModel):
    """
    The CreditsConsumption resource is a chronological record of all the credits that have been consumed, including the reason for the consumption.
    """ # noqa: E501
    context: Optional[AlertLogJsonldGetContext] = Field(default=None, alias="@context")
    id: Optional[StrictStr] = Field(default=None, alias="@id")
    type: Optional[StrictStr] = Field(default=None, alias="@type")
    created_at: Optional[datetime] = Field(default=None, description="When the resource instance was created. This date-time is in the UTC timezone.", alias="createdAt")
    credits_consumption_event_code: Optional[StrictStr] = Field(default=None, description="The type of event that consumed the credits.", alias="creditsConsumptionEventCode")
    credits_consumption_notes: Optional[StrictStr] = Field(default=None, description="Notes that add additional information to the resource.", alias="creditsConsumptionNotes")
    credits_event_id: Optional[StrictStr] = Field(default=None, description="The ID of the event (Ping resource or AlertLog resource) that consumed the credits.", alias="creditsEventId")
    credits_event_iri: Optional[StrictStr] = Field(default=None, description="The IRI of the event that is related to this resource.", alias="creditsEventIri")
    credits_used: Optional[StrictStr] = Field(default=None, description="The number of credits that were consumed.", alias="creditsUsed")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the resource instance.")
    __properties: ClassVar[List[str]] = ["@context", "@id", "@type", "createdAt", "creditsConsumptionEventCode", "creditsConsumptionNotes", "creditsEventId", "creditsEventIri", "creditsUsed", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditsConsumptionJsonldGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "type",
            "created_at",
            "credits_consumption_event_code",
            "credits_used",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if credits_consumption_event_code (nullable) is None
        # and model_fields_set contains the field
        if self.credits_consumption_event_code is None and "credits_consumption_event_code" in self.model_fields_set:
            _dict['creditsConsumptionEventCode'] = None

        # set to None if credits_consumption_notes (nullable) is None
        # and model_fields_set contains the field
        if self.credits_consumption_notes is None and "credits_consumption_notes" in self.model_fields_set:
            _dict['creditsConsumptionNotes'] = None

        # set to None if credits_event_id (nullable) is None
        # and model_fields_set contains the field
        if self.credits_event_id is None and "credits_event_id" in self.model_fields_set:
            _dict['creditsEventId'] = None

        # set to None if credits_event_iri (nullable) is None
        # and model_fields_set contains the field
        if self.credits_event_iri is None and "credits_event_iri" in self.model_fields_set:
            _dict['creditsEventIri'] = None

        # set to None if credits_used (nullable) is None
        # and model_fields_set contains the field
        if self.credits_used is None and "credits_used" in self.model_fields_set:
            _dict['creditsUsed'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditsConsumptionJsonldGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": AlertLogJsonldGetContext.from_dict(obj["@context"]) if obj.get("@context") is not None else None,
            "@id": obj.get("@id"),
            "@type": obj.get("@type"),
            "createdAt": obj.get("createdAt"),
            "creditsConsumptionEventCode": obj.get("creditsConsumptionEventCode"),
            "creditsConsumptionNotes": obj.get("creditsConsumptionNotes"),
            "creditsEventId": obj.get("creditsEventId"),
            "creditsEventIri": obj.get("creditsEventIri"),
            "creditsUsed": obj.get("creditsUsed"),
            "id": obj.get("id")
        })
        return _obj



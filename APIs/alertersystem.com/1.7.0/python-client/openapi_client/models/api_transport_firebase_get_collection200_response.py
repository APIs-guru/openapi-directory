# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.api_alert_log_get_collection200_response_hydra_search import ApiAlertLogGetCollection200ResponseHydraSearch
from openapi_client.models.api_alert_log_get_collection200_response_hydra_view import ApiAlertLogGetCollection200ResponseHydraView
from openapi_client.models.transport_firebase_jsonld_get import TransportFirebaseJsonldGet
from typing import Optional, Set
from typing_extensions import Self

class ApiTransportFirebaseGetCollection200Response(BaseModel):
    """
    ApiTransportFirebaseGetCollection200Response
    """ # noqa: E501
    hydramember: List[TransportFirebaseJsonldGet] = Field(alias="hydra:member")
    hydrasearch: Optional[ApiAlertLogGetCollection200ResponseHydraSearch] = Field(default=None, alias="hydra:search")
    hydratotal_items: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="hydra:totalItems")
    hydraview: Optional[ApiAlertLogGetCollection200ResponseHydraView] = Field(default=None, alias="hydra:view")
    __properties: ClassVar[List[str]] = ["hydra:member", "hydra:search", "hydra:totalItems", "hydra:view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiTransportFirebaseGetCollection200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hydramember (list)
        _items = []
        if self.hydramember:
            for _item_hydramember in self.hydramember:
                if _item_hydramember:
                    _items.append(_item_hydramember.to_dict())
            _dict['hydra:member'] = _items
        # override the default output from pydantic by calling `to_dict()` of hydrasearch
        if self.hydrasearch:
            _dict['hydra:search'] = self.hydrasearch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hydraview
        if self.hydraview:
            _dict['hydra:view'] = self.hydraview.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiTransportFirebaseGetCollection200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hydra:member": [TransportFirebaseJsonldGet.from_dict(_item) for _item in obj["hydra:member"]] if obj.get("hydra:member") is not None else None,
            "hydra:search": ApiAlertLogGetCollection200ResponseHydraSearch.from_dict(obj["hydra:search"]) if obj.get("hydra:search") is not None else None,
            "hydra:totalItems": obj.get("hydra:totalItems"),
            "hydra:view": ApiAlertLogGetCollection200ResponseHydraView.from_dict(obj["hydra:view"]) if obj.get("hydra:view") is not None else None
        })
        return _obj



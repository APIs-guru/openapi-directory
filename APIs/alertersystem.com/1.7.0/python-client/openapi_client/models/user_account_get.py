# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UserAccountGet(BaseModel):
    """
    The UserAccount resource contains basic information regarding the authenticated user account.
    """ # noqa: E501
    account_level_code: Optional[StrictStr] = Field(default=None, description="The account level of the user.", alias="accountLevelCode")
    credits_overage_percent_trip_switch: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = Field(default=None, description="If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.", alias="creditsOveragePercentTripSwitch")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the user.")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the user.", alias="firstName")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the resource instance.")
    is_delinquent: Optional[StrictBool] = Field(default=None, description="Whether the user account has overdue payments.", alias="isDelinquent")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the user.", alias="lastName")
    timezone_code: Optional[StrictStr] = Field(default=None, description="The timezone of the user.", alias="timezoneCode")
    __properties: ClassVar[List[str]] = ["accountLevelCode", "creditsOveragePercentTripSwitch", "email", "firstName", "id", "isDelinquent", "lastName", "timezoneCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserAccountGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if credits_overage_percent_trip_switch (nullable) is None
        # and model_fields_set contains the field
        if self.credits_overage_percent_trip_switch is None and "credits_overage_percent_trip_switch" in self.model_fields_set:
            _dict['creditsOveragePercentTripSwitch'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserAccountGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountLevelCode": obj.get("accountLevelCode"),
            "creditsOveragePercentTripSwitch": obj.get("creditsOveragePercentTripSwitch"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "id": obj.get("id"),
            "isDelinquent": obj.get("isDelinquent"),
            "lastName": obj.get("lastName"),
            "timezoneCode": obj.get("timezoneCode")
        })
        return _obj



# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.alert_log_jsonld_get_context import AlertLogJsonldGetContext
from typing import Optional, Set
from typing_extensions import Self

class PartitionJsonldGet(BaseModel):
    """
    The Partition resource is a collection of siloed monitor and alert environments in the user account.
    """ # noqa: E501
    context: Optional[AlertLogJsonldGetContext] = Field(default=None, alias="@context")
    id: Optional[StrictStr] = Field(default=None, alias="@id")
    type: Optional[StrictStr] = Field(default=None, alias="@type")
    alert_services: Optional[List[StrictStr]] = Field(default=None, description="The alert services that are related to this resource.", alias="alertServices")
    created_at: Optional[datetime] = Field(default=None, description="When the resource instance was created. This date-time is in the UTC timezone.", alias="createdAt")
    data_segment_code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="User-provided string on which to segment and filter data. Max 50 characters.", alias="dataSegmentCode")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the resource instance.")
    monitors: Optional[List[StrictStr]] = Field(default=None, description="The monitors that are associated with this partition.")
    partition_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The name of the partition. Max 255 characters.", alias="partitionName")
    partition_notes: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = Field(default=None, description="Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.", alias="partitionNotes")
    resource_owner: Optional[StrictStr] = Field(default=None, description="The name of the person who owns this resource.", alias="resourceOwner")
    team_invitations: Optional[List[StrictStr]] = Field(default=None, description="The team invitations that are related to this resource.", alias="teamInvitations")
    team_members: Optional[List[StrictStr]] = Field(default=None, description="The team members of this resource.", alias="teamMembers")
    __properties: ClassVar[List[str]] = ["@context", "@id", "@type", "alertServices", "createdAt", "dataSegmentCode", "id", "monitors", "partitionName", "partitionNotes", "resourceOwner", "teamInvitations", "teamMembers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartitionJsonldGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "type",
            "created_at",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # set to None if data_segment_code (nullable) is None
        # and model_fields_set contains the field
        if self.data_segment_code is None and "data_segment_code" in self.model_fields_set:
            _dict['dataSegmentCode'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if partition_name (nullable) is None
        # and model_fields_set contains the field
        if self.partition_name is None and "partition_name" in self.model_fields_set:
            _dict['partitionName'] = None

        # set to None if partition_notes (nullable) is None
        # and model_fields_set contains the field
        if self.partition_notes is None and "partition_notes" in self.model_fields_set:
            _dict['partitionNotes'] = None

        # set to None if resource_owner (nullable) is None
        # and model_fields_set contains the field
        if self.resource_owner is None and "resource_owner" in self.model_fields_set:
            _dict['resourceOwner'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartitionJsonldGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": AlertLogJsonldGetContext.from_dict(obj["@context"]) if obj.get("@context") is not None else None,
            "@id": obj.get("@id"),
            "@type": obj.get("@type"),
            "alertServices": obj.get("alertServices"),
            "createdAt": obj.get("createdAt"),
            "dataSegmentCode": obj.get("dataSegmentCode"),
            "id": obj.get("id"),
            "monitors": obj.get("monitors"),
            "partitionName": obj.get("partitionName"),
            "partitionNotes": obj.get("partitionNotes"),
            "resourceOwner": obj.get("resourceOwner"),
            "teamInvitations": obj.get("teamInvitations"),
            "teamMembers": obj.get("teamMembers")
        })
        return _obj



# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TransportEsendexPatch(BaseModel):
    """
    The TransportEsendex resource is a collection of transports that carry dispatched alerts to the external Esendex service.
    """ # noqa: E501
    data_segment_code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="User-provided string on which to segment and filter data. Max 50 characters.", alias="dataSegmentCode")
    esendex_account_reference: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The account reference that the message should be sent from for the Esendex service.", alias="esendexAccountReference")
    esendex_from: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The alphanumeric originator for the message to appear to originate from for the Esendex service.", alias="esendexFrom")
    esendex_password: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(description="The API password for the Esendex service. Stored in encrypted format.", alias="esendexPassword")
    esendex_username: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The account email for the Esendex service.", alias="esendexUsername")
    transport_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The name of the transport.", alias="transportName")
    __properties: ClassVar[List[str]] = ["dataSegmentCode", "esendexAccountReference", "esendexFrom", "esendexPassword", "esendexUsername", "transportName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportEsendexPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_segment_code (nullable) is None
        # and model_fields_set contains the field
        if self.data_segment_code is None and "data_segment_code" in self.model_fields_set:
            _dict['dataSegmentCode'] = None

        # set to None if esendex_account_reference (nullable) is None
        # and model_fields_set contains the field
        if self.esendex_account_reference is None and "esendex_account_reference" in self.model_fields_set:
            _dict['esendexAccountReference'] = None

        # set to None if esendex_from (nullable) is None
        # and model_fields_set contains the field
        if self.esendex_from is None and "esendex_from" in self.model_fields_set:
            _dict['esendexFrom'] = None

        # set to None if esendex_password (nullable) is None
        # and model_fields_set contains the field
        if self.esendex_password is None and "esendex_password" in self.model_fields_set:
            _dict['esendexPassword'] = None

        # set to None if esendex_username (nullable) is None
        # and model_fields_set contains the field
        if self.esendex_username is None and "esendex_username" in self.model_fields_set:
            _dict['esendexUsername'] = None

        # set to None if transport_name (nullable) is None
        # and model_fields_set contains the field
        if self.transport_name is None and "transport_name" in self.model_fields_set:
            _dict['transportName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportEsendexPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSegmentCode": obj.get("dataSegmentCode"),
            "esendexAccountReference": obj.get("esendexAccountReference"),
            "esendexFrom": obj.get("esendexFrom"),
            "esendexPassword": obj.get("esendexPassword"),
            "esendexUsername": obj.get("esendexUsername"),
            "transportName": obj.get("transportName")
        })
        return _obj



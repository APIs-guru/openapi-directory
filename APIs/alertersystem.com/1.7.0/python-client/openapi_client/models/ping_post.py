# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PingPost(BaseModel):
    """
    The Ping resource is a collection of pings that have been sent to monitors in the user account.
    """ # noqa: E501
    expect_next_ping_at: Optional[datetime] = Field(default=None, description="When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.", alias="expectNextPingAt")
    expect_next_ping_at_epoch: Optional[StrictInt] = Field(default=None, description="When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either \"expectNextPingAt\", or \"expectNextPingAtEpoch\", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.", alias="expectNextPingAtEpoch")
    monitor: StrictStr = Field(description="The monitor that is related to this resource instance.")
    ping_custom_code: Optional[StrictStr] = Field(default=None, description="The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.", alias="pingCustomCode")
    ping_custom_payload: Optional[StrictStr] = Field(default=None, description="The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.", alias="pingCustomPayload")
    __properties: ClassVar[List[str]] = ["expectNextPingAt", "expectNextPingAtEpoch", "monitor", "pingCustomCode", "pingCustomPayload"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PingPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expect_next_ping_at (nullable) is None
        # and model_fields_set contains the field
        if self.expect_next_ping_at is None and "expect_next_ping_at" in self.model_fields_set:
            _dict['expectNextPingAt'] = None

        # set to None if expect_next_ping_at_epoch (nullable) is None
        # and model_fields_set contains the field
        if self.expect_next_ping_at_epoch is None and "expect_next_ping_at_epoch" in self.model_fields_set:
            _dict['expectNextPingAtEpoch'] = None

        # set to None if ping_custom_code (nullable) is None
        # and model_fields_set contains the field
        if self.ping_custom_code is None and "ping_custom_code" in self.model_fields_set:
            _dict['pingCustomCode'] = None

        # set to None if ping_custom_payload (nullable) is None
        # and model_fields_set contains the field
        if self.ping_custom_payload is None and "ping_custom_payload" in self.model_fields_set:
            _dict['pingCustomPayload'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PingPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expectNextPingAt": obj.get("expectNextPingAt"),
            "expectNextPingAtEpoch": obj.get("expectNextPingAtEpoch"),
            "monitor": obj.get("monitor"),
            "pingCustomCode": obj.get("pingCustomCode"),
            "pingCustomPayload": obj.get("pingCustomPayload")
        })
        return _obj



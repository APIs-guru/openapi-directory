# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TransportAlertaPut(BaseModel):
    """
    The TransportAlerta resource is a collection of transports that carry dispatched alerts to the external Alerta service.
    """ # noqa: E501
    alerta_api_key: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(description="The API key for the Alerta service.", alias="alertaApiKey")
    alerta_correlate: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The comma-separated list of related event names for the Alerta service.", alias="alertaCorrelate")
    alerta_environment: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The environment value for the Alerta service.", alias="alertaEnvironment")
    alerta_event: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The event value for the Alerta service.", alias="alertaEvent")
    alerta_group: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The group value for the Alerta service.", alias="alertaGroup")
    alerta_host: Optional[StrictStr] = Field(description="The host name for the Alerta service (omit the \"https://\" part).", alias="alertaHost")
    alerta_origin: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The origin value for the Alerta service.", alias="alertaOrigin")
    alerta_resource: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The resource value for the Alerta service.", alias="alertaResource")
    alerta_service: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The comma-separated list of affected services for the Alerta service.", alias="alertaService")
    alerta_severity: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The severity value for the Alerta service.", alias="alertaSeverity")
    alerta_status: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The status value for the Alerta service.", alias="alertaStatus")
    alerta_tags: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The comma-separated list of tags for the Alerta service.", alias="alertaTags")
    alerta_type: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The type value for the Alerta service.", alias="alertaType")
    data_segment_code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="User-provided string on which to segment and filter data. Max 50 characters.", alias="dataSegmentCode")
    transport_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The name of the transport.", alias="transportName")
    __properties: ClassVar[List[str]] = ["alertaApiKey", "alertaCorrelate", "alertaEnvironment", "alertaEvent", "alertaGroup", "alertaHost", "alertaOrigin", "alertaResource", "alertaService", "alertaSeverity", "alertaStatus", "alertaTags", "alertaType", "dataSegmentCode", "transportName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportAlertaPut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alerta_api_key (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_api_key is None and "alerta_api_key" in self.model_fields_set:
            _dict['alertaApiKey'] = None

        # set to None if alerta_correlate (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_correlate is None and "alerta_correlate" in self.model_fields_set:
            _dict['alertaCorrelate'] = None

        # set to None if alerta_environment (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_environment is None and "alerta_environment" in self.model_fields_set:
            _dict['alertaEnvironment'] = None

        # set to None if alerta_event (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_event is None and "alerta_event" in self.model_fields_set:
            _dict['alertaEvent'] = None

        # set to None if alerta_group (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_group is None and "alerta_group" in self.model_fields_set:
            _dict['alertaGroup'] = None

        # set to None if alerta_host (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_host is None and "alerta_host" in self.model_fields_set:
            _dict['alertaHost'] = None

        # set to None if alerta_origin (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_origin is None and "alerta_origin" in self.model_fields_set:
            _dict['alertaOrigin'] = None

        # set to None if alerta_resource (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_resource is None and "alerta_resource" in self.model_fields_set:
            _dict['alertaResource'] = None

        # set to None if alerta_service (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_service is None and "alerta_service" in self.model_fields_set:
            _dict['alertaService'] = None

        # set to None if alerta_severity (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_severity is None and "alerta_severity" in self.model_fields_set:
            _dict['alertaSeverity'] = None

        # set to None if alerta_status (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_status is None and "alerta_status" in self.model_fields_set:
            _dict['alertaStatus'] = None

        # set to None if alerta_tags (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_tags is None and "alerta_tags" in self.model_fields_set:
            _dict['alertaTags'] = None

        # set to None if alerta_type (nullable) is None
        # and model_fields_set contains the field
        if self.alerta_type is None and "alerta_type" in self.model_fields_set:
            _dict['alertaType'] = None

        # set to None if data_segment_code (nullable) is None
        # and model_fields_set contains the field
        if self.data_segment_code is None and "data_segment_code" in self.model_fields_set:
            _dict['dataSegmentCode'] = None

        # set to None if transport_name (nullable) is None
        # and model_fields_set contains the field
        if self.transport_name is None and "transport_name" in self.model_fields_set:
            _dict['transportName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportAlertaPut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertaApiKey": obj.get("alertaApiKey"),
            "alertaCorrelate": obj.get("alertaCorrelate"),
            "alertaEnvironment": obj.get("alertaEnvironment"),
            "alertaEvent": obj.get("alertaEvent"),
            "alertaGroup": obj.get("alertaGroup"),
            "alertaHost": obj.get("alertaHost"),
            "alertaOrigin": obj.get("alertaOrigin"),
            "alertaResource": obj.get("alertaResource"),
            "alertaService": obj.get("alertaService"),
            "alertaSeverity": obj.get("alertaSeverity"),
            "alertaStatus": obj.get("alertaStatus"),
            "alertaTags": obj.get("alertaTags"),
            "alertaType": obj.get("alertaType"),
            "dataSegmentCode": obj.get("dataSegmentCode"),
            "transportName": obj.get("transportName")
        })
        return _obj



# coding: utf-8

"""
    Alerter System API

    <p>This is the <a href=\"/\">Alerter System</a> API playground. More documentation is available at the <a href=\"/help/developers/\">API Help Center</a>.</p><p>The \"Available Authorizations\" in the Authorize popup only applies to this playground web interface. Other <a href=\"/help/developers/authorization/\">authorizations</a> are available for the actual API.</p>

    The version of the OpenAPI document: 1.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.alert_log_jsonld_get_context import AlertLogJsonldGetContext
from typing import Optional, Set
from typing_extensions import Self

class TransportOneSignalJsonldGet(BaseModel):
    """
    The TransportOneSignal resource is a collection of transports that carry dispatched alerts to the external One Signal service.
    """ # noqa: E501
    context: Optional[AlertLogJsonldGetContext] = Field(default=None, alias="@context")
    id: Optional[StrictStr] = Field(default=None, alias="@id")
    type: Optional[StrictStr] = Field(default=None, alias="@type")
    created_at: Optional[datetime] = Field(default=None, description="When the resource instance was created. This date-time is in the UTC timezone.", alias="createdAt")
    data_segment_code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="User-provided string on which to segment and filter data. Max 50 characters.", alias="dataSegmentCode")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the resource instance.")
    one_signal_api_key: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(description="The API (auth) key for the One Signal service. Stored in encrypted format.", alias="oneSignalApiKey")
    one_signal_app_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The App ID for the One Signal service.", alias="oneSignalAppId")
    one_signal_default_recipient_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The optional default recipient ID for the One Signal service.", alias="oneSignalDefaultRecipientId")
    partition: StrictStr = Field(description="The partition that contains this resource instance. The resource cannot be moved to another partition.")
    resource_owner: Optional[StrictStr] = Field(default=None, description="The name of the person who owns this resource.", alias="resourceOwner")
    transport_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(description="The name of the transport.", alias="transportName")
    __properties: ClassVar[List[str]] = ["@context", "@id", "@type", "createdAt", "dataSegmentCode", "id", "oneSignalApiKey", "oneSignalAppId", "oneSignalDefaultRecipientId", "partition", "resourceOwner", "transportName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransportOneSignalJsonldGet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "type",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # set to None if data_segment_code (nullable) is None
        # and model_fields_set contains the field
        if self.data_segment_code is None and "data_segment_code" in self.model_fields_set:
            _dict['dataSegmentCode'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if one_signal_api_key (nullable) is None
        # and model_fields_set contains the field
        if self.one_signal_api_key is None and "one_signal_api_key" in self.model_fields_set:
            _dict['oneSignalApiKey'] = None

        # set to None if one_signal_app_id (nullable) is None
        # and model_fields_set contains the field
        if self.one_signal_app_id is None and "one_signal_app_id" in self.model_fields_set:
            _dict['oneSignalAppId'] = None

        # set to None if one_signal_default_recipient_id (nullable) is None
        # and model_fields_set contains the field
        if self.one_signal_default_recipient_id is None and "one_signal_default_recipient_id" in self.model_fields_set:
            _dict['oneSignalDefaultRecipientId'] = None

        # set to None if resource_owner (nullable) is None
        # and model_fields_set contains the field
        if self.resource_owner is None and "resource_owner" in self.model_fields_set:
            _dict['resourceOwner'] = None

        # set to None if transport_name (nullable) is None
        # and model_fields_set contains the field
        if self.transport_name is None and "transport_name" in self.model_fields_set:
            _dict['transportName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransportOneSignalJsonldGet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": AlertLogJsonldGetContext.from_dict(obj["@context"]) if obj.get("@context") is not None else None,
            "@id": obj.get("@id"),
            "@type": obj.get("@type"),
            "createdAt": obj.get("createdAt"),
            "dataSegmentCode": obj.get("dataSegmentCode"),
            "id": obj.get("id"),
            "oneSignalApiKey": obj.get("oneSignalApiKey"),
            "oneSignalAppId": obj.get("oneSignalAppId"),
            "oneSignalDefaultRecipientId": obj.get("oneSignalDefaultRecipientId"),
            "partition": obj.get("partition"),
            "resourceOwner": obj.get("resourceOwner"),
            "transportName": obj.get("transportName")
        })
        return _obj



# coding: utf-8

"""
    They Said So Quotes API

     They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).

    The version of the OpenAPI document: 5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.qod_response import QODResponse
from openapi_client.models.quote_response import QuoteResponse
from openapi_client.models.success_response import SuccessResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PrivateQODApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def qod_get_0(
        self,
        category: Annotated[Optional[StrictStr], Field(description="QOD Category (Used in public QOD only)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language of the QOD. The language must be supported in our QOD system.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="QOD defition id (Used in private QOD only)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QODResponse:
        """qod_get_0

        Gets `Quote of the Day` (QOD). Optional `category` param determines the category of returned quote of the day 

        :param category: QOD Category (Used in public QOD only)
        :type category: str
        :param language: Language of the QOD. The language must be supported in our QOD system.
        :type language: str
        :param id: QOD defition id (Used in private QOD only)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_get_0_serialize(
            category=category,
            language=language,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QODResponse",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def qod_get_0_with_http_info(
        self,
        category: Annotated[Optional[StrictStr], Field(description="QOD Category (Used in public QOD only)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language of the QOD. The language must be supported in our QOD system.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="QOD defition id (Used in private QOD only)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QODResponse]:
        """qod_get_0

        Gets `Quote of the Day` (QOD). Optional `category` param determines the category of returned quote of the day 

        :param category: QOD Category (Used in public QOD only)
        :type category: str
        :param language: Language of the QOD. The language must be supported in our QOD system.
        :type language: str
        :param id: QOD defition id (Used in private QOD only)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_get_0_serialize(
            category=category,
            language=language,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QODResponse",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def qod_get_0_without_preload_content(
        self,
        category: Annotated[Optional[StrictStr], Field(description="QOD Category (Used in public QOD only)")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language of the QOD. The language must be supported in our QOD system.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="QOD defition id (Used in private QOD only)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """qod_get_0

        Gets `Quote of the Day` (QOD). Optional `category` param determines the category of returned quote of the day 

        :param category: QOD Category (Used in public QOD only)
        :type category: str
        :param language: Language of the QOD. The language must be supported in our QOD system.
        :type language: str
        :param id: QOD defition id (Used in private QOD only)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_get_0_serialize(
            category=category,
            language=language,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QODResponse",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _qod_get_0_serialize(
        self,
        category,
        language,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if category is not None:
            
            _query_params.append(('category', category))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/qod',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def qod_patch(
        self,
        title: Annotated[StrictStr, Field(description="Title of the Quote of the day category")],
        repeat_after: Annotated[Optional[StrictInt], Field(description="How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Comma seperated author names. Quotes will be chosen from one of these authors.")] = None,
        private: Annotated[Optional[StrictBool], Field(description="Should apply the filters to the private collection. Default is public quotes in the platform.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Quotes language.")] = None,
        sfw: Annotated[Optional[StrictBool], Field(description="Consider only quotes marked as \"sfw\" (Safe for work).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QuoteResponse:
        """qod_patch

        Update an existing private `Quote of the Day` definition. 

        :param title: Title of the Quote of the day category (required)
        :type title: str
        :param repeat_after: How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.
        :type repeat_after: int
        :param authors: Comma seperated author names. Quotes will be chosen from one of these authors.
        :type authors: List
        :param private: Should apply the filters to the private collection. Default is public quotes in the platform.
        :type private: bool
        :param language: Quotes language.
        :type language: str
        :param sfw: Consider only quotes marked as \"sfw\" (Safe for work).
        :type sfw: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_patch_serialize(
            title=title,
            repeat_after=repeat_after,
            authors=authors,
            private=private,
            language=language,
            sfw=sfw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuoteResponse",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def qod_patch_with_http_info(
        self,
        title: Annotated[StrictStr, Field(description="Title of the Quote of the day category")],
        repeat_after: Annotated[Optional[StrictInt], Field(description="How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Comma seperated author names. Quotes will be chosen from one of these authors.")] = None,
        private: Annotated[Optional[StrictBool], Field(description="Should apply the filters to the private collection. Default is public quotes in the platform.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Quotes language.")] = None,
        sfw: Annotated[Optional[StrictBool], Field(description="Consider only quotes marked as \"sfw\" (Safe for work).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QuoteResponse]:
        """qod_patch

        Update an existing private `Quote of the Day` definition. 

        :param title: Title of the Quote of the day category (required)
        :type title: str
        :param repeat_after: How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.
        :type repeat_after: int
        :param authors: Comma seperated author names. Quotes will be chosen from one of these authors.
        :type authors: List
        :param private: Should apply the filters to the private collection. Default is public quotes in the platform.
        :type private: bool
        :param language: Quotes language.
        :type language: str
        :param sfw: Consider only quotes marked as \"sfw\" (Safe for work).
        :type sfw: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_patch_serialize(
            title=title,
            repeat_after=repeat_after,
            authors=authors,
            private=private,
            language=language,
            sfw=sfw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuoteResponse",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def qod_patch_without_preload_content(
        self,
        title: Annotated[StrictStr, Field(description="Title of the Quote of the day category")],
        repeat_after: Annotated[Optional[StrictInt], Field(description="How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Comma seperated author names. Quotes will be chosen from one of these authors.")] = None,
        private: Annotated[Optional[StrictBool], Field(description="Should apply the filters to the private collection. Default is public quotes in the platform.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Quotes language.")] = None,
        sfw: Annotated[Optional[StrictBool], Field(description="Consider only quotes marked as \"sfw\" (Safe for work).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """qod_patch

        Update an existing private `Quote of the Day` definition. 

        :param title: Title of the Quote of the day category (required)
        :type title: str
        :param repeat_after: How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.
        :type repeat_after: int
        :param authors: Comma seperated author names. Quotes will be chosen from one of these authors.
        :type authors: List
        :param private: Should apply the filters to the private collection. Default is public quotes in the platform.
        :type private: bool
        :param language: Quotes language.
        :type language: str
        :param sfw: Consider only quotes marked as \"sfw\" (Safe for work).
        :type sfw: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_patch_serialize(
            title=title,
            repeat_after=repeat_after,
            authors=authors,
            private=private,
            language=language,
            sfw=sfw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuoteResponse",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _qod_patch_serialize(
        self,
        title,
        repeat_after,
        authors,
        private,
        language,
        sfw,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if repeat_after is not None:
            
            _query_params.append(('repeat_after', repeat_after))
            
        if authors is not None:
            
            _query_params.append(('authors', authors))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if private is not None:
            
            _query_params.append(('private', private))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if sfw is not None:
            
            _query_params.append(('sfw', sfw))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/qod',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def qod_put(
        self,
        title: Annotated[StrictStr, Field(description="Title of the Quote of the day category")],
        repeat_after: Annotated[Optional[StrictInt], Field(description="How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Comma seperated author names. Quotes will be chosen from one of these authors.")] = None,
        private: Annotated[Optional[StrictBool], Field(description="Should apply the filters to the private collection. Default is public quotes in the platform.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Quotes language.")] = None,
        sfw: Annotated[Optional[StrictBool], Field(description="Consider only quotes marked as \"sfw\" (Safe for work).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SuccessResponse:
        """qod_put

        Create a private `Quote of the Day` service.  

        :param title: Title of the Quote of the day category (required)
        :type title: str
        :param repeat_after: How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.
        :type repeat_after: int
        :param authors: Comma seperated author names. Quotes will be chosen from one of these authors.
        :type authors: List
        :param private: Should apply the filters to the private collection. Default is public quotes in the platform.
        :type private: bool
        :param language: Quotes language.
        :type language: str
        :param sfw: Consider only quotes marked as \"sfw\" (Safe for work).
        :type sfw: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_put_serialize(
            title=title,
            repeat_after=repeat_after,
            authors=authors,
            private=private,
            language=language,
            sfw=sfw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SuccessResponse",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def qod_put_with_http_info(
        self,
        title: Annotated[StrictStr, Field(description="Title of the Quote of the day category")],
        repeat_after: Annotated[Optional[StrictInt], Field(description="How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Comma seperated author names. Quotes will be chosen from one of these authors.")] = None,
        private: Annotated[Optional[StrictBool], Field(description="Should apply the filters to the private collection. Default is public quotes in the platform.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Quotes language.")] = None,
        sfw: Annotated[Optional[StrictBool], Field(description="Consider only quotes marked as \"sfw\" (Safe for work).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SuccessResponse]:
        """qod_put

        Create a private `Quote of the Day` service.  

        :param title: Title of the Quote of the day category (required)
        :type title: str
        :param repeat_after: How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.
        :type repeat_after: int
        :param authors: Comma seperated author names. Quotes will be chosen from one of these authors.
        :type authors: List
        :param private: Should apply the filters to the private collection. Default is public quotes in the platform.
        :type private: bool
        :param language: Quotes language.
        :type language: str
        :param sfw: Consider only quotes marked as \"sfw\" (Safe for work).
        :type sfw: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_put_serialize(
            title=title,
            repeat_after=repeat_after,
            authors=authors,
            private=private,
            language=language,
            sfw=sfw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SuccessResponse",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def qod_put_without_preload_content(
        self,
        title: Annotated[StrictStr, Field(description="Title of the Quote of the day category")],
        repeat_after: Annotated[Optional[StrictInt], Field(description="How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.")] = None,
        authors: Annotated[Optional[StrictStr], Field(description="Comma seperated author names. Quotes will be chosen from one of these authors.")] = None,
        private: Annotated[Optional[StrictBool], Field(description="Should apply the filters to the private collection. Default is public quotes in the platform.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Quotes language.")] = None,
        sfw: Annotated[Optional[StrictBool], Field(description="Consider only quotes marked as \"sfw\" (Safe for work).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """qod_put

        Create a private `Quote of the Day` service.  

        :param title: Title of the Quote of the day category (required)
        :type title: str
        :param repeat_after: How many days after the quotes can repeat? If you are setting this up from your private collection make sure you have more quotes that meet the filter conditions than the days you specify here.
        :type repeat_after: int
        :param authors: Comma seperated author names. Quotes will be chosen from one of these authors.
        :type authors: List
        :param private: Should apply the filters to the private collection. Default is public quotes in the platform.
        :type private: bool
        :param language: Quotes language.
        :type language: str
        :param sfw: Consider only quotes marked as \"sfw\" (Safe for work).
        :type sfw: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._qod_put_serialize(
            title=title,
            repeat_after=repeat_after,
            authors=authors,
            private=private,
            language=language,
            sfw=sfw,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SuccessResponse",
            '400': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _qod_put_serialize(
        self,
        title,
        repeat_after,
        authors,
        private,
        language,
        sfw,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if repeat_after is not None:
            
            _query_params.append(('repeat_after', repeat_after))
            
        if authors is not None:
            
            _query_params.append(('authors', authors))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if private is not None:
            
            _query_params.append(('private', private))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if sfw is not None:
            
            _query_params.append(('sfw', sfw))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/qod',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



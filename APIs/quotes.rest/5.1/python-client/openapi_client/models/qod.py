# coding: utf-8

"""
    They Said So Quotes API

     They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).

    The version of the OpenAPI document: 5.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QOD(BaseModel):
    """
    QOD
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, description="Author name of quote.")
    quote: StrictStr = Field(description="The Quote.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Array of tags/categories.")
    id: StrictStr = Field(description="Unique identifier representing a specific quote in theysaidso.com.")
    image: Optional[StrictStr] = Field(default=None, description="Image URL that can be used for background to display this quote.")
    length: Optional[StrictInt] = Field(default=None, description="Length of the quote string.")
    var_date: StrictStr = Field(description="Date this quote of the day belongs to", alias="date")
    title: Optional[StrictStr] = Field(default=None, description="Title of the QOD category")
    __properties: ClassVar[List[str]] = ["author", "quote", "tags", "id", "image", "length", "date", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QOD from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QOD from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "quote": obj.get("quote"),
            "tags": obj.get("tags"),
            "id": obj.get("id"),
            "image": obj.get("image"),
            "length": obj.get("length"),
            "date": obj.get("date"),
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.commit_detail import CommitDetail
from openapi_client.models.previous_build import PreviousBuild
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class BuildDetail(BaseModel):
    """
    previous build
    """ # noqa: E501
    all_commit_details: Optional[List[CommitDetail]] = None
    compare: Optional[StrictStr] = None
    job_name: Optional[StrictStr] = None
    node: Optional[Any] = None
    previous_successful_build: Optional[PreviousBuild] = None
    retries: Optional[StrictBool] = None
    ssh_enabled: Optional[StrictBool] = None
    timedout: Optional[StrictBool] = None
    usage_queued_at: Optional[datetime] = None
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["all_commit_details", "compare", "job_name", "node", "previous_successful_build", "retries", "ssh_enabled", "timedout", "usage_queued_at", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in all_commit_details (list)
        _items = []
        if self.all_commit_details:
            for _item_all_commit_details in self.all_commit_details:
                if _item_all_commit_details:
                    _items.append(_item_all_commit_details.to_dict())
            _dict['all_commit_details'] = _items
        # override the default output from pydantic by calling `to_dict()` of previous_successful_build
        if self.previous_successful_build:
            _dict['previous_successful_build'] = self.previous_successful_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if compare (nullable) is None
        # and model_fields_set contains the field
        if self.compare is None and "compare" in self.model_fields_set:
            _dict['compare'] = None

        # set to None if node (nullable) is None
        # and model_fields_set contains the field
        if self.node is None and "node" in self.model_fields_set:
            _dict['node'] = None

        # set to None if retries (nullable) is None
        # and model_fields_set contains the field
        if self.retries is None and "retries" in self.model_fields_set:
            _dict['retries'] = None

        # set to None if ssh_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.ssh_enabled is None and "ssh_enabled" in self.model_fields_set:
            _dict['ssh_enabled'] = None

        # set to None if timedout (nullable) is None
        # and model_fields_set contains the field
        if self.timedout is None and "timedout" in self.model_fields_set:
            _dict['timedout'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "all_commit_details": [CommitDetail.from_dict(_item) for _item in obj["all_commit_details"]] if obj.get("all_commit_details") is not None else None,
            "compare": obj.get("compare"),
            "job_name": obj.get("job_name"),
            "node": obj.get("node"),
            "previous_successful_build": PreviousBuild.from_dict(obj["previous_successful_build"]) if obj.get("previous_successful_build") is not None else None,
            "retries": obj.get("retries"),
            "ssh_enabled": obj.get("ssh_enabled"),
            "timedout": obj.get("timedout"),
            "usage_queued_at": obj.get("usage_queued_at"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



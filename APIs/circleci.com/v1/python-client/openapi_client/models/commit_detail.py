# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CommitDetail(BaseModel):
    """
    CommitDetail
    """ # noqa: E501
    author_date: Optional[datetime] = None
    author_email: Optional[StrictStr] = None
    author_login: Optional[StrictStr] = None
    author_name: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    commit: Optional[StrictStr] = None
    commit_url: Optional[StrictStr] = None
    committer_date: Optional[datetime] = None
    committer_email: Optional[StrictStr] = None
    committer_login: Optional[StrictStr] = None
    committer_name: Optional[StrictStr] = None
    subject: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["author_date", "author_email", "author_login", "author_name", "body", "commit", "commit_url", "committer_date", "committer_email", "committer_login", "committer_name", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommitDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommitDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author_date": obj.get("author_date"),
            "author_email": obj.get("author_email"),
            "author_login": obj.get("author_login"),
            "author_name": obj.get("author_name"),
            "body": obj.get("body"),
            "commit": obj.get("commit"),
            "commit_url": obj.get("commit_url"),
            "committer_date": obj.get("committer_date"),
            "committer_email": obj.get("committer_email"),
            "committer_login": obj.get("committer_login"),
            "committer_name": obj.get("committer_name"),
            "subject": obj.get("subject")
        })
        return _obj



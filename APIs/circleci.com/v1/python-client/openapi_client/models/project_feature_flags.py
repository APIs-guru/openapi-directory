# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProjectFeatureFlags(BaseModel):
    """
    ProjectFeatureFlags
    """ # noqa: E501
    build_fork_prs: Optional[StrictBool] = Field(default=None, alias="build-fork-prs")
    fleet: Optional[StrictBool] = None
    junit: Optional[StrictBool] = None
    oss: Optional[StrictBool] = None
    osx: Optional[StrictBool] = None
    set_github_status: Optional[StrictBool] = Field(default=None, alias="set-github-status")
    trusty_beta: Optional[StrictBool] = Field(default=None, alias="trusty-beta")
    __properties: ClassVar[List[str]] = ["build-fork-prs", "fleet", "junit", "oss", "osx", "set-github-status", "trusty-beta"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectFeatureFlags from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fleet (nullable) is None
        # and model_fields_set contains the field
        if self.fleet is None and "fleet" in self.model_fields_set:
            _dict['fleet'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectFeatureFlags from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build-fork-prs": obj.get("build-fork-prs"),
            "fleet": obj.get("fleet"),
            "junit": obj.get("junit"),
            "oss": obj.get("oss"),
            "osx": obj.get("osx"),
            "set-github-status": obj.get("set-github-status"),
            "trusty-beta": obj.get("trusty-beta")
        })
        return _obj



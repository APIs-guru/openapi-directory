# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lifecycle import Lifecycle
from openapi_client.models.previous_build import PreviousBuild
from typing import Optional, Set
from typing_extensions import Self

class Build(BaseModel):
    """
    Build
    """ # noqa: E501
    body: Optional[StrictStr] = Field(default=None, description="commit message body")
    branch: Optional[StrictStr] = None
    build_time_millis: Optional[StrictInt] = None
    build_url: Optional[StrictStr] = None
    committer_email: Optional[StrictStr] = None
    committer_name: Optional[StrictStr] = None
    dont_build: Optional[StrictStr] = Field(default=None, description="reason why we didn't build, if we didn't build")
    lifecycle: Optional[Lifecycle] = None
    previous: Optional[PreviousBuild] = None
    queued_at: Optional[datetime] = Field(default=None, description="time build was queued")
    reponame: Optional[StrictStr] = None
    retry_of: Optional[StrictInt] = Field(default=None, description="build_num of the build this is a retry of")
    start_time: Optional[datetime] = Field(default=None, description="time build started")
    stop_time: Optional[datetime] = Field(default=None, description="time build finished")
    subject: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    vcs_url: Optional[StrictStr] = None
    why: Optional[StrictStr] = Field(default=None, description="short string explaining the reason we built")
    __properties: ClassVar[List[str]] = ["body", "branch", "build_time_millis", "build_url", "committer_email", "committer_name", "dont_build", "lifecycle", "previous", "queued_at", "reponame", "retry_of", "start_time", "stop_time", "subject", "username", "vcs_url", "why"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Build from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of previous
        if self.previous:
            _dict['previous'] = self.previous.to_dict()
        # set to None if dont_build (nullable) is None
        # and model_fields_set contains the field
        if self.dont_build is None and "dont_build" in self.model_fields_set:
            _dict['dont_build'] = None

        # set to None if retry_of (nullable) is None
        # and model_fields_set contains the field
        if self.retry_of is None and "retry_of" in self.model_fields_set:
            _dict['retry_of'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Build from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body": obj.get("body"),
            "branch": obj.get("branch"),
            "build_time_millis": obj.get("build_time_millis"),
            "build_url": obj.get("build_url"),
            "committer_email": obj.get("committer_email"),
            "committer_name": obj.get("committer_name"),
            "dont_build": obj.get("dont_build"),
            "lifecycle": obj.get("lifecycle"),
            "previous": PreviousBuild.from_dict(obj["previous"]) if obj.get("previous") is not None else None,
            "queued_at": obj.get("queued_at"),
            "reponame": obj.get("reponame"),
            "retry_of": obj.get("retry_of"),
            "start_time": obj.get("start_time"),
            "stop_time": obj.get("stop_time"),
            "subject": obj.get("subject"),
            "username": obj.get("username"),
            "vcs_url": obj.get("vcs_url"),
            "why": obj.get("why")
        })
        return _obj



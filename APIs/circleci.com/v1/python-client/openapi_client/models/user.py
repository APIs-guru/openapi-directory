# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    admin: Optional[StrictBool] = None
    all_emails: Optional[List[StrictStr]] = None
    analytics_id: Optional[StrictStr] = None
    avatar_url: Optional[StrictStr] = None
    basic_email_prefs: Optional[StrictStr] = None
    bitbucket: Optional[StrictInt] = None
    bitbucket_authorized: Optional[StrictBool] = None
    containers: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    days_left_in_trial: Optional[StrictInt] = None
    dev_admin: Optional[StrictBool] = None
    enrolled_betas: Optional[List[StrictStr]] = None
    github_id: Optional[StrictInt] = None
    github_oauth_scopes: Optional[List[StrictStr]] = None
    gravatar_id: Optional[StrictInt] = None
    heroku_api_key: Optional[StrictStr] = None
    in_beta_program: Optional[StrictBool] = None
    login: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    organization_prefs: Optional[Dict[str, Any]] = None
    parallelism: Optional[StrictInt] = None
    plan: Optional[StrictStr] = None
    projects: Optional[Dict[str, Any]] = None
    pusher_id: Optional[StrictStr] = None
    selected_email: Optional[StrictStr] = None
    sign_in_count: Optional[StrictInt] = None
    trial_end: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["admin", "all_emails", "analytics_id", "avatar_url", "basic_email_prefs", "bitbucket", "bitbucket_authorized", "containers", "created_at", "days_left_in_trial", "dev_admin", "enrolled_betas", "github_id", "github_oauth_scopes", "gravatar_id", "heroku_api_key", "in_beta_program", "login", "name", "organization_prefs", "parallelism", "plan", "projects", "pusher_id", "selected_email", "sign_in_count", "trial_end"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bitbucket (nullable) is None
        # and model_fields_set contains the field
        if self.bitbucket is None and "bitbucket" in self.model_fields_set:
            _dict['bitbucket'] = None

        # set to None if github_id (nullable) is None
        # and model_fields_set contains the field
        if self.github_id is None and "github_id" in self.model_fields_set:
            _dict['github_id'] = None

        # set to None if gravatar_id (nullable) is None
        # and model_fields_set contains the field
        if self.gravatar_id is None and "gravatar_id" in self.model_fields_set:
            _dict['gravatar_id'] = None

        # set to None if heroku_api_key (nullable) is None
        # and model_fields_set contains the field
        if self.heroku_api_key is None and "heroku_api_key" in self.model_fields_set:
            _dict['heroku_api_key'] = None

        # set to None if plan (nullable) is None
        # and model_fields_set contains the field
        if self.plan is None and "plan" in self.model_fields_set:
            _dict['plan'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admin": obj.get("admin"),
            "all_emails": obj.get("all_emails"),
            "analytics_id": obj.get("analytics_id"),
            "avatar_url": obj.get("avatar_url"),
            "basic_email_prefs": obj.get("basic_email_prefs"),
            "bitbucket": obj.get("bitbucket"),
            "bitbucket_authorized": obj.get("bitbucket_authorized"),
            "containers": obj.get("containers"),
            "created_at": obj.get("created_at"),
            "days_left_in_trial": obj.get("days_left_in_trial"),
            "dev_admin": obj.get("dev_admin"),
            "enrolled_betas": obj.get("enrolled_betas"),
            "github_id": obj.get("github_id"),
            "github_oauth_scopes": obj.get("github_oauth_scopes"),
            "gravatar_id": obj.get("gravatar_id"),
            "heroku_api_key": obj.get("heroku_api_key"),
            "in_beta_program": obj.get("in_beta_program"),
            "login": obj.get("login"),
            "name": obj.get("name"),
            "organization_prefs": obj.get("organization_prefs"),
            "parallelism": obj.get("parallelism"),
            "plan": obj.get("plan"),
            "projects": obj.get("projects"),
            "pusher_id": obj.get("pusher_id"),
            "selected_email": obj.get("selected_email"),
            "sign_in_count": obj.get("sign_in_count"),
            "trial_end": obj.get("trial_end")
        })
        return _obj



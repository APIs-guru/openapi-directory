# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws import Aws
from openapi_client.models.project_feature_flags import ProjectFeatureFlags
from openapi_client.models.scope import Scope
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    aws: Optional[Aws] = None
    branches: Optional[Dict[str, Any]] = None
    campfire_notify_prefs: Optional[StrictStr] = None
    campfire_room: Optional[StrictStr] = None
    campfire_subdomain: Optional[StrictStr] = None
    campfire_token: Optional[StrictStr] = None
    compile: Optional[StrictStr] = None
    default_branch: Optional[StrictStr] = None
    dependencies: Optional[StrictStr] = None
    extra: Optional[StrictStr] = None
    feature_flags: Optional[ProjectFeatureFlags] = None
    flowdock_api_token: Optional[StrictStr] = None
    followed: Optional[StrictBool] = None
    has_usable_key: Optional[StrictBool] = None
    heroku_deploy_user: Optional[StrictStr] = None
    hipchat_api_token: Optional[StrictStr] = None
    hipchat_notify: Optional[StrictStr] = None
    hipchat_notify_prefs: Optional[StrictStr] = None
    hipchat_room: Optional[StrictStr] = None
    irc_channel: Optional[StrictStr] = None
    irc_keyword: Optional[StrictStr] = None
    irc_notify_prefs: Optional[StrictStr] = None
    irc_password: Optional[StrictStr] = None
    irc_server: Optional[StrictStr] = None
    irc_username: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    oss: Optional[StrictBool] = None
    parallel: Optional[StrictInt] = None
    reponame: Optional[StrictStr] = None
    scopes: Optional[List[Scope]] = None
    setup: Optional[StrictStr] = None
    slack_api_token: Optional[StrictStr] = None
    slack_channel: Optional[StrictStr] = None
    slack_channel_override: Optional[StrictStr] = None
    slack_notify_prefs: Optional[StrictStr] = None
    slack_subdomain: Optional[StrictStr] = None
    slack_webhook_url: Optional[StrictStr] = None
    ssh_keys: Optional[List[StrictStr]] = None
    test: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    vcs_type: Optional[StrictStr] = None
    vcs_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["aws", "branches", "campfire_notify_prefs", "campfire_room", "campfire_subdomain", "campfire_token", "compile", "default_branch", "dependencies", "extra", "feature_flags", "flowdock_api_token", "followed", "has_usable_key", "heroku_deploy_user", "hipchat_api_token", "hipchat_notify", "hipchat_notify_prefs", "hipchat_room", "irc_channel", "irc_keyword", "irc_notify_prefs", "irc_password", "irc_server", "irc_username", "language", "oss", "parallel", "reponame", "scopes", "setup", "slack_api_token", "slack_channel", "slack_channel_override", "slack_notify_prefs", "slack_subdomain", "slack_webhook_url", "ssh_keys", "test", "username", "vcs_type", "vcs_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws
        if self.aws:
            _dict['aws'] = self.aws.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature_flags
        if self.feature_flags:
            _dict['feature_flags'] = self.feature_flags.to_dict()
        # set to None if campfire_notify_prefs (nullable) is None
        # and model_fields_set contains the field
        if self.campfire_notify_prefs is None and "campfire_notify_prefs" in self.model_fields_set:
            _dict['campfire_notify_prefs'] = None

        # set to None if campfire_room (nullable) is None
        # and model_fields_set contains the field
        if self.campfire_room is None and "campfire_room" in self.model_fields_set:
            _dict['campfire_room'] = None

        # set to None if campfire_subdomain (nullable) is None
        # and model_fields_set contains the field
        if self.campfire_subdomain is None and "campfire_subdomain" in self.model_fields_set:
            _dict['campfire_subdomain'] = None

        # set to None if campfire_token (nullable) is None
        # and model_fields_set contains the field
        if self.campfire_token is None and "campfire_token" in self.model_fields_set:
            _dict['campfire_token'] = None

        # set to None if flowdock_api_token (nullable) is None
        # and model_fields_set contains the field
        if self.flowdock_api_token is None and "flowdock_api_token" in self.model_fields_set:
            _dict['flowdock_api_token'] = None

        # set to None if heroku_deploy_user (nullable) is None
        # and model_fields_set contains the field
        if self.heroku_deploy_user is None and "heroku_deploy_user" in self.model_fields_set:
            _dict['heroku_deploy_user'] = None

        # set to None if hipchat_api_token (nullable) is None
        # and model_fields_set contains the field
        if self.hipchat_api_token is None and "hipchat_api_token" in self.model_fields_set:
            _dict['hipchat_api_token'] = None

        # set to None if hipchat_notify (nullable) is None
        # and model_fields_set contains the field
        if self.hipchat_notify is None and "hipchat_notify" in self.model_fields_set:
            _dict['hipchat_notify'] = None

        # set to None if hipchat_notify_prefs (nullable) is None
        # and model_fields_set contains the field
        if self.hipchat_notify_prefs is None and "hipchat_notify_prefs" in self.model_fields_set:
            _dict['hipchat_notify_prefs'] = None

        # set to None if hipchat_room (nullable) is None
        # and model_fields_set contains the field
        if self.hipchat_room is None and "hipchat_room" in self.model_fields_set:
            _dict['hipchat_room'] = None

        # set to None if irc_channel (nullable) is None
        # and model_fields_set contains the field
        if self.irc_channel is None and "irc_channel" in self.model_fields_set:
            _dict['irc_channel'] = None

        # set to None if irc_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.irc_keyword is None and "irc_keyword" in self.model_fields_set:
            _dict['irc_keyword'] = None

        # set to None if irc_notify_prefs (nullable) is None
        # and model_fields_set contains the field
        if self.irc_notify_prefs is None and "irc_notify_prefs" in self.model_fields_set:
            _dict['irc_notify_prefs'] = None

        # set to None if irc_password (nullable) is None
        # and model_fields_set contains the field
        if self.irc_password is None and "irc_password" in self.model_fields_set:
            _dict['irc_password'] = None

        # set to None if irc_server (nullable) is None
        # and model_fields_set contains the field
        if self.irc_server is None and "irc_server" in self.model_fields_set:
            _dict['irc_server'] = None

        # set to None if irc_username (nullable) is None
        # and model_fields_set contains the field
        if self.irc_username is None and "irc_username" in self.model_fields_set:
            _dict['irc_username'] = None

        # set to None if slack_api_token (nullable) is None
        # and model_fields_set contains the field
        if self.slack_api_token is None and "slack_api_token" in self.model_fields_set:
            _dict['slack_api_token'] = None

        # set to None if slack_channel (nullable) is None
        # and model_fields_set contains the field
        if self.slack_channel is None and "slack_channel" in self.model_fields_set:
            _dict['slack_channel'] = None

        # set to None if slack_channel_override (nullable) is None
        # and model_fields_set contains the field
        if self.slack_channel_override is None and "slack_channel_override" in self.model_fields_set:
            _dict['slack_channel_override'] = None

        # set to None if slack_notify_prefs (nullable) is None
        # and model_fields_set contains the field
        if self.slack_notify_prefs is None and "slack_notify_prefs" in self.model_fields_set:
            _dict['slack_notify_prefs'] = None

        # set to None if slack_subdomain (nullable) is None
        # and model_fields_set contains the field
        if self.slack_subdomain is None and "slack_subdomain" in self.model_fields_set:
            _dict['slack_subdomain'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws": Aws.from_dict(obj["aws"]) if obj.get("aws") is not None else None,
            "branches": obj.get("branches"),
            "campfire_notify_prefs": obj.get("campfire_notify_prefs"),
            "campfire_room": obj.get("campfire_room"),
            "campfire_subdomain": obj.get("campfire_subdomain"),
            "campfire_token": obj.get("campfire_token"),
            "compile": obj.get("compile"),
            "default_branch": obj.get("default_branch"),
            "dependencies": obj.get("dependencies"),
            "extra": obj.get("extra"),
            "feature_flags": ProjectFeatureFlags.from_dict(obj["feature_flags"]) if obj.get("feature_flags") is not None else None,
            "flowdock_api_token": obj.get("flowdock_api_token"),
            "followed": obj.get("followed"),
            "has_usable_key": obj.get("has_usable_key"),
            "heroku_deploy_user": obj.get("heroku_deploy_user"),
            "hipchat_api_token": obj.get("hipchat_api_token"),
            "hipchat_notify": obj.get("hipchat_notify"),
            "hipchat_notify_prefs": obj.get("hipchat_notify_prefs"),
            "hipchat_room": obj.get("hipchat_room"),
            "irc_channel": obj.get("irc_channel"),
            "irc_keyword": obj.get("irc_keyword"),
            "irc_notify_prefs": obj.get("irc_notify_prefs"),
            "irc_password": obj.get("irc_password"),
            "irc_server": obj.get("irc_server"),
            "irc_username": obj.get("irc_username"),
            "language": obj.get("language"),
            "oss": obj.get("oss"),
            "parallel": obj.get("parallel"),
            "reponame": obj.get("reponame"),
            "scopes": obj.get("scopes"),
            "setup": obj.get("setup"),
            "slack_api_token": obj.get("slack_api_token"),
            "slack_channel": obj.get("slack_channel"),
            "slack_channel_override": obj.get("slack_channel_override"),
            "slack_notify_prefs": obj.get("slack_notify_prefs"),
            "slack_subdomain": obj.get("slack_subdomain"),
            "slack_webhook_url": obj.get("slack_webhook_url"),
            "ssh_keys": obj.get("ssh_keys"),
            "test": obj.get("test"),
            "username": obj.get("username"),
            "vcs_type": obj.get("vcs_type"),
            "vcs_url": obj.get("vcs_url")
        })
        return _obj



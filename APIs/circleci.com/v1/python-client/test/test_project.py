# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.project import Project

class TestProject(unittest.TestCase):
    """Project unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Project:
        """Test Project
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Project`
        """
        model = Project()
        if include_optional:
            return Project(
                aws = openapi_client.models.aws.Aws(
                    keypair = '', ),
                branches = None,
                campfire_notify_prefs = '',
                campfire_room = '',
                campfire_subdomain = '',
                campfire_token = '',
                compile = '',
                default_branch = '',
                dependencies = '',
                extra = '',
                feature_flags = openapi_client.models.project_feature_flags.Project_feature_flags(
                    build_fork_prs = True, 
                    fleet = True, 
                    junit = True, 
                    oss = True, 
                    osx = True, 
                    set_github_status = True, 
                    trusty_beta = True, ),
                flowdock_api_token = '',
                followed = True,
                has_usable_key = True,
                heroku_deploy_user = '',
                hipchat_api_token = '',
                hipchat_notify = '',
                hipchat_notify_prefs = '',
                hipchat_room = '',
                irc_channel = '',
                irc_keyword = '',
                irc_notify_prefs = '',
                irc_password = '',
                irc_server = '',
                irc_username = '',
                language = '',
                oss = True,
                parallel = 56,
                reponame = '',
                scopes = [
                    'write-settings'
                    ],
                setup = '',
                slack_api_token = '',
                slack_channel = '',
                slack_channel_override = '',
                slack_notify_prefs = '',
                slack_subdomain = '',
                slack_webhook_url = '',
                ssh_keys = [
                    ''
                    ],
                test = '',
                username = '',
                vcs_type = '',
                vcs_url = ''
            )
        else:
            return Project(
        )
        """

    def testProject(self):
        """Test Project"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

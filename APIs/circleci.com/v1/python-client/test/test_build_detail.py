# coding: utf-8

"""
    CircleCI REST API

    The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.build_detail import BuildDetail

class TestBuildDetail(unittest.TestCase):
    """BuildDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BuildDetail:
        """Test BuildDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BuildDetail`
        """
        model = BuildDetail()
        if include_optional:
            return BuildDetail(
                all_commit_details = [
                    openapi_client.models.commit_detail.CommitDetail(
                        author_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        author_email = '', 
                        author_login = '', 
                        author_name = '', 
                        body = '', 
                        commit = '', 
                        commit_url = '', 
                        committer_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        committer_email = '', 
                        committer_login = '', 
                        committer_name = '', 
                        subject = '', )
                    ],
                compare = '',
                job_name = '',
                node = None,
                previous_successful_build = openapi_client.models.previous_build.PreviousBuild(
                    build_num = 56, 
                    build_time_millis = 56, 
                    status = 'retried', ),
                retries = True,
                ssh_enabled = True,
                timedout = True,
                usage_queued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user = openapi_client.models.user.User(
                    admin = True, 
                    all_emails = [
                        ''
                        ], 
                    analytics_id = '', 
                    avatar_url = '', 
                    basic_email_prefs = '', 
                    bitbucket = 56, 
                    bitbucket_authorized = True, 
                    containers = 56, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    days_left_in_trial = 56, 
                    dev_admin = True, 
                    enrolled_betas = [
                        ''
                        ], 
                    github_id = 56, 
                    github_oauth_scopes = [
                        ''
                        ], 
                    gravatar_id = 56, 
                    heroku_api_key = '', 
                    in_beta_program = True, 
                    login = '', 
                    name = '', 
                    organization_prefs = openapi_client.models.organization_prefs.organization_prefs(), 
                    parallelism = 56, 
                    plan = '', 
                    projects = openapi_client.models.projects.projects(), 
                    pusher_id = '', 
                    selected_email = '', 
                    sign_in_count = 56, 
                    trial_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return BuildDetail(
        )
        """

    def testBuildDetail(self):
        """Test BuildDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

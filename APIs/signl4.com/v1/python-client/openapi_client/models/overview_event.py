# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_severities import EventSeverities
from openapi_client.models.event_source_types import EventSourceTypes
from openapi_client.models.event_status_codes import EventStatusCodes
from typing import Optional, Set
from typing_extensions import Self

class OverviewEvent(BaseModel):
    """
    OverviewEvent
    """ # noqa: E501
    acknowledged_alerts: Optional[List[StrictStr]] = Field(default=None, alias="acknowledgedAlerts")
    alert_id: Optional[StrictStr] = Field(default=None, alias="alertId")
    category_id: Optional[StrictStr] = Field(default=None, alias="categoryId")
    closed_alerts: Optional[List[StrictStr]] = Field(default=None, alias="closedAlerts")
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    event_source_type: Optional[EventSourceTypes] = Field(default=None, alias="eventSourceType")
    event_status: Optional[EventStatusCodes] = Field(default=None, alias="eventStatus")
    id: Optional[StrictStr] = None
    last_modified: Optional[datetime] = Field(default=None, alias="lastModified")
    severity: Optional[EventSeverities] = None
    team_id: Optional[StrictStr] = Field(default=None, alias="teamId")
    text: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["acknowledgedAlerts", "alertId", "categoryId", "closedAlerts", "creationTime", "eventSourceType", "eventStatus", "id", "lastModified", "severity", "teamId", "text", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OverviewEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if acknowledged_alerts (nullable) is None
        # and model_fields_set contains the field
        if self.acknowledged_alerts is None and "acknowledged_alerts" in self.model_fields_set:
            _dict['acknowledgedAlerts'] = None

        # set to None if alert_id (nullable) is None
        # and model_fields_set contains the field
        if self.alert_id is None and "alert_id" in self.model_fields_set:
            _dict['alertId'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryId'] = None

        # set to None if closed_alerts (nullable) is None
        # and model_fields_set contains the field
        if self.closed_alerts is None and "closed_alerts" in self.model_fields_set:
            _dict['closedAlerts'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['teamId'] = None

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OverviewEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acknowledgedAlerts": obj.get("acknowledgedAlerts"),
            "alertId": obj.get("alertId"),
            "categoryId": obj.get("categoryId"),
            "closedAlerts": obj.get("closedAlerts"),
            "creationTime": obj.get("creationTime"),
            "eventSourceType": obj.get("eventSourceType"),
            "eventStatus": obj.get("eventStatus"),
            "id": obj.get("id"),
            "lastModified": obj.get("lastModified"),
            "severity": obj.get("severity"),
            "teamId": obj.get("teamId"),
            "text": obj.get("text"),
            "title": obj.get("title")
        })
        return _obj



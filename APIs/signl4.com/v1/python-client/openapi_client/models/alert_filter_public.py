# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_status_codes import AlertStatusCodes
from openapi_client.models.paged_results_public_continuation_token import PagedResultsPublicContinuationToken
from typing import Optional, Set
from typing_extensions import Self

class AlertFilterPublic(BaseModel):
    """
    AlertFilterPublic
    """ # noqa: E501
    alert_ids: Optional[List[StrictStr]] = Field(default=None, alias="alertIds")
    alerts_after_id: Optional[StrictStr] = Field(default=None, alias="alertsAfterId")
    category_ids: Optional[List[StrictStr]] = Field(default=None, alias="categoryIds")
    continuation_token: Optional[PagedResultsPublicContinuationToken] = Field(default=None, alias="continuationToken")
    max_creation_date: Optional[datetime] = Field(default=None, alias="maxCreationDate")
    min_creation_date: Optional[datetime] = Field(default=None, alias="minCreationDate")
    modified_since: Optional[datetime] = Field(default=None, alias="modifiedSince")
    show_personal_hidden_categories: Optional[StrictBool] = Field(default=None, alias="showPersonalHiddenCategories")
    status_codes: Optional[AlertStatusCodes] = Field(default=None, alias="statusCodes")
    team_id: Optional[StrictStr] = Field(default=None, alias="teamId")
    text_to_search: Optional[StrictStr] = Field(default=None, alias="textToSearch")
    __properties: ClassVar[List[str]] = ["alertIds", "alertsAfterId", "categoryIds", "continuationToken", "maxCreationDate", "minCreationDate", "modifiedSince", "showPersonalHiddenCategories", "statusCodes", "teamId", "textToSearch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertFilterPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of continuation_token
        if self.continuation_token:
            _dict['continuationToken'] = self.continuation_token.to_dict()
        # set to None if alert_ids (nullable) is None
        # and model_fields_set contains the field
        if self.alert_ids is None and "alert_ids" in self.model_fields_set:
            _dict['alertIds'] = None

        # set to None if alerts_after_id (nullable) is None
        # and model_fields_set contains the field
        if self.alerts_after_id is None and "alerts_after_id" in self.model_fields_set:
            _dict['alertsAfterId'] = None

        # set to None if category_ids (nullable) is None
        # and model_fields_set contains the field
        if self.category_ids is None and "category_ids" in self.model_fields_set:
            _dict['categoryIds'] = None

        # set to None if max_creation_date (nullable) is None
        # and model_fields_set contains the field
        if self.max_creation_date is None and "max_creation_date" in self.model_fields_set:
            _dict['maxCreationDate'] = None

        # set to None if min_creation_date (nullable) is None
        # and model_fields_set contains the field
        if self.min_creation_date is None and "min_creation_date" in self.model_fields_set:
            _dict['minCreationDate'] = None

        # set to None if modified_since (nullable) is None
        # and model_fields_set contains the field
        if self.modified_since is None and "modified_since" in self.model_fields_set:
            _dict['modifiedSince'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['teamId'] = None

        # set to None if text_to_search (nullable) is None
        # and model_fields_set contains the field
        if self.text_to_search is None and "text_to_search" in self.model_fields_set:
            _dict['textToSearch'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertFilterPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertIds": obj.get("alertIds"),
            "alertsAfterId": obj.get("alertsAfterId"),
            "categoryIds": obj.get("categoryIds"),
            "continuationToken": PagedResultsPublicContinuationToken.from_dict(obj["continuationToken"]) if obj.get("continuationToken") is not None else None,
            "maxCreationDate": obj.get("maxCreationDate"),
            "minCreationDate": obj.get("minCreationDate"),
            "modifiedSince": obj.get("modifiedSince"),
            "showPersonalHiddenCategories": obj.get("showPersonalHiddenCategories"),
            "statusCodes": obj.get("statusCodes"),
            "teamId": obj.get("teamId"),
            "textToSearch": obj.get("textToSearch")
        })
        return _obj



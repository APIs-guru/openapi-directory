# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionInfo(BaseModel):
    """
    SubscriptionInfo
    """ # noqa: E501
    branch_id: Optional[StrictStr] = Field(default=None, alias="branchId")
    country: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    external_account_id: Optional[StrictStr] = Field(default=None, alias="externalAccountId")
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    next_billing: Optional[datetime] = Field(default=None, alias="nextBilling")
    owner_id: Optional[StrictStr] = Field(default=None, alias="ownerId")
    plan_code: Optional[StrictStr] = Field(default=None, alias="planCode")
    plan_state: Optional[StrictInt] = Field(default=None, alias="planState")
    referral_enabled: Optional[StrictBool] = Field(default=None, alias="referralEnabled")
    status: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["branchId", "country", "currency", "externalAccountId", "id", "name", "nextBilling", "ownerId", "planCode", "planState", "referralEnabled", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if branch_id (nullable) is None
        # and model_fields_set contains the field
        if self.branch_id is None and "branch_id" in self.model_fields_set:
            _dict['branchId'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if external_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_account_id is None and "external_account_id" in self.model_fields_set:
            _dict['externalAccountId'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if next_billing (nullable) is None
        # and model_fields_set contains the field
        if self.next_billing is None and "next_billing" in self.model_fields_set:
            _dict['nextBilling'] = None

        # set to None if owner_id (nullable) is None
        # and model_fields_set contains the field
        if self.owner_id is None and "owner_id" in self.model_fields_set:
            _dict['ownerId'] = None

        # set to None if plan_code (nullable) is None
        # and model_fields_set contains the field
        if self.plan_code is None and "plan_code" in self.model_fields_set:
            _dict['planCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branchId": obj.get("branchId"),
            "country": obj.get("country"),
            "currency": obj.get("currency"),
            "externalAccountId": obj.get("externalAccountId"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "nextBilling": obj.get("nextBilling"),
            "ownerId": obj.get("ownerId"),
            "planCode": obj.get("planCode"),
            "planState": obj.get("planState"),
            "referralEnabled": obj.get("referralEnabled"),
            "status": obj.get("status")
        })
        return _obj



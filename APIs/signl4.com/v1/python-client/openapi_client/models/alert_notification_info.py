# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_notification_info_channel_type import AlertNotificationInfoChannelType
from openapi_client.models.alert_notification_info_message_status import AlertNotificationInfoMessageStatus
from openapi_client.models.alert_notification_info_user_status import AlertNotificationInfoUserStatus
from typing import Optional, Set
from typing_extensions import Self

class AlertNotificationInfo(BaseModel):
    """
    AlertNotificationInfo
    """ # noqa: E501
    address: Optional[StrictStr] = None
    channel_type: Optional[AlertNotificationInfoChannelType] = Field(default=None, alias="channelType")
    device_name: Optional[StrictStr] = Field(default=None, alias="deviceName")
    last_update: Optional[datetime] = Field(default=None, alias="lastUpdate")
    message_status: Optional[AlertNotificationInfoMessageStatus] = Field(default=None, alias="messageStatus")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    user_status: Optional[AlertNotificationInfoUserStatus] = Field(default=None, alias="userStatus")
    __properties: ClassVar[List[str]] = ["address", "channelType", "deviceName", "lastUpdate", "messageStatus", "userId", "userStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertNotificationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if device_name (nullable) is None
        # and model_fields_set contains the field
        if self.device_name is None and "device_name" in self.model_fields_set:
            _dict['deviceName'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertNotificationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "channelType": obj.get("channelType"),
            "deviceName": obj.get("deviceName"),
            "lastUpdate": obj.get("lastUpdate"),
            "messageStatus": obj.get("messageStatus"),
            "userId": obj.get("userId"),
            "userStatus": obj.get("userStatus")
        })
        return _obj



# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_counts import AlertCounts
from typing import Optional, Set
from typing_extensions import Self

class AlertReport(BaseModel):
    """
    AlertReport
    """ # noqa: E501
    last24_hours: Optional[AlertCounts] = Field(default=None, alias="last24Hours")
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    team_current_duty: Optional[AlertCounts] = Field(default=None, alias="teamCurrentDuty")
    team_id: Optional[StrictStr] = Field(default=None, alias="teamId")
    team_last_duty: Optional[AlertCounts] = Field(default=None, alias="teamLastDuty")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    user_last_duty_change: Optional[AlertCounts] = Field(default=None, alias="userLastDutyChange")
    __properties: ClassVar[List[str]] = ["last24Hours", "subscriptionId", "teamCurrentDuty", "teamId", "teamLastDuty", "userId", "userLastDutyChange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last24_hours
        if self.last24_hours:
            _dict['last24Hours'] = self.last24_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_current_duty
        if self.team_current_duty:
            _dict['teamCurrentDuty'] = self.team_current_duty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_last_duty
        if self.team_last_duty:
            _dict['teamLastDuty'] = self.team_last_duty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_last_duty_change
        if self.user_last_duty_change:
            _dict['userLastDutyChange'] = self.user_last_duty_change.to_dict()
        # set to None if subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.subscription_id is None and "subscription_id" in self.model_fields_set:
            _dict['subscriptionId'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['teamId'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "last24Hours": AlertCounts.from_dict(obj["last24Hours"]) if obj.get("last24Hours") is not None else None,
            "subscriptionId": obj.get("subscriptionId"),
            "teamCurrentDuty": AlertCounts.from_dict(obj["teamCurrentDuty"]) if obj.get("teamCurrentDuty") is not None else None,
            "teamId": obj.get("teamId"),
            "teamLastDuty": AlertCounts.from_dict(obj["teamLastDuty"]) if obj.get("teamLastDuty") is not None else None,
            "userId": obj.get("userId"),
            "userLastDutyChange": AlertCounts.from_dict(obj["userLastDutyChange"]) if obj.get("userLastDutyChange") is not None else None
        })
        return _obj



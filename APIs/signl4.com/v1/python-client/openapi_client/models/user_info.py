# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_address_info import ContactAddressInfo
from openapi_client.models.user_duty_info import UserDutyInfo
from typing import Optional, Set
from typing_extensions import Self

class UserInfo(BaseModel):
    """
    UserInfo
    """ # noqa: E501
    color_index: Optional[StrictInt] = Field(default=None, alias="colorIndex")
    contact_addresses: Optional[List[ContactAddressInfo]] = Field(default=None, alias="contactAddresses")
    duty_info: Optional[UserDutyInfo] = Field(default=None, alias="dutyInfo")
    id: Optional[StrictStr] = None
    is_deactivated: Optional[StrictBool] = Field(default=None, alias="isDeactivated")
    is_invite: Optional[StrictBool] = Field(default=None, alias="isInvite")
    mail: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    role_id: Optional[StrictStr] = Field(default=None, alias="roleId")
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    user_image_last_modified: Optional[datetime] = Field(default=None, alias="userImageLastModified")
    __properties: ClassVar[List[str]] = ["colorIndex", "contactAddresses", "dutyInfo", "id", "isDeactivated", "isInvite", "mail", "name", "roleId", "subscriptionId", "timeZone", "userImageLastModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contact_addresses (list)
        _items = []
        if self.contact_addresses:
            for _item_contact_addresses in self.contact_addresses:
                if _item_contact_addresses:
                    _items.append(_item_contact_addresses.to_dict())
            _dict['contactAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of duty_info
        if self.duty_info:
            _dict['dutyInfo'] = self.duty_info.to_dict()
        # set to None if contact_addresses (nullable) is None
        # and model_fields_set contains the field
        if self.contact_addresses is None and "contact_addresses" in self.model_fields_set:
            _dict['contactAddresses'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if mail (nullable) is None
        # and model_fields_set contains the field
        if self.mail is None and "mail" in self.model_fields_set:
            _dict['mail'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if role_id (nullable) is None
        # and model_fields_set contains the field
        if self.role_id is None and "role_id" in self.model_fields_set:
            _dict['roleId'] = None

        # set to None if subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.subscription_id is None and "subscription_id" in self.model_fields_set:
            _dict['subscriptionId'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['timeZone'] = None

        # set to None if user_image_last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.user_image_last_modified is None and "user_image_last_modified" in self.model_fields_set:
            _dict['userImageLastModified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "colorIndex": obj.get("colorIndex"),
            "contactAddresses": [ContactAddressInfo.from_dict(_item) for _item in obj["contactAddresses"]] if obj.get("contactAddresses") is not None else None,
            "dutyInfo": UserDutyInfo.from_dict(obj["dutyInfo"]) if obj.get("dutyInfo") is not None else None,
            "id": obj.get("id"),
            "isDeactivated": obj.get("isDeactivated"),
            "isInvite": obj.get("isInvite"),
            "mail": obj.get("mail"),
            "name": obj.get("name"),
            "roleId": obj.get("roleId"),
            "subscriptionId": obj.get("subscriptionId"),
            "timeZone": obj.get("timeZone"),
            "userImageLastModified": obj.get("userImageLastModified")
        })
        return _obj



# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_annotation_info import AlertAnnotationInfo
from openapi_client.models.alert_attachment import AlertAttachment
from openapi_client.models.alert_history_info_detailed import AlertHistoryInfoDetailed
from openapi_client.models.alert_severities import AlertSeverities
from openapi_client.models.alert_status_codes import AlertStatusCodes
from openapi_client.models.event_parameter_info import EventParameterInfo
from openapi_client.models.event_source_types import EventSourceTypes
from typing import Optional, Set
from typing_extensions import Self

class AlertInfo(BaseModel):
    """
    AlertInfo
    """ # noqa: E501
    annotations: Optional[List[AlertAnnotationInfo]] = None
    attachments: Optional[List[AlertAttachment]] = None
    category: Optional[StrictStr] = None
    category_id: Optional[StrictStr] = Field(default=None, alias="categoryId")
    event_id: Optional[StrictStr] = Field(default=None, alias="eventId")
    event_source_id: Optional[StrictStr] = Field(default=None, alias="eventSourceId")
    event_source_type: Optional[EventSourceTypes] = Field(default=None, alias="eventSourceType")
    flags: Optional[StrictInt] = None
    history: Optional[AlertHistoryInfoDetailed] = None
    id: Optional[StrictStr] = None
    last_modified: Optional[datetime] = Field(default=None, alias="lastModified")
    parameters: Optional[List[EventParameterInfo]] = None
    severity: Optional[AlertSeverities] = None
    status: Optional[AlertStatusCodes] = None
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    team_id: Optional[StrictStr] = Field(default=None, alias="teamId")
    text: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["annotations", "attachments", "category", "categoryId", "eventId", "eventSourceId", "eventSourceType", "flags", "history", "id", "lastModified", "parameters", "severity", "status", "subscriptionId", "teamId", "text", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of history
        if self.history:
            _dict['history'] = self.history.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # set to None if annotations (nullable) is None
        # and model_fields_set contains the field
        if self.annotations is None and "annotations" in self.model_fields_set:
            _dict['annotations'] = None

        # set to None if attachments (nullable) is None
        # and model_fields_set contains the field
        if self.attachments is None and "attachments" in self.model_fields_set:
            _dict['attachments'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryId'] = None

        # set to None if event_id (nullable) is None
        # and model_fields_set contains the field
        if self.event_id is None and "event_id" in self.model_fields_set:
            _dict['eventId'] = None

        # set to None if event_source_id (nullable) is None
        # and model_fields_set contains the field
        if self.event_source_id is None and "event_source_id" in self.model_fields_set:
            _dict['eventSourceId'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        # set to None if subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.subscription_id is None and "subscription_id" in self.model_fields_set:
            _dict['subscriptionId'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['teamId'] = None

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": [AlertAnnotationInfo.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "attachments": [AlertAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "category": obj.get("category"),
            "categoryId": obj.get("categoryId"),
            "eventId": obj.get("eventId"),
            "eventSourceId": obj.get("eventSourceId"),
            "eventSourceType": obj.get("eventSourceType"),
            "flags": obj.get("flags"),
            "history": AlertHistoryInfoDetailed.from_dict(obj["history"]) if obj.get("history") is not None else None,
            "id": obj.get("id"),
            "lastModified": obj.get("lastModified"),
            "parameters": [EventParameterInfo.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "severity": obj.get("severity"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "teamId": obj.get("teamId"),
            "text": obj.get("text"),
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    SIGNL4 API

    <p>Use our API for systems integration or to build your own use cases. Sample scenarios include but are not limited to:</p><ul><li>2-way integration: Triggering of Signls and updates in the third party systems when alert state changes occur</li><li>Retrieving alarms for logging purposes</li><li>Calendar integrations: Creation and management of on-call duties</li><li>Punch users in and out based on external calendars</li><li>etc.</li></ul><p>AUTHENTICATION<br>Using the API requires an API key, which you can generate in the SIGNL4 portal under 'Developers'.<br>This key must then be specified in a special header in every HTTP request.<br>This header is called <b style='color:#F8B41F'>X-S4-Api-Key</b>.<br><br>The base URL of the API is <a rel='noopener noreferrer' target='_blank' href='https://connect.signl4.com/api/'>https://connect.signl4.com/api/</a>.<br>Copyright Â© Derdack GmbH<br></p>

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alert_filter_actions import AlertFilterActions
from openapi_client.models.alert_filter_modes import AlertFilterModes
from openapi_client.models.alert_response_modes import AlertResponseModes
from openapi_client.models.persistent_notification_modes import PersistentNotificationModes
from openapi_client.models.team_category_opt_out_modes import TeamCategoryOptOutModes
from typing import Optional, Set
from typing_extensions import Self

class AlertSettings(BaseModel):
    """
    AlertSettings
    """ # noqa: E501
    filter_action: Optional[AlertFilterActions] = Field(default=None, alias="filterAction")
    filter_mode: Optional[AlertFilterModes] = Field(default=None, alias="filterMode")
    opt_out_mode: Optional[TeamCategoryOptOutModes] = Field(default=None, alias="optOutMode")
    persistent_notificication_mode: Optional[PersistentNotificationModes] = Field(default=None, alias="persistentNotificicationMode")
    response_mode: Optional[AlertResponseModes] = Field(default=None, alias="responseMode")
    response_time: Optional[StrictInt] = Field(default=None, alias="responseTime")
    __properties: ClassVar[List[str]] = ["filterAction", "filterMode", "optOutMode", "persistentNotificicationMode", "responseMode", "responseTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filterAction": obj.get("filterAction"),
            "filterMode": obj.get("filterMode"),
            "optOutMode": obj.get("optOutMode"),
            "persistentNotificicationMode": obj.get("persistentNotificicationMode"),
            "responseMode": obj.get("responseMode"),
            "responseTime": obj.get("responseTime")
        })
        return _obj



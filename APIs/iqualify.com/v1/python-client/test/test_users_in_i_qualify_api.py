# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.users_in_i_qualify_api import UsersInIQualifyApi


class TestUsersInIQualifyApi(unittest.TestCase):
    """UsersInIQualifyApi unit test stubs"""

    def setUp(self) -> None:
        self.api = UsersInIQualifyApi()

    def tearDown(self) -> None:
        pass

    def test_users_post(self) -> None:
        """Test case for users_post

        Add new user
        """
        pass

    def test_users_user_email_get(self) -> None:
        """Test case for users_user_email_get

        Find user by email
        """
        pass

    def test_users_user_email_invite_email_post(self) -> None:
        """Test case for users_user_email_invite_email_post

        Resend invitation email
        """
        pass

    def test_users_user_email_offerings_get(self) -> None:
        """Test case for users_user_email_offerings_get

        Find user's offerings
        """
        pass

    def test_users_user_email_offerings_post(self) -> None:
        """Test case for users_user_email_offerings_post

        Adds the user to the specified offerings as a learner
        """
        pass

    def test_users_user_email_patch(self) -> None:
        """Test case for users_user_email_patch

        Update user
        """
        pass

    def test_users_user_email_permissions_permission_name_post(self) -> None:
        """Test case for users_user_email_permissions_permission_name_post

        Add permission to user
        """
        pass

    def test_users_user_email_suspend_put(self) -> None:
        """Test case for users_user_email_suspend_put

        Suspend user
        """
        pass


if __name__ == '__main__':
    unittest.main()

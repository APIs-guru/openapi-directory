# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BadgeExpiry(BaseModel):
    """
    BadgeExpiry
    """ # noqa: E501
    expiration_date: Optional[datetime] = Field(default=None, alias="expirationDate")
    expires: Optional[StrictBool] = None
    expiry_type: Optional[StrictStr] = Field(default=None, alias="expiryType")
    timeframe_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="timeframeAmount")
    timeframe_unit: Optional[StrictStr] = Field(default=None, alias="timeframeUnit")
    __properties: ClassVar[List[str]] = ["expirationDate", "expires", "expiryType", "timeframeAmount", "timeframeUnit"]

    @field_validator('expiry_type')
    def expiry_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['date', 'timeframe']):
            raise ValueError("must be one of enum values ('date', 'timeframe')")
        return value

    @field_validator('timeframe_unit')
    def timeframe_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['days', 'months', 'years']):
            raise ValueError("must be one of enum values ('days', 'months', 'years')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BadgeExpiry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BadgeExpiry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expirationDate": obj.get("expirationDate"),
            "expires": obj.get("expires"),
            "expiryType": obj.get("expiryType"),
            "timeframeAmount": obj.get("timeframeAmount"),
            "timeframeUnit": obj.get("timeframeUnit")
        })
        return _obj



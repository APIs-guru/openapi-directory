# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.document import Document
from openapi_client.models.theme_response import ThemeResponse
from typing import Optional, Set
from typing_extensions import Self

class AssessmentResponse(BaseModel):
    """
    AssessmentResponse
    """ # noqa: E501
    content: Optional[StrictStr] = None
    documents: Optional[List[Document]] = None
    due_date: Optional[datetime] = Field(default=None, alias="dueDate")
    duration_minutes: Optional[StrictInt] = Field(default=None, alias="durationMinutes")
    filename: Optional[StrictStr] = None
    hidden: Optional[StrictBool] = False
    id: Optional[StrictStr] = None
    mark_number: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="markNumber")
    mark_type: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="markType")
    max_attempts: Optional[StrictInt] = Field(default=None, alias="maxAttempts")
    open_date: Optional[datetime] = Field(default=None, alias="openDate")
    pid: Optional[StrictStr] = None
    points: Optional[StrictStr] = None
    themes: Optional[List[ThemeResponse]] = None
    title: Optional[StrictStr] = None
    total_questions: Optional[StrictInt] = Field(default=None, alias="totalQuestions")
    total_themes: Optional[StrictInt] = Field(default=None, alias="totalThemes")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["content", "documents", "dueDate", "durationMinutes", "filename", "hidden", "id", "markNumber", "markType", "maxAttempts", "openDate", "pid", "points", "themes", "title", "totalQuestions", "totalThemes", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssessmentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in themes (list)
        _items = []
        if self.themes:
            for _item_themes in self.themes:
                if _item_themes:
                    _items.append(_item_themes.to_dict())
            _dict['themes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssessmentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "documents": [Document.from_dict(_item) for _item in obj["documents"]] if obj.get("documents") is not None else None,
            "dueDate": obj.get("dueDate"),
            "durationMinutes": obj.get("durationMinutes"),
            "filename": obj.get("filename"),
            "hidden": obj.get("hidden") if obj.get("hidden") is not None else False,
            "id": obj.get("id"),
            "markNumber": obj.get("markNumber"),
            "markType": obj.get("markType"),
            "maxAttempts": obj.get("maxAttempts"),
            "openDate": obj.get("openDate"),
            "pid": obj.get("pid"),
            "points": obj.get("points"),
            "themes": [ThemeResponse.from_dict(_item) for _item in obj["themes"]] if obj.get("themes") is not None else None,
            "title": obj.get("title"),
            "totalQuestions": obj.get("totalQuestions"),
            "totalThemes": obj.get("totalThemes"),
            "type": obj.get("type")
        })
        return _obj



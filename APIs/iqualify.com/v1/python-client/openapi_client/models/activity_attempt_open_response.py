# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_attempt_open_response_feedback import ActivityAttemptOpenResponseFeedback
from openapi_client.models.activity_attempt_open_response_files import ActivityAttemptOpenResponseFiles
from typing import Optional, Set
from typing_extensions import Self

class ActivityAttemptOpenResponse(BaseModel):
    """
    ActivityAttemptOpenResponse
    """ # noqa: E501
    activity_id: Optional[StrictStr] = Field(default=None, alias="activityId")
    activity_type: Optional[StrictStr] = Field(default=None, alias="activityType")
    feedback: Optional[ActivityAttemptOpenResponseFeedback] = None
    learner_email: Optional[StrictStr] = Field(default=None, alias="learnerEmail")
    offering_id: Optional[StrictStr] = Field(default=None, alias="offeringId")
    response_text: Optional[StrictStr] = Field(default=None, alias="responseText")
    uploaded_files: Optional[ActivityAttemptOpenResponseFiles] = Field(default=None, alias="uploadedFiles")
    __properties: ClassVar[List[str]] = ["activityId", "activityType", "feedback", "learnerEmail", "offeringId", "responseText", "uploadedFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityAttemptOpenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of feedback
        if self.feedback:
            _dict['feedback'] = self.feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uploaded_files
        if self.uploaded_files:
            _dict['uploadedFiles'] = self.uploaded_files.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityAttemptOpenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityId": obj.get("activityId"),
            "activityType": obj.get("activityType"),
            "feedback": ActivityAttemptOpenResponseFeedback.from_dict(obj["feedback"]) if obj.get("feedback") is not None else None,
            "learnerEmail": obj.get("learnerEmail"),
            "offeringId": obj.get("offeringId"),
            "responseText": obj.get("responseText"),
            "uploadedFiles": ActivityAttemptOpenResponseFiles.from_dict(obj["uploadedFiles"]) if obj.get("uploadedFiles") is not None else None
        })
        return _obj



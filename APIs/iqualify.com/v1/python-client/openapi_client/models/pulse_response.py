# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pulse_answer import PulseAnswer
from typing import Optional, Set
from typing_extensions import Self

class PulseResponse(BaseModel):
    """
    PulseResponse
    """ # noqa: E501
    learner_first_name: Optional[StrictStr] = Field(default=None, alias="learnerFirstName")
    learner_id: Optional[StrictStr] = Field(default=None, alias="learnerId")
    learner_last_name: Optional[StrictStr] = Field(default=None, alias="learnerLastName")
    pulse_base_id: Optional[StrictStr] = Field(default=None, alias="pulseBaseId")
    pulse_instance_id: Optional[StrictStr] = Field(default=None, alias="pulseInstanceId")
    pulse_question: Optional[StrictStr] = Field(default=None, alias="pulseQuestion")
    pulse_run_duration_minutes: Optional[StrictInt] = Field(default=None, alias="pulseRunDurationMinutes")
    pulse_run_start: Optional[datetime] = Field(default=None, alias="pulseRunStart")
    pulse_type: Optional[StrictStr] = Field(default=None, alias="pulseType")
    response: Optional[PulseAnswer] = None
    response_time: Optional[datetime] = Field(default=None, alias="responseTime")
    __properties: ClassVar[List[str]] = ["learnerFirstName", "learnerId", "learnerLastName", "pulseBaseId", "pulseInstanceId", "pulseQuestion", "pulseRunDurationMinutes", "pulseRunStart", "pulseType", "response", "responseTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PulseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PulseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "learnerFirstName": obj.get("learnerFirstName"),
            "learnerId": obj.get("learnerId"),
            "learnerLastName": obj.get("learnerLastName"),
            "pulseBaseId": obj.get("pulseBaseId"),
            "pulseInstanceId": obj.get("pulseInstanceId"),
            "pulseQuestion": obj.get("pulseQuestion"),
            "pulseRunDurationMinutes": obj.get("pulseRunDurationMinutes"),
            "pulseRunStart": obj.get("pulseRunStart"),
            "pulseType": obj.get("pulseType"),
            "response": PulseAnswer.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "responseTime": obj.get("responseTime")
        })
        return _obj



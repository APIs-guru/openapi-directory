# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.invite import Invite
from openapi_client.models.user_metadata import UserMetadata
from openapi_client.models.user_profile_request import UserProfileRequest
from typing import Optional, Set
from typing_extensions import Self

class OfferingUserAddResponse(BaseModel):
    """
    OfferingUserAddResponse
    """ # noqa: E501
    email: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    first_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="firstName")
    invite: Optional[Invite] = None
    is_facilitator: Optional[StrictBool] = Field(default=False, alias="isFacilitator")
    is_marker: Optional[StrictBool] = Field(default=False, alias="isMarker")
    is_readonly: Optional[StrictBool] = Field(default=False, alias="isReadonly")
    last_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="lastName")
    metadata: Optional[UserMetadata] = None
    person_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="personId")
    profile: Optional[UserProfileRequest] = None
    send_invite: Optional[StrictBool] = Field(default=True, alias="sendInvite")
    send_notification_email: Optional[StrictBool] = Field(default=True, alias="sendNotificationEmail")
    __properties: ClassVar[List[str]] = ["email", "firstName", "invite", "isFacilitator", "isMarker", "isReadonly", "lastName", "metadata", "personId", "profile", "sendInvite", "sendNotificationEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OfferingUserAddResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invite
        if self.invite:
            _dict['invite'] = self.invite.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OfferingUserAddResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "invite": Invite.from_dict(obj["invite"]) if obj.get("invite") is not None else None,
            "isFacilitator": obj.get("isFacilitator") if obj.get("isFacilitator") is not None else False,
            "isMarker": obj.get("isMarker") if obj.get("isMarker") is not None else False,
            "isReadonly": obj.get("isReadonly") if obj.get("isReadonly") is not None else False,
            "lastName": obj.get("lastName"),
            "metadata": UserMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "personId": obj.get("personId"),
            "profile": UserProfileRequest.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "sendInvite": obj.get("sendInvite") if obj.get("sendInvite") is not None else True,
            "sendNotificationEmail": obj.get("sendNotificationEmail") if obj.get("sendNotificationEmail") is not None else True
        })
        return _obj



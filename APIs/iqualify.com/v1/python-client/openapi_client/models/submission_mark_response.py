# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document import Document
from openapi_client.models.mark import Mark
from typing import Optional, Set
from typing_extensions import Self

class SubmissionMarkResponse(BaseModel):
    """
    SubmissionMarkResponse
    """ # noqa: E501
    assessment_id: Optional[StrictStr] = Field(default=None, alias="assessmentId")
    assessment_item_details: Optional[StrictStr] = Field(default=None, alias="assessmentItemDetails")
    assessment_item_name: Optional[StrictStr] = Field(default=None, alias="assessmentItemName")
    course_name: Optional[StrictStr] = Field(default=None, alias="courseName")
    files: Optional[List[Document]] = None
    html: Optional[StrictStr] = None
    learner_email: Optional[StrictStr] = Field(default=None, alias="learnerEmail")
    learner_first_name: Optional[StrictStr] = Field(default=None, alias="learnerFirstName")
    learner_last_name: Optional[StrictStr] = Field(default=None, alias="learnerLastName")
    learner_person_id: Optional[StrictStr] = Field(default=None, alias="learnerPersonId")
    marks: Optional[List[Mark]] = None
    status: Optional[StrictStr] = None
    submission_date_time: Optional[datetime] = Field(default=None, alias="submissionDateTime")
    __properties: ClassVar[List[str]] = ["assessmentId", "assessmentItemDetails", "assessmentItemName", "courseName", "files", "html", "learnerEmail", "learnerFirstName", "learnerLastName", "learnerPersonId", "marks", "status", "submissionDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionMarkResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in marks (list)
        _items = []
        if self.marks:
            for _item_marks in self.marks:
                if _item_marks:
                    _items.append(_item_marks.to_dict())
            _dict['marks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionMarkResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessmentId": obj.get("assessmentId"),
            "assessmentItemDetails": obj.get("assessmentItemDetails"),
            "assessmentItemName": obj.get("assessmentItemName"),
            "courseName": obj.get("courseName"),
            "files": [Document.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None,
            "html": obj.get("html"),
            "learnerEmail": obj.get("learnerEmail"),
            "learnerFirstName": obj.get("learnerFirstName"),
            "learnerLastName": obj.get("learnerLastName"),
            "learnerPersonId": obj.get("learnerPersonId"),
            "marks": [Mark.from_dict(_item) for _item in obj["marks"]] if obj.get("marks") is not None else None,
            "status": obj.get("status"),
            "submissionDateTime": obj.get("submissionDateTime")
        })
        return _obj



# coding: utf-8

"""
    iQualify Management API

    The iQualify API offers management responses for building learning experiences using your iQualify instance data.  Once youâ€™ve registered with iQualify, you can request an API access token by navigating to the API access section of the \"Account Settings\" area.  Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token) on our Knowledge base.  All endpoints are only accessible via https and are located at api.iqualify.com. For instance: you can find your current offerings by accessing the following URL:      https://api.iqualify.com/v1/offerings/current  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.offering_badge import OfferingBadge
from openapi_client.models.offering_metadata import OfferingMetadata
from typing import Optional, Set
from typing_extensions import Self

class Offering(BaseModel):
    """
    Offering
    """ # noqa: E501
    badge: Optional[OfferingBadge] = None
    content_id: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, description="The identifier for a specific version of a course", alias="contentId")
    description: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    early_close_off_date: Optional[datetime] = Field(default=None, alias="earlyCloseOffDate")
    end: Optional[datetime] = None
    has_early_close_off: Optional[StrictBool] = Field(default=None, alias="hasEarlyCloseOff")
    identifier: Optional[StrictStr] = None
    is_readonly: Optional[StrictBool] = Field(default=None, alias="isReadonly")
    metadata: Optional[OfferingMetadata] = None
    name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    overview: Optional[StrictStr] = None
    root_content_id: Optional[StrictStr] = Field(default=None, description="Every time a course is republished it is assigned a new contentId. rootContentId is the first original contentId associated with a course.", alias="rootContentId")
    start: Optional[datetime] = None
    trailer_video_url: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="trailerVideoUrl")
    use_relative_dates: Optional[StrictBool] = Field(default=None, alias="useRelativeDates")
    __properties: ClassVar[List[str]] = ["badge", "contentId", "description", "earlyCloseOffDate", "end", "hasEarlyCloseOff", "identifier", "isReadonly", "metadata", "name", "overview", "rootContentId", "start", "trailerVideoUrl", "useRelativeDates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Offering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of badge
        if self.badge:
            _dict['badge'] = self.badge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Offering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "badge": OfferingBadge.from_dict(obj["badge"]) if obj.get("badge") is not None else None,
            "contentId": obj.get("contentId"),
            "description": obj.get("description"),
            "earlyCloseOffDate": obj.get("earlyCloseOffDate"),
            "end": obj.get("end"),
            "hasEarlyCloseOff": obj.get("hasEarlyCloseOff"),
            "identifier": obj.get("identifier"),
            "isReadonly": obj.get("isReadonly"),
            "metadata": OfferingMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "overview": obj.get("overview"),
            "rootContentId": obj.get("rootContentId"),
            "start": obj.get("start"),
            "trailerVideoUrl": obj.get("trailerVideoUrl"),
            "useRelativeDates": obj.get("useRelativeDates")
        })
        return _obj



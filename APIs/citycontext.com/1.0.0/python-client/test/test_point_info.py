# coding: utf-8

"""
    City Context

    City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.point_info import PointInfo

class TestPointInfo(unittest.TestCase):
    """PointInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PointInfo:
        """Test PointInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PointInfo`
        """
        model = PointInfo()
        if include_optional:
            return PointInfo(
                location = openapi_client.models.location.Location(
                    lat = -85, 
                    lon = -1.8E+2, 
                    within_london_ccz = True, ),
                lsoa = openapi_client.models.point_info_lsoa.PointInfo_lsoa(
                    crimes = openapi_client.models.crimes.crimes(), 
                    name = '', 
                    population = openapi_client.models.point_info_lsoa_population.PointInfo_lsoa_population(
                        all_usual_residents = 56, 
                        communal_establishment_residents = 56, 
                        household_residents = 56, 
                        households = 56, 
                        persons_per_hectare = 56, 
                        persons_per_household = 56, ), ),
                parks = [
                    openapi_client.models.point_info_parks_inner.PointInfo_parks_inner(
                        area_sqm = 56, 
                        centroid = openapi_client.models.latlon.Latlon(), 
                        distance_meters = 56, 
                        name = '', )
                    ],
                schools = [
                    openapi_client.models.point_info_schools_inner.PointInfo_schools_inner(
                        distance_meters = 56, 
                        last_inpection_url = '', 
                        last_inspection_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        leadership_and_management = 1, 
                        location = openapi_client.models.latlon.Latlon(), 
                        overall_effectiveness = 1, 
                        phase = '', 
                        quality_of_teaching = 1, 
                        school_name = '', 
                        type_of_establishment = '', 
                        urn = 56, )
                    ]
            )
        else:
            return PointInfo(
                location = openapi_client.models.location.Location(
                    lat = -85, 
                    lon = -1.8E+2, 
                    within_london_ccz = True, ),
                parks = [
                    openapi_client.models.point_info_parks_inner.PointInfo_parks_inner(
                        area_sqm = 56, 
                        centroid = openapi_client.models.latlon.Latlon(), 
                        distance_meters = 56, 
                        name = '', )
                    ],
                schools = [
                    openapi_client.models.point_info_schools_inner.PointInfo_schools_inner(
                        distance_meters = 56, 
                        last_inpection_url = '', 
                        last_inspection_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        leadership_and_management = 1, 
                        location = openapi_client.models.latlon.Latlon(), 
                        overall_effectiveness = 1, 
                        phase = '', 
                        quality_of_teaching = 1, 
                        school_name = '', 
                        type_of_establishment = '', 
                        urn = 56, )
                    ],
        )
        """

    def testPointInfo(self):
        """Test PointInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    City Context

    City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PointInfoSchoolsInner(BaseModel):
    """
    PointInfoSchoolsInner
    """ # noqa: E501
    distance_meters: StrictInt = Field(alias="distanceMeters")
    last_inpection_url: StrictStr = Field(description="URL to the last inspection report", alias="lastInpectionUrl")
    last_inspection_date: datetime = Field(description="Date of the last Ofsted inspection", alias="lastInspectionDate")
    leadership_and_management: Annotated[int, Field(le=4, strict=True, ge=1)] = Field(description="Leadership and management grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)", alias="leadershipAndManagement")
    location: Dict[str, Any]
    overall_effectiveness: Annotated[int, Field(le=4, strict=True, ge=1)] = Field(description="Overall effectiveness grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)", alias="overallEffectiveness")
    phase: StrictStr
    quality_of_teaching: Annotated[int, Field(le=4, strict=True, ge=1)] = Field(description="Quality of teaching grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)", alias="qualityOfTeaching")
    school_name: StrictStr = Field(alias="schoolName")
    type_of_establishment: StrictStr = Field(alias="typeOfEstablishment")
    urn: StrictInt = Field(description="Unique school identifier")
    __properties: ClassVar[List[str]] = ["distanceMeters", "lastInpectionUrl", "lastInspectionDate", "leadershipAndManagement", "location", "overallEffectiveness", "phase", "qualityOfTeaching", "schoolName", "typeOfEstablishment", "urn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PointInfoSchoolsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PointInfoSchoolsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "distanceMeters": obj.get("distanceMeters"),
            "lastInpectionUrl": obj.get("lastInpectionUrl"),
            "lastInspectionDate": obj.get("lastInspectionDate"),
            "leadershipAndManagement": obj.get("leadershipAndManagement"),
            "location": obj.get("location"),
            "overallEffectiveness": obj.get("overallEffectiveness"),
            "phase": obj.get("phase"),
            "qualityOfTeaching": obj.get("qualityOfTeaching"),
            "schoolName": obj.get("schoolName"),
            "typeOfEstablishment": obj.get("typeOfEstablishment"),
            "urn": obj.get("urn")
        })
        return _obj



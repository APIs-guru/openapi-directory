# coding: utf-8

"""
    City Context

    City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.location import Location
from openapi_client.models.point_info_lsoa import PointInfoLsoa
from openapi_client.models.point_info_parks_inner import PointInfoParksInner
from openapi_client.models.point_info_schools_inner import PointInfoSchoolsInner
from typing import Optional, Set
from typing_extensions import Self

class PointInfo(BaseModel):
    """
    Contextual information around a given point
    """ # noqa: E501
    location: Location
    lsoa: Optional[PointInfoLsoa] = None
    parks: List[PointInfoParksInner] = Field(description="Parks within 1km of the point of interest, sorted by descending area")
    schools: List[PointInfoSchoolsInner] = Field(description="Schools within 1km of the point of interest, sorted by ascending distance from the POI")
    __properties: ClassVar[List[str]] = ["location", "lsoa", "parks", "schools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PointInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lsoa
        if self.lsoa:
            _dict['lsoa'] = self.lsoa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parks (list)
        _items = []
        if self.parks:
            for _item_parks in self.parks:
                if _item_parks:
                    _items.append(_item_parks.to_dict())
            _dict['parks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in schools (list)
        _items = []
        if self.schools:
            for _item_schools in self.schools:
                if _item_schools:
                    _items.append(_item_schools.to_dict())
            _dict['schools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PointInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "lsoa": PointInfoLsoa.from_dict(obj["lsoa"]) if obj.get("lsoa") is not None else None,
            "parks": [PointInfoParksInner.from_dict(_item) for _item in obj["parks"]] if obj.get("parks") is not None else None,
            "schools": [PointInfoSchoolsInner.from_dict(_item) for _item in obj["schools"]] if obj.get("schools") is not None else None
        })
        return _obj



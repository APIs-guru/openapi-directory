# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.cashtag_entity import CashtagEntity
from openapi_client.models.full_text_entities_annotations_inner import FullTextEntitiesAnnotationsInner
from openapi_client.models.hashtag_entity import HashtagEntity
from openapi_client.models.mention_entity import MentionEntity
from openapi_client.models.url_entity import UrlEntity
from typing import Optional, Set
from typing_extensions import Self

class FullTextEntities(BaseModel):
    """
    FullTextEntities
    """ # noqa: E501
    annotations: Optional[Annotated[List[FullTextEntitiesAnnotationsInner], Field(min_length=1)]] = None
    cashtags: Optional[Annotated[List[CashtagEntity], Field(min_length=1)]] = None
    hashtags: Optional[Annotated[List[HashtagEntity], Field(min_length=1)]] = None
    mentions: Optional[Annotated[List[MentionEntity], Field(min_length=1)]] = None
    urls: Optional[Annotated[List[UrlEntity], Field(min_length=1)]] = None
    __properties: ClassVar[List[str]] = ["annotations", "cashtags", "hashtags", "mentions", "urls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FullTextEntities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cashtags (list)
        _items = []
        if self.cashtags:
            for _item_cashtags in self.cashtags:
                if _item_cashtags:
                    _items.append(_item_cashtags.to_dict())
            _dict['cashtags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hashtags (list)
        _items = []
        if self.hashtags:
            for _item_hashtags in self.hashtags:
                if _item_hashtags:
                    _items.append(_item_hashtags.to_dict())
            _dict['hashtags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mentions (list)
        _items = []
        if self.mentions:
            for _item_mentions in self.mentions:
                if _item_mentions:
                    _items.append(_item_mentions.to_dict())
            _dict['mentions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in urls (list)
        _items = []
        if self.urls:
            for _item_urls in self.urls:
                if _item_urls:
                    _items.append(_item_urls.to_dict())
            _dict['urls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FullTextEntities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": [FullTextEntitiesAnnotationsInner.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "cashtags": [CashtagEntity.from_dict(_item) for _item in obj["cashtags"]] if obj.get("cashtags") is not None else None,
            "hashtags": [HashtagEntity.from_dict(_item) for _item in obj["hashtags"]] if obj.get("hashtags") is not None else None,
            "mentions": [MentionEntity.from_dict(_item) for _item in obj["mentions"]] if obj.get("mentions") is not None else None,
            "urls": [UrlEntity.from_dict(_item) for _item in obj["urls"]] if obj.get("urls") is not None else None
        })
        return _obj



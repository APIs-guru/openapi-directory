# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.geo import Geo
from openapi_client.models.place_type import PlaceType
from typing import Optional, Set
from typing_extensions import Self

class Place(BaseModel):
    """
    Place
    """ # noqa: E501
    contained_within: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = None
    country: Optional[StrictStr] = Field(default=None, description="The full name of the county in which this place exists.")
    country_code: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="A two-letter ISO 3166-1 alpha-2 country code.")
    full_name: StrictStr = Field(description="The full name of this place.")
    geo: Optional[Geo] = None
    id: StrictStr = Field(description="The identifier for this place.")
    name: Optional[StrictStr] = Field(default=None, description="The human readable name of this place.")
    place_type: Optional[PlaceType] = None
    __properties: ClassVar[List[str]] = ["contained_within", "country", "country_code", "full_name", "geo", "id", "name", "place_type"]

    @field_validator('country_code')
    def country_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Place from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Place from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contained_within": obj.get("contained_within"),
            "country": obj.get("country"),
            "country_code": obj.get("country_code"),
            "full_name": obj.get("full_name"),
            "geo": Geo.from_dict(obj["geo"]) if obj.get("geo") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "place_type": obj.get("place_type")
        })
        return _obj



# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.user_delete_compliance_schema import UserDeleteComplianceSchema
from openapi_client.models.user_profile_modification_compliance_schema import UserProfileModificationComplianceSchema
from openapi_client.models.user_protect_compliance_schema import UserProtectComplianceSchema
from openapi_client.models.user_scrub_geo_schema import UserScrubGeoSchema
from openapi_client.models.user_suspend_compliance_schema import UserSuspendComplianceSchema
from openapi_client.models.user_undelete_compliance_schema import UserUndeleteComplianceSchema
from openapi_client.models.user_unprotect_compliance_schema import UserUnprotectComplianceSchema
from openapi_client.models.user_unsuspend_compliance_schema import UserUnsuspendComplianceSchema
from openapi_client.models.user_withheld_compliance_schema import UserWithheldComplianceSchema
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

USERCOMPLIANCEDATA_ONE_OF_SCHEMAS = ["UserDeleteComplianceSchema", "UserProfileModificationComplianceSchema", "UserProtectComplianceSchema", "UserScrubGeoSchema", "UserSuspendComplianceSchema", "UserUndeleteComplianceSchema", "UserUnprotectComplianceSchema", "UserUnsuspendComplianceSchema", "UserWithheldComplianceSchema"]

class UserComplianceData(BaseModel):
    """
    User compliance data.
    """
    # data type: UserProtectComplianceSchema
    oneof_schema_1_validator: Optional[UserProtectComplianceSchema] = None
    # data type: UserUnprotectComplianceSchema
    oneof_schema_2_validator: Optional[UserUnprotectComplianceSchema] = None
    # data type: UserDeleteComplianceSchema
    oneof_schema_3_validator: Optional[UserDeleteComplianceSchema] = None
    # data type: UserUndeleteComplianceSchema
    oneof_schema_4_validator: Optional[UserUndeleteComplianceSchema] = None
    # data type: UserSuspendComplianceSchema
    oneof_schema_5_validator: Optional[UserSuspendComplianceSchema] = None
    # data type: UserUnsuspendComplianceSchema
    oneof_schema_6_validator: Optional[UserUnsuspendComplianceSchema] = None
    # data type: UserWithheldComplianceSchema
    oneof_schema_7_validator: Optional[UserWithheldComplianceSchema] = None
    # data type: UserScrubGeoSchema
    oneof_schema_8_validator: Optional[UserScrubGeoSchema] = None
    # data type: UserProfileModificationComplianceSchema
    oneof_schema_9_validator: Optional[UserProfileModificationComplianceSchema] = None
    actual_instance: Optional[Union[UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema]] = None
    one_of_schemas: Set[str] = { "UserDeleteComplianceSchema", "UserProfileModificationComplianceSchema", "UserProtectComplianceSchema", "UserScrubGeoSchema", "UserSuspendComplianceSchema", "UserUndeleteComplianceSchema", "UserUnprotectComplianceSchema", "UserUnsuspendComplianceSchema", "UserWithheldComplianceSchema" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UserComplianceData.model_construct()
        error_messages = []
        match = 0
        # validate data type: UserProtectComplianceSchema
        if not isinstance(v, UserProtectComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserProtectComplianceSchema`")
        else:
            match += 1
        # validate data type: UserUnprotectComplianceSchema
        if not isinstance(v, UserUnprotectComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUnprotectComplianceSchema`")
        else:
            match += 1
        # validate data type: UserDeleteComplianceSchema
        if not isinstance(v, UserDeleteComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserDeleteComplianceSchema`")
        else:
            match += 1
        # validate data type: UserUndeleteComplianceSchema
        if not isinstance(v, UserUndeleteComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUndeleteComplianceSchema`")
        else:
            match += 1
        # validate data type: UserSuspendComplianceSchema
        if not isinstance(v, UserSuspendComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserSuspendComplianceSchema`")
        else:
            match += 1
        # validate data type: UserUnsuspendComplianceSchema
        if not isinstance(v, UserUnsuspendComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserUnsuspendComplianceSchema`")
        else:
            match += 1
        # validate data type: UserWithheldComplianceSchema
        if not isinstance(v, UserWithheldComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserWithheldComplianceSchema`")
        else:
            match += 1
        # validate data type: UserScrubGeoSchema
        if not isinstance(v, UserScrubGeoSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserScrubGeoSchema`")
        else:
            match += 1
        # validate data type: UserProfileModificationComplianceSchema
        if not isinstance(v, UserProfileModificationComplianceSchema):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserProfileModificationComplianceSchema`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into UserProtectComplianceSchema
        try:
            instance.actual_instance = UserProtectComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserUnprotectComplianceSchema
        try:
            instance.actual_instance = UserUnprotectComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserDeleteComplianceSchema
        try:
            instance.actual_instance = UserDeleteComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserUndeleteComplianceSchema
        try:
            instance.actual_instance = UserUndeleteComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserSuspendComplianceSchema
        try:
            instance.actual_instance = UserSuspendComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserUnsuspendComplianceSchema
        try:
            instance.actual_instance = UserUnsuspendComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserWithheldComplianceSchema
        try:
            instance.actual_instance = UserWithheldComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserScrubGeoSchema
        try:
            instance.actual_instance = UserScrubGeoSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserProfileModificationComplianceSchema
        try:
            instance.actual_instance = UserProfileModificationComplianceSchema.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UserComplianceData with oneOf schemas: UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], UserDeleteComplianceSchema, UserProfileModificationComplianceSchema, UserProtectComplianceSchema, UserScrubGeoSchema, UserSuspendComplianceSchema, UserUndeleteComplianceSchema, UserUnprotectComplianceSchema, UserUnsuspendComplianceSchema, UserWithheldComplianceSchema]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



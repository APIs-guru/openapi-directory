# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.space_topics_inner import SpaceTopicsInner
from typing import Optional, Set
from typing_extensions import Self

class Space(BaseModel):
    """
    
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="Creation time of the Space.")
    creator_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    ended_at: Optional[datetime] = Field(default=None, description="End time of the Space.")
    host_ids: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="The user ids for the hosts of the Space.")
    id: Annotated[str, Field(strict=True)] = Field(description="The unique identifier of this Space.")
    invited_user_ids: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="An array of user ids for people who were invited to a Space.")
    is_ticketed: Optional[StrictBool] = Field(default=None, description="Denotes if the Space is a ticketed Space.")
    lang: Optional[StrictStr] = Field(default=None, description="The language of the Space.")
    participant_count: Optional[StrictInt] = Field(default=None, description="The number of participants in a Space.")
    scheduled_start: Optional[datetime] = Field(default=None, description="A date time stamp for when a Space is scheduled to begin.")
    speaker_ids: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="An array of user ids for people who were speakers in a Space.")
    started_at: Optional[datetime] = Field(default=None, description="When the Space was started as a date string.")
    state: StrictStr = Field(description="The current state of the Space.")
    subscriber_count: Optional[StrictInt] = Field(default=None, description="The number of people who have either purchased a ticket or set a reminder for this Space.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the Space.")
    topics: Optional[List[SpaceTopicsInner]] = Field(default=None, description="The topics of a Space, as selected by its creator.")
    updated_at: Optional[datetime] = Field(default=None, description="When the Space was last updated.")
    __properties: ClassVar[List[str]] = ["created_at", "creator_id", "ended_at", "host_ids", "id", "invited_user_ids", "is_ticketed", "lang", "participant_count", "scheduled_start", "speaker_ids", "started_at", "state", "subscriber_count", "title", "topics", "updated_at"]

    @field_validator('creator_id')
    def creator_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{1,19}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{1,19}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]{1,13}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{1,13}$/")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['live', 'scheduled', 'ended']):
            raise ValueError("must be one of enum values ('live', 'scheduled', 'ended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in topics (list)
        _items = []
        if self.topics:
            for _item_topics in self.topics:
                if _item_topics:
                    _items.append(_item_topics.to_dict())
            _dict['topics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Space from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "creator_id": obj.get("creator_id"),
            "ended_at": obj.get("ended_at"),
            "host_ids": obj.get("host_ids"),
            "id": obj.get("id"),
            "invited_user_ids": obj.get("invited_user_ids"),
            "is_ticketed": obj.get("is_ticketed"),
            "lang": obj.get("lang"),
            "participant_count": obj.get("participant_count"),
            "scheduled_start": obj.get("scheduled_start"),
            "speaker_ids": obj.get("speaker_ids"),
            "started_at": obj.get("started_at"),
            "state": obj.get("state"),
            "subscriber_count": obj.get("subscriber_count"),
            "title": obj.get("title"),
            "topics": [SpaceTopicsInner.from_dict(_item) for _item in obj["topics"]] if obj.get("topics") is not None else None,
            "updated_at": obj.get("updated_at")
        })
        return _obj



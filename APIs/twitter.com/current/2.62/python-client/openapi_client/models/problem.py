# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.generic_problem import GenericProblem
    from openapi_client.models.client_disconnected_problem import ClientDisconnectedProblem
    from openapi_client.models.client_forbidden_problem import ClientForbiddenProblem
    from openapi_client.models.conflict_problem import ConflictProblem
    from openapi_client.models.disallowed_resource_problem import DisallowedResourceProblem
    from openapi_client.models.duplicate_rule_problem import DuplicateRuleProblem
    from openapi_client.models.invalid_request_problem import InvalidRequestProblem
    from openapi_client.models.invalid_rule_problem import InvalidRuleProblem
    from openapi_client.models.non_compliant_rules_problem import NonCompliantRulesProblem
    from openapi_client.models.field_unauthorized_problem import FieldUnauthorizedProblem
    from openapi_client.models.resource_unauthorized_problem import ResourceUnauthorizedProblem
    from openapi_client.models.oauth1_permissions_problem import Oauth1PermissionsProblem
    from openapi_client.models.operational_disconnect_problem import OperationalDisconnectProblem
    from openapi_client.models.resource_not_found_problem import ResourceNotFoundProblem
    from openapi_client.models.resource_unavailable_problem import ResourceUnavailableProblem
    from openapi_client.models.rules_cap_problem import RulesCapProblem
    from openapi_client.models.connection_exception_problem import ConnectionExceptionProblem
    from openapi_client.models.unsupported_authentication_problem import UnsupportedAuthenticationProblem
    from openapi_client.models.usage_cap_exceeded_problem import UsageCapExceededProblem

class Problem(BaseModel):
    """
    An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
    """ # noqa: E501
    detail: Optional[StrictStr] = None
    status: Optional[StrictInt] = None
    title: StrictStr
    type: StrictStr
    __properties: ClassVar[List[str]] = ["detail", "status", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'about:blank': 'GenericProblem','https://api.twitter.com/2/problems/client-disconnected': 'ClientDisconnectedProblem','https://api.twitter.com/2/problems/client-forbidden': 'ClientForbiddenProblem','https://api.twitter.com/2/problems/conflict': 'ConflictProblem','https://api.twitter.com/2/problems/disallowed-resource': 'DisallowedResourceProblem','https://api.twitter.com/2/problems/duplicate-rules': 'DuplicateRuleProblem','https://api.twitter.com/2/problems/invalid-request': 'InvalidRequestProblem','https://api.twitter.com/2/problems/invalid-rules': 'InvalidRuleProblem','https://api.twitter.com/2/problems/noncompliant-rules': 'NonCompliantRulesProblem','https://api.twitter.com/2/problems/not-authorized-for-field': 'FieldUnauthorizedProblem','https://api.twitter.com/2/problems/not-authorized-for-resource': 'ResourceUnauthorizedProblem','https://api.twitter.com/2/problems/oauth1-permissions': 'Oauth1PermissionsProblem','https://api.twitter.com/2/problems/operational-disconnect': 'OperationalDisconnectProblem','https://api.twitter.com/2/problems/resource-not-found': 'ResourceNotFoundProblem','https://api.twitter.com/2/problems/resource-unavailable': 'ResourceUnavailableProblem','https://api.twitter.com/2/problems/rule-cap': 'RulesCapProblem','https://api.twitter.com/2/problems/streaming-connection': 'ConnectionExceptionProblem','https://api.twitter.com/2/problems/unsupported-authentication': 'UnsupportedAuthenticationProblem','https://api.twitter.com/2/problems/usage-capped': 'UsageCapExceededProblem'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[GenericProblem, ClientDisconnectedProblem, ClientForbiddenProblem, ConflictProblem, DisallowedResourceProblem, DuplicateRuleProblem, InvalidRequestProblem, InvalidRuleProblem, NonCompliantRulesProblem, FieldUnauthorizedProblem, ResourceUnauthorizedProblem, Oauth1PermissionsProblem, OperationalDisconnectProblem, ResourceNotFoundProblem, ResourceUnavailableProblem, RulesCapProblem, ConnectionExceptionProblem, UnsupportedAuthenticationProblem, UsageCapExceededProblem]]:
        """Create an instance of Problem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[GenericProblem, ClientDisconnectedProblem, ClientForbiddenProblem, ConflictProblem, DisallowedResourceProblem, DuplicateRuleProblem, InvalidRequestProblem, InvalidRuleProblem, NonCompliantRulesProblem, FieldUnauthorizedProblem, ResourceUnauthorizedProblem, Oauth1PermissionsProblem, OperationalDisconnectProblem, ResourceNotFoundProblem, ResourceUnavailableProblem, RulesCapProblem, ConnectionExceptionProblem, UnsupportedAuthenticationProblem, UsageCapExceededProblem]]:
        """Create an instance of Problem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'GenericProblem':
            return import_module("openapi_client.models.generic_problem").GenericProblem.from_dict(obj)
        if object_type ==  'ClientDisconnectedProblem':
            return import_module("openapi_client.models.client_disconnected_problem").ClientDisconnectedProblem.from_dict(obj)
        if object_type ==  'ClientForbiddenProblem':
            return import_module("openapi_client.models.client_forbidden_problem").ClientForbiddenProblem.from_dict(obj)
        if object_type ==  'ConflictProblem':
            return import_module("openapi_client.models.conflict_problem").ConflictProblem.from_dict(obj)
        if object_type ==  'DisallowedResourceProblem':
            return import_module("openapi_client.models.disallowed_resource_problem").DisallowedResourceProblem.from_dict(obj)
        if object_type ==  'DuplicateRuleProblem':
            return import_module("openapi_client.models.duplicate_rule_problem").DuplicateRuleProblem.from_dict(obj)
        if object_type ==  'InvalidRequestProblem':
            return import_module("openapi_client.models.invalid_request_problem").InvalidRequestProblem.from_dict(obj)
        if object_type ==  'InvalidRuleProblem':
            return import_module("openapi_client.models.invalid_rule_problem").InvalidRuleProblem.from_dict(obj)
        if object_type ==  'NonCompliantRulesProblem':
            return import_module("openapi_client.models.non_compliant_rules_problem").NonCompliantRulesProblem.from_dict(obj)
        if object_type ==  'FieldUnauthorizedProblem':
            return import_module("openapi_client.models.field_unauthorized_problem").FieldUnauthorizedProblem.from_dict(obj)
        if object_type ==  'ResourceUnauthorizedProblem':
            return import_module("openapi_client.models.resource_unauthorized_problem").ResourceUnauthorizedProblem.from_dict(obj)
        if object_type ==  'Oauth1PermissionsProblem':
            return import_module("openapi_client.models.oauth1_permissions_problem").Oauth1PermissionsProblem.from_dict(obj)
        if object_type ==  'OperationalDisconnectProblem':
            return import_module("openapi_client.models.operational_disconnect_problem").OperationalDisconnectProblem.from_dict(obj)
        if object_type ==  'ResourceNotFoundProblem':
            return import_module("openapi_client.models.resource_not_found_problem").ResourceNotFoundProblem.from_dict(obj)
        if object_type ==  'ResourceUnavailableProblem':
            return import_module("openapi_client.models.resource_unavailable_problem").ResourceUnavailableProblem.from_dict(obj)
        if object_type ==  'RulesCapProblem':
            return import_module("openapi_client.models.rules_cap_problem").RulesCapProblem.from_dict(obj)
        if object_type ==  'ConnectionExceptionProblem':
            return import_module("openapi_client.models.connection_exception_problem").ConnectionExceptionProblem.from_dict(obj)
        if object_type ==  'UnsupportedAuthenticationProblem':
            return import_module("openapi_client.models.unsupported_authentication_problem").UnsupportedAuthenticationProblem.from_dict(obj)
        if object_type ==  'UsageCapExceededProblem':
            return import_module("openapi_client.models.usage_cap_exceeded_problem").UsageCapExceededProblem.from_dict(obj)

        raise ValueError("Problem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))



# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tweet_compliance_schema_tweet import TweetComplianceSchemaTweet
from typing import Optional, Set
from typing_extensions import Self

class TweetNotice(BaseModel):
    """
    TweetNotice
    """ # noqa: E501
    application: StrictStr = Field(description="If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.")
    details: Optional[StrictStr] = Field(default=None, description="Information shown on the Tweet label")
    event_at: datetime = Field(description="Event time.")
    event_type: StrictStr = Field(description="The type of label on the Tweet")
    extended_details_url: Optional[StrictStr] = Field(default=None, description="Link to more information about this kind of label")
    label_title: Optional[StrictStr] = Field(default=None, description="Title/header of the Tweet label")
    tweet: TweetComplianceSchemaTweet
    __properties: ClassVar[List[str]] = ["application", "details", "event_at", "event_type", "extended_details_url", "label_title", "tweet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TweetNotice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tweet
        if self.tweet:
            _dict['tweet'] = self.tweet.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TweetNotice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": obj.get("application"),
            "details": obj.get("details"),
            "event_at": obj.get("event_at"),
            "event_type": obj.get("event_type"),
            "extended_details_url": obj.get("extended_details_url"),
            "label_title": obj.get("label_title"),
            "tweet": TweetComplianceSchemaTweet.from_dict(obj["tweet"]) if obj.get("tweet") is not None else None
        })
        return _obj



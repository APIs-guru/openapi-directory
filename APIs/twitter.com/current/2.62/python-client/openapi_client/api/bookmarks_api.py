# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.bookmark_add_request import BookmarkAddRequest
from openapi_client.models.bookmark_mutation_response import BookmarkMutationResponse
from openapi_client.models.get2_users_id_bookmarks_response import Get2UsersIdBookmarksResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BookmarksApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_users_id_bookmarks(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User for whom to return results.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="This parameter is used to get the next 'page' of results.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        poll_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Poll fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        place_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Place fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2UsersIdBookmarksResponse:
        """Bookmarks by User

        Returns Tweet objects that have been bookmarked by the requesting User

        :param id: The ID of the authenticated source User for whom to return results. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get the next 'page' of results.
        :type pagination_token: str
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_id_bookmarks_serialize(
            id=id,
            max_results=max_results,
            pagination_token=pagination_token,
            tweet_fields=tweet_fields,
            expansions=expansions,
            media_fields=media_fields,
            poll_fields=poll_fields,
            user_fields=user_fields,
            place_fields=place_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2UsersIdBookmarksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_users_id_bookmarks_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User for whom to return results.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="This parameter is used to get the next 'page' of results.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        poll_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Poll fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        place_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Place fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2UsersIdBookmarksResponse]:
        """Bookmarks by User

        Returns Tweet objects that have been bookmarked by the requesting User

        :param id: The ID of the authenticated source User for whom to return results. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get the next 'page' of results.
        :type pagination_token: str
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_id_bookmarks_serialize(
            id=id,
            max_results=max_results,
            pagination_token=pagination_token,
            tweet_fields=tweet_fields,
            expansions=expansions,
            media_fields=media_fields,
            poll_fields=poll_fields,
            user_fields=user_fields,
            place_fields=place_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2UsersIdBookmarksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_users_id_bookmarks_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User for whom to return results.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description="This parameter is used to get the next 'page' of results.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        poll_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Poll fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        place_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Place fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bookmarks by User

        Returns Tweet objects that have been bookmarked by the requesting User

        :param id: The ID of the authenticated source User for whom to return results. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get the next 'page' of results.
        :type pagination_token: str
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_id_bookmarks_serialize(
            id=id,
            max_results=max_results,
            pagination_token=pagination_token,
            tweet_fields=tweet_fields,
            expansions=expansions,
            media_fields=media_fields,
            poll_fields=poll_fields,
            user_fields=user_fields,
            place_fields=place_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2UsersIdBookmarksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_users_id_bookmarks_serialize(
        self,
        id,
        max_results,
        pagination_token,
        tweet_fields,
        expansions,
        media_fields,
        poll_fields,
        user_fields,
        place_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tweet.fields': 'csv',
            'expansions': 'csv',
            'media.fields': 'csv',
            'poll.fields': 'csv',
            'user.fields': 'csv',
            'place.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if pagination_token is not None:
            
            _query_params.append(('pagination_token', pagination_token))
            
        if tweet_fields is not None:
            
            _query_params.append(('tweet.fields', tweet_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if media_fields is not None:
            
            _query_params.append(('media.fields', media_fields))
            
        if poll_fields is not None:
            
            _query_params.append(('poll.fields', poll_fields))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if place_fields is not None:
            
            _query_params.append(('place.fields', place_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/users/{id}/bookmarks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_id_bookmarks(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User for whom to add bookmarks.")],
        bookmark_add_request: BookmarkAddRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BookmarkMutationResponse:
        """Add Tweet to Bookmarks

        Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks

        :param id: The ID of the authenticated source User for whom to add bookmarks. (required)
        :type id: str
        :param bookmark_add_request: (required)
        :type bookmark_add_request: BookmarkAddRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_id_bookmarks_serialize(
            id=id,
            bookmark_add_request=bookmark_add_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BookmarkMutationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_id_bookmarks_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User for whom to add bookmarks.")],
        bookmark_add_request: BookmarkAddRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BookmarkMutationResponse]:
        """Add Tweet to Bookmarks

        Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks

        :param id: The ID of the authenticated source User for whom to add bookmarks. (required)
        :type id: str
        :param bookmark_add_request: (required)
        :type bookmark_add_request: BookmarkAddRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_id_bookmarks_serialize(
            id=id,
            bookmark_add_request=bookmark_add_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BookmarkMutationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_id_bookmarks_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User for whom to add bookmarks.")],
        bookmark_add_request: BookmarkAddRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add Tweet to Bookmarks

        Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks

        :param id: The ID of the authenticated source User for whom to add bookmarks. (required)
        :type id: str
        :param bookmark_add_request: (required)
        :type bookmark_add_request: BookmarkAddRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_id_bookmarks_serialize(
            id=id,
            bookmark_add_request=bookmark_add_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BookmarkMutationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_id_bookmarks_serialize(
        self,
        id,
        bookmark_add_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if bookmark_add_request is not None:
            _body_params = bookmark_add_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/2/users/{id}/bookmarks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def users_id_bookmarks_delete(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User whose bookmark is to be removed.")],
        tweet_id: Annotated[str, Field(strict=True, description="The ID of the Tweet that the source User is removing from bookmarks.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BookmarkMutationResponse:
        """Remove a bookmarked Tweet

        Removes a Tweet from the requesting User's bookmarked Tweets.

        :param id: The ID of the authenticated source User whose bookmark is to be removed. (required)
        :type id: str
        :param tweet_id: The ID of the Tweet that the source User is removing from bookmarks. (required)
        :type tweet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._users_id_bookmarks_delete_serialize(
            id=id,
            tweet_id=tweet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BookmarkMutationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def users_id_bookmarks_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User whose bookmark is to be removed.")],
        tweet_id: Annotated[str, Field(strict=True, description="The ID of the Tweet that the source User is removing from bookmarks.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BookmarkMutationResponse]:
        """Remove a bookmarked Tweet

        Removes a Tweet from the requesting User's bookmarked Tweets.

        :param id: The ID of the authenticated source User whose bookmark is to be removed. (required)
        :type id: str
        :param tweet_id: The ID of the Tweet that the source User is removing from bookmarks. (required)
        :type tweet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._users_id_bookmarks_delete_serialize(
            id=id,
            tweet_id=tweet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BookmarkMutationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def users_id_bookmarks_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the authenticated source User whose bookmark is to be removed.")],
        tweet_id: Annotated[str, Field(strict=True, description="The ID of the Tweet that the source User is removing from bookmarks.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove a bookmarked Tweet

        Removes a Tweet from the requesting User's bookmarked Tweets.

        :param id: The ID of the authenticated source User whose bookmark is to be removed. (required)
        :type id: str
        :param tweet_id: The ID of the Tweet that the source User is removing from bookmarks. (required)
        :type tweet_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._users_id_bookmarks_delete_serialize(
            id=id,
            tweet_id=tweet_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BookmarkMutationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _users_id_bookmarks_delete_serialize(
        self,
        id,
        tweet_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if tweet_id is not None:
            _path_params['tweet_id'] = tweet_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/2/users/{id}/bookmarks/{tweet_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.create_dm_conversation_request import CreateDmConversationRequest
from openapi_client.models.create_dm_event_response import CreateDmEventResponse
from openapi_client.models.create_message_request import CreateMessageRequest
from openapi_client.models.get2_dm_conversations_id_dm_events_response import Get2DmConversationsIdDmEventsResponse
from openapi_client.models.get2_dm_conversations_with_participant_id_dm_events_response import Get2DmConversationsWithParticipantIdDmEventsResponse
from openapi_client.models.get2_dm_events_response import Get2DmEventsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DirectMessagesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def dm_conversation_by_id_event_id_create(
        self,
        dm_conversation_id: Annotated[StrictStr, Field(description="The DM Conversation ID.")],
        create_message_request: Optional[CreateMessageRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateDmEventResponse:
        """Send a new message to a DM Conversation

        Creates a new message for a DM Conversation specified by DM Conversation ID

        :param dm_conversation_id: The DM Conversation ID. (required)
        :type dm_conversation_id: str
        :param create_message_request:
        :type create_message_request: CreateMessageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_by_id_event_id_create_serialize(
            dm_conversation_id=dm_conversation_id,
            create_message_request=create_message_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dm_conversation_by_id_event_id_create_with_http_info(
        self,
        dm_conversation_id: Annotated[StrictStr, Field(description="The DM Conversation ID.")],
        create_message_request: Optional[CreateMessageRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateDmEventResponse]:
        """Send a new message to a DM Conversation

        Creates a new message for a DM Conversation specified by DM Conversation ID

        :param dm_conversation_id: The DM Conversation ID. (required)
        :type dm_conversation_id: str
        :param create_message_request:
        :type create_message_request: CreateMessageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_by_id_event_id_create_serialize(
            dm_conversation_id=dm_conversation_id,
            create_message_request=create_message_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dm_conversation_by_id_event_id_create_without_preload_content(
        self,
        dm_conversation_id: Annotated[StrictStr, Field(description="The DM Conversation ID.")],
        create_message_request: Optional[CreateMessageRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send a new message to a DM Conversation

        Creates a new message for a DM Conversation specified by DM Conversation ID

        :param dm_conversation_id: The DM Conversation ID. (required)
        :type dm_conversation_id: str
        :param create_message_request:
        :type create_message_request: CreateMessageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_by_id_event_id_create_serialize(
            dm_conversation_id=dm_conversation_id,
            create_message_request=create_message_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dm_conversation_by_id_event_id_create_serialize(
        self,
        dm_conversation_id,
        create_message_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if dm_conversation_id is not None:
            _path_params['dm_conversation_id'] = dm_conversation_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_message_request is not None:
            _body_params = create_message_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'UserToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/2/dm_conversations/{dm_conversation_id}/messages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dm_conversation_id_create(
        self,
        create_dm_conversation_request: Optional[CreateDmConversationRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateDmEventResponse:
        """Create a new DM Conversation

        Creates a new DM Conversation.

        :param create_dm_conversation_request:
        :type create_dm_conversation_request: CreateDmConversationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_id_create_serialize(
            create_dm_conversation_request=create_dm_conversation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dm_conversation_id_create_with_http_info(
        self,
        create_dm_conversation_request: Optional[CreateDmConversationRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateDmEventResponse]:
        """Create a new DM Conversation

        Creates a new DM Conversation.

        :param create_dm_conversation_request:
        :type create_dm_conversation_request: CreateDmConversationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_id_create_serialize(
            create_dm_conversation_request=create_dm_conversation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dm_conversation_id_create_without_preload_content(
        self,
        create_dm_conversation_request: Optional[CreateDmConversationRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new DM Conversation

        Creates a new DM Conversation.

        :param create_dm_conversation_request:
        :type create_dm_conversation_request: CreateDmConversationRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_id_create_serialize(
            create_dm_conversation_request=create_dm_conversation_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dm_conversation_id_create_serialize(
        self,
        create_dm_conversation_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_dm_conversation_request is not None:
            _body_params = create_dm_conversation_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'UserToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/2/dm_conversations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dm_conversation_with_user_event_id_create(
        self,
        participant_id: Annotated[str, Field(strict=True, description="The ID of the recipient user that will receive the DM.")],
        create_message_request: Optional[CreateMessageRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateDmEventResponse:
        """Send a new message to a user

        Creates a new message for a DM Conversation with a participant user by ID

        :param participant_id: The ID of the recipient user that will receive the DM. (required)
        :type participant_id: str
        :param create_message_request:
        :type create_message_request: CreateMessageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_with_user_event_id_create_serialize(
            participant_id=participant_id,
            create_message_request=create_message_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dm_conversation_with_user_event_id_create_with_http_info(
        self,
        participant_id: Annotated[str, Field(strict=True, description="The ID of the recipient user that will receive the DM.")],
        create_message_request: Optional[CreateMessageRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateDmEventResponse]:
        """Send a new message to a user

        Creates a new message for a DM Conversation with a participant user by ID

        :param participant_id: The ID of the recipient user that will receive the DM. (required)
        :type participant_id: str
        :param create_message_request:
        :type create_message_request: CreateMessageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_with_user_event_id_create_serialize(
            participant_id=participant_id,
            create_message_request=create_message_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dm_conversation_with_user_event_id_create_without_preload_content(
        self,
        participant_id: Annotated[str, Field(strict=True, description="The ID of the recipient user that will receive the DM.")],
        create_message_request: Optional[CreateMessageRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send a new message to a user

        Creates a new message for a DM Conversation with a participant user by ID

        :param participant_id: The ID of the recipient user that will receive the DM. (required)
        :type participant_id: str
        :param create_message_request:
        :type create_message_request: CreateMessageRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dm_conversation_with_user_event_id_create_serialize(
            participant_id=participant_id,
            create_message_request=create_message_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDmEventResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dm_conversation_with_user_event_id_create_serialize(
        self,
        participant_id,
        create_message_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if participant_id is not None:
            _path_params['participant_id'] = participant_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_message_request is not None:
            _body_params = create_message_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'UserToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/2/dm_conversations/with/{participant_id}/messages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dm_conversations_id_dm_events(
        self,
        id: Annotated[str, Field(strict=True, description="The DM Conversation ID.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2DmConversationsIdDmEventsResponse:
        """Get DM Events for a DM Conversation

        Returns DM Events for a DM Conversation

        :param id: The DM Conversation ID. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_conversations_id_dm_events_serialize(
            id=id,
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmConversationsIdDmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dm_conversations_id_dm_events_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="The DM Conversation ID.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2DmConversationsIdDmEventsResponse]:
        """Get DM Events for a DM Conversation

        Returns DM Events for a DM Conversation

        :param id: The DM Conversation ID. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_conversations_id_dm_events_serialize(
            id=id,
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmConversationsIdDmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dm_conversations_id_dm_events_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="The DM Conversation ID.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get DM Events for a DM Conversation

        Returns DM Events for a DM Conversation

        :param id: The DM Conversation ID. (required)
        :type id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_conversations_id_dm_events_serialize(
            id=id,
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmConversationsIdDmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dm_conversations_id_dm_events_serialize(
        self,
        id,
        max_results,
        pagination_token,
        event_types,
        dm_event_fields,
        expansions,
        media_fields,
        user_fields,
        tweet_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'event_types': 'csv',
            'dm_event.fields': 'csv',
            'expansions': 'csv',
            'media.fields': 'csv',
            'user.fields': 'csv',
            'tweet.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if pagination_token is not None:
            
            _query_params.append(('pagination_token', pagination_token))
            
        if event_types is not None:
            
            _query_params.append(('event_types', event_types))
            
        if dm_event_fields is not None:
            
            _query_params.append(('dm_event.fields', dm_event_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if media_fields is not None:
            
            _query_params.append(('media.fields', media_fields))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if tweet_fields is not None:
            
            _query_params.append(('tweet.fields', tweet_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'UserToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/dm_conversations/{id}/dm_events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dm_conversations_with_participant_id_dm_events(
        self,
        participant_id: Annotated[str, Field(strict=True, description="The ID of the participant user for the One to One DM conversation.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2DmConversationsWithParticipantIdDmEventsResponse:
        """Get DM Events for a DM Conversation

        Returns DM Events for a DM Conversation

        :param participant_id: The ID of the participant user for the One to One DM conversation. (required)
        :type participant_id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_conversations_with_participant_id_dm_events_serialize(
            participant_id=participant_id,
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmConversationsWithParticipantIdDmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dm_conversations_with_participant_id_dm_events_with_http_info(
        self,
        participant_id: Annotated[str, Field(strict=True, description="The ID of the participant user for the One to One DM conversation.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2DmConversationsWithParticipantIdDmEventsResponse]:
        """Get DM Events for a DM Conversation

        Returns DM Events for a DM Conversation

        :param participant_id: The ID of the participant user for the One to One DM conversation. (required)
        :type participant_id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_conversations_with_participant_id_dm_events_serialize(
            participant_id=participant_id,
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmConversationsWithParticipantIdDmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dm_conversations_with_participant_id_dm_events_without_preload_content(
        self,
        participant_id: Annotated[str, Field(strict=True, description="The ID of the participant user for the One to One DM conversation.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get DM Events for a DM Conversation

        Returns DM Events for a DM Conversation

        :param participant_id: The ID of the participant user for the One to One DM conversation. (required)
        :type participant_id: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_conversations_with_participant_id_dm_events_serialize(
            participant_id=participant_id,
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmConversationsWithParticipantIdDmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dm_conversations_with_participant_id_dm_events_serialize(
        self,
        participant_id,
        max_results,
        pagination_token,
        event_types,
        dm_event_fields,
        expansions,
        media_fields,
        user_fields,
        tweet_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'event_types': 'csv',
            'dm_event.fields': 'csv',
            'expansions': 'csv',
            'media.fields': 'csv',
            'user.fields': 'csv',
            'tweet.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if participant_id is not None:
            _path_params['participant_id'] = participant_id
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if pagination_token is not None:
            
            _query_params.append(('pagination_token', pagination_token))
            
        if event_types is not None:
            
            _query_params.append(('event_types', event_types))
            
        if dm_event_fields is not None:
            
            _query_params.append(('dm_event.fields', dm_event_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if media_fields is not None:
            
            _query_params.append(('media.fields', media_fields))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if tweet_fields is not None:
            
            _query_params.append(('tweet.fields', tweet_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'UserToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/dm_conversations/with/{participant_id}/dm_events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_dm_events(
        self,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2DmEventsResponse:
        """Get recent DM Events

        Returns recent DM Events across DM conversations

        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_events_serialize(
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_dm_events_with_http_info(
        self,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2DmEventsResponse]:
        """Get recent DM Events

        Returns recent DM Events across DM conversations

        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_events_serialize(
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_dm_events_without_preload_content(
        self,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        event_types: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="The set of event_types to include in the results.")] = None,
        dm_event_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of DmEvent fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get recent DM Events

        Returns recent DM Events across DM conversations

        :param max_results: The maximum number of results.
        :type max_results: int
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param event_types: The set of event_types to include in the results.
        :type event_types: List[str]
        :param dm_event_fields: A comma separated list of DmEvent fields to display.
        :type dm_event_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_dm_events_serialize(
            max_results=max_results,
            pagination_token=pagination_token,
            event_types=event_types,
            dm_event_fields=dm_event_fields,
            expansions=expansions,
            media_fields=media_fields,
            user_fields=user_fields,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2DmEventsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_dm_events_serialize(
        self,
        max_results,
        pagination_token,
        event_types,
        dm_event_fields,
        expansions,
        media_fields,
        user_fields,
        tweet_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'event_types': 'csv',
            'dm_event.fields': 'csv',
            'expansions': 'csv',
            'media.fields': 'csv',
            'user.fields': 'csv',
            'tweet.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if pagination_token is not None:
            
            _query_params.append(('pagination_token', pagination_token))
            
        if event_types is not None:
            
            _query_params.append(('event_types', event_types))
            
        if dm_event_fields is not None:
            
            _query_params.append(('dm_event.fields', dm_event_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if media_fields is not None:
            
            _query_params.append(('media.fields', media_fields))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if tweet_fields is not None:
            
            _query_params.append(('tweet.fields', tweet_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'UserToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/dm_events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



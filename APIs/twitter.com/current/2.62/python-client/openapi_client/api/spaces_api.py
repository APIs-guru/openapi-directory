# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.62
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.get2_spaces_by_creator_ids_response import Get2SpacesByCreatorIdsResponse
from openapi_client.models.get2_spaces_id_buyers_response import Get2SpacesIdBuyersResponse
from openapi_client.models.get2_spaces_id_response import Get2SpacesIdResponse
from openapi_client.models.get2_spaces_id_tweets_response import Get2SpacesIdTweetsResponse
from openapi_client.models.get2_spaces_response import Get2SpacesResponse
from openapi_client.models.get2_spaces_search_response import Get2SpacesSearchResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SpacesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_space_by_id(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2SpacesIdResponse:
        """Space lookup by Space ID

        Returns a variety of information about the Space specified by the requested ID

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_space_by_id_serialize(
            id=id,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_space_by_id_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2SpacesIdResponse]:
        """Space lookup by Space ID

        Returns a variety of information about the Space specified by the requested ID

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_space_by_id_serialize(
            id=id,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_space_by_id_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Space lookup by Space ID

        Returns a variety of information about the Space specified by the requested ID

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_space_by_id_serialize(
            id=id,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_space_by_id_serialize(
        self,
        id,
        space_fields,
        expansions,
        user_fields,
        topic_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'space.fields': 'csv',
            'expansions': 'csv',
            'user.fields': 'csv',
            'topic.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if space_fields is not None:
            
            _query_params.append(('space.fields', space_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if topic_fields is not None:
            
            _query_params.append(('topic.fields', topic_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'BearerToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/spaces/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_spaces_by_creator_ids(
        self,
        user_ids: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=100, description="The IDs of Users to search through.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2SpacesByCreatorIdsResponse:
        """Space lookup by their creators

        Returns a variety of information about the Spaces created by the provided User IDs

        :param user_ids: The IDs of Users to search through. (required)
        :type user_ids: List[str]
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_spaces_by_creator_ids_serialize(
            user_ids=user_ids,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesByCreatorIdsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_spaces_by_creator_ids_with_http_info(
        self,
        user_ids: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=100, description="The IDs of Users to search through.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2SpacesByCreatorIdsResponse]:
        """Space lookup by their creators

        Returns a variety of information about the Spaces created by the provided User IDs

        :param user_ids: The IDs of Users to search through. (required)
        :type user_ids: List[str]
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_spaces_by_creator_ids_serialize(
            user_ids=user_ids,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesByCreatorIdsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_spaces_by_creator_ids_without_preload_content(
        self,
        user_ids: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=100, description="The IDs of Users to search through.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Space lookup by their creators

        Returns a variety of information about the Spaces created by the provided User IDs

        :param user_ids: The IDs of Users to search through. (required)
        :type user_ids: List[str]
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_spaces_by_creator_ids_serialize(
            user_ids=user_ids,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesByCreatorIdsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_spaces_by_creator_ids_serialize(
        self,
        user_ids,
        space_fields,
        expansions,
        user_fields,
        topic_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'user_ids': 'multi',
            'space.fields': 'csv',
            'expansions': 'csv',
            'user.fields': 'csv',
            'topic.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if user_ids is not None:
            
            _query_params.append(('user_ids', user_ids))
            
        if space_fields is not None:
            
            _query_params.append(('space.fields', space_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if topic_fields is not None:
            
            _query_params.append(('topic.fields', topic_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'BearerToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/spaces/by/creator_ids',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_spaces_by_ids(
        self,
        ids: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=100, description="The list of Space IDs to return.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2SpacesResponse:
        """Space lookup up Space IDs

        Returns a variety of information about the Spaces specified by the requested IDs

        :param ids: The list of Space IDs to return. (required)
        :type ids: List[str]
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_spaces_by_ids_serialize(
            ids=ids,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_spaces_by_ids_with_http_info(
        self,
        ids: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=100, description="The list of Space IDs to return.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2SpacesResponse]:
        """Space lookup up Space IDs

        Returns a variety of information about the Spaces specified by the requested IDs

        :param ids: The list of Space IDs to return. (required)
        :type ids: List[str]
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_spaces_by_ids_serialize(
            ids=ids,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_spaces_by_ids_without_preload_content(
        self,
        ids: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=100, description="The list of Space IDs to return.")],
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Space lookup up Space IDs

        Returns a variety of information about the Spaces specified by the requested IDs

        :param ids: The list of Space IDs to return. (required)
        :type ids: List[str]
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_spaces_by_ids_serialize(
            ids=ids,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_spaces_by_ids_serialize(
        self,
        ids,
        space_fields,
        expansions,
        user_fields,
        topic_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'ids': 'multi',
            'space.fields': 'csv',
            'expansions': 'csv',
            'user.fields': 'csv',
            'topic.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if space_fields is not None:
            
            _query_params.append(('space.fields', space_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if topic_fields is not None:
            
            _query_params.append(('topic.fields', topic_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'BearerToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/spaces',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_spaces(
        self,
        query: Annotated[str, Field(min_length=1, strict=True, max_length=2048, description="The search query.")],
        state: Annotated[Optional[StrictStr], Field(description="The state of Spaces to search for.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of results to return.")] = None,
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2SpacesSearchResponse:
        """Search for Spaces

        Returns Spaces that match the provided query.

        :param query: The search query. (required)
        :type query: str
        :param state: The state of Spaces to search for.
        :type state: str
        :param max_results: The number of results to return.
        :type max_results: int
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_spaces_serialize(
            query=query,
            state=state,
            max_results=max_results,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_spaces_with_http_info(
        self,
        query: Annotated[str, Field(min_length=1, strict=True, max_length=2048, description="The search query.")],
        state: Annotated[Optional[StrictStr], Field(description="The state of Spaces to search for.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of results to return.")] = None,
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2SpacesSearchResponse]:
        """Search for Spaces

        Returns Spaces that match the provided query.

        :param query: The search query. (required)
        :type query: str
        :param state: The state of Spaces to search for.
        :type state: str
        :param max_results: The number of results to return.
        :type max_results: int
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_spaces_serialize(
            query=query,
            state=state,
            max_results=max_results,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_spaces_without_preload_content(
        self,
        query: Annotated[str, Field(min_length=1, strict=True, max_length=2048, description="The search query.")],
        state: Annotated[Optional[StrictStr], Field(description="The state of Spaces to search for.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of results to return.")] = None,
        space_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Space fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        topic_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Topic fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for Spaces

        Returns Spaces that match the provided query.

        :param query: The search query. (required)
        :type query: str
        :param state: The state of Spaces to search for.
        :type state: str
        :param max_results: The number of results to return.
        :type max_results: int
        :param space_fields: A comma separated list of Space fields to display.
        :type space_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param topic_fields: A comma separated list of Topic fields to display.
        :type topic_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_spaces_serialize(
            query=query,
            state=state,
            max_results=max_results,
            space_fields=space_fields,
            expansions=expansions,
            user_fields=user_fields,
            topic_fields=topic_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_spaces_serialize(
        self,
        query,
        state,
        max_results,
        space_fields,
        expansions,
        user_fields,
        topic_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'space.fields': 'csv',
            'expansions': 'csv',
            'user.fields': 'csv',
            'topic.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if space_fields is not None:
            
            _query_params.append(('space.fields', space_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if topic_fields is not None:
            
            _query_params.append(('topic.fields', topic_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'BearerToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/spaces/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def space_buyers(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2SpacesIdBuyersResponse:
        """Retrieve the list of Users who purchased a ticket to the given space

        Retrieves the list of Users who purchased a ticket to the given space

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._space_buyers_serialize(
            id=id,
            pagination_token=pagination_token,
            max_results=max_results,
            user_fields=user_fields,
            expansions=expansions,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdBuyersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def space_buyers_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2SpacesIdBuyersResponse]:
        """Retrieve the list of Users who purchased a ticket to the given space

        Retrieves the list of Users who purchased a ticket to the given space

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._space_buyers_serialize(
            id=id,
            pagination_token=pagination_token,
            max_results=max_results,
            user_fields=user_fields,
            expansions=expansions,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdBuyersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def space_buyers_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        pagination_token: Annotated[Optional[Annotated[str, Field(min_length=16, strict=True)]], Field(description="This parameter is used to get a specified 'page' of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum number of results.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve the list of Users who purchased a ticket to the given space

        Retrieves the list of Users who purchased a ticket to the given space

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param pagination_token: This parameter is used to get a specified 'page' of results.
        :type pagination_token: str
        :param max_results: The maximum number of results.
        :type max_results: int
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._space_buyers_serialize(
            id=id,
            pagination_token=pagination_token,
            max_results=max_results,
            user_fields=user_fields,
            expansions=expansions,
            tweet_fields=tweet_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdBuyersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _space_buyers_serialize(
        self,
        id,
        pagination_token,
        max_results,
        user_fields,
        expansions,
        tweet_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'user.fields': 'csv',
            'expansions': 'csv',
            'tweet.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if pagination_token is not None:
            
            _query_params.append(('pagination_token', pagination_token))
            
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if tweet_fields is not None:
            
            _query_params.append(('tweet.fields', tweet_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/spaces/{id}/buyers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def space_tweets(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        poll_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Poll fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        place_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Place fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Get2SpacesIdTweetsResponse:
        """Retrieve Tweets from a Space.

        Retrieves Tweets shared in the specified Space.

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param max_results: The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
        :type max_results: int
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._space_tweets_serialize(
            id=id,
            max_results=max_results,
            tweet_fields=tweet_fields,
            expansions=expansions,
            media_fields=media_fields,
            poll_fields=poll_fields,
            user_fields=user_fields,
            place_fields=place_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdTweetsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def space_tweets_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        poll_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Poll fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        place_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Place fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Get2SpacesIdTweetsResponse]:
        """Retrieve Tweets from a Space.

        Retrieves Tweets shared in the specified Space.

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param max_results: The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
        :type max_results: int
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._space_tweets_serialize(
            id=id,
            max_results=max_results,
            tweet_fields=tweet_fields,
            expansions=expansions,
            media_fields=media_fields,
            poll_fields=poll_fields,
            user_fields=user_fields,
            place_fields=place_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdTweetsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def space_tweets_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="The ID of the Space to be retrieved.")],
        max_results: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.")] = None,
        tweet_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Tweet fields to display.")] = None,
        expansions: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of fields to expand.")] = None,
        media_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Media fields to display.")] = None,
        poll_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Poll fields to display.")] = None,
        user_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of User fields to display.")] = None,
        place_fields: Annotated[Optional[Annotated[List[StrictStr], Field(min_length=1)]], Field(description="A comma separated list of Place fields to display.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve Tweets from a Space.

        Retrieves Tweets shared in the specified Space.

        :param id: The ID of the Space to be retrieved. (required)
        :type id: str
        :param max_results: The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
        :type max_results: int
        :param tweet_fields: A comma separated list of Tweet fields to display.
        :type tweet_fields: List[str]
        :param expansions: A comma separated list of fields to expand.
        :type expansions: List[str]
        :param media_fields: A comma separated list of Media fields to display.
        :type media_fields: List[str]
        :param poll_fields: A comma separated list of Poll fields to display.
        :type poll_fields: List[str]
        :param user_fields: A comma separated list of User fields to display.
        :type user_fields: List[str]
        :param place_fields: A comma separated list of Place fields to display.
        :type place_fields: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._space_tweets_serialize(
            id=id,
            max_results=max_results,
            tweet_fields=tweet_fields,
            expansions=expansions,
            media_fields=media_fields,
            poll_fields=poll_fields,
            user_fields=user_fields,
            place_fields=place_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Get2SpacesIdTweetsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _space_tweets_serialize(
        self,
        id,
        max_results,
        tweet_fields,
        expansions,
        media_fields,
        poll_fields,
        user_fields,
        place_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tweet.fields': 'csv',
            'expansions': 'csv',
            'media.fields': 'csv',
            'poll.fields': 'csv',
            'user.fields': 'csv',
            'place.fields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('max_results', max_results))
            
        if tweet_fields is not None:
            
            _query_params.append(('tweet.fields', tweet_fields))
            
        if expansions is not None:
            
            _query_params.append(('expansions', expansions))
            
        if media_fields is not None:
            
            _query_params.append(('media.fields', media_fields))
            
        if poll_fields is not None:
            
            _query_params.append(('poll.fields', poll_fields))
            
        if user_fields is not None:
            
            _query_params.append(('user.fields', user_fields))
            
        if place_fields is not None:
            
            _query_params.append(('place.fields', place_fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2UserToken', 
            'BearerToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/2/spaces/{id}/tweets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    IP2Location IP Geolocation

    IP2Location web service providing a service to do a reverse lookup of an IP address to an ISO3166 country code, region or state, city, latitude and longitude, ZIP/Postal code, time zone, Internet Service Provider (ISP) or company name, domain name, net speed, area code, weather station code, weather station name, mobile country code (MCC), mobile network code (MNC) and carrier brand, elevation, usage type, address type and IAB category. There are also 7 categories of additional add-on response fields supported such as metro, olson time zone, translations and more. Refer to https://www.ip2location.com/web-service/ip2location for further information.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def root_get(
        self,
        ip: Annotated[StrictStr, Field(description="IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup.")],
        key: Annotated[StrictStr, Field(description="API Key. Please sign up free trial license key at ip2location.com")],
        package: Annotated[Optional[StrictStr], Field(description="Web service package of different granularity of return information.")] = None,
        addon: Annotated[Optional[List[StrictStr]], Field(description="Extra information in addition to the above selected package.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format of the response message.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Translation information. The translation only applicable for continent, country, region and city name for the addon package.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """root_get

        Get geolocation information via IP address

        :param ip: IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup. (required)
        :type ip: str
        :param key: API Key. Please sign up free trial license key at ip2location.com (required)
        :type key: str
        :param package: Web service package of different granularity of return information.
        :type package: str
        :param addon: Extra information in addition to the above selected package.
        :type addon: List[str]
        :param format: Format of the response message.
        :type format: str
        :param lang: Translation information. The translation only applicable for continent, country, region and city name for the addon package.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_get_serialize(
            ip=ip,
            key=key,
            package=package,
            addon=addon,
            format=format,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def root_get_with_http_info(
        self,
        ip: Annotated[StrictStr, Field(description="IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup.")],
        key: Annotated[StrictStr, Field(description="API Key. Please sign up free trial license key at ip2location.com")],
        package: Annotated[Optional[StrictStr], Field(description="Web service package of different granularity of return information.")] = None,
        addon: Annotated[Optional[List[StrictStr]], Field(description="Extra information in addition to the above selected package.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format of the response message.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Translation information. The translation only applicable for continent, country, region and city name for the addon package.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """root_get

        Get geolocation information via IP address

        :param ip: IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup. (required)
        :type ip: str
        :param key: API Key. Please sign up free trial license key at ip2location.com (required)
        :type key: str
        :param package: Web service package of different granularity of return information.
        :type package: str
        :param addon: Extra information in addition to the above selected package.
        :type addon: List[str]
        :param format: Format of the response message.
        :type format: str
        :param lang: Translation information. The translation only applicable for continent, country, region and city name for the addon package.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_get_serialize(
            ip=ip,
            key=key,
            package=package,
            addon=addon,
            format=format,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def root_get_without_preload_content(
        self,
        ip: Annotated[StrictStr, Field(description="IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup.")],
        key: Annotated[StrictStr, Field(description="API Key. Please sign up free trial license key at ip2location.com")],
        package: Annotated[Optional[StrictStr], Field(description="Web service package of different granularity of return information.")] = None,
        addon: Annotated[Optional[List[StrictStr]], Field(description="Extra information in addition to the above selected package.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format of the response message.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="Translation information. The translation only applicable for continent, country, region and city name for the addon package.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """root_get

        Get geolocation information via IP address

        :param ip: IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup. (required)
        :type ip: str
        :param key: API Key. Please sign up free trial license key at ip2location.com (required)
        :type key: str
        :param package: Web service package of different granularity of return information.
        :type package: str
        :param addon: Extra information in addition to the above selected package.
        :type addon: List[str]
        :param format: Format of the response message.
        :type format: str
        :param lang: Translation information. The translation only applicable for continent, country, region and city name for the addon package.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_get_serialize(
            ip=ip,
            key=key,
            package=package,
            addon=addon,
            format=format,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _root_get_serialize(
        self,
        ip,
        key,
        package,
        addon,
        format,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'addon': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if package is not None:
            
            _query_params.append(('package', package))
            
        if addon is not None:
            
            _query_params.append(('addon', addon))
            
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



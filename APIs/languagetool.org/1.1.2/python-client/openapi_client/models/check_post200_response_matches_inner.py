# coding: utf-8

"""
    LanguageTool API

    Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.

    The version of the OpenAPI document: 1.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.check_post200_response_matches_inner_context import CheckPost200ResponseMatchesInnerContext
from openapi_client.models.check_post200_response_matches_inner_replacements_inner import CheckPost200ResponseMatchesInnerReplacementsInner
from openapi_client.models.check_post200_response_matches_inner_rule import CheckPost200ResponseMatchesInnerRule
from typing import Optional, Set
from typing_extensions import Self

class CheckPost200ResponseMatchesInner(BaseModel):
    """
    CheckPost200ResponseMatchesInner
    """ # noqa: E501
    context: CheckPost200ResponseMatchesInnerContext
    length: StrictInt = Field(description="The length of the error in characters.")
    message: StrictStr = Field(description="Message about the error displayed to the user.")
    offset: StrictInt = Field(description="The 0-based character offset of the error in the text.")
    replacements: List[CheckPost200ResponseMatchesInnerReplacementsInner] = Field(description="Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.")
    rule: Optional[CheckPost200ResponseMatchesInnerRule] = None
    sentence: StrictStr = Field(description="The sentence the error occurred in (since LanguageTool 4.0 or later)")
    short_message: Optional[StrictStr] = Field(default=None, description="An optional shorter version of 'message'.", alias="shortMessage")
    __properties: ClassVar[List[str]] = ["context", "length", "message", "offset", "replacements", "rule", "sentence", "shortMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckPost200ResponseMatchesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in replacements (list)
        _items = []
        if self.replacements:
            for _item_replacements in self.replacements:
                if _item_replacements:
                    _items.append(_item_replacements.to_dict())
            _dict['replacements'] = _items
        # override the default output from pydantic by calling `to_dict()` of rule
        if self.rule:
            _dict['rule'] = self.rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckPost200ResponseMatchesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": CheckPost200ResponseMatchesInnerContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "length": obj.get("length"),
            "message": obj.get("message"),
            "offset": obj.get("offset"),
            "replacements": [CheckPost200ResponseMatchesInnerReplacementsInner.from_dict(_item) for _item in obj["replacements"]] if obj.get("replacements") is not None else None,
            "rule": CheckPost200ResponseMatchesInnerRule.from_dict(obj["rule"]) if obj.get("rule") is not None else None,
            "sentence": obj.get("sentence"),
            "shortMessage": obj.get("shortMessage")
        })
        return _obj



# coding: utf-8

"""
    LanguageTool API

    Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.

    The version of the OpenAPI document: 1.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.check_post200_response import CheckPost200Response

class TestCheckPost200Response(unittest.TestCase):
    """CheckPost200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CheckPost200Response:
        """Test CheckPost200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CheckPost200Response`
        """
        model = CheckPost200Response()
        if include_optional:
            return CheckPost200Response(
                language = openapi_client.models._check_post_200_response_language._check_post_200_response_language(
                    code = '', 
                    detected_language = openapi_client.models._check_post_200_response_language_detected_language._check_post_200_response_language_detectedLanguage(
                        code = '', 
                        name = '', ), 
                    name = '', ),
                matches = [
                    openapi_client.models._check_post_200_response_matches_inner._check_post_200_response_matches_inner(
                        context = openapi_client.models._check_post_200_response_matches_inner_context._check_post_200_response_matches_inner_context(
                            length = 56, 
                            offset = 56, 
                            text = '', ), 
                        length = 56, 
                        message = '', 
                        offset = 56, 
                        replacements = [
                            openapi_client.models._check_post_200_response_matches_inner_replacements_inner._check_post_200_response_matches_inner_replacements_inner(
                                value = '', )
                            ], 
                        rule = openapi_client.models._check_post_200_response_matches_inner_rule._check_post_200_response_matches_inner_rule(
                            category = openapi_client.models._check_post_200_response_matches_inner_rule_category._check_post_200_response_matches_inner_rule_category(
                                id = '', 
                                name = '', ), 
                            description = '', 
                            id = '', 
                            issue_type = '', 
                            sub_id = '', 
                            urls = [
                                openapi_client.models._check_post_200_response_matches_inner_rule_urls_inner._check_post_200_response_matches_inner_rule_urls_inner(
                                    value = '', )
                                ], ), 
                        sentence = '', 
                        short_message = '', )
                    ],
                software = openapi_client.models._check_post_200_response_software._check_post_200_response_software(
                    api_version = 56, 
                    build_date = '', 
                    name = '', 
                    premium = True, 
                    status = '', 
                    version = '', )
            )
        else:
            return CheckPost200Response(
        )
        """

    def testCheckPost200Response(self):
        """Test CheckPost200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

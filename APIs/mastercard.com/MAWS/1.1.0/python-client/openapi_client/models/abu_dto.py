# coding: utf-8

"""
    MasterCard ABU API

    Mastercard ABU API

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AbuDTO(BaseModel):
    """
    AbuDTO
    """ # noqa: E501
    discretionary_data: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=10)]] = Field(default=None, description="Optional data that can be used by the requested for matching to the original inquiry.", alias="discretionaryData")
    ica: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=11)]] = Field(default=None, description="<p class='suffix-required' style='margin-bottom:5px'>[This field is required when the multiple ICAs are registered under the same client key.]</p>Data that can be used to inform the ICA number: Interbank Card Association.")
    merchant_id: Annotated[str, Field(min_length=15, strict=True, max_length=15)] = Field(description="Registered merchant ID that is mapped to the Customer ID.", alias="merchantId")
    old_account_number: Annotated[str, Field(min_length=16, strict=True, max_length=19)] = Field(description="Account number on file provided by merchant.", alias="oldAccountNumber")
    old_expiration_date: Annotated[str, Field(min_length=4, strict=True, max_length=4)] = Field(description="Account number expiration date on file provided by merchant that must be in MMYY format.", alias="oldExpirationDate")
    sub_merchant_id: Optional[Annotated[str, Field(min_length=15, strict=True, max_length=15)]] = Field(default=None, description="Optionally populated when the merchant ID is actually a previously populated payment facilitator or payment aggregator.", alias="subMerchantId")
    subscribe: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=12)]] = Field(default=None, description="<p class=\"suffix-required\" style=\"margin-bottom:5px\">[Field used by Push Model only - REQUIRED]</p>Optional data that can be used to subscribe, un-subscribe or query subscription status for PAN updates. Valid values are \"subscribe\", \"un-subscribe\" and \"query\".")
    __properties: ClassVar[List[str]] = ["discretionaryData", "ica", "merchantId", "oldAccountNumber", "oldExpirationDate", "subMerchantId", "subscribe"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AbuDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AbuDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "discretionaryData": obj.get("discretionaryData"),
            "ica": obj.get("ica"),
            "merchantId": obj.get("merchantId"),
            "oldAccountNumber": obj.get("oldAccountNumber"),
            "oldExpirationDate": obj.get("oldExpirationDate"),
            "subMerchantId": obj.get("subMerchantId"),
            "subscribe": obj.get("subscribe")
        })
        return _obj



# coding: utf-8

"""
    Spending Pulse

    This API will provide monthly data which includes metrics such as sales volume and growth rate.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GasWeeklyRecord(BaseModel):
    """
    GasWeeklyRecord
    """ # noqa: E501
    average_price_per_gal_regular_gasoline: Optional[StrictStr] = Field(default=None, description="Average price at the pump for all gallons sold during the reporting week.", alias="AveragePricePerGalRegularGasoline")
    country: Optional[StrictStr] = Field(default=None, description="Country Code.", alias="Country")
    padd_code: Optional[StrictStr] = Field(default=None, description="PADD (Petroleum Administration for Defense Districts) are defined by the U.S. Energy Information Administration. The PADD Districts are New England, Central Atlantic, Lower Atlantic, Midwest, Gulf Coast, Rocky Mountain, West Coast.", alias="PADDCode")
    padd_millionsof_barrels_sold: Optional[StrictStr] = Field(default=None, description="For the PADD being reported, the estimated number of barrels (42 U.S. gallons) of regular motor gasoline (includes all finished motor gasoline grades and formulations or blends . It does not contain diesel nor aviation fuel.) sold during the week.", alias="PADDMillionsofBarrelsSold")
    padd_percent_change_in_barrels_from_prior_week: Optional[StrictStr] = Field(default=None, description="The percent change from one week ago in the PADDMillionsofBarrelsSold.", alias="PADDPercentChangeInBarrelsFromPriorWeek")
    padd_percent_changein_barrelsfrom52_weeks_ago: Optional[StrictStr] = Field(default=None, description="The percent change from 52 weeks ago in the PADDMillionsofBarrelsSold.", alias="PADDPercentChangeinBarrelsfrom52WeeksAgo")
    period: Optional[StrictStr] = Field(default=None, description="Indicates the period covered by the data with possible values of - day, week, month, quarter, annual", alias="Period")
    product_line: Optional[StrictStr] = Field(default=None, description="Overall product line that the report belongs to, the only report for this resource is US Weekly Gasoline Demand Report.", alias="ProductLine")
    publication_coverage_period: Optional[StrictStr] = Field(default=None, description="Publication Coverage Period indicates what period is to be covered.  For this report it will include the gasoline week ending date which will always be a Friday.", alias="PublicationCoveragePeriod")
    report_type: Optional[StrictStr] = Field(default=None, description="Report type name, today the only report supported is \"monitor\".", alias="ReportType")
    sector: Optional[StrictStr] = Field(default=None, description="Gas", alias="Sector")
    segment: Optional[StrictStr] = Field(default=None, description="Not used.", alias="Segment")
    sub_sector: Optional[StrictStr] = Field(default=None, description="Not used.", alias="SubSector")
    total_barrels_change_from_prior_week: Optional[StrictStr] = Field(default=None, description="Change in TotalMillionsOfBarrelsSold from one week ago.", alias="TotalBarrelsChangeFromPriorWeek")
    total_millions_of_barrels4_week_average: Optional[StrictStr] = Field(default=None, description="Average millions of barrels of gasoline sold per week during the prior 4 weeks.", alias="TotalMillionsOfBarrels4WeekAverage")
    total_millions_of_barrels_daily_average: Optional[StrictStr] = Field(default=None, description="Average millions of barrels of gasoline sold per day during the week being reported.", alias="TotalMillionsOfBarrelsDailyAverage")
    total_millions_of_barrels_sold: Optional[StrictStr] = Field(default=None, description="Estimated number of barrels (42 U.S. Gallons) of regular motor gasoline (includes all finished motor gasoline grades and formulations or blends . IT does not contain diesel nor aviation fuel).", alias="TotalMillionsOfBarrelsSold")
    total_percent_change_in_barrels_from52_weeks_ago: Optional[StrictStr] = Field(default=None, description="Percent change from 52 weeks ago in the TotalMillionsOfBarrelsSold.", alias="TotalPercentChangeInBarrelsFrom52WeeksAgo")
    total_percent_change_in_barrels_from_prior_week: Optional[StrictStr] = Field(default=None, description="Percent change from one week ago in the TotalMillionsOfBarrelsSold.", alias="TotalPercentChangeInBarrelsFromPriorWeek")
    total_percent_change_in_the4_week_average_from52_weeks_ago: Optional[StrictStr] = Field(default=None, description="Percent change from 52 weeks ago in the TotalMillionsOfBarrels4WeekAverage.", alias="TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo")
    week_end_date: Optional[StrictStr] = Field(default=None, description="End of week date.", alias="WeekEndDate")
    __properties: ClassVar[List[str]] = ["AveragePricePerGalRegularGasoline", "Country", "PADDCode", "PADDMillionsofBarrelsSold", "PADDPercentChangeInBarrelsFromPriorWeek", "PADDPercentChangeinBarrelsfrom52WeeksAgo", "Period", "ProductLine", "PublicationCoveragePeriod", "ReportType", "Sector", "Segment", "SubSector", "TotalBarrelsChangeFromPriorWeek", "TotalMillionsOfBarrels4WeekAverage", "TotalMillionsOfBarrelsDailyAverage", "TotalMillionsOfBarrelsSold", "TotalPercentChangeInBarrelsFrom52WeeksAgo", "TotalPercentChangeInBarrelsFromPriorWeek", "TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo", "WeekEndDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GasWeeklyRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GasWeeklyRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AveragePricePerGalRegularGasoline": obj.get("AveragePricePerGalRegularGasoline"),
            "Country": obj.get("Country"),
            "PADDCode": obj.get("PADDCode"),
            "PADDMillionsofBarrelsSold": obj.get("PADDMillionsofBarrelsSold"),
            "PADDPercentChangeInBarrelsFromPriorWeek": obj.get("PADDPercentChangeInBarrelsFromPriorWeek"),
            "PADDPercentChangeinBarrelsfrom52WeeksAgo": obj.get("PADDPercentChangeinBarrelsfrom52WeeksAgo"),
            "Period": obj.get("Period"),
            "ProductLine": obj.get("ProductLine"),
            "PublicationCoveragePeriod": obj.get("PublicationCoveragePeriod"),
            "ReportType": obj.get("ReportType"),
            "Sector": obj.get("Sector"),
            "Segment": obj.get("Segment"),
            "SubSector": obj.get("SubSector"),
            "TotalBarrelsChangeFromPriorWeek": obj.get("TotalBarrelsChangeFromPriorWeek"),
            "TotalMillionsOfBarrels4WeekAverage": obj.get("TotalMillionsOfBarrels4WeekAverage"),
            "TotalMillionsOfBarrelsDailyAverage": obj.get("TotalMillionsOfBarrelsDailyAverage"),
            "TotalMillionsOfBarrelsSold": obj.get("TotalMillionsOfBarrelsSold"),
            "TotalPercentChangeInBarrelsFrom52WeeksAgo": obj.get("TotalPercentChangeInBarrelsFrom52WeeksAgo"),
            "TotalPercentChangeInBarrelsFromPriorWeek": obj.get("TotalPercentChangeInBarrelsFromPriorWeek"),
            "TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo": obj.get("TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo"),
            "WeekEndDate": obj.get("WeekEndDate")
        })
        return _obj



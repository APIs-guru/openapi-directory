# coding: utf-8

"""
    Spending Pulse

    This API will provide monthly data which includes metrics such as sales volume and growth rate.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.spending_pulse_list_response import SpendingPulseListResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SpendingPulseReportApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def spendingpulse_get(
        self,
        current_row: Annotated[Optional[StrictStr], Field(description="Starting record number to return.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Used to restrict the number of records returned if needed to be less than max.")] = None,
        product_line: Annotated[Optional[StrictStr], Field(description="Product Line.  Either ?US Executive Report? or ?Weekly Sales?")] = None,
        publication_coverage_period: Annotated[Optional[StrictStr], Field(description="Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Country code.")] = None,
        report_type: Annotated[Optional[StrictStr], Field(description="Report type name, today the only report supported is \"monitor\".")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Indicates the period covered by the data with possible values of - day, week, month, quarter, annual")] = None,
        sector: Annotated[Optional[StrictStr], Field(description="Sector name.")] = None,
        ecomm: Annotated[Optional[StrictStr], Field(description="Ecommerce indicator.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SpendingPulseListResponse:
        """Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to.

        Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to. 

        :param current_row: Starting record number to return.
        :type current_row: str
        :param offset: Used to restrict the number of records returned if needed to be less than max.
        :type offset: str
        :param product_line: Product Line.  Either ?US Executive Report? or ?Weekly Sales?
        :type product_line: str
        :param publication_coverage_period: Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.
        :type publication_coverage_period: str
        :param country: Country code.
        :type country: str
        :param report_type: Report type name, today the only report supported is \"monitor\".
        :type report_type: str
        :param period: Indicates the period covered by the data with possible values of - day, week, month, quarter, annual
        :type period: str
        :param sector: Sector name.
        :type sector: str
        :param ecomm: Ecommerce indicator.
        :type ecomm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._spendingpulse_get_serialize(
            current_row=current_row,
            offset=offset,
            product_line=product_line,
            publication_coverage_period=publication_coverage_period,
            country=country,
            report_type=report_type,
            period=period,
            sector=sector,
            ecomm=ecomm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SpendingPulseListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def spendingpulse_get_with_http_info(
        self,
        current_row: Annotated[Optional[StrictStr], Field(description="Starting record number to return.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Used to restrict the number of records returned if needed to be less than max.")] = None,
        product_line: Annotated[Optional[StrictStr], Field(description="Product Line.  Either ?US Executive Report? or ?Weekly Sales?")] = None,
        publication_coverage_period: Annotated[Optional[StrictStr], Field(description="Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Country code.")] = None,
        report_type: Annotated[Optional[StrictStr], Field(description="Report type name, today the only report supported is \"monitor\".")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Indicates the period covered by the data with possible values of - day, week, month, quarter, annual")] = None,
        sector: Annotated[Optional[StrictStr], Field(description="Sector name.")] = None,
        ecomm: Annotated[Optional[StrictStr], Field(description="Ecommerce indicator.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SpendingPulseListResponse]:
        """Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to.

        Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to. 

        :param current_row: Starting record number to return.
        :type current_row: str
        :param offset: Used to restrict the number of records returned if needed to be less than max.
        :type offset: str
        :param product_line: Product Line.  Either ?US Executive Report? or ?Weekly Sales?
        :type product_line: str
        :param publication_coverage_period: Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.
        :type publication_coverage_period: str
        :param country: Country code.
        :type country: str
        :param report_type: Report type name, today the only report supported is \"monitor\".
        :type report_type: str
        :param period: Indicates the period covered by the data with possible values of - day, week, month, quarter, annual
        :type period: str
        :param sector: Sector name.
        :type sector: str
        :param ecomm: Ecommerce indicator.
        :type ecomm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._spendingpulse_get_serialize(
            current_row=current_row,
            offset=offset,
            product_line=product_line,
            publication_coverage_period=publication_coverage_period,
            country=country,
            report_type=report_type,
            period=period,
            sector=sector,
            ecomm=ecomm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SpendingPulseListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def spendingpulse_get_without_preload_content(
        self,
        current_row: Annotated[Optional[StrictStr], Field(description="Starting record number to return.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Used to restrict the number of records returned if needed to be less than max.")] = None,
        product_line: Annotated[Optional[StrictStr], Field(description="Product Line.  Either ?US Executive Report? or ?Weekly Sales?")] = None,
        publication_coverage_period: Annotated[Optional[StrictStr], Field(description="Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Country code.")] = None,
        report_type: Annotated[Optional[StrictStr], Field(description="Report type name, today the only report supported is \"monitor\".")] = None,
        period: Annotated[Optional[StrictStr], Field(description="Indicates the period covered by the data with possible values of - day, week, month, quarter, annual")] = None,
        sector: Annotated[Optional[StrictStr], Field(description="Sector name.")] = None,
        ecomm: Annotated[Optional[StrictStr], Field(description="Ecommerce indicator.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to.

        Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to. 

        :param current_row: Starting record number to return.
        :type current_row: str
        :param offset: Used to restrict the number of records returned if needed to be less than max.
        :type offset: str
        :param product_line: Product Line.  Either ?US Executive Report? or ?Weekly Sales?
        :type product_line: str
        :param publication_coverage_period: Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.
        :type publication_coverage_period: str
        :param country: Country code.
        :type country: str
        :param report_type: Report type name, today the only report supported is \"monitor\".
        :type report_type: str
        :param period: Indicates the period covered by the data with possible values of - day, week, month, quarter, annual
        :type period: str
        :param sector: Sector name.
        :type sector: str
        :param ecomm: Ecommerce indicator.
        :type ecomm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._spendingpulse_get_serialize(
            current_row=current_row,
            offset=offset,
            product_line=product_line,
            publication_coverage_period=publication_coverage_period,
            country=country,
            report_type=report_type,
            period=period,
            sector=sector,
            ecomm=ecomm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SpendingPulseListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _spendingpulse_get_serialize(
        self,
        current_row,
        offset,
        product_line,
        publication_coverage_period,
        country,
        report_type,
        period,
        sector,
        ecomm,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if current_row is not None:
            
            _query_params.append(('CurrentRow', current_row))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if product_line is not None:
            
            _query_params.append(('ProductLine', product_line))
            
        if publication_coverage_period is not None:
            
            _query_params.append(('PublicationCoveragePeriod', publication_coverage_period))
            
        if country is not None:
            
            _query_params.append(('Country', country))
            
        if report_type is not None:
            
            _query_params.append(('ReportType', report_type))
            
        if period is not None:
            
            _query_params.append(('Period', period))
            
        if sector is not None:
            
            _query_params.append(('Sector', sector))
            
        if ecomm is not None:
            
            _query_params.append(('Ecomm', ecomm))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/spendingpulse',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



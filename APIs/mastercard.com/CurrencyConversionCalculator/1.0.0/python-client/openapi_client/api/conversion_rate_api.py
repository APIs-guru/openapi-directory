# coding: utf-8

"""
    API for the Settlement Currency Rate converter

    This API provides a range of functions to get back currency conversion rates and amounts based on current Mastercard currency conversion values.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.conversion_rate_request import ConversionRateRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ConversionRateApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_conversion_detail_using_get(
        self,
        fx_date: Annotated[StrictStr, Field(description="Date of the requested FX rates.")],
        trans_curr: Annotated[StrictStr, Field(description="Currency of the transaction.")],
        crdhld_bill_curr: Annotated[StrictStr, Field(description="Cardholder billing currency.")],
        trans_amt: Annotated[Union[StrictFloat, StrictInt], Field(description="Amount in the transaction currency.")],
        bank_fee: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Additional fees imposed by the bank.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConversionRateRequest:
        """Get the currency conversion rate details.

        Get the currency conversion rate details.

        :param fx_date: Date of the requested FX rates. (required)
        :type fx_date: str
        :param trans_curr: Currency of the transaction. (required)
        :type trans_curr: str
        :param crdhld_bill_curr: Cardholder billing currency. (required)
        :type crdhld_bill_curr: str
        :param trans_amt: Amount in the transaction currency. (required)
        :type trans_amt: float
        :param bank_fee: Additional fees imposed by the bank.
        :type bank_fee: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversion_detail_using_get_serialize(
            fx_date=fx_date,
            trans_curr=trans_curr,
            crdhld_bill_curr=crdhld_bill_curr,
            trans_amt=trans_amt,
            bank_fee=bank_fee,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConversionRateRequest",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_conversion_detail_using_get_with_http_info(
        self,
        fx_date: Annotated[StrictStr, Field(description="Date of the requested FX rates.")],
        trans_curr: Annotated[StrictStr, Field(description="Currency of the transaction.")],
        crdhld_bill_curr: Annotated[StrictStr, Field(description="Cardholder billing currency.")],
        trans_amt: Annotated[Union[StrictFloat, StrictInt], Field(description="Amount in the transaction currency.")],
        bank_fee: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Additional fees imposed by the bank.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConversionRateRequest]:
        """Get the currency conversion rate details.

        Get the currency conversion rate details.

        :param fx_date: Date of the requested FX rates. (required)
        :type fx_date: str
        :param trans_curr: Currency of the transaction. (required)
        :type trans_curr: str
        :param crdhld_bill_curr: Cardholder billing currency. (required)
        :type crdhld_bill_curr: str
        :param trans_amt: Amount in the transaction currency. (required)
        :type trans_amt: float
        :param bank_fee: Additional fees imposed by the bank.
        :type bank_fee: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversion_detail_using_get_serialize(
            fx_date=fx_date,
            trans_curr=trans_curr,
            crdhld_bill_curr=crdhld_bill_curr,
            trans_amt=trans_amt,
            bank_fee=bank_fee,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConversionRateRequest",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_conversion_detail_using_get_without_preload_content(
        self,
        fx_date: Annotated[StrictStr, Field(description="Date of the requested FX rates.")],
        trans_curr: Annotated[StrictStr, Field(description="Currency of the transaction.")],
        crdhld_bill_curr: Annotated[StrictStr, Field(description="Cardholder billing currency.")],
        trans_amt: Annotated[Union[StrictFloat, StrictInt], Field(description="Amount in the transaction currency.")],
        bank_fee: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Additional fees imposed by the bank.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the currency conversion rate details.

        Get the currency conversion rate details.

        :param fx_date: Date of the requested FX rates. (required)
        :type fx_date: str
        :param trans_curr: Currency of the transaction. (required)
        :type trans_curr: str
        :param crdhld_bill_curr: Cardholder billing currency. (required)
        :type crdhld_bill_curr: str
        :param trans_amt: Amount in the transaction currency. (required)
        :type trans_amt: float
        :param bank_fee: Additional fees imposed by the bank.
        :type bank_fee: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversion_detail_using_get_serialize(
            fx_date=fx_date,
            trans_curr=trans_curr,
            crdhld_bill_curr=crdhld_bill_curr,
            trans_amt=trans_amt,
            bank_fee=bank_fee,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConversionRateRequest",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_conversion_detail_using_get_serialize(
        self,
        fx_date,
        trans_curr,
        crdhld_bill_curr,
        trans_amt,
        bank_fee,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if fx_date is not None:
            
            _query_params.append(('fxDate', fx_date))
            
        if trans_curr is not None:
            
            _query_params.append(('transCurr', trans_curr))
            
        if crdhld_bill_curr is not None:
            
            _query_params.append(('crdhldBillCurr', crdhld_bill_curr))
            
        if bank_fee is not None:
            
            _query_params.append(('bankFee', bank_fee))
            
        if trans_amt is not None:
            
            _query_params.append(('transAmt', trans_amt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json;charset=UTF-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/conversion-rate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    API for the Settlement Currency Rate converter

    This API provides a range of functions to get back currency conversion rates and amounts based on current Mastercard currency conversion values.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Conversion(BaseModel):
    """
    Conversion
    """ # noqa: E501
    bank_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Additional fees imposed by the bank.", alias="bankFee")
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate applied to the transaction to convert from Transaction Currency to Cardholder Billing Currency.", alias="conversionRate")
    crdhld_bill_amt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount in the cardholder billing currency.", alias="crdhldBillAmt")
    crdhld_bill_curr: Optional[StrictStr] = Field(default=None, description="Cardholder billing currency.", alias="crdhldBillCurr")
    error_code: Optional[StrictStr] = Field(default=None, description="The error code associated with the error being returned.", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="The reason for the error.", alias="errorMessage")
    fx_date: Optional[StrictStr] = Field(default=None, description="Date of the requested FX rates.", alias="fxDate")
    trans_amt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount in the transaction currency.", alias="transAmt")
    trans_curr: Optional[StrictStr] = Field(default=None, description="Currency of the transaction.", alias="transCurr")
    __properties: ClassVar[List[str]] = ["bankFee", "conversionRate", "crdhldBillAmt", "crdhldBillCurr", "errorCode", "errorMessage", "fxDate", "transAmt", "transCurr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Conversion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Conversion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bankFee": obj.get("bankFee"),
            "conversionRate": obj.get("conversionRate"),
            "crdhldBillAmt": obj.get("crdhldBillAmt"),
            "crdhldBillCurr": obj.get("crdhldBillCurr"),
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "fxDate": obj.get("fxDate"),
            "transAmt": obj.get("transAmt"),
            "transCurr": obj.get("transCurr")
        })
        return _obj



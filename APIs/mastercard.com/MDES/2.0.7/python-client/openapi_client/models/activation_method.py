# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ActivationMethod(BaseModel):
    """
    ActivationMethod
    """ # noqa: E501
    activation_method_id: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Unique identifier of the activation method.", alias="ActivationMethodId")
    activation_method_type: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, description="Type of activation method. Valid values:<br />    \"SMS\" ? Activation code sent in text message to masked mobile phone number<br />    \"EMA\" ? Activation code sent in email to masked email address<br />    \"ACC\" ? Cardholder to call automated call center phone number<br />    \"CLC\" ? Cardholder to call Call Center phone number<br />    \"WEB\" ? Website<br />    \"BAP\" ? Mobile application<br />    \"OBC\" ? Activation code spoken via call to cardholder on masked voice call phone number.", alias="ActivationMethodType")
    activation_method_value: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Activation method details value.", alias="ActivationMethodValue")
    resend_indicator: Optional[Annotated[str, Field(min_length=4, strict=True, max_length=5)]] = Field(default=None, description="Whether the activation method can be used to re-send an activation code. Valid values are TRUE and FALSE.", alias="ResendIndicator")
    __properties: ClassVar[List[str]] = ["ActivationMethodId", "ActivationMethodType", "ActivationMethodValue", "ResendIndicator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivationMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivationMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivationMethodId": obj.get("ActivationMethodId"),
            "ActivationMethodType": obj.get("ActivationMethodType"),
            "ActivationMethodValue": obj.get("ActivationMethodValue"),
            "ResendIndicator": obj.get("ResendIndicator")
        })
        return _obj



# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.audit_info import AuditInfo
from typing import Optional, Set
from typing_extensions import Self

class SearchRequest(BaseModel):
    """
    SearchRequest
    """ # noqa: E501
    account_pan: Optional[Annotated[str, Field(min_length=9, strict=True, max_length=19)]] = Field(default=None, description="When present, the search will return tokens for the Account matching this Primary Account Number (PAN), for any Wallet Provider or device. Cannot be used together with any of the following search request.  parameters:TokenUniqueReference, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.", alias="AccountPan")
    alternate_account_identifier: Optional[Annotated[str, Field(min_length=9, strict=True, max_length=64)]] = Field(default=None, description="When present, the search will return tokens matching this Alternate Account Identifier, for any Wallet Provider or device. Space characters are not allowed. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or CommentId.", alias="AlternateAccountIdentifier")
    audit_info: AuditInfo = Field(alias="AuditInfo")
    comment_id: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="When present, the search will return one specific token linked to the comment. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or AlternateAccountIdentifier.", alias="CommentId")
    exclude_deleted_indicator: Optional[StrictStr] = Field(default=None, description="Indicates whether deleted tokens should be excluded from the search results. When omitted, deleted tokens are included in the results. \"true\" indicates deleted tokens are excluded from the search results. \"false\" means deleted tokens are included in the search results.", alias="ExcludeDeletedIndicator")
    payment_app_instance_id: Optional[Annotated[str, Field(strict=True, max_length=48)]] = Field(default=None, description="When present, the search will return tokens already present or to be provisioned to the specified Payment App instance.<br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, CommentId, or AlternateAccountIdentifier.", alias="PaymentAppInstanceId")
    token: Optional[Annotated[str, Field(min_length=9, strict=True, max_length=19)]] = Field(default=None, description="When present, the search will return one specific token. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.", alias="Token")
    token_unique_reference: Optional[Annotated[str, Field(strict=True, max_length=48)]] = Field(default=None, description="When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.", alias="TokenUniqueReference")
    __properties: ClassVar[List[str]] = ["AccountPan", "AlternateAccountIdentifier", "AuditInfo", "CommentId", "ExcludeDeletedIndicator", "PaymentAppInstanceId", "Token", "TokenUniqueReference"]

    @field_validator('exclude_deleted_indicator')
    def exclude_deleted_indicator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audit_info
        if self.audit_info:
            _dict['AuditInfo'] = self.audit_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountPan": obj.get("AccountPan"),
            "AlternateAccountIdentifier": obj.get("AlternateAccountIdentifier"),
            "AuditInfo": AuditInfo.from_dict(obj["AuditInfo"]) if obj.get("AuditInfo") is not None else None,
            "CommentId": obj.get("CommentId"),
            "ExcludeDeletedIndicator": obj.get("ExcludeDeletedIndicator"),
            "PaymentAppInstanceId": obj.get("PaymentAppInstanceId"),
            "Token": obj.get("Token"),
            "TokenUniqueReference": obj.get("TokenUniqueReference")
        })
        return _obj



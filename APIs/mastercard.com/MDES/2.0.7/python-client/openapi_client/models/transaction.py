# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Transaction
    """ # noqa: E501
    currency_code: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, description="ISO-4217 currency code (3-letter alphabetic currency code).", alias="CurrencyCode")
    merchant_category_code: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Merchant category of the merchant. Conditional field. When available, it must be included in the response.", alias="MerchantCategoryCode")
    merchant_category_description: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Description of the merchant category.", alias="MerchantCategoryDescription")
    merchant_name: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Name of the merchant. Conditional field. When available, it must be included in the response.", alias="MerchantName")
    pos_entry_mode: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="Indicates the mode by which transaction data was collected at the merchant. Conditional field. When available, it must be included in the response.  Valid values:<br />    \"07\" - Contactless M/Chip transaction<br />    \"09\" - Digital Secure Remote Payment containing EMV data<br />    \"81\" - Digital Secure Remote Payment containing UCAF data or CoF<br />    \"82\" - CoF - PAN auto entry via server<br />    \"90\" - Dynamic Magnetic Strip Data<br />    \"91\" - Contactless magnetic stripe", alias="POSEntryMode")
    transaction_amount: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Amount of the transaction formatted with decimal places.", alias="TransactionAmount")
    transaction_date_time: Optional[StrictStr] = Field(default=None, description="Date and time the comment was updated. String, YYYY-MM-DDThh:mm:ssTZD.", alias="TransactionDateTime")
    transaction_status_code: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Transaction status. Valid values:<br />    \"AUTH\" = Authorized<br />    \"COMP\" = Completed<br />    \"DCLN\" = Declined<br />    \"PAUTH\" = Pre-Authorized<br />    \"PAUTC\" = Pre-Authorization Completed<br />    \"PAUTD\" = Pre-Authorization Declined<br />    \"REFND\" = Refunded", alias="TransactionStatusCode")
    transaction_type_code: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Type of transaction. Valid values:<br />    \"PURCH\" = Purchase<br />    \"PURCB\" = Purchase with Cashback<br />    \"REFND\" = Refund<br />    \"AFD\" = Purchase Pre-Auth AFD<br />    \"CLRRF\" = Clearing Refund<br />    \"NAFD\" = Purchase Pre-Auth Non-AFD<br />    \"PYMT\" = Push Payments.", alias="TransactionTypeCode")
    transaction_type_description: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Description of the transaction type.", alias="TransactionTypeDescription")
    __properties: ClassVar[List[str]] = ["CurrencyCode", "MerchantCategoryCode", "MerchantCategoryDescription", "MerchantName", "POSEntryMode", "TransactionAmount", "TransactionDateTime", "TransactionStatusCode", "TransactionTypeCode", "TransactionTypeDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrencyCode": obj.get("CurrencyCode"),
            "MerchantCategoryCode": obj.get("MerchantCategoryCode"),
            "MerchantCategoryDescription": obj.get("MerchantCategoryDescription"),
            "MerchantName": obj.get("MerchantName"),
            "POSEntryMode": obj.get("POSEntryMode"),
            "TransactionAmount": obj.get("TransactionAmount"),
            "TransactionDateTime": obj.get("TransactionDateTime"),
            "TransactionStatusCode": obj.get("TransactionStatusCode"),
            "TransactionTypeCode": obj.get("TransactionTypeCode"),
            "TransactionTypeDescription": obj.get("TransactionTypeDescription")
        })
        return _obj



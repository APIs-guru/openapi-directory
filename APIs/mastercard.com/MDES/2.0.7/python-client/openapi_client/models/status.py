# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.audit_info import AuditInfo
from typing import Optional, Set
from typing_extensions import Self

class Status(BaseModel):
    """
    Status
    """ # noqa: E501
    audit_info: Optional[AuditInfo] = Field(default=None, alias="AuditInfo")
    comment_id: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Identifier of the comment added.  Conditional field, only present when comment text was provided in the request.", alias="CommentId")
    initiator: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Party that initiated the status update. Valid values:<br />    \"I\" - Issuer.<br />    \"W\" - Token Requestor (including Wallet Provider).<br />    \"C\" - Cardholder.<br />    \"P\" - Mobile PIN Validation service.<br />    \"M\" - Mobile PIN Change Validation service.", alias="Initiator")
    reason_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Reason for the status update.  Valid values:<br />    \"A\" ? Cardholder successfully authenticated using a mobile App prior to activation.<br />    \"C\" ? Cardholder successfully authenticated with a customer service agent prior to activation. (For 'Token Activate').<br />    \"C\" ? Account closed. (For 'Token Delete').<br />    \"F\" ? Cardholder reported token device found or not stolen.<br />    \"L\" ? Cardholder reported/confirmed token device lost.<br />    \"S\" ? Cardholder reported/confirmed token device stolen.<br />    \"T\" ? Issuer or cardholder reported fraudulent/then confirmed no fraudulent token transactions.<br />    \"Z\" ? Other.", alias="ReasonCode")
    status_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="The status of the Token. Valid values:<br />    \"U\" - Unmapped. The token has not yet been linked to the Account PAN. The process of tokenization is ?In Progress?.<br />    \"A\" - Active. The token is linked to the Account PAN and may initiate new transactions to be authorized.<br />    \"S\" - Suspended. The token is linked to the Account PAN but may not perform transactions at the request of one or more suspenders.<br />    \"D\" - Deleted. The token is logically deleted but is still linked to the Account PAN for the purposes of post-authorization transaction processing.", alias="StatusCode")
    status_date_time: Optional[StrictStr] = Field(default=None, description="Date and time the status was updated. String, ISO 8691 format - YYYY-MM-DDThh:mm:ssTZD .", alias="StatusDateTime")
    status_description: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Description of the current status.", alias="StatusDescription")
    __properties: ClassVar[List[str]] = ["AuditInfo", "CommentId", "Initiator", "ReasonCode", "StatusCode", "StatusDateTime", "StatusDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audit_info
        if self.audit_info:
            _dict['AuditInfo'] = self.audit_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AuditInfo": AuditInfo.from_dict(obj["AuditInfo"]) if obj.get("AuditInfo") is not None else None,
            "CommentId": obj.get("CommentId"),
            "Initiator": obj.get("Initiator"),
            "ReasonCode": obj.get("ReasonCode"),
            "StatusCode": obj.get("StatusCode"),
            "StatusDateTime": obj.get("StatusDateTime"),
            "StatusDescription": obj.get("StatusDescription")
        })
        return _obj



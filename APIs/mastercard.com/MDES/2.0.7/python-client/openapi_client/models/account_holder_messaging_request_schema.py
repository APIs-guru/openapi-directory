# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.audit_info import AuditInfo
from typing import Optional, Set
from typing_extensions import Self

class AccountHolderMessagingRequestSchema(BaseModel):
    """
    AccountHolderMessagingRequestSchema
    """ # noqa: E501
    audit_info: AuditInfo = Field(alias="AuditInfo")
    issuer_application_message_display: Annotated[str, Field(min_length=4, strict=True, max_length=5)] = Field(description="This is the indicator if the message can be viewed in the Issuer Application using the MessageIdentifier. <br>Please refer to the Apple Card Notification Specification for Notification Deep Linking. Mandatory field.  Valid values are;<br>TRUE ? The message can be viewed in the issuer application<br>FALSE ? The message cannot be viewed in the issuer application.", alias="IssuerApplicationMessageDisplay")
    message_expiration: StrictStr = Field(description="Date and time after which the message is no longer valid.  Maximum value of 30 days in the future. Mandatory field.  __ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD__", alias="MessageExpiration")
    message_identifier: Annotated[str, Field(strict=True, max_length=64)] = Field(description="This is the message identifier. This could be used for linking into the issuer application. Mandatory field.", alias="MessageIdentifier")
    message_language_code: Annotated[str, Field(strict=True, max_length=3)] = Field(description="The language of the message.  Only messages with the requested language code will be presented to the account holder. Mandatory field.  <br>__ISO 639-1 format__", alias="MessageLanguageCode")
    message_text: Annotated[str, Field(strict=True, max_length=128)] = Field(description="This is the message which will be displayed to the cardholder. Mandatory field.", alias="MessageText")
    token_unique_reference: Annotated[str, Field(strict=True, max_length=48)] = Field(description="When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier. Mandatory field.", alias="TokenUniqueReference")
    __properties: ClassVar[List[str]] = ["AuditInfo", "IssuerApplicationMessageDisplay", "MessageExpiration", "MessageIdentifier", "MessageLanguageCode", "MessageText", "TokenUniqueReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountHolderMessagingRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audit_info
        if self.audit_info:
            _dict['AuditInfo'] = self.audit_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountHolderMessagingRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AuditInfo": AuditInfo.from_dict(obj["AuditInfo"]) if obj.get("AuditInfo") is not None else None,
            "IssuerApplicationMessageDisplay": obj.get("IssuerApplicationMessageDisplay"),
            "MessageExpiration": obj.get("MessageExpiration"),
            "MessageIdentifier": obj.get("MessageIdentifier"),
            "MessageLanguageCode": obj.get("MessageLanguageCode"),
            "MessageText": obj.get("MessageText"),
            "TokenUniqueReference": obj.get("TokenUniqueReference")
        })
        return _obj



# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.audit_info import AuditInfo
from typing import Optional, Set
from typing_extensions import Self

class TokenUpdateRequest(BaseModel):
    """
    TokenUpdateRequest
    """ # noqa: E501
    account_pan_sequence_number: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="New PAN sequence number to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or Expiration Date.", alias="AccountPanSequenceNumber")
    audit_info: AuditInfo = Field(alias="AuditInfo")
    comment_text: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Comment related to the updated token(s).", alias="CommentText")
    current_account_pan: Optional[Annotated[str, Field(min_length=9, strict=True, max_length=19)]] = Field(default=None, description="Current Account PAN of the token(s) to be updated. Conditional field, used for updating all tokens mapped to a single Account PAN and must not be present when TokenUniqueReference is present.", alias="CurrentAccountPan")
    expiration_date: Optional[Annotated[str, Field(strict=True, max_length=4)]] = Field(default=None, description="New expiration date to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or PAN Sequence Number.", alias="ExpirationDate")
    issuer_product_configuration_id: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="New product configuration ID to be applied to the updated token(s). Conditional field, must not be present if any of the following are present; NewAccountPan, ExpirationDate, AccountPanSequenceNumber.", alias="IssuerProductConfigurationId")
    new_account_pan: Optional[Annotated[str, Field(min_length=9, strict=True, max_length=19)]] = Field(default=None, description="New Account PAN to be applied to the updated token(s) if there is in fact a new Account PAN. Optional if updating Expiration Date or PAN Sequence Number.", alias="NewAccountPan")
    token_unique_reference: Optional[Annotated[str, Field(strict=True, max_length=48)]] = Field(default=None, description="Unique reference of the token to be updated. Conditional field, used for updating a single token and not used when CurrentAccountPan is present.", alias="TokenUniqueReference")
    update_wallet_provider_indicator: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Indicates whether the updated token information should be provided to the Wallet Provider. Valid values:<br />    \"0\" - Pass the updated information to the Wallet Provider<br />    \"1\" - Do not pass the updated information to the Wallet Provider.<br />Optional parameter. The default is 1 if not present.", alias="UpdateWalletProviderIndicator")
    __properties: ClassVar[List[str]] = ["AccountPanSequenceNumber", "AuditInfo", "CommentText", "CurrentAccountPan", "ExpirationDate", "IssuerProductConfigurationId", "NewAccountPan", "TokenUniqueReference", "UpdateWalletProviderIndicator"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audit_info
        if self.audit_info:
            _dict['AuditInfo'] = self.audit_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountPanSequenceNumber": obj.get("AccountPanSequenceNumber"),
            "AuditInfo": AuditInfo.from_dict(obj["AuditInfo"]) if obj.get("AuditInfo") is not None else None,
            "CommentText": obj.get("CommentText"),
            "CurrentAccountPan": obj.get("CurrentAccountPan"),
            "ExpirationDate": obj.get("ExpirationDate"),
            "IssuerProductConfigurationId": obj.get("IssuerProductConfigurationId"),
            "NewAccountPan": obj.get("NewAccountPan"),
            "TokenUniqueReference": obj.get("TokenUniqueReference"),
            "UpdateWalletProviderIndicator": obj.get("UpdateWalletProviderIndicator")
        })
        return _obj



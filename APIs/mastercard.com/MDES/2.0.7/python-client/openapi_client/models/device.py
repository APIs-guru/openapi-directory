# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Device(BaseModel):
    """
    Device
    """ # noqa: E501
    device_id: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Serial number of the device provisioned with the token. May be masked. Conditional field, not present for CoF tokens, and only present when provided by a Wallet Provider. May be masked (by the Wallet Provider).<br />Example (unmasked) \"C2ZBY14310005664\". Example (masked) \"xxxxY1431xxxxxxx\".", alias="DeviceId")
    device_name: Optional[Annotated[str, Field(strict=True, max_length=0)]] = Field(default=None, description="Nickname of the device provisioned with the token. Conditional field, not present for CoF tokens, and only present when the Payment App Provider has implemented the 'Get Device Info' MDES API.", alias="DeviceName")
    device_type: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="Type of the device provisioned with the token. Valid values:<br />    \"03\" - Watch<br />    \"09\" - Mobile Phone or Smartphone with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"13\" - Tablet or e-reader with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"14\" - Mobile phone or Smartphone with a payment application running in a host processor<br />    \"15\" - Tablet or E-Book with a payment application running in a host processor<br />    \"16\" ? Mobile Phone or Smartphone with a payment application running in the TEE of a host processor<br />    \"17\" ? Tablet or E-Book with a payment application running in the TEE of a host processor<br />    \"18\" ? Watch with a payment application running in the TEE of a host processor<br />    \"19\" ? Watch with a payment application running in a host processor.<br />    \"21\" ? Phone.<br />    \"22\" ? Tablet. <br />    \"23\" ? Watch.<br />    \"24\" ? Sticker.<br />    \"25\" ? Personal Computer.<br />    \"26\" ? Device Peripheral.<br />    \"27\" ? Tag.<br />    \"28\" ? Jewelry.<br />    \"29\" ?  Fashion Accessory.<br />    \"30\" ?  Garment.<br />    \"31\" ?  Domestic Appliance.<br />    \"32\" ?  Vehicle.<br />    \"33\" ?  Media or Gaming Device.<br />    \"99\" ?  Undefined.<br />Conditional field, not present for CoF tokens, and only present when supplied by the Payment App Provider.", alias="DeviceType")
    secure_element_id: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Identifier of the secure element provisioned with the token. Conditional field, not present for CoF tokens, and only present when the token is provisioned to a secure element.", alias="SecureElementId")
    __properties: ClassVar[List[str]] = ["DeviceId", "DeviceName", "DeviceType", "SecureElementId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DeviceId": obj.get("DeviceId"),
            "DeviceName": obj.get("DeviceName"),
            "DeviceType": obj.get("DeviceType"),
            "SecureElementId": obj.get("SecureElementId")
        })
        return _obj



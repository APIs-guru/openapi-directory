# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.tokens import Tokens
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account
    """ # noqa: E501
    account_pan_suffix: Optional[Annotated[str, Field(strict=True, max_length=4)]] = Field(default=None, description="Last 4 digits of Account PAN mapped (or to be mapped) to Token(s).", alias="AccountPanSuffix")
    alternate_account_identifier_suffix: Optional[Annotated[str, Field(strict=True, max_length=4)]] = Field(default=None, description="Alternate Account Identifier is a cardholder friendly reference to a bank account. It is typically used to identify associated tokens when the cardholder is unaware of their Account PAN. The Alternate Account Identifier Suffix exposes just the last few characters of the full identifier in order to protect the full identifier from possible fraud.", alias="AlternateAccountIdentifierSuffix")
    expiration_date: Optional[Annotated[str, Field(strict=True, max_length=4)]] = Field(default=None, description="Expiration date of Account PAN mapped (or to be mapped) to Token(s). 'MMYY' Format.", alias="ExpirationDate")
    tokens: Optional[Tokens] = Field(default=None, alias="Tokens")
    __properties: ClassVar[List[str]] = ["AccountPanSuffix", "AlternateAccountIdentifierSuffix", "ExpirationDate", "Tokens"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tokens
        if self.tokens:
            _dict['Tokens'] = self.tokens.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountPanSuffix": obj.get("AccountPanSuffix"),
            "AlternateAccountIdentifierSuffix": obj.get("AlternateAccountIdentifierSuffix"),
            "ExpirationDate": obj.get("ExpirationDate"),
            "Tokens": Tokens.from_dict(obj["Tokens"]) if obj.get("Tokens") is not None else None
        })
        return _obj



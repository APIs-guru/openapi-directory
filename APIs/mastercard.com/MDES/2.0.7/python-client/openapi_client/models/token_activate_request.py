# coding: utf-8

"""
    MDES Customer Service

    This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.

    The version of the OpenAPI document: 2.0.7
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.audit_info import AuditInfo
from typing import Optional, Set
from typing_extensions import Self

class TokenActivateRequest(BaseModel):
    """
    TokenActivateRequest
    """ # noqa: E501
    account_pan: Optional[Annotated[str, Field(min_length=9, strict=True, max_length=19)]] = Field(default=None, description="The Account PAN of the token to be activated. Conditional field, must be present when PaymentAppInstanceId is present, must not be present when TokenUniqueReference is present.", alias="AccountPan")
    audit_info: AuditInfo = Field(alias="AuditInfo")
    comment_text: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Comment related to activating this token.", alias="CommentText")
    payment_app_instance_id: Optional[Annotated[str, Field(strict=True, max_length=48)]] = Field(default=None, description="Identifier of the Payment App instance within a device that will be provisioned with a token. <br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Conditional field, must be present when AccountPan is present. Must not be present when TokenUniqueReference is present.", alias="PaymentAppInstanceId")
    reason_code: Annotated[str, Field(strict=True, max_length=1)] = Field(description="Reason for the activation. Valid values:<br />    \"A\" = Cardholder successfully authenticated prior to activation.<br />    \"C\" = Cardholder successfully authenticated with a customer service agent prior to activation.", alias="ReasonCode")
    token_unique_reference: Optional[Annotated[str, Field(min_length=9, strict=True, max_length=48)]] = Field(default=None, description="TokenUniqueReference for the token to be activated. Conditional field, present when AccountPan and PaymentAppInstanceId are not present.", alias="TokenUniqueReference")
    __properties: ClassVar[List[str]] = ["AccountPan", "AuditInfo", "CommentText", "PaymentAppInstanceId", "ReasonCode", "TokenUniqueReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenActivateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audit_info
        if self.audit_info:
            _dict['AuditInfo'] = self.audit_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenActivateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountPan": obj.get("AccountPan"),
            "AuditInfo": AuditInfo.from_dict(obj["AuditInfo"]) if obj.get("AuditInfo") is not None else None,
            "CommentText": obj.get("CommentText"),
            "PaymentAppInstanceId": obj.get("PaymentAppInstanceId"),
            "ReasonCode": obj.get("ReasonCode"),
            "TokenUniqueReference": obj.get("TokenUniqueReference")
        })
        return _obj



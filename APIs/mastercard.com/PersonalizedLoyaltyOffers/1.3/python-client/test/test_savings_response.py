# coding: utf-8

"""
    Personalized Offers

    This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.savings_response import SavingsResponse

class TestSavingsResponse(unittest.TestCase):
    """SavingsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SavingsResponse:
        """Test SavingsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SavingsResponse`
        """
        model = SavingsResponse()
        if include_optional:
            return SavingsResponse(
                status = openapi_client.models.status.Status(
                    code = '600', 
                    message = 'Success', ),
                user_savings = openapi_client.models.user_savings.UserSavings(
                    prepaid_offer_savings = openapi_client.models.prepaid_offer_savings.PrepaidOfferSavings(
                        amount_saved = '0', 
                        num_available = '0', 
                        num_purchased = '0', 
                        potential_savings = '0', ), 
                    statement_credit_offers_savings = openapi_client.models.statement_credit_offers_savings.StatementCreditOffersSavings(
                        earned_cashback = '21', 
                        num_available = '0', 
                        num_redeemed = '1', 
                        potential_savings = '195', ), 
                    total_amount_saved = '21', 
                    total_offers_used = '1', )
            )
        else:
            return SavingsResponse(
        )
        """

    def testSavingsResponse(self):
        """Test SavingsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

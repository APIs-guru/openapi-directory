# coding: utf-8

"""
    Personalized Offers

    This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScActivation(BaseModel):
    """
    ScActivation
    """ # noqa: E501
    activation_date: Optional[date] = Field(default=None, description="Day on which the offer became ready for redemption.", alias="ActivationDate")
    activation_id: Optional[StrictStr] = Field(default=None, description="Distinct identifier for the offer being available for redemption by the user, not intended for end-user display.", alias="ActivationId")
    cash_back: Optional[StrictStr] = Field(default=None, description="Value earned upon fulfillment of offer conditions, not applicable to points activations.", alias="CashBack")
    days_remaining: Optional[StrictStr] = Field(default=None, description="Number of days until the offer expires.", alias="DaysRemaining")
    headline: Optional[StrictStr] = Field(default=None, description="Brief details about the deal.", alias="Headline")
    merchant: Optional[StrictStr] = Field(default=None, description="Display name for the retailer to which the offer applies.", alias="Merchant")
    merchant_logo: Optional[StrictStr] = Field(default=None, description="Square retailer brand image.", alias="MerchantLogo")
    offer_id: Optional[StrictStr] = Field(default=None, description="System-wide identifier for the campaign, not intended for end-user display.", alias="OfferId")
    points_earned: Optional[StrictStr] = Field(default=None, description="Value earned upon fulfillment of offer conditions, not applicable to cash activations.", alias="PointsEarned")
    redemption_end_date: Optional[date] = Field(default=None, description="Last day on which a purchase will qualify for the offer.", alias="RedemptionEndDate")
    redemption_mode: Optional[StrictStr] = Field(default=None, description="Type of credit made upon redemption of the offer- CASH or POINTS.", alias="RedemptionMode")
    remaining_spend: Optional[StrictStr] = Field(default=None, description="Purchase amount still required to redeem the offer.", alias="RemainingSpend")
    short_description: Optional[StrictStr] = Field(default=None, description="Summary of the deal, typically displayed beneath the headline in a list view.", alias="ShortDescription")
    status: Optional[StrictStr] = Field(default=None, description="Disposition of offer- ACTIVATED, REDEEMED, CREDIT_DECLINED.", alias="Status")
    total_spend: Optional[StrictStr] = Field(default=None, description="Count of purchases user made to redeem the offer.", alias="TotalSpend")
    __properties: ClassVar[List[str]] = ["ActivationDate", "ActivationId", "CashBack", "DaysRemaining", "Headline", "Merchant", "MerchantLogo", "OfferId", "PointsEarned", "RedemptionEndDate", "RedemptionMode", "RemainingSpend", "ShortDescription", "Status", "TotalSpend"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScActivation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScActivation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActivationDate": obj.get("ActivationDate"),
            "ActivationId": obj.get("ActivationId"),
            "CashBack": obj.get("CashBack"),
            "DaysRemaining": obj.get("DaysRemaining"),
            "Headline": obj.get("Headline"),
            "Merchant": obj.get("Merchant"),
            "MerchantLogo": obj.get("MerchantLogo"),
            "OfferId": obj.get("OfferId"),
            "PointsEarned": obj.get("PointsEarned"),
            "RedemptionEndDate": obj.get("RedemptionEndDate"),
            "RedemptionMode": obj.get("RedemptionMode"),
            "RemainingSpend": obj.get("RemainingSpend"),
            "ShortDescription": obj.get("ShortDescription"),
            "Status": obj.get("Status"),
            "TotalSpend": obj.get("TotalSpend")
        })
        return _obj



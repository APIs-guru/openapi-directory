# coding: utf-8

"""
    Personalized Offers

    This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.detail_postpaid_credit_offer import DetailPostpaidCreditOffer
from openapi_client.models.merchant import Merchant
from openapi_client.models.offer_display import OfferDisplay
from openapi_client.models.offer_media import OfferMedia
from typing import Optional, Set
from typing_extensions import Self

class OfferDetails(BaseModel):
    """
    OfferDetails
    """ # noqa: E501
    currency_code: Optional[StrictStr] = Field(default=None, description="ISO 4217 code in which the redeeming transaction must be made to qualify for the offer.", alias="CurrencyCode")
    detail_postpaid_credit_offer: Optional[DetailPostpaidCreditOffer] = Field(default=None, alias="DetailPostpaidCreditOffer")
    event_end_date: Optional[date] = Field(default=None, description="Last day that redemption can be made.", alias="EventEndDate")
    event_start_date: Optional[date] = Field(default=None, description="First day that redemption can be made by any user, may not apply to the specified user.", alias="EventStartDate")
    headline: Optional[StrictStr] = Field(default=None, description="Brief details about the deal.", alias="Headline")
    language: Optional[StrictStr] = Field(default=None, description="Tongue of offer display text.", alias="Language")
    link_out: Optional[Dict[str, Any]] = Field(default=None, description="Deprecated.", alias="LinkOut")
    long_description: Optional[StrictStr] = Field(default=None, description="Explanation of the deal, typically displayed beneath the headline in a detail view. Often the same as the ShortDescription.", alias="LongDescription")
    merchant: Optional[Merchant] = Field(default=None, alias="Merchant")
    offer_display: Optional[OfferDisplay] = Field(default=None, alias="OfferDisplay")
    offer_id: Optional[StrictStr] = Field(default=None, description="System-wide identifier for the campaign, not intended for end-user display.", alias="OfferId")
    offer_media: Optional[OfferMedia] = Field(default=None, alias="OfferMedia")
    offer_source: Optional[StrictStr] = Field(default=None, description="Platform that made the offer available, not intended for end-user display.", alias="OfferSource")
    offer_type: Optional[StrictStr] = Field(default=None, description="The kind of deal. POSTPAIDCREDIT- Statement Credit Offer, which is a discount that is automatically applied to the card linked to the user and utilized to make the purchase.", alias="OfferType")
    offer_url: Optional[Dict[str, Any]] = Field(default=None, description="Deprecated.", alias="OfferUrl")
    redemption_mode: Optional[StrictStr] = Field(default=None, description="Type of credit made upon redemption of the offer- CASH, POINTS, or EITHER.", alias="RedemptionMode")
    redemption_type: Optional[StrictStr] = Field(default=None, description="Where a purchase may be made to qualify for the offer- INSTORE, ONLINE, or ONLINE-INSTORE (either).", alias="RedemptionType")
    short_description: Optional[StrictStr] = Field(default=None, description="Summary of the deal, typically displayed beneath the headline in a list view.", alias="ShortDescription")
    __properties: ClassVar[List[str]] = ["CurrencyCode", "DetailPostpaidCreditOffer", "EventEndDate", "EventStartDate", "Headline", "Language", "LinkOut", "LongDescription", "Merchant", "OfferDisplay", "OfferId", "OfferMedia", "OfferSource", "OfferType", "OfferUrl", "RedemptionMode", "RedemptionType", "ShortDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OfferDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detail_postpaid_credit_offer
        if self.detail_postpaid_credit_offer:
            _dict['DetailPostpaidCreditOffer'] = self.detail_postpaid_credit_offer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant
        if self.merchant:
            _dict['Merchant'] = self.merchant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer_display
        if self.offer_display:
            _dict['OfferDisplay'] = self.offer_display.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer_media
        if self.offer_media:
            _dict['OfferMedia'] = self.offer_media.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OfferDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrencyCode": obj.get("CurrencyCode"),
            "DetailPostpaidCreditOffer": DetailPostpaidCreditOffer.from_dict(obj["DetailPostpaidCreditOffer"]) if obj.get("DetailPostpaidCreditOffer") is not None else None,
            "EventEndDate": obj.get("EventEndDate"),
            "EventStartDate": obj.get("EventStartDate"),
            "Headline": obj.get("Headline"),
            "Language": obj.get("Language"),
            "LinkOut": obj.get("LinkOut"),
            "LongDescription": obj.get("LongDescription"),
            "Merchant": Merchant.from_dict(obj["Merchant"]) if obj.get("Merchant") is not None else None,
            "OfferDisplay": OfferDisplay.from_dict(obj["OfferDisplay"]) if obj.get("OfferDisplay") is not None else None,
            "OfferId": obj.get("OfferId"),
            "OfferMedia": OfferMedia.from_dict(obj["OfferMedia"]) if obj.get("OfferMedia") is not None else None,
            "OfferSource": obj.get("OfferSource"),
            "OfferType": obj.get("OfferType"),
            "OfferUrl": obj.get("OfferUrl"),
            "RedemptionMode": obj.get("RedemptionMode"),
            "RedemptionType": obj.get("RedemptionType"),
            "ShortDescription": obj.get("ShortDescription")
        })
        return _obj



# coding: utf-8

"""
    Personalized Offers

    This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DetailPostpaidCreditOffer(BaseModel):
    """
    DetailPostpaidCreditOffer
    """ # noqa: E501
    cash_back: Optional[StrictStr] = Field(default=None, description="Value of POSTPAIDCREDIT deal redemption.", alias="CashBack")
    currency_code: Optional[StrictStr] = Field(default=None, description="ISO 4217 code in which the redeeming transaction must be made to qualify for the offer.", alias="CurrencyCode")
    max_cashback: Optional[StrictStr] = Field(default=None, description="The most cash back which a user can earn for the offer.", alias="MaxCashback")
    min_transaction_amount_to_redeem: Optional[StrictStr] = Field(default=None, description="The smallest purchase amount that will qualify for redemption.", alias="MinTransactionAmountToRedeem")
    statement_credit_type: Optional[StrictStr] = Field(default=None, description="Calculation kind of the redemption value. SPEND_CASH/VISIT_CASH- fixed value. SPEND_PERCENTAGE/VISIT_PERCENTAGE- share value.", alias="StatementCreditType")
    visit_threshold: Optional[StrictStr] = Field(default=None, description="The number of purchases required to qualify for redemption.", alias="VisitThreshold")
    __properties: ClassVar[List[str]] = ["CashBack", "CurrencyCode", "MaxCashback", "MinTransactionAmountToRedeem", "StatementCreditType", "VisitThreshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailPostpaidCreditOffer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailPostpaidCreditOffer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CashBack": obj.get("CashBack"),
            "CurrencyCode": obj.get("CurrencyCode"),
            "MaxCashback": obj.get("MaxCashback"),
            "MinTransactionAmountToRedeem": obj.get("MinTransactionAmountToRedeem"),
            "StatementCreditType": obj.get("StatementCreditType"),
            "VisitThreshold": obj.get("VisitThreshold")
        })
        return _obj



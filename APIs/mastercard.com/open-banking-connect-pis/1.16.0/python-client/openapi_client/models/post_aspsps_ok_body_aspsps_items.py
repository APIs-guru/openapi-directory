# coding: utf-8

"""
    Open Banking - Payments initiation service

    Open Banking - Payments initiation service

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.logo_object import LogoObject
from typing import Optional, Set
from typing_extensions import Self

class PostAspspsOKBodyAspspsItems(BaseModel):
    """
    PostAspspsOKBodyAspspsItems
    """ # noqa: E501
    aspsp_services: Optional[List[StrictStr]] = Field(default=None, description="Provided services, AIS - account information, PIS - payment initiation", alias="aspspServices")
    capabilities: Optional[Dict[str, StrictBool]] = Field(default=None, description="Capabilities related to api profile assigned to ASPSP")
    country: Optional[StrictStr] = Field(default=None, description="Country code")
    id: Optional[StrictStr] = Field(default=None, description="Identification of the ASPSP")
    logo: Optional[LogoObject] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the ASPSP")
    profile: Optional[StrictStr] = Field(default=None, description="ASPSP profile")
    __properties: ClassVar[List[str]] = ["aspspServices", "capabilities", "country", "id", "logo", "name", "profile"]

    @field_validator('aspsp_services')
    def aspsp_services_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['AIS', 'PIS', 'COF']):
                raise ValueError("each list item must be one of ('AIS', 'PIS', 'COF')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAspspsOKBodyAspspsItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of logo
        if self.logo:
            _dict['logo'] = self.logo.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAspspsOKBodyAspspsItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aspspServices": obj.get("aspspServices"),
            "capabilities": obj.get("capabilities"),
            "country": obj.get("country"),
            "id": obj.get("id"),
            "logo": LogoObject.from_dict(obj["logo"]) if obj.get("logo") is not None else None,
            "name": obj.get("name"),
            "profile": obj.get("profile")
        })
        return _obj



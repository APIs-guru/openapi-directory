# coding: utf-8

"""
    Open Banking - Payments initiation service

    Open Banking - Payments initiation service

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.merchant import Merchant
from typing import Optional, Set
from typing_extensions import Self

class PostPaymentsDomesticCreditTransfersPaymentStatusParamsBodyRequestInfo(BaseModel):
    """
    PostPaymentsDomesticCreditTransfersPaymentStatusParamsBodyRequestInfo
    """ # noqa: E501
    aspsp_id: Annotated[str, Field(strict=True)] = Field(description="Identification of ASPSP", alias="aspspId")
    consent_id: Annotated[str, Field(min_length=1, strict=True, max_length=256)] = Field(description="Consent identification", alias="consentId")
    merchant: Optional[Merchant] = None
    x_request_id: Annotated[str, Field(strict=True)] = Field(description="Request id given by the client", alias="xRequestId")
    __properties: ClassVar[List[str]] = ["aspspId", "consentId", "merchant", "xRequestId"]

    @field_validator('aspsp_id')
    def aspsp_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/")
        return value

    @field_validator('x_request_id')
    def x_request_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostPaymentsDomesticCreditTransfersPaymentStatusParamsBodyRequestInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of merchant
        if self.merchant:
            _dict['merchant'] = self.merchant.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostPaymentsDomesticCreditTransfersPaymentStatusParamsBodyRequestInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aspspId": obj.get("aspspId"),
            "consentId": obj.get("consentId"),
            "merchant": Merchant.from_dict(obj["merchant"]) if obj.get("merchant") is not None else None,
            "xRequestId": obj.get("xRequestId")
        })
        return _obj



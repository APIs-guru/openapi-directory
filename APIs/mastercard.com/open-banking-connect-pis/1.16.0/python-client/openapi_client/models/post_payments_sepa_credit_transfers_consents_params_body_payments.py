# coding: utf-8

"""
    Open Banking - Payments initiation service

    Open Banking - Payments initiation service

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_account import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_address import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_agent import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_account import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_address import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress
from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_agent import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_instructed_amount import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
from openapi_client.models.request_pis_sepa_schedule import RequestPisSepaSchedule
from typing import Optional, Set
from typing_extensions import Self

class PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments(BaseModel):
    """
    PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments
    """ # noqa: E501
    category_purpose: Optional[StrictStr] = Field(default=None, description="Purpose of the payment", alias="categoryPurpose")
    creditor_account: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount = Field(alias="creditorAccount")
    creditor_address: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress = Field(alias="creditorAddress")
    creditor_agent: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent = Field(alias="creditorAgent")
    creditor_name: Annotated[str, Field(min_length=1, strict=True, max_length=70)] = Field(description="Bank name", alias="creditorName")
    debtor_account: Optional[PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount] = Field(default=None, alias="debtorAccount")
    debtor_address: Optional[PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress] = Field(default=None, alias="debtorAddress")
    debtor_agent: Optional[PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent] = Field(default=None, alias="debtorAgent")
    debtor_name: Annotated[str, Field(min_length=1, strict=True, max_length=256)] = Field(description="Debtor legal name", alias="debtorName")
    end_to_end_identification: Annotated[str, Field(min_length=1, strict=True, max_length=18)] = Field(description="Payment end to end identification", alias="endToEndIdentification")
    instructed_amount: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount = Field(alias="instructedAmount")
    instruction_priority: StrictStr = Field(description="Indicator of the urgency or order of importance", alias="instructionPriority")
    local_instrument: StrictStr = Field(description="User community specific instrument.", alias="localInstrument")
    remittance_information_reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)", alias="remittanceInformationReference")
    remittance_information_structured: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = Field(default=None, description="Description of the payment", alias="remittanceInformationStructured")
    remittance_information_unstructured: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=140)]] = Field(default=None, description="Description of the payment", alias="remittanceInformationUnstructured")
    requested_execution_date: Optional[date] = Field(default=None, description="Scheduled Payment Date", alias="requestedExecutionDate")
    schedule: Optional[RequestPisSepaSchedule] = None
    __properties: ClassVar[List[str]] = ["categoryPurpose", "creditorAccount", "creditorAddress", "creditorAgent", "creditorName", "debtorAccount", "debtorAddress", "debtorAgent", "debtorName", "endToEndIdentification", "instructedAmount", "instructionPriority", "localInstrument", "remittanceInformationReference", "remittanceInformationStructured", "remittanceInformationUnstructured", "requestedExecutionDate", "schedule"]

    @field_validator('category_purpose')
    def category_purpose_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CASH', 'CORT', 'DVPM', 'INTC', 'TREA']):
            raise ValueError("must be one of enum values ('CASH', 'CORT', 'DVPM', 'INTC', 'TREA')")
        return value

    @field_validator('instruction_priority')
    def instruction_priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Normal', 'Urgent']):
            raise ValueError("must be one of enum values ('Normal', 'Urgent')")
        return value

    @field_validator('local_instrument')
    def local_instrument_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SEPA']):
            raise ValueError("must be one of enum values ('SEPA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creditor_account
        if self.creditor_account:
            _dict['creditorAccount'] = self.creditor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_address
        if self.creditor_address:
            _dict['creditorAddress'] = self.creditor_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_agent
        if self.creditor_agent:
            _dict['creditorAgent'] = self.creditor_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debtor_account
        if self.debtor_account:
            _dict['debtorAccount'] = self.debtor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debtor_address
        if self.debtor_address:
            _dict['debtorAddress'] = self.debtor_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debtor_agent
        if self.debtor_agent:
            _dict['debtorAgent'] = self.debtor_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instructed_amount
        if self.instructed_amount:
            _dict['instructedAmount'] = self.instructed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryPurpose": obj.get("categoryPurpose"),
            "creditorAccount": PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount.from_dict(obj["creditorAccount"]) if obj.get("creditorAccount") is not None else None,
            "creditorAddress": PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.from_dict(obj["creditorAddress"]) if obj.get("creditorAddress") is not None else None,
            "creditorAgent": PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.from_dict(obj["creditorAgent"]) if obj.get("creditorAgent") is not None else None,
            "creditorName": obj.get("creditorName"),
            "debtorAccount": PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.from_dict(obj["debtorAccount"]) if obj.get("debtorAccount") is not None else None,
            "debtorAddress": PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress.from_dict(obj["debtorAddress"]) if obj.get("debtorAddress") is not None else None,
            "debtorAgent": PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent.from_dict(obj["debtorAgent"]) if obj.get("debtorAgent") is not None else None,
            "debtorName": obj.get("debtorName"),
            "endToEndIdentification": obj.get("endToEndIdentification"),
            "instructedAmount": PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.from_dict(obj["instructedAmount"]) if obj.get("instructedAmount") is not None else None,
            "instructionPriority": obj.get("instructionPriority"),
            "localInstrument": obj.get("localInstrument"),
            "remittanceInformationReference": obj.get("remittanceInformationReference"),
            "remittanceInformationStructured": obj.get("remittanceInformationStructured"),
            "remittanceInformationUnstructured": obj.get("remittanceInformationUnstructured"),
            "requestedExecutionDate": obj.get("requestedExecutionDate"),
            "schedule": RequestPisSepaSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None
        })
        return _obj



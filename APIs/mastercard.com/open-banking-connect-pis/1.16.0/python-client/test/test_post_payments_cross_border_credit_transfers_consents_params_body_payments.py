# coding: utf-8

"""
    Open Banking - Payments initiation service

    Open Banking - Payments initiation service

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments import PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments

class TestPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments(unittest.TestCase):
    """PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments:
        """Test PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments`
        """
        model = PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments()
        if include_optional:
            return PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments(
                creditor_account = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_creditor_account.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount(
                    identification = 'PL06884573292356737845125375', 
                    scheme_name = 'IBAN', ),
                creditor_address = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_creditor_address.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress(
                    building_number = '15', 
                    city = 'City', 
                    country = 'AA', 
                    country_sub_division = 'SubDivision', 
                    postal_code = 'POSTCODE', 
                    street = 'Street', ),
                creditor_agent = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_creditor_agent.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent(
                    identification = 'BARCGB22XXX', 
                    scheme_name = 'BIC', ),
                creditor_name = 'Wood bank',
                debtor_account = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_debtor_account.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount(
                    identification = 'PL06884573292356737845125375', 
                    scheme_name = 'IBAN', ),
                debtor_address = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_debtor_address.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments_debtorAddress(
                    building_number = '15', 
                    city = 'City', 
                    country = 'CC', 
                    country_sub_division = 'Division', 
                    postal_code = 'PostCode', 
                    street = 'Street', ),
                debtor_name = 'NordPole PLC',
                end_to_end_identification = 'Notification',
                instructed_amount = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_instructed_amount.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount(
                    amount = 100.23, 
                    currency = 'GBP', ),
                instruction_identification = '0',
                instruction_priority = 'Normal',
                local_instrument = 'Swift',
                remittance_information_reference = 'UniqueRef1',
                remittance_information_unstructured = 'Payment for fruits',
                requested_execution_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                transfer_charges = 'SEN'
            )
        else:
            return PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments(
                creditor_account = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_creditor_account.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount(
                    identification = 'PL06884573292356737845125375', 
                    scheme_name = 'IBAN', ),
                creditor_agent = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_creditor_agent.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent(
                    identification = 'BARCGB22XXX', 
                    scheme_name = 'BIC', ),
                creditor_name = 'Wood bank',
                debtor_account = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_debtor_account.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount(
                    identification = 'PL06884573292356737845125375', 
                    scheme_name = 'IBAN', ),
                end_to_end_identification = 'Notification',
                instructed_amount = openapi_client.models.post_payments_cross_border_credit_transfers_consents_params_body_payments_instructed_amount.postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount(
                    amount = 100.23, 
                    currency = 'GBP', ),
                instruction_priority = 'Normal',
                local_instrument = 'Swift',
        )
        """

    def testPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments(self):
        """Test PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

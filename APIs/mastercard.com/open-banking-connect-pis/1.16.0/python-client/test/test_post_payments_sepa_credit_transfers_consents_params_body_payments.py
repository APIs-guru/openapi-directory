# coding: utf-8

"""
    Open Banking - Payments initiation service

    Open Banking - Payments initiation service

    The version of the OpenAPI document: 1.16.0
    Contact: apisupport@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments import PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments

class TestPostPaymentsSepaCreditTransfersConsentsParamsBodyPayments(unittest.TestCase):
    """PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments:
        """Test PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments`
        """
        model = PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments()
        if include_optional:
            return PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments(
                category_purpose = 'CASH',
                creditor_account = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_account.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount(
                    iban = 'PL45222222222222222222222222', ),
                creditor_address = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_address.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress(
                    building_number = '15', 
                    city = 'City', 
                    country = 'CC', 
                    country_sub_division = 'Division', 
                    postal_code = 'PostCode', 
                    street = 'Street', ),
                creditor_agent = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_agent.postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_creditorAgent(
                    bicfi = 'BARCGB22XXX', ),
                creditor_name = 'Wood bank',
                debtor_account = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_account.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount(
                    iban = 'PL45222222222222222222222222', ),
                debtor_address = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_address.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress(
                    building_number = '15', 
                    city = 'City', 
                    country = 'CC', 
                    country_sub_division = 'Division', 
                    postal_code = 'PostCode', 
                    street = 'Street', ),
                debtor_agent = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_agent.postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_debtorAgent(
                    bicfi = 'BARCGB22XXX', ),
                debtor_name = 'NordPole PLC',
                end_to_end_identification = 'Notification',
                instructed_amount = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_instructed_amount.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount(
                    amount = 200.0, 
                    currency = 'EUR', ),
                instruction_priority = 'Normal',
                local_instrument = 'SEPA',
                remittance_information_reference = 'UniqueRef1',
                remittance_information_structured = 'Payment for fruits from card 543210000023456',
                remittance_information_unstructured = 'Payment for fruits',
                requested_execution_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                schedule = openapi_client.models.request_pis_sepa_schedule.RequestPisSepaSchedule(
                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    frequency = 'DAIL', 
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
            )
        else:
            return PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments(
                creditor_account = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_account.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount(
                    iban = 'PL45222222222222222222222222', ),
                creditor_address = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_address.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress(
                    building_number = '15', 
                    city = 'City', 
                    country = 'CC', 
                    country_sub_division = 'Division', 
                    postal_code = 'PostCode', 
                    street = 'Street', ),
                creditor_agent = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_agent.postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_creditorAgent(
                    bicfi = 'BARCGB22XXX', ),
                creditor_name = 'Wood bank',
                debtor_name = 'NordPole PLC',
                end_to_end_identification = 'Notification',
                instructed_amount = openapi_client.models.post_payments_sepa_credit_transfers_consents_params_body_payments_instructed_amount.postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount(
                    amount = 200.0, 
                    currency = 'EUR', ),
                instruction_priority = 'Normal',
                local_instrument = 'SEPA',
        )
        """

    def testPostPaymentsSepaCreditTransfersConsentsParamsBodyPayments(self):
        """Test PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

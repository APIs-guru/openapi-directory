# coding: utf-8

"""
    rePower

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accountbalance9 import Accountbalance9
from openapi_client.models.transactionhistory6 import Transactionhistory6
from typing import Optional, Set
from typing_extensions import Self

class Repower5(BaseModel):
    """
    Response details
    """ # noqa: E501
    account_balance: Optional[Accountbalance9] = Field(default=None, alias="AccountBalance")
    iccemv_data: Optional[StrictStr] = Field(default=None, description=" Integrated Circuit Card (ICC) System related data. It must be present for EMV transactions. Required DE 55 Subelements in /0200 and /0220 Messages. Details- Conditional, String, 255", alias="ICCEMVData")
    pan_mapping_file_information: Optional[StrictStr] = Field(default=None, description="PAN Mapping File Information will be avalable when the PAN is MDES token. Details- Conditional, String, 33", alias="PANMappingFileInformation")
    person_present_indicator: Optional[StrictStr] = Field(default=None, description="Person Present Indicator values is populated in repower response. Where the repower requests are  a. PaymentPosEntryMode (07*/09*)  b. CardSequenceNumber > 0  c. Transaction Amount > 0 It is a number value and size 2 digit", alias="PersonPresentIndicator")
    request_id: Optional[StrictStr] = Field(default=None, description="This is the unique identifier for API Web service request. Details- Numeric value, variable length between 1 and 19 digits, without zero padding", alias="RequestId")
    transaction_history: Optional[Transactionhistory6] = Field(default=None, alias="TransactionHistory")
    transaction_reference: Optional[StrictStr] = Field(default=None, description="This value represents the unique reference number for the rePower transaction provided by the merchant or acquiring institution. Details- Alphanumeric value, 19", alias="TransactionReference")
    __properties: ClassVar[List[str]] = ["AccountBalance", "ICCEMVData", "PANMappingFileInformation", "PersonPresentIndicator", "RequestId", "TransactionHistory", "TransactionReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Repower5 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_balance
        if self.account_balance:
            _dict['AccountBalance'] = self.account_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_history
        if self.transaction_history:
            _dict['TransactionHistory'] = self.transaction_history.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Repower5 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountBalance": Accountbalance9.from_dict(obj["AccountBalance"]) if obj.get("AccountBalance") is not None else None,
            "ICCEMVData": obj.get("ICCEMVData"),
            "PANMappingFileInformation": obj.get("PANMappingFileInformation"),
            "PersonPresentIndicator": obj.get("PersonPresentIndicator"),
            "RequestId": obj.get("RequestId"),
            "TransactionHistory": Transactionhistory6.from_dict(obj["TransactionHistory"]) if obj.get("TransactionHistory") is not None else None,
            "TransactionReference": obj.get("TransactionReference")
        })
        return _obj



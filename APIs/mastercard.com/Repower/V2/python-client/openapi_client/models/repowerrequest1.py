# coding: utf-8

"""
    rePower

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cardacceptor2 import Cardacceptor2
from openapi_client.models.transactionamount3 import Transactionamount3
from openapi_client.models.transactionfee4 import Transactionfee4
from typing import Optional, Set
from typing_extensions import Self

class Repowerrequest1(BaseModel):
    """
    Contains the details of the repower request message.
    """ # noqa: E501
    additional_sender_information: Optional[StrictStr] = Field(default=None, description=" Contains additional sender information in the Financial Transaction.The first 20 digits will be telephone number(n-20), the next 8 digits will be Date of Birth(n-8)(MMDDYYYY)and 'Check' or 'Cash' needs to be populated next based on check load or cash load.  Details- String, Min 32 characters, Max 65 characters in Length", alias="AdditionalSenderInformation")
    card_acceptor: Optional[Cardacceptor2] = Field(default=None, alias="CardAcceptor")
    card_number: StrictStr = Field(description="Cardholder personal account number. Details- Numeric, 16 or 19, must pass LUHN MOD10 validation", alias="CardNumber")
    card_sequence_number: Optional[StrictStr] = Field(default=None, description="Card Sequence Number as part of PaymentPOS Entry mode Integrated Circuit and contactless M/Chip. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode = \"05x\" or \"07x\"). Details- Numeric, 3, The Possible values for Card Sequence Number are in the range 000â€“099", alias="CardSequenceNumber")
    channel: StrictStr = Field(description="Origination channel for the rePower transaction as 'Attended POS' (P) or 'Web' (W).  Details- Alpha, 1, Constant P or W", alias="Channel")
    ica: StrictStr = Field(description="ICA of acquiring institution. Details- Numeric, 4-6", alias="ICA")
    iccemv_data: Optional[StrictStr] = Field(default=None, description="Integrated Circuit Card (ICC) System related data. It must be present for EMV(Including paypass/MDES EMV) transactions. Details- String, 255. Please refer section 'ICCEMVData' for more details.", alias="ICCEMVData")
    local_date: StrictStr = Field(description="This is the local date for the location where the request is originating. Details- Numeric, 4, MMDD", alias="LocalDate")
    local_time: StrictStr = Field(description=" This is the local time for the location where the request is originating. The format is military or twenty-four hour clock time. Details- Numeric, HHMMSS", alias="LocalTime")
    merchant_type: StrictStr = Field(description="Merchant's type of business or Service will be represented as a member financial institution initiated rePower transaction (6532), or merchant initiated rePower transaction (6533). Details- Numeric, 4, constant 6532 or 6533", alias="MerchantType")
    pos_card_data_terminal_input_capability_indicator: Optional[StrictStr] = Field(default=None, description="Point of Service (POS) card data terminal input capability indicator. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode = \"05x\" or \"07x\" or \"91x\"). Details- Conditional, numeric, 1, The Possible values for POS card data terminal input capability indicator is 3 or 4.", alias="POSCardDataTerminalInputCapabilityIndicator")
    payment_initiation_channel: Optional[StrictStr] = Field(default=None, description="Payment Initiation Channel is the device type used to identify mobile-initiated (m-commerce) or other non-card device initiated transactions. It's an option field for paypass transactions. Details-  Numeric, 2 digits. The possible values for Payment Initiation Channel is detailed out in section 'PaymentInitiationChannel'", alias="PaymentInitiationChannel")
    payment_pos_entry_mode: Optional[StrictStr] = Field(default=None, description="PaymentPos Entry Mode to represent the POS Terminal PAN Entry Mode & Terminal PIN Entry Mode. This is required for EMV transactions and Paypass/MDES magstripe transactions. The first two digits indicate PAN entry mode and the last digit indicate PIN entry mode. Details- Numeric, 3. For PAN/PIN Entry mode details refer section 'PaymentPosEntryMode'", alias="PaymentPosEntryMode")
    processor_id: StrictStr = Field(description="Processor Id. Details- Numeric, 10", alias="ProcessorId")
    receiver_track2_data: Optional[StrictStr] = Field(default=None, description="Contains 8 sub fields to enhance the repower API to support EMV scripting data fields.It must be present for EMV, MDES or PayPass transactions(where POS Entry Mode is other than 010 or 011 or 012). Details- Conditional, String, Max 37 characters in Length. Refer section 'ReceiverTrack2Data'", alias="ReceiverTrack2Data")
    routing_and_transit_number: StrictStr = Field(description="Routing and Transit number. Details- Numeric, 9", alias="RoutingAndTransitNumber")
    transaction_amount: Optional[Transactionamount3] = Field(default=None, alias="TransactionAmount")
    transaction_fee: Optional[Transactionfee4] = Field(default=None, alias="TransactionFee")
    transaction_reference: StrictStr = Field(description="Repower Transaction Reference Number. Provided by the Client submitting the rePower transfer request. Must be \"unique\" across all rePower transfer requests. Details- Numeric, length 19", alias="TransactionReference")
    __properties: ClassVar[List[str]] = ["AdditionalSenderInformation", "CardAcceptor", "CardNumber", "CardSequenceNumber", "Channel", "ICA", "ICCEMVData", "LocalDate", "LocalTime", "MerchantType", "POSCardDataTerminalInputCapabilityIndicator", "PaymentInitiationChannel", "PaymentPosEntryMode", "ProcessorId", "ReceiverTrack2Data", "RoutingAndTransitNumber", "TransactionAmount", "TransactionFee", "TransactionReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Repowerrequest1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_acceptor
        if self.card_acceptor:
            _dict['CardAcceptor'] = self.card_acceptor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_amount
        if self.transaction_amount:
            _dict['TransactionAmount'] = self.transaction_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_fee
        if self.transaction_fee:
            _dict['TransactionFee'] = self.transaction_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Repowerrequest1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdditionalSenderInformation": obj.get("AdditionalSenderInformation"),
            "CardAcceptor": Cardacceptor2.from_dict(obj["CardAcceptor"]) if obj.get("CardAcceptor") is not None else None,
            "CardNumber": obj.get("CardNumber"),
            "CardSequenceNumber": obj.get("CardSequenceNumber"),
            "Channel": obj.get("Channel"),
            "ICA": obj.get("ICA"),
            "ICCEMVData": obj.get("ICCEMVData"),
            "LocalDate": obj.get("LocalDate"),
            "LocalTime": obj.get("LocalTime"),
            "MerchantType": obj.get("MerchantType"),
            "POSCardDataTerminalInputCapabilityIndicator": obj.get("POSCardDataTerminalInputCapabilityIndicator"),
            "PaymentInitiationChannel": obj.get("PaymentInitiationChannel"),
            "PaymentPosEntryMode": obj.get("PaymentPosEntryMode"),
            "ProcessorId": obj.get("ProcessorId"),
            "ReceiverTrack2Data": obj.get("ReceiverTrack2Data"),
            "RoutingAndTransitNumber": obj.get("RoutingAndTransitNumber"),
            "TransactionAmount": Transactionamount3.from_dict(obj["TransactionAmount"]) if obj.get("TransactionAmount") is not None else None,
            "TransactionFee": Transactionfee4.from_dict(obj["TransactionFee"]) if obj.get("TransactionFee") is not None else None,
            "TransactionReference": obj.get("TransactionReference")
        })
        return _obj



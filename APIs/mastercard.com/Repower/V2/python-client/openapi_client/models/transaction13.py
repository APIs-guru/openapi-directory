# coding: utf-8

"""
    rePower

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.response14 import Response14
from typing import Optional, Set
from typing_extensions import Self

class Transaction13(BaseModel):
    """
    Information for one transaction
    """ # noqa: E501
    network_reference_number: Optional[StrictStr] = Field(default=None, description="Network Reference Number that can be used for transaction inquiry. Details- Numeric, 9", alias="NetworkReferenceNumber")
    response: Optional[Response14] = Field(default=None, alias="Response")
    settlement_date: Optional[StrictStr] = Field(default=None, description="Date Funds will be transferred between the acquirer and issuer by Single Message System, in MMDD format", alias="SettlementDate")
    submit_date_time: Optional[StrictStr] = Field(default=None, description="This is the time and date of the transaction submission, in the following format: <date>T<time>Z, where date> is YYYY-MM-DD, <time> is HH:MM:SS", alias="SubmitDateTime")
    system_trace_audit_number: Optional[StrictStr] = Field(default=None, description="Identifier assigned to each transaction by the rePower service. This identifier is unique for any single UTC date. Details- Numeric value, 6", alias="SystemTraceAuditNumber")
    type: Optional[StrictStr] = Field(default=None, description="Type of transaction. Details- Alpha", alias="Type")
    __properties: ClassVar[List[str]] = ["NetworkReferenceNumber", "Response", "SettlementDate", "SubmitDateTime", "SystemTraceAuditNumber", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction13 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['Response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction13 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "NetworkReferenceNumber": obj.get("NetworkReferenceNumber"),
            "Response": Response14.from_dict(obj["Response"]) if obj.get("Response") is not None else None,
            "SettlementDate": obj.get("SettlementDate"),
            "SubmitDateTime": obj.get("SubmitDateTime"),
            "SystemTraceAuditNumber": obj.get("SystemTraceAuditNumber"),
            "Type": obj.get("Type")
        })
        return _obj



# coding: utf-8

"""
    Bill Payment Validator

    The Bill Payment Validator service allows RPPS origination (payment sender) customers to identify if a potential RPPS transaction would process successfully before transmitting the formal payment transaction, reducing RPPS payment rejects and costly payment processing exceptions.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BillPayAccountValidation(BaseModel):
    """
    BillPayAccountValidation
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, description="Consumer account number populated in the message.  The minimum length is 8 and the maximum length is 22.", alias="AccountNumber")
    biller_id: Optional[StrictStr] = Field(default=None, description="Biller ID populated in the message. The maximum length is 10.", alias="BillerId")
    customer_identifier1: Optional[StrictStr] = Field(default=None, description="Consumer identifier populated in the message.", alias="CustomerIdentifier1")
    customer_identifier2: Optional[StrictStr] = Field(default=None, description="Consumer identifier populated in the message.", alias="CustomerIdentifier2")
    customer_identifier3: Optional[StrictStr] = Field(default=None, description="Consumer identifier populated in the message.", alias="CustomerIdentifier3")
    customer_identifier4: Optional[StrictStr] = Field(default=None, description="Consumer identifier populated in the message.", alias="CustomerIdentifier4")
    response_string: Optional[StrictStr] = Field(default=None, description="Indicates if the bill payment transaction information passed all RPPS transaction processing edits for the specified biller ID or indicates errors. The minimum length is 0 and the maximum length is 120.", alias="ResponseString")
    rpps_id: Optional[StrictStr] = Field(default=None, description="Originator RPPS ID populated in the message.  The maximum length is 8.", alias="RppsId")
    transaction_amount: Optional[StrictStr] = Field(default=None, description="Amount populated in the message.", alias="TransactionAmount")
    __properties: ClassVar[List[str]] = ["AccountNumber", "BillerId", "CustomerIdentifier1", "CustomerIdentifier2", "CustomerIdentifier3", "CustomerIdentifier4", "ResponseString", "RppsId", "TransactionAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillPayAccountValidation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillPayAccountValidation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccountNumber": obj.get("AccountNumber"),
            "BillerId": obj.get("BillerId"),
            "CustomerIdentifier1": obj.get("CustomerIdentifier1"),
            "CustomerIdentifier2": obj.get("CustomerIdentifier2"),
            "CustomerIdentifier3": obj.get("CustomerIdentifier3"),
            "CustomerIdentifier4": obj.get("CustomerIdentifier4"),
            "ResponseString": obj.get("ResponseString"),
            "RppsId": obj.get("RppsId"),
            "TransactionAmount": obj.get("TransactionAmount")
        })
        return _obj



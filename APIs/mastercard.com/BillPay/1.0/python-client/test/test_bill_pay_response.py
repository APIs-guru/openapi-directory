# coding: utf-8

"""
    Bill Payment Validator

    The Bill Payment Validator service allows RPPS origination (payment sender) customers to identify if a potential RPPS transaction would process successfully before transmitting the formal payment transaction, reducing RPPS payment rejects and costly payment processing exceptions.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bill_pay_response import BillPayResponse

class TestBillPayResponse(unittest.TestCase):
    """BillPayResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillPayResponse:
        """Test BillPayResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillPayResponse`
        """
        model = BillPayResponse()
        if include_optional:
            return BillPayResponse(
                bill_pay_account_validation = openapi_client.models.bill_pay_account_validation.BillPayAccountValidation(
                    account_number = '1234567890', 
                    biller_id = '9998887771', 
                    customer_identifier1 = '', 
                    customer_identifier2 = '', 
                    customer_identifier3 = '', 
                    customer_identifier4 = '', 
                    response_string = 'Successful', 
                    rpps_id = '99887761', 
                    transaction_amount = '250.00', )
            )
        else:
            return BillPayResponse(
        )
        """

    def testBillPayResponse(self):
        """Test BillPayResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

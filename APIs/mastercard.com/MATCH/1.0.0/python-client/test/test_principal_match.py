# coding: utf-8

"""
    MATCH API

    Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.principal_match import PrincipalMatch

class TestPrincipalMatch(unittest.TestCase):
    """PrincipalMatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrincipalMatch:
        """Test PrincipalMatch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrincipalMatch`
        """
        model = PrincipalMatch()
        if include_optional:
            return PrincipalMatch(
                address = openapi_client.models.address.Address(
                    city = 'DALLAS', 
                    country = 'USA', 
                    country_subdivision = 'IL', 
                    line1 = '42 ELM AVENUE', 
                    line2 = 'SUITE 201', 
                    postal_code = '66579', 
                    province = '', ),
                alt_phone_number = '3165557625',
                drivers_license = openapi_client.models.drivers_license.DriversLicense(
                    country = 'USA', 
                    country_subdivision = 'IL', 
                    number = 'M15698025', ),
                first_name = 'DAVID',
                last_name = 'SMITH',
                middle_initial = 'P',
                name = 'THE BAIT SHOP',
                national_id = '541022104',
                phone_number = '3165557625',
                search_criteria = openapi_client.models.search_criteria.SearchCriteria(
                    country = [
                        'USA'
                        ], 
                    min_possible_match_count = '3', 
                    region = [
                        'A'
                        ], 
                    search_all = 'N', )
            )
        else:
            return PrincipalMatch(
        )
        """

    def testPrincipalMatch(self):
        """Test PrincipalMatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

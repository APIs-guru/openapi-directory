# coding: utf-8

"""
    MATCH API

    Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.drivers_license import DriversLicense
from openapi_client.models.search_criteria import SearchCriteria
from typing import Optional, Set
from typing_extensions import Self

class PrincipalMatch(BaseModel):
    """
    PrincipalMatch
    """ # noqa: E501
    address: Optional[Address] = Field(default=None, alias="Address")
    alt_phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.", alias="AltPhoneNumber")
    drivers_license: Optional[DriversLicense] = Field(default=None, alias="DriversLicense")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of the principal owner of the business.", alias="FirstName")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of the principal owner of the business.", alias="LastName")
    middle_initial: Optional[StrictStr] = Field(default=None, description="THe middle initial of the name of the principal owner of the business.", alias="MiddleInitial")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Business which has been terminated.", alias="Name")
    national_id: Optional[StrictStr] = Field(default=None, description="The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.", alias="NationalId")
    phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.", alias="PhoneNumber")
    search_criteria: Optional[SearchCriteria] = Field(default=None, alias="SearchCriteria")
    __properties: ClassVar[List[str]] = ["Address", "AltPhoneNumber", "DriversLicense", "FirstName", "LastName", "MiddleInitial", "Name", "NationalId", "PhoneNumber", "SearchCriteria"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrincipalMatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drivers_license
        if self.drivers_license:
            _dict['DriversLicense'] = self.drivers_license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_criteria
        if self.search_criteria:
            _dict['SearchCriteria'] = self.search_criteria.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrincipalMatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Address": Address.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "AltPhoneNumber": obj.get("AltPhoneNumber"),
            "DriversLicense": DriversLicense.from_dict(obj["DriversLicense"]) if obj.get("DriversLicense") is not None else None,
            "FirstName": obj.get("FirstName"),
            "LastName": obj.get("LastName"),
            "MiddleInitial": obj.get("MiddleInitial"),
            "Name": obj.get("Name"),
            "NationalId": obj.get("NationalId"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "SearchCriteria": SearchCriteria.from_dict(obj["SearchCriteria"]) if obj.get("SearchCriteria") is not None else None
        })
        return _obj



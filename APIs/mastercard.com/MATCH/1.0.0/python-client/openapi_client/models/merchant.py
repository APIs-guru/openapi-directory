# coding: utf-8

"""
    MATCH API

    Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.principal import Principal
from openapi_client.models.search_criteria import SearchCriteria
from openapi_client.models.url_group import UrlGroup
from typing import Optional, Set
from typing_extensions import Self

class Merchant(BaseModel):
    """
    Merchant
    """ # noqa: E501
    added_by_acquirer_id: Optional[StrictStr] = Field(default=None, description="The Member ICA that has added the merchant to the MATCH system", alias="AddedByAcquirerID")
    added_on_date: Optional[StrictStr] = Field(default=None, description="Date the merchant was added to the MATCH database.", alias="AddedOnDate")
    address: Optional[Address] = Field(default=None, alias="Address")
    alt_phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.", alias="AltPhoneNumber")
    country_subdivision_tax_id: Optional[StrictStr] = Field(default=None, description="The Merchant Country Subdivision tax ID, leave blank if not in the U.S region.", alias="CountrySubdivisionTaxId")
    doing_business_as_name: Optional[StrictStr] = Field(default=None, description="The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.", alias="DoingBusinessAsName")
    name: StrictStr = Field(description="The name of the business assigned by the principal owner(s)", alias="Name")
    national_tax_id: Optional[StrictStr] = Field(default=None, description="The Merchant national tax ID, leave blank if not in the U.S region.", alias="NationalTaxId")
    phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.", alias="PhoneNumber")
    principal: Optional[List[Principal]] = Field(default=None, description="The details for the principal owner of the business.  A maximum of 5 principals may be submitted.", alias="Principal")
    search_criteria: Optional[SearchCriteria] = Field(default=None, alias="SearchCriteria")
    service_prov_dba: Optional[StrictStr] = Field(default=None, description="The name of the service provider associated with the merchant listed in the MATCH", alias="ServiceProvDBA")
    service_prov_legal: Optional[StrictStr] = Field(default=None, description="The name of the service provider associated with the merchant listed in the MATCH", alias="ServiceProvLegal")
    termination_reason_code: Optional[StrictStr] = Field(default=None, description="A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft", alias="TerminationReasonCode")
    url: Optional[StrictStr] = Field(default=None, description="Website address of the merchant. A request may include multiple URLs. The total cumulative size of the URLs cannot exceed 20,000 bytes.", alias="Url")
    url_group: Optional[List[UrlGroup]] = Field(default=None, alias="UrlGroup")
    __properties: ClassVar[List[str]] = ["AddedByAcquirerID", "AddedOnDate", "Address", "AltPhoneNumber", "CountrySubdivisionTaxId", "DoingBusinessAsName", "Name", "NationalTaxId", "PhoneNumber", "Principal", "SearchCriteria", "ServiceProvDBA", "ServiceProvLegal", "TerminationReasonCode", "Url", "UrlGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Merchant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in principal (list)
        _items = []
        if self.principal:
            for _item_principal in self.principal:
                if _item_principal:
                    _items.append(_item_principal.to_dict())
            _dict['Principal'] = _items
        # override the default output from pydantic by calling `to_dict()` of search_criteria
        if self.search_criteria:
            _dict['SearchCriteria'] = self.search_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in url_group (list)
        _items = []
        if self.url_group:
            for _item_url_group in self.url_group:
                if _item_url_group:
                    _items.append(_item_url_group.to_dict())
            _dict['UrlGroup'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Merchant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AddedByAcquirerID": obj.get("AddedByAcquirerID"),
            "AddedOnDate": obj.get("AddedOnDate"),
            "Address": Address.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "AltPhoneNumber": obj.get("AltPhoneNumber"),
            "CountrySubdivisionTaxId": obj.get("CountrySubdivisionTaxId"),
            "DoingBusinessAsName": obj.get("DoingBusinessAsName"),
            "Name": obj.get("Name"),
            "NationalTaxId": obj.get("NationalTaxId"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "Principal": [Principal.from_dict(_item) for _item in obj["Principal"]] if obj.get("Principal") is not None else None,
            "SearchCriteria": SearchCriteria.from_dict(obj["SearchCriteria"]) if obj.get("SearchCriteria") is not None else None,
            "ServiceProvDBA": obj.get("ServiceProvDBA"),
            "ServiceProvLegal": obj.get("ServiceProvLegal"),
            "TerminationReasonCode": obj.get("TerminationReasonCode"),
            "Url": obj.get("Url"),
            "UrlGroup": [UrlGroup.from_dict(_item) for _item in obj["UrlGroup"]] if obj.get("UrlGroup") is not None else None
        })
        return _obj



# coding: utf-8

"""
    MATCH API

    Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.principal_match import PrincipalMatch
from typing import Optional, Set
from typing_extensions import Self

class MerchantMatch(BaseModel):
    """
    MerchantMatch
    """ # noqa: E501
    address: Optional[Address] = Field(default=None, alias="Address")
    alt_phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's alternate phone number.", alias="AltPhoneNumber")
    country_subdivision_tax_id: Optional[StrictStr] = Field(default=None, description="The Merchant's state tax ID; for the U.S region only. Return value will be hidden.", alias="CountrySubdivisionTaxId")
    doing_business_as_name: Optional[StrictStr] = Field(default=None, description="The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop", alias="DoingBusinessAsName")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Business which has been terminated.", alias="Name")
    national_tax_id: Optional[StrictStr] = Field(default=None, description="The National tax ID or business registration number. Return value will be hidden.", alias="NationalTaxId")
    phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's phone number.", alias="PhoneNumber")
    principal_match: Optional[List[PrincipalMatch]] = Field(default=None, alias="PrincipalMatch")
    service_prov_dba: Optional[StrictStr] = Field(default=None, description="The name of the service provider associated with the merchant listed in the MATCH.", alias="ServiceProvDBA")
    service_prov_legal: Optional[StrictStr] = Field(default=None, description="The name of the service provider associated with the merchant listed in the MATCH.", alias="ServiceProvLegal")
    __properties: ClassVar[List[str]] = ["Address", "AltPhoneNumber", "CountrySubdivisionTaxId", "DoingBusinessAsName", "Name", "NationalTaxId", "PhoneNumber", "PrincipalMatch", "ServiceProvDBA", "ServiceProvLegal"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantMatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in principal_match (list)
        _items = []
        if self.principal_match:
            for _item_principal_match in self.principal_match:
                if _item_principal_match:
                    _items.append(_item_principal_match.to_dict())
            _dict['PrincipalMatch'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantMatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Address": Address.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "AltPhoneNumber": obj.get("AltPhoneNumber"),
            "CountrySubdivisionTaxId": obj.get("CountrySubdivisionTaxId"),
            "DoingBusinessAsName": obj.get("DoingBusinessAsName"),
            "Name": obj.get("Name"),
            "NationalTaxId": obj.get("NationalTaxId"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "PrincipalMatch": [PrincipalMatch.from_dict(_item) for _item in obj["PrincipalMatch"]] if obj.get("PrincipalMatch") is not None else None,
            "ServiceProvDBA": obj.get("ServiceProvDBA"),
            "ServiceProvLegal": obj.get("ServiceProvLegal")
        })
        return _obj



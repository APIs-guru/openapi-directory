# coding: utf-8

"""
    MATCH API

    Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Contact(BaseModel):
    """
    Contact
    """ # noqa: E501
    bank_name: Optional[StrictStr] = Field(default=None, description="The name of acquiring bank.", alias="BankName")
    email_address: Optional[StrictStr] = Field(default=None, description="The Email address of primary contact of acquiring bank. The results may return information for more than one Contact.", alias="EmailAddress")
    fax_number: Optional[StrictStr] = Field(default=None, description="The Fax Number of primary contact of acquiring bank. The results may return information for more than one Contact.", alias="FaxNumber")
    first_name: Optional[StrictStr] = Field(default=None, description="The first name of primary contact of acquiring bank. The results may return information for more than one Contact.", alias="FirstName")
    last_name: Optional[StrictStr] = Field(default=None, description="The last name of primary contact of acquiring bank. The results may return information for more than one Contact.", alias="LastName")
    phone_number: Optional[StrictStr] = Field(default=None, description="The Phone Number of primary contact of acquiring bank. The results may return information for more than one Contact.", alias="PhoneNumber")
    region: Optional[StrictStr] = Field(default=None, description="The region of acquiring bank. The results may return information for more than one Contact.", alias="Region")
    __properties: ClassVar[List[str]] = ["BankName", "EmailAddress", "FaxNumber", "FirstName", "LastName", "PhoneNumber", "Region"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BankName": obj.get("BankName"),
            "EmailAddress": obj.get("EmailAddress"),
            "FaxNumber": obj.get("FaxNumber"),
            "FirstName": obj.get("FirstName"),
            "LastName": obj.get("LastName"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "Region": obj.get("Region")
        })
        return _obj



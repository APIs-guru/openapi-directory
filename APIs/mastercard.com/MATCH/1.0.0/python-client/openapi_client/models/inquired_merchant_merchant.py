# coding: utf-8

"""
    MATCH API

    Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.merchant_match import MerchantMatch
from openapi_client.models.principal import Principal
from openapi_client.models.url_group import UrlGroup
from typing import Optional, Set
from typing_extensions import Self

class InquiredMerchantMerchant(BaseModel):
    """
    InquiredMerchantMerchant
    """ # noqa: E501
    added_by_acquirer_id: Optional[StrictStr] = Field(default=None, description="The Member ICA that has added the merchant to the MATCH system", alias="AddedByAcquirerID")
    added_on_date: Optional[StrictStr] = Field(default=None, description="The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY", alias="AddedOnDate")
    address: Optional[Address] = Field(default=None, alias="Address")
    alt_phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's alternate phone number.", alias="AltPhoneNumber")
    country_subdivision_tax_id: Optional[StrictStr] = Field(default=None, description="The Merchant's state tax ID; for the U.S region only. Return value will be hidden.", alias="CountrySubdivisionTaxId")
    doing_business_as_name: Optional[StrictStr] = Field(default=None, description="The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop", alias="DoingBusinessAsName")
    merchant_match: Optional[MerchantMatch] = Field(default=None, alias="MerchantMatch")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Business which has been terminated.", alias="Name")
    national_tax_id: Optional[StrictStr] = Field(default=None, description="The National tax ID or business registration number. Return value will be hidden.", alias="NationalTaxId")
    phone_number: Optional[StrictStr] = Field(default=None, description="The Business or Merchant's phone number.", alias="PhoneNumber")
    principal: Optional[Principal] = Field(default=None, alias="Principal")
    service_prov_dba: Optional[StrictStr] = Field(default=None, description="The name of the service provider associated with the merchant listed in the MATCH.", alias="ServiceProvDBA")
    service_prov_legal: Optional[StrictStr] = Field(default=None, description="The name of the service provider associated with the merchant listed in the MATCH.", alias="ServiceProvLegal")
    termination_reason_code: Optional[StrictStr] = Field(default=None, description="A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft", alias="TerminationReasonCode")
    url_group: Optional[UrlGroup] = Field(default=None, alias="UrlGroup")
    __properties: ClassVar[List[str]] = ["AddedByAcquirerID", "AddedOnDate", "Address", "AltPhoneNumber", "CountrySubdivisionTaxId", "DoingBusinessAsName", "MerchantMatch", "Name", "NationalTaxId", "PhoneNumber", "Principal", "ServiceProvDBA", "ServiceProvLegal", "TerminationReasonCode", "UrlGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InquiredMerchantMerchant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['Address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_match
        if self.merchant_match:
            _dict['MerchantMatch'] = self.merchant_match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of principal
        if self.principal:
            _dict['Principal'] = self.principal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url_group
        if self.url_group:
            _dict['UrlGroup'] = self.url_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InquiredMerchantMerchant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AddedByAcquirerID": obj.get("AddedByAcquirerID"),
            "AddedOnDate": obj.get("AddedOnDate"),
            "Address": Address.from_dict(obj["Address"]) if obj.get("Address") is not None else None,
            "AltPhoneNumber": obj.get("AltPhoneNumber"),
            "CountrySubdivisionTaxId": obj.get("CountrySubdivisionTaxId"),
            "DoingBusinessAsName": obj.get("DoingBusinessAsName"),
            "MerchantMatch": MerchantMatch.from_dict(obj["MerchantMatch"]) if obj.get("MerchantMatch") is not None else None,
            "Name": obj.get("Name"),
            "NationalTaxId": obj.get("NationalTaxId"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "Principal": Principal.from_dict(obj["Principal"]) if obj.get("Principal") is not None else None,
            "ServiceProvDBA": obj.get("ServiceProvDBA"),
            "ServiceProvLegal": obj.get("ServiceProvLegal"),
            "TerminationReasonCode": obj.get("TerminationReasonCode"),
            "UrlGroup": UrlGroup.from_dict(obj["UrlGroup"]) if obj.get("UrlGroup") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Merchant Identifier API V2

    API for Merchant Identifier

    The version of the OpenAPI document: 2.0.0
    Contact: ADS_Data_Services@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from typing import Optional, Set
from typing_extensions import Self

class Merchant(BaseModel):
    """
    Merchant
    """ # noqa: E501
    address: Optional[Address] = None
    brand_name: Optional[StrictStr] = Field(default=None, description="The brand name of the merchant.", alias="brandName")
    comment: Optional[StrictStr] = Field(default=None, description="Notes or comments returned about the merchant.")
    descriptor_text: Optional[StrictStr] = Field(default=None, description="Descriptor for the merchant provided by the Merchant Service Provider(MSP).", alias="descriptorText")
    legal_corporate_name: Optional[StrictStr] = Field(default=None, description="Corporate legal name of the merchant.", alias="legalCorporateName")
    location_id: Optional[StrictInt] = Field(default=None, description="Merchant specific location identifier.", alias="locationId")
    match_confidence_score: Optional[StrictInt] = Field(default=None, description="Confidence score (%) to help clients understand the quality of the search results.", alias="matchConfidenceScore")
    merchant_category: Optional[StrictStr] = Field(default=None, description="Merchant category code and description associated with the merchant category code for the merchant.   5814 - FAST FOOD RESTAURANTS, 5541 - SERVICE STATIONS WITH OR WITHOUT ANCILLARY SERVICE,   5735 - RECORD SHOPS, 5971 - ART DEALERS AND GALLERIES", alias="merchantCategory")
    merchant_dba_name: Optional[StrictStr] = Field(default=None, description="Name under which the merchant is 'doing business as'.", alias="merchantDbaName")
    phone_number: Optional[StrictStr] = Field(default=None, description="The phone number of the merchant.", alias="phoneNumber")
    sole_proprietor_name: Optional[StrictStr] = Field(default=None, alias="soleProprietorName")
    __properties: ClassVar[List[str]] = ["address", "brandName", "comment", "descriptorText", "legalCorporateName", "locationId", "matchConfidenceScore", "merchantCategory", "merchantDbaName", "phoneNumber", "soleProprietorName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Merchant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Merchant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "brandName": obj.get("brandName"),
            "comment": obj.get("comment"),
            "descriptorText": obj.get("descriptorText"),
            "legalCorporateName": obj.get("legalCorporateName"),
            "locationId": obj.get("locationId"),
            "matchConfidenceScore": obj.get("matchConfidenceScore"),
            "merchantCategory": obj.get("merchantCategory"),
            "merchantDbaName": obj.get("merchantDbaName"),
            "phoneNumber": obj.get("phoneNumber"),
            "soleProprietorName": obj.get("soleProprietorName")
        })
        return _obj



# coding: utf-8

"""
    Merchant Identifier API V2

    API for Merchant Identifier

    The version of the OpenAPI document: 2.0.0
    Contact: ADS_Data_Services@mastercard.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.country import Country
from openapi_client.models.country_subdivision import CountrySubdivision
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Address
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="Name of the city or town where the merchant is located.")
    country: Optional[Country] = None
    country_subdivision: Optional[CountrySubdivision] = Field(default=None, alias="countrySubdivision")
    line1: Optional[StrictStr] = Field(default=None, description="Line 1 of the street address of the merchant. Usually includes the street number and name.")
    line2: Optional[StrictStr] = Field(default=None, description="Line 2 of the street address, usually an apartment number or suite number.")
    postal_code: Optional[StrictStr] = Field(default=None, description="The zip code or postal code for an ATM location", alias="postalCode")
    __properties: ClassVar[List[str]] = ["city", "country", "countrySubdivision", "line1", "line2", "postalCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country_subdivision
        if self.country_subdivision:
            _dict['countrySubdivision'] = self.country_subdivision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "country": Country.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "countrySubdivision": CountrySubdivision.from_dict(obj["countrySubdivision"]) if obj.get("countrySubdivision") is not None else None,
            "line1": obj.get("line1"),
            "line2": obj.get("line2"),
            "postalCode": obj.get("postalCode")
        })
        return _obj



# coding: utf-8

"""
    Send Person to Merchant

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_merchant_data34 import AdditionalMerchantData34
from openapi_client.models.address33 import Address33
from typing import Optional, Set
from typing_extensions import Self

class Recipient32(BaseModel):
    """
    Information about the recipient/merchant of the transaction. If a PAN is provided in the recipient_account_uri, the recipient/merchant information section is required. Details- Conditional
    """ # noqa: E501
    additional_merchant_data: Optional[AdditionalMerchantData34] = None
    address: Address33
    email: Optional[StrictStr] = Field(default=None, description="Email address of the recipient/merchant. Phone number or email address should be provided if the partner is set up to receive notifications. Details- Conditional, 5-254")
    first_name: StrictStr = Field(description="First name of the recipient/merchant.If business name is XYZ : First name: XYZ ; Last name: XYZ; If business name is XYZ International: First name: XYZ  Last name: International ; if business name is XYZ DBA MA : First name: XYZ Last name: DBA MA.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÚÚÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], Length: 1-40")
    last_name: StrictStr = Field(description="Last name of the recipient/merchant.If business name is XYZ : First name: XYZ ; Last name: XYZ; If business name is XYZ International: First name: XYZ  Last name: International ; if business name is XYZ DBA MA : First name: XYZ Last name: DBA MA.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÚÚÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], Length: 1-40")
    merchant_category_code: StrictStr = Field(description="Mastercard defined merchant category code. This identifies the type of business of the recipient/merchant. This merchant category code should match valid code set by Mastercard rules. Details 1-4")
    middle_name: Optional[StrictStr] = Field(default=None, description="Middle name of the recipient/merchant.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÚÚÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], Length: 1-40")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number of the recipient/merchant. Phone number or email address should be provided if the partner is set up to receive notifications. Details- 1-15")
    __properties: ClassVar[List[str]] = ["additional_merchant_data", "address", "email", "first_name", "last_name", "merchant_category_code", "middle_name", "phone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Recipient32 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_merchant_data
        if self.additional_merchant_data:
            _dict['additional_merchant_data'] = self.additional_merchant_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Recipient32 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_merchant_data": AdditionalMerchantData34.from_dict(obj["additional_merchant_data"]) if obj.get("additional_merchant_data") is not None else None,
            "address": Address33.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "merchant_category_code": obj.get("merchant_category_code"),
            "middle_name": obj.get("middle_name"),
            "phone": obj.get("phone")
        })
        return _obj



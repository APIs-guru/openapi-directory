# coding: utf-8

"""
    Send Person to Merchant

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.recipient123 import Recipient123
from openapi_client.models.reconciliation_data126 import ReconciliationData126
from openapi_client.models.sender119 import Sender119
from openapi_client.models.token_cryptogram128 import TokenCryptogram128
from typing import Optional, Set
from typing_extensions import Self

class FundingTransfer118(BaseModel):
    """
    Contains the details of the request message.
    """ # noqa: E501
    additional_message: Optional[StrictStr] = Field(default=None, description="Additional Message. Details- alpha-numeric 1-65")
    amount: StrictStr = Field(description="Amount of the transfer in the smallest unit of currency. Decimal implied before last two positions. Example: 100 = $1.00USD Details- numeric, 1-999999999999")
    authentication_value: Optional[StrictStr] = Field(default=None, description="List of name/value pairs containing authentication  values. Refer 'Authentication Value URIs'")
    channel: Optional[StrictStr] = Field(default=None, description=" Initiation channel of the payment request. This value can be defined in the onboarding process instead of passing in every call One of the WEB, MOBILE, BANK, KIOSK. Details- Conditional")
    currency: StrictStr = Field(description="Three-letter ISO currency code representing the currency of the transfer amount. Details- alpha, length: 3")
    device_id: Optional[StrictStr] = Field(default=None, description="The serial number of a device. Details- 1-40")
    funding_hints: Optional[StrictStr] = Field(default=None, description="List of name/value pairs containing funding parameter values. Valid Values- Refer 'Funding Hints URIs'")
    interchange_rate_designator: Optional[StrictStr] = Field(default=None, description="Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2")
    language_data: Optional[StrictStr] = Field(default=None, description="Language Data Details- binary 1-65")
    language_identification: Optional[StrictStr] = Field(default=None, description="Language Identification. Details- alpha - 3")
    location: Optional[StrictStr] = Field(default=None, description="Location where the transaction is initiated from. Details- 1-40. Valid Values- Refer 'Location URIs'")
    participation_id: Optional[StrictStr] = Field(default=None, description="Participation Id. An identifier agreed by both the issuing institution and the merchant. Details- alpha-numeric 1-30")
    payment_type: Optional[StrictStr] = Field(default=None, description="Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3")
    recipient: Optional[Recipient123] = None
    recipient_account_uri: StrictStr = Field(description="URI identifying receiver's account to receive the transfer. Valid Values- Refer 'Account URIs'")
    reconciliation_data: Optional[ReconciliationData126] = None
    sanction_screening_override: Optional[StrictBool] = Field(default=None, description="Override indicator if partner has opted into Sanction Screening validation as part of transaction processing.  If Sanction Screening score on either sender or receiver is equal to or above threshold configured for partner, the payment will error.  To bypass the Sanction Screening validation and process the payment the value 'true' should be submitted.  Details:  Optional â€“ If partner has not enabled Sanction Screening validation default is 'true'.   Required - If partner has opted into Sanction Screening validation but wants to bypass Sanction Screening validation and process the payment, value should be 'true'. ")
    sender: Optional[Sender119] = None
    sender_account_uri: Optional[StrictStr] = Field(default=None, description="URI identifying sender's account to fund the transfer. Only a pan based account is valid. Valid Values- Refer 'Account URIs' Details- Conditional")
    statement_descriptor: Optional[StrictStr] = Field(default=None, description="The statement descriptor is a string which will be displayed on the recipient's bank or card statement. It consists of one or two parts: the prefix and the content. The prefix is an optional short string typically used to identify the client/merchant. It is defined during client/merchant onboarding and the same value should be used. If not provided in the API call, system will use the value defined in the onboarding process. The content portion of the statement descriptor will be displayed on the recipient's statement. If both the prefix and content portions are defined, they both are appended &lt;prefix&gt;+&lt;content&gt; The overall length may be at most 22 characters, including the prefix (even if not provided in the API call) and the content. Note: While most financial institutions display this information consistently, some may display it incorrectly or not at all. Details- Conditional, 22")
    token_cryptogram: Optional[TokenCryptogram128] = None
    transfer_reference: StrictStr = Field(description="Unique transaction reference number. It must be unique within the partner's domain. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40")
    __properties: ClassVar[List[str]] = ["additional_message", "amount", "authentication_value", "channel", "currency", "device_id", "funding_hints", "interchange_rate_designator", "language_data", "language_identification", "location", "participation_id", "payment_type", "recipient", "recipient_account_uri", "reconciliation_data", "sanction_screening_override", "sender", "sender_account_uri", "statement_descriptor", "token_cryptogram", "transfer_reference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FundingTransfer118 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reconciliation_data
        if self.reconciliation_data:
            _dict['reconciliation_data'] = self.reconciliation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_cryptogram
        if self.token_cryptogram:
            _dict['token_cryptogram'] = self.token_cryptogram.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FundingTransfer118 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_message": obj.get("additional_message"),
            "amount": obj.get("amount"),
            "authentication_value": obj.get("authentication_value"),
            "channel": obj.get("channel"),
            "currency": obj.get("currency"),
            "device_id": obj.get("device_id"),
            "funding_hints": obj.get("funding_hints"),
            "interchange_rate_designator": obj.get("interchange_rate_designator"),
            "language_data": obj.get("language_data"),
            "language_identification": obj.get("language_identification"),
            "location": obj.get("location"),
            "participation_id": obj.get("participation_id"),
            "payment_type": obj.get("payment_type"),
            "recipient": Recipient123.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "recipient_account_uri": obj.get("recipient_account_uri"),
            "reconciliation_data": ReconciliationData126.from_dict(obj["reconciliation_data"]) if obj.get("reconciliation_data") is not None else None,
            "sanction_screening_override": obj.get("sanction_screening_override"),
            "sender": Sender119.from_dict(obj["sender"]) if obj.get("sender") is not None else None,
            "sender_account_uri": obj.get("sender_account_uri"),
            "statement_descriptor": obj.get("statement_descriptor"),
            "token_cryptogram": TokenCryptogram128.from_dict(obj["token_cryptogram"]) if obj.get("token_cryptogram") is not None else None,
            "transfer_reference": obj.get("transfer_reference")
        })
        return _obj



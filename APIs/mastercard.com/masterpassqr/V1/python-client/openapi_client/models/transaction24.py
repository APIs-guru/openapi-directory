# coding: utf-8

"""
    Send Person to Merchant

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.transaction_amount25 import TransactionAmount25
from typing import Optional, Set
from typing_extensions import Self

class Transaction24(BaseModel):
    """
    Array of transactions
    """ # noqa: E501
    account_uri: Optional[StrictStr] = Field(default=None, description="Scrubbed URI describing the account. It will include masked account information but will not include security codes (e.g. CVC or expiration date for a card account). ")
    authorization_id: Optional[StrictStr] = Field(default=None, description="Transaction response ID code that the authorizing institution assigns.    Type: Alphanumeric [a-zA-Z 0-9], Length: 6.")
    convenience_amount: Optional[StrictStr] = Field(default=None, description="Amount of the convenience fee. The decimal point is implied based on the transaction_amount.currency. \"[0-9]*\". Max Length: 12. Value must be less than payment_transfer.amount.")
    convenience_indicator: Optional[StrictStr] = Field(default=None, description="Convenience fee type code. Min length: 2. Max Length: 2. Valid values  (01: Indicates Consumer should be prompted to enter tip 02: Indicates that merchant would mandatorily charge a flat convenience fee 03: Indicates that merchant would charge a percentage convenience fee)")
    create_timestamp: Optional[StrictStr] = Field(default=None, description="Date and time the transaction was created as an ISO 8601 format.   Type: Alphanumerical Special [A-Z 0-9-:], Maximum Length: 25")
    funds_availability: Optional[StrictStr] = Field(default=None, description="An estimate of when the funds might be available. Actual Deposit Availability is determined by the financial institution. Values: IMMEDIATE, NEXT_BUSINESS_DAY, or TWO_TO_FIVE_BUSINESS_DAYS.   Type: Alpha Special [A-Z-], Maximum Length: 25")
    id: Optional[StrictStr] = Field(default=None, description="System generated unique transfer identifier.   Type: Alphanumeric Special [a-zA-Z 0-9 _], Maximum Length: 32")
    network: Optional[StrictStr] = Field(default=None, description="Name of the network that processed this transaction.   Type: Alpha [a-zA-Z], Maximum Length: 30")
    network_status_code: Optional[StrictStr] = Field(default=None, description="Network Status Code for this transaction.   Type: Alphanumeric [a-zA-Z0-9], Maximum Length: 3")
    network_status_description: Optional[StrictStr] = Field(default=None, description="Network Status Description of this transaction.   Type: Alphanumeric Special [A-Z0-9 : ,.()-], Maximum Length: 255")
    payment_account_reference: Optional[StrictStr] = Field(default=None, description="A unique value associated with a single PAN and attributed to all tokens associated with that PAN.    Type: Alphanumeric [a-zA-Z 0-9], Length: 29.")
    qr_data: Optional[StrictStr] = Field(default=None, description="Encoded QR (Quick Response) code data. Type: Alphanumeric and special characters [a-zA-Z0-9!\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~], Maximum Length: 237")
    resource_type: Optional[StrictStr] = Field(default=None, description="Type of resource. Valid value:  transaction.   Type: Alpha Special [a-z _], Maximum Length: 17")
    retrieval_reference: Optional[StrictStr] = Field(default=None, description="Unique reference number that identifies the transaction at the network.   Type: Numeric [0-9], Maximum Length: 24")
    status: Optional[StrictStr] = Field(default=None, description="Status of this transaction. Values: APPROVED, UNKNOWN.   Type: Alpha [A-Z], Maximum Length: 8")
    status_reason: Optional[StrictStr] = Field(default=None, description="Reason for status Values: APPROVED,UNKNOWN. The following status reason will be provided based on the status APPROVED: APPROVED; UNKNOWN:UNKNOWN.   Type: Alpha [A-Z], Maximum Length: 8")
    status_timestamp: Optional[StrictStr] = Field(default=None, description="Date and time of the status as an ISO 8601 format.   Type: Alphanumerical Special [A-Z 0-9-:], Maximum Length: 25")
    switch_serial_number: Optional[StrictStr] = Field(default=None, description="Unique transaction identification number (switch serial number) generated (or assigned) by the Single Message System.  Type: Numeric [0-9], Maximum Length: 9")
    system_trace_audit_number: Optional[StrictStr] = Field(default=None, description="Unique system trace audit number for the transaction, the STAN ( system trace audit number ).   Type: Numeric [0-9], Maximum Length: 6")
    transaction_amount: Optional[TransactionAmount25] = None
    type: Optional[StrictStr] = Field(default=None, description="Type of the transaction. Values: FUNDING, PAYMENT, FUNDING_REVERSAL, or PAYMENT_REVERSAL.   Type Alpha Special [A-Z-], Maximum Length: 16")
    unique_reference_number: Optional[StrictStr] = Field(default=None, description="Unique reference number for the transaction.    Type: Alphanumeric [a-zA-Z 0-9], Maximum Length: 19")
    __properties: ClassVar[List[str]] = ["account_uri", "authorization_id", "convenience_amount", "convenience_indicator", "create_timestamp", "funds_availability", "id", "network", "network_status_code", "network_status_description", "payment_account_reference", "qr_data", "resource_type", "retrieval_reference", "status", "status_reason", "status_timestamp", "switch_serial_number", "system_trace_audit_number", "transaction_amount", "type", "unique_reference_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction24 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_amount
        if self.transaction_amount:
            _dict['transaction_amount'] = self.transaction_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction24 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_uri": obj.get("account_uri"),
            "authorization_id": obj.get("authorization_id"),
            "convenience_amount": obj.get("convenience_amount"),
            "convenience_indicator": obj.get("convenience_indicator"),
            "create_timestamp": obj.get("create_timestamp"),
            "funds_availability": obj.get("funds_availability"),
            "id": obj.get("id"),
            "network": obj.get("network"),
            "network_status_code": obj.get("network_status_code"),
            "network_status_description": obj.get("network_status_description"),
            "payment_account_reference": obj.get("payment_account_reference"),
            "qr_data": obj.get("qr_data"),
            "resource_type": obj.get("resource_type"),
            "retrieval_reference": obj.get("retrieval_reference"),
            "status": obj.get("status"),
            "status_reason": obj.get("status_reason"),
            "status_timestamp": obj.get("status_timestamp"),
            "switch_serial_number": obj.get("switch_serial_number"),
            "system_trace_audit_number": obj.get("system_trace_audit_number"),
            "transaction_amount": TransactionAmount25.from_dict(obj["transaction_amount"]) if obj.get("transaction_amount") is not None else None,
            "type": obj.get("type"),
            "unique_reference_number": obj.get("unique_reference_number")
        })
        return _obj



# coding: utf-8

"""
    Send Person to Merchant

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.participant117 import Participant117
from openapi_client.models.recipient107 import Recipient107
from openapi_client.models.reconciliation_data115 import ReconciliationData115
from openapi_client.models.sender105 import Sender105
from openapi_client.models.transaction_history111 import TransactionHistory111
from openapi_client.models.transfer_amount110 import TransferAmount110
from typing import Optional, Set
from typing_extensions import Self

class MerchantTransfer104(BaseModel):
    """
    Response details for a merchant transfer.
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.")
    created: Optional[StrictStr] = Field(default=None, description="Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats")
    device_id: Optional[StrictStr] = Field(default=None, description="The serial number of a device that initiated the transfer.")
    digital_account_reference_number: Optional[StrictStr] = Field(default=None, description="URI to identify the digital account reference number. It will include masked account information but will not include security codes (e.g. CVC or expiration date for a card account). ")
    funding_source: Optional[StrictStr] = Field(default=None, description="Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT or CASH. ")
    id: Optional[StrictStr] = Field(default=None, description="System generated unique merchant transfer identifier.")
    interchange_rate_designator: Optional[StrictStr] = Field(default=None, description="Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2")
    location: Optional[StrictStr] = Field(default=None, description="Location where the transaction is initiated. Valid Values- Refer 'Location URIs'.")
    original_status: Optional[StrictStr] = Field(default=None, description="Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.")
    participant: Optional[Participant117] = None
    payment_origination_country: Optional[StrictStr] = Field(default=None, description="Country where the payment originated from as an ISO 3166-1 alpha-3 country code, in uppercase. Details- Alpha, Length: 3")
    payment_type: Optional[StrictStr] = Field(default=None, description="P2M: Person to Merchant")
    processor_id: Optional[StrictStr] = Field(default=None, description="The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10")
    recipient: Optional[Recipient107] = None
    recipient_account_uri: Optional[StrictStr] = Field(default=None, description="URI describing the recipient account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).")
    reconciliation_data: Optional[ReconciliationData115] = None
    resource_type: Optional[StrictStr] = Field(default=None, description="Type of the resource that is being returned. Valid value: merchant_refund_transfer")
    routing_transit_number: Optional[StrictStr] = Field(default=None, description="The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9")
    sender: Optional[Sender105] = None
    sender_account_uri: Optional[StrictStr] = Field(default=None, description="URI describing the sending account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).")
    status: Optional[StrictStr] = Field(default=None, description="Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.")
    status_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp of when the status was changed to its current value. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats")
    transaction_history: Optional[TransactionHistory111] = None
    transaction_local_date_time: Optional[StrictStr] = Field(default=None, description="Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] ")
    transfer_amount: Optional[TransferAmount110] = None
    transfer_reference: Optional[StrictStr] = Field(default=None, description="Unique transaction reference number provided when the Transfer was created.")
    __properties: ClassVar[List[str]] = ["channel", "created", "device_id", "digital_account_reference_number", "funding_source", "id", "interchange_rate_designator", "location", "original_status", "participant", "payment_origination_country", "payment_type", "processor_id", "recipient", "recipient_account_uri", "reconciliation_data", "resource_type", "routing_transit_number", "sender", "sender_account_uri", "status", "status_timestamp", "transaction_history", "transaction_local_date_time", "transfer_amount", "transfer_reference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantTransfer104 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of participant
        if self.participant:
            _dict['participant'] = self.participant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reconciliation_data
        if self.reconciliation_data:
            _dict['reconciliation_data'] = self.reconciliation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_history
        if self.transaction_history:
            _dict['transaction_history'] = self.transaction_history.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_amount
        if self.transfer_amount:
            _dict['transfer_amount'] = self.transfer_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantTransfer104 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "created": obj.get("created"),
            "device_id": obj.get("device_id"),
            "digital_account_reference_number": obj.get("digital_account_reference_number"),
            "funding_source": obj.get("funding_source"),
            "id": obj.get("id"),
            "interchange_rate_designator": obj.get("interchange_rate_designator"),
            "location": obj.get("location"),
            "original_status": obj.get("original_status"),
            "participant": Participant117.from_dict(obj["participant"]) if obj.get("participant") is not None else None,
            "payment_origination_country": obj.get("payment_origination_country"),
            "payment_type": obj.get("payment_type"),
            "processor_id": obj.get("processor_id"),
            "recipient": Recipient107.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "recipient_account_uri": obj.get("recipient_account_uri"),
            "reconciliation_data": ReconciliationData115.from_dict(obj["reconciliation_data"]) if obj.get("reconciliation_data") is not None else None,
            "resource_type": obj.get("resource_type"),
            "routing_transit_number": obj.get("routing_transit_number"),
            "sender": Sender105.from_dict(obj["sender"]) if obj.get("sender") is not None else None,
            "sender_account_uri": obj.get("sender_account_uri"),
            "status": obj.get("status"),
            "status_timestamp": obj.get("status_timestamp"),
            "transaction_history": TransactionHistory111.from_dict(obj["transaction_history"]) if obj.get("transaction_history") is not None else None,
            "transaction_local_date_time": obj.get("transaction_local_date_time"),
            "transfer_amount": TransferAmount110.from_dict(obj["transfer_amount"]) if obj.get("transfer_amount") is not None else None,
            "transfer_reference": obj.get("transfer_reference")
        })
        return _obj



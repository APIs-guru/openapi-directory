# coding: utf-8

"""
    Send Person to Merchant

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.recipient134 import Recipient134
from openapi_client.models.reconciliation_data142 import ReconciliationData142
from openapi_client.models.sender130 import Sender130
from openapi_client.models.transaction_history138 import TransactionHistory138
from openapi_client.models.transfer_amount137 import TransferAmount137
from typing import Optional, Set
from typing_extensions import Self

class Transfer129(BaseModel):
    """
    Response details
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.")
    created: Optional[StrictStr] = Field(default=None, description="Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SSZ Valid Values- Refer 'Date And Time Formats'")
    device_id: Optional[StrictStr] = Field(default=None, description="The serial number of a device that initiated the transfer.")
    id: Optional[StrictStr] = Field(default=None, description="System generated unique transfer identifier.")
    interchange_rate_designator: Optional[StrictStr] = Field(default=None, description="Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2")
    location: Optional[StrictStr] = Field(default=None, description="Location where the transaction is initiated.")
    original_status: Optional[StrictStr] = Field(default=None, description="Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.")
    payment_type: Optional[StrictStr] = Field(default=None, description="Payment type used for transfer. Value - P2M: Person to Merchant. \\n\\nType: Alphanumeric [A-Z0-9], Maximum Length: 3")
    recipient: Optional[Recipient134] = None
    recipient_account_uri: Optional[StrictStr] = Field(default=None, description="URI describing the recipient account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).")
    reconciliation_data: Optional[ReconciliationData142] = None
    resource_type: Optional[StrictStr] = Field(default=None, description="Type of resource")
    sanction_screening_override: Optional[StrictBool] = Field(default=None, description="Sanction Screening validation override if enabled for partner.")
    sender: Optional[Sender130] = None
    sender_account_uri: Optional[StrictStr] = Field(default=None, description="URI describing the sending account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).")
    statement_descriptor: Optional[StrictStr] = Field(default=None, description="The statement descriptor is the value that will be displayed on the recipient's bank or card statement. It consists of two parts: the prefix and the content. The prefix is a short string typically used to identify the partner. The appended &lt;prefix&gt;*&lt;content&gt; will be displayed on the recipient's statement. Note: While most financial institutions display this information consistently, some may display it incorrectly or not at all.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.")
    status_timestamp: Optional[StrictStr] = Field(default=None, description="Timestamp of when the status was changed to its current value. Details- YYYY-MM-DDTHH:MM:SSZ Valid Values- Refer 'Date And Time Formats'")
    transaction_history: Optional[TransactionHistory138] = None
    transfer_amount: Optional[TransferAmount137] = None
    transfer_reference: Optional[StrictStr] = Field(default=None, description="Unique transaction reference number provided when the Transfer was created.")
    __properties: ClassVar[List[str]] = ["channel", "created", "device_id", "id", "interchange_rate_designator", "location", "original_status", "payment_type", "recipient", "recipient_account_uri", "reconciliation_data", "resource_type", "sanction_screening_override", "sender", "sender_account_uri", "statement_descriptor", "status", "status_timestamp", "transaction_history", "transfer_amount", "transfer_reference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transfer129 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reconciliation_data
        if self.reconciliation_data:
            _dict['reconciliation_data'] = self.reconciliation_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_history
        if self.transaction_history:
            _dict['transaction_history'] = self.transaction_history.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_amount
        if self.transfer_amount:
            _dict['transfer_amount'] = self.transfer_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transfer129 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "created": obj.get("created"),
            "device_id": obj.get("device_id"),
            "id": obj.get("id"),
            "interchange_rate_designator": obj.get("interchange_rate_designator"),
            "location": obj.get("location"),
            "original_status": obj.get("original_status"),
            "payment_type": obj.get("payment_type"),
            "recipient": Recipient134.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "recipient_account_uri": obj.get("recipient_account_uri"),
            "reconciliation_data": ReconciliationData142.from_dict(obj["reconciliation_data"]) if obj.get("reconciliation_data") is not None else None,
            "resource_type": obj.get("resource_type"),
            "sanction_screening_override": obj.get("sanction_screening_override"),
            "sender": Sender130.from_dict(obj["sender"]) if obj.get("sender") is not None else None,
            "sender_account_uri": obj.get("sender_account_uri"),
            "statement_descriptor": obj.get("statement_descriptor"),
            "status": obj.get("status"),
            "status_timestamp": obj.get("status_timestamp"),
            "transaction_history": TransactionHistory138.from_dict(obj["transaction_history"]) if obj.get("transaction_history") is not None else None,
            "transfer_amount": TransferAmount137.from_dict(obj["transfer_amount"]) if obj.get("transfer_amount") is not None else None,
            "transfer_reference": obj.get("transfer_reference")
        })
        return _obj



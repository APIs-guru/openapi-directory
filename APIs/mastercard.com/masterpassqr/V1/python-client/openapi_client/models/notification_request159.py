# coding: utf-8

"""
    Send Person to Merchant

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.recipient161 import Recipient161
from openapi_client.models.transaction_amount160 import TransactionAmount160
from typing import Optional, Set
from typing_extensions import Self

class NotificationRequest159(BaseModel):
    """
    Contains the details of the request message.
    """ # noqa: E501
    additional_message: Optional[StrictStr] = Field(default=None, description="Message a financial institution will associate to the transfer and may display")
    mastercard_assigned_id: Optional[StrictStr] = Field(default=None, description="Mastercard Assigned ID for tiered interchange calculations. Length: 6. Applicable only for P2M and MRF notifications.")
    merchant_category_code: Optional[StrictStr] = Field(default=None, description="Merchant category code")
    payment_facilitator_id: Optional[StrictStr] = Field(default=None, description="Contains the Payment Facilitator ID. Length: 11. Applicable only for P2M and MRF notifications.")
    payment_type: StrictStr = Field(description="P2M: Person to Merchant, ACO: Agent Cash Out")
    recipient: Optional[Recipient161] = None
    recipient_account_uri: StrictStr = Field(description="Recepient Account uri . Only accept format: pan:[16 digit]")
    transaction_amount: Optional[TransactionAmount160] = None
    transfer_status: StrictStr = Field(description="APPROVED or DECLINED")
    __properties: ClassVar[List[str]] = ["additional_message", "mastercard_assigned_id", "merchant_category_code", "payment_facilitator_id", "payment_type", "recipient", "recipient_account_uri", "transaction_amount", "transfer_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationRequest159 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_amount
        if self.transaction_amount:
            _dict['transaction_amount'] = self.transaction_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationRequest159 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_message": obj.get("additional_message"),
            "mastercard_assigned_id": obj.get("mastercard_assigned_id"),
            "merchant_category_code": obj.get("merchant_category_code"),
            "payment_facilitator_id": obj.get("payment_facilitator_id"),
            "payment_type": obj.get("payment_type"),
            "recipient": Recipient161.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "recipient_account_uri": obj.get("recipient_account_uri"),
            "transaction_amount": TransactionAmount160.from_dict(obj["transaction_amount"]) if obj.get("transaction_amount") is not None else None,
            "transfer_status": obj.get("transfer_status")
        })
        return _obj



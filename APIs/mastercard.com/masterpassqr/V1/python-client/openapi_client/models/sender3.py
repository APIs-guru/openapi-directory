# coding: utf-8

"""
    Send Person to Merchant

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: V1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_merchant_data5 import AdditionalMerchantData5
from openapi_client.models.address4 import Address4
from openapi_client.models.token_cryptogram6 import TokenCryptogram6
from typing import Optional, Set
from typing_extensions import Self

class Sender3(BaseModel):
    """
    Information about the sender of the transaction.
    """ # noqa: E501
    additional_merchant_data: Optional[AdditionalMerchantData5] = None
    address: Optional[Address4] = None
    authentication_value: Optional[StrictStr] = Field(default=None, description="List of name/value pairs containing authentication  values. Refer 'Authentication Value URIs'")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the sender. Type: Alphanumeric Special [a-zA-Z0-9\\-@+.*$_], Length: 5-254")
    first_name: StrictStr = Field(description="First name of the sender.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÚÚÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], Length: 1-40")
    last_name: StrictStr = Field(description="Last name of the sender.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÚÚÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], Length: 1-40")
    middle_name: Optional[StrictStr] = Field(default=None, description="Middle name of the sender.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÚÚÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], Length: 1-40")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number of the sender, Country code can be included.   Type: Numeric [0-9], Length: 1-15")
    token_cryptogram: Optional[TokenCryptogram6] = None
    __properties: ClassVar[List[str]] = ["additional_merchant_data", "address", "authentication_value", "email", "first_name", "last_name", "middle_name", "phone", "token_cryptogram"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Sender3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_merchant_data
        if self.additional_merchant_data:
            _dict['additional_merchant_data'] = self.additional_merchant_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_cryptogram
        if self.token_cryptogram:
            _dict['token_cryptogram'] = self.token_cryptogram.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Sender3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_merchant_data": AdditionalMerchantData5.from_dict(obj["additional_merchant_data"]) if obj.get("additional_merchant_data") is not None else None,
            "address": Address4.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "authentication_value": obj.get("authentication_value"),
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "middle_name": obj.get("middle_name"),
            "phone": obj.get("phone"),
            "token_cryptogram": TokenCryptogram6.from_dict(obj["token_cryptogram"]) if obj.get("token_cryptogram") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Locations API

    The Locations API provides access to MasterCard's ATM and Merchant location database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.acceptance import Acceptance
from openapi_client.models.features import Features
from openapi_client.models.location import Location
from openapi_client.models.products import Products
from openapi_client.models.topup import Topup
from typing import Optional, Set
from typing_extensions import Self

class Merchant(BaseModel):
    """
    Merchant
    """ # noqa: E501
    acceptance: Optional[Acceptance] = Field(default=None, alias="Acceptance")
    category: Optional[StrictStr] = Field(default=None, description="Merchant's category.", alias="Category")
    features: Optional[Features] = Field(default=None, alias="Features")
    id: Optional[StrictStr] = Field(default=None, description="Numerical merchant identifier.", alias="Id")
    location: Optional[Location] = Field(default=None, alias="Location")
    merchant_offer_id: Optional[StrictStr] = Field(default=None, description="Merchant's Easy Savings Offer Id", alias="MerchantOfferId")
    name: Optional[StrictStr] = Field(default=None, description="Name of the merchant", alias="Name")
    phone_number: Optional[StrictStr] = Field(default=None, description="Merchant's phone number", alias="PhoneNumber")
    products: Optional[Products] = Field(default=None, alias="Products")
    topup: Optional[Topup] = Field(default=None, alias="Topup")
    website_url: Optional[StrictStr] = Field(default=None, description="Merchant's website URL address.", alias="WebsiteUrl")
    __properties: ClassVar[List[str]] = ["Acceptance", "Category", "Features", "Id", "Location", "MerchantOfferId", "Name", "PhoneNumber", "Products", "Topup", "WebsiteUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Merchant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acceptance
        if self.acceptance:
            _dict['Acceptance'] = self.acceptance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict['Features'] = self.features.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['Location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of products
        if self.products:
            _dict['Products'] = self.products.to_dict()
        # override the default output from pydantic by calling `to_dict()` of topup
        if self.topup:
            _dict['Topup'] = self.topup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Merchant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Acceptance": Acceptance.from_dict(obj["Acceptance"]) if obj.get("Acceptance") is not None else None,
            "Category": obj.get("Category"),
            "Features": Features.from_dict(obj["Features"]) if obj.get("Features") is not None else None,
            "Id": obj.get("Id"),
            "Location": Location.from_dict(obj["Location"]) if obj.get("Location") is not None else None,
            "MerchantOfferId": obj.get("MerchantOfferId"),
            "Name": obj.get("Name"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "Products": Products.from_dict(obj["Products"]) if obj.get("Products") is not None else None,
            "Topup": Topup.from_dict(obj["Topup"]) if obj.get("Topup") is not None else None,
            "WebsiteUrl": obj.get("WebsiteUrl")
        })
        return _obj



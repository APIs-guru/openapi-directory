# coding: utf-8

"""
    Locations API

    The Locations API provides access to MasterCard's ATM and Merchant location database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.location import Location
from typing import Optional, Set
from typing_extensions import Self

class Atm(BaseModel):
    """
    Atm
    """ # noqa: E501
    access_fees: Optional[StrictStr] = Field(default=None, description="This value indicates under what conditions access fees are charged. Options are UNKNOWN, DOMESTIC, INTERNATIONAL, DOMESTIC_AND_INTERNATIONAL, NO_FEE.", alias="AccessFees")
    availability: Optional[StrictStr] = Field(default=None, description="This value indicates the availability hours of the ATM. Options are UNKNOWN, ALWAYS_AVAILABLE, BUSINESS_HOURS, IRREGULAR_HOURS.", alias="Availability")
    camera: Optional[StrictStr] = Field(default=None, description="This value indicates whether or not a security camera is present or near ATM. Options are UNKNOWN, YES, NO.", alias="Camera")
    handicap_accessible: Optional[StrictStr] = Field(default=None, description="This value indicates whether or not the ATM is accessible by wheelchair. Options are UNKNOWN, YES, NO.", alias="HandicapAccessible")
    international_maestro_accepted: Optional[StrictInt] = Field(default=None, description="This field will provide ATM Terminals which can still process Maestro transactions but are not yet EMV chip reader enabled. Information available only for USA and Argentina till October 2014. 1=Yes.", alias="InternationalMaestroAccepted")
    location: Optional[Location] = Field(default=None, alias="Location")
    owner: Optional[StrictStr] = Field(default=None, description="This is the DBA name of the financial institution affiliate or independent service organization.", alias="Owner")
    shared_deposit: Optional[StrictStr] = Field(default=None, description="This value indicates whether or not the ATM participates in the MasterCard Shared Deposit network. Options are YES or NO.", alias="SharedDeposit")
    sponsor: Optional[StrictStr] = Field(default=None, description="This is the legal or business name of the entity that sponsors the owner of the ATM into the MasterCard network.", alias="Sponsor")
    support_emv: Optional[StrictInt] = Field(default=None, description="This indicates whether the ATM has the ability to read chip cards or not. Options are 1 = Yes 2 = No or Empty = Unknown.", alias="SupportEMV")
    surcharge_free_alliance: Optional[StrictStr] = Field(default=None, description="This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are YES or NO.", alias="SurchargeFreeAlliance")
    surcharge_free_alliance_network: Optional[StrictStr] = Field(default=None, description="This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are DOES_NOT_PARTICIPATE_IN_SFA, ALLPOINT_PREPAID, MONEYPASS_DEBIT, and ALL_SURCHARGE_FREE.", alias="SurchargeFreeAllianceNetwork")
    __properties: ClassVar[List[str]] = ["AccessFees", "Availability", "Camera", "HandicapAccessible", "InternationalMaestroAccepted", "Location", "Owner", "SharedDeposit", "Sponsor", "SupportEMV", "SurchargeFreeAlliance", "SurchargeFreeAllianceNetwork"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Atm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['Location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Atm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccessFees": obj.get("AccessFees"),
            "Availability": obj.get("Availability"),
            "Camera": obj.get("Camera"),
            "HandicapAccessible": obj.get("HandicapAccessible"),
            "InternationalMaestroAccepted": obj.get("InternationalMaestroAccepted"),
            "Location": Location.from_dict(obj["Location"]) if obj.get("Location") is not None else None,
            "Owner": obj.get("Owner"),
            "SharedDeposit": obj.get("SharedDeposit"),
            "Sponsor": obj.get("Sponsor"),
            "SupportEMV": obj.get("SupportEMV"),
            "SurchargeFreeAlliance": obj.get("SurchargeFreeAlliance"),
            "SurchargeFreeAllianceNetwork": obj.get("SurchargeFreeAllianceNetwork")
        })
        return _obj



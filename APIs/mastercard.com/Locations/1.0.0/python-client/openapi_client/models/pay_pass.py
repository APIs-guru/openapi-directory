# coding: utf-8

"""
    Locations API

    The Locations API provides access to MasterCard's ATM and Merchant location database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PayPass(BaseModel):
    """
    PayPass
    """ # noqa: E501
    concession: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the concession area is equipped with a PayPass card reader.", alias="Concession")
    drive_thru: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the drive thru is equipped with a PayPass card reader.", alias="DriveThru")
    fuel_pump: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the fuel pump is equipped with a PayPass card reader.", alias="FuelPump")
    pharmacy: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the pharmacy is equipped with a PayPass card reader.", alias="Pharmacy")
    register: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the register is equipped with a PayPass card reader.", alias="Register")
    ticketing: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the ticketing area is equipped with a PayPass card reader.", alias="Ticketing")
    toll_booth: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the toll booth is equipped with a PayPass card reader.", alias="TollBooth")
    vending_machine: Optional[StrictBool] = Field(default=None, description="Boolean value which indicates if the vending machine is equipped with a PayPass card reader.", alias="VendingMachine")
    __properties: ClassVar[List[str]] = ["Concession", "DriveThru", "FuelPump", "Pharmacy", "Register", "Ticketing", "TollBooth", "VendingMachine"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayPass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayPass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Concession": obj.get("Concession"),
            "DriveThru": obj.get("DriveThru"),
            "FuelPump": obj.get("FuelPump"),
            "Pharmacy": obj.get("Pharmacy"),
            "Register": obj.get("Register"),
            "Ticketing": obj.get("Ticketing"),
            "TollBooth": obj.get("TollBooth"),
            "VendingMachine": obj.get("VendingMachine")
        })
        return _obj



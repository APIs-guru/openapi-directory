# coding: utf-8

"""
    Locations API

    The Locations API provides access to MasterCard's ATM and Merchant location database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.merchants_response import MerchantsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MerchantLocationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def merchants_v1_merchant_get(
        self,
        details: Annotated[StrictStr, Field(description="Type of merchant location. Options are \"acceptance.paypass\" \"topup.repower\" \"products.prepaidtravelcard\" \"offers.easysavings\" and \"features.cashback\". Cash Back is currently only available in the US.")],
        page_offset: Annotated[StrictInt, Field(description="Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests.")],
        page_length: Annotated[StrictInt, Field(description="Maximum number of items to retrieve within the current \"page\" of results.")],
        category: Annotated[Optional[StrictStr], Field(description="Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \"acceptance.paypass\" or \"features.cashback\".")] = None,
        address_line1: Annotated[Optional[StrictStr], Field(description="Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.")] = None,
        address_line2: Annotated[Optional[StrictStr], Field(description="Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        country_subdivision: Annotated[Optional[StrictStr], Field(description="State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of a merchant location.  If latitude is provided longitude must also be provided.")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of a merchant location.  If longitude is provided latitude must also be provided.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.")] = None,
        radius: Annotated[Optional[StrictInt], Field(description="This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.")] = None,
        offer_merchant_id: Annotated[Optional[StrictStr], Field(description="Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MerchantsResponse:
        """Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 

        Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 

        :param details: Type of merchant location. Options are \"acceptance.paypass\" \"topup.repower\" \"products.prepaidtravelcard\" \"offers.easysavings\" and \"features.cashback\". Cash Back is currently only available in the US. (required)
        :type details: str
        :param page_offset: Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests. (required)
        :type page_offset: int
        :param page_length: Maximum number of items to retrieve within the current \"page\" of results. (required)
        :type page_length: int
        :param category: Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \"acceptance.paypass\" or \"features.cashback\".
        :type category: str
        :param address_line1: Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.
        :type address_line1: str
        :param address_line2: Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.
        :type address_line2: str
        :param city: Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type city: str
        :param country_subdivision: State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type country_subdivision: str
        :param postal_code: Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type postal_code: str
        :param country: Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.
        :type country: str
        :param latitude: Latitude of a merchant location.  If latitude is provided longitude must also be provided.
        :type latitude: float
        :param longitude: Longitude of a merchant location.  If longitude is provided latitude must also be provided.
        :type longitude: float
        :param distance_unit: Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.
        :type distance_unit: str
        :param radius: This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.
        :type radius: int
        :param offer_merchant_id: Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.
        :type offer_merchant_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._merchants_v1_merchant_get_serialize(
            details=details,
            page_offset=page_offset,
            page_length=page_length,
            category=category,
            address_line1=address_line1,
            address_line2=address_line2,
            city=city,
            country_subdivision=country_subdivision,
            postal_code=postal_code,
            country=country,
            latitude=latitude,
            longitude=longitude,
            distance_unit=distance_unit,
            radius=radius,
            offer_merchant_id=offer_merchant_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MerchantsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def merchants_v1_merchant_get_with_http_info(
        self,
        details: Annotated[StrictStr, Field(description="Type of merchant location. Options are \"acceptance.paypass\" \"topup.repower\" \"products.prepaidtravelcard\" \"offers.easysavings\" and \"features.cashback\". Cash Back is currently only available in the US.")],
        page_offset: Annotated[StrictInt, Field(description="Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests.")],
        page_length: Annotated[StrictInt, Field(description="Maximum number of items to retrieve within the current \"page\" of results.")],
        category: Annotated[Optional[StrictStr], Field(description="Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \"acceptance.paypass\" or \"features.cashback\".")] = None,
        address_line1: Annotated[Optional[StrictStr], Field(description="Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.")] = None,
        address_line2: Annotated[Optional[StrictStr], Field(description="Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        country_subdivision: Annotated[Optional[StrictStr], Field(description="State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of a merchant location.  If latitude is provided longitude must also be provided.")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of a merchant location.  If longitude is provided latitude must also be provided.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.")] = None,
        radius: Annotated[Optional[StrictInt], Field(description="This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.")] = None,
        offer_merchant_id: Annotated[Optional[StrictStr], Field(description="Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MerchantsResponse]:
        """Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 

        Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 

        :param details: Type of merchant location. Options are \"acceptance.paypass\" \"topup.repower\" \"products.prepaidtravelcard\" \"offers.easysavings\" and \"features.cashback\". Cash Back is currently only available in the US. (required)
        :type details: str
        :param page_offset: Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests. (required)
        :type page_offset: int
        :param page_length: Maximum number of items to retrieve within the current \"page\" of results. (required)
        :type page_length: int
        :param category: Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \"acceptance.paypass\" or \"features.cashback\".
        :type category: str
        :param address_line1: Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.
        :type address_line1: str
        :param address_line2: Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.
        :type address_line2: str
        :param city: Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type city: str
        :param country_subdivision: State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type country_subdivision: str
        :param postal_code: Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type postal_code: str
        :param country: Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.
        :type country: str
        :param latitude: Latitude of a merchant location.  If latitude is provided longitude must also be provided.
        :type latitude: float
        :param longitude: Longitude of a merchant location.  If longitude is provided latitude must also be provided.
        :type longitude: float
        :param distance_unit: Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.
        :type distance_unit: str
        :param radius: This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.
        :type radius: int
        :param offer_merchant_id: Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.
        :type offer_merchant_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._merchants_v1_merchant_get_serialize(
            details=details,
            page_offset=page_offset,
            page_length=page_length,
            category=category,
            address_line1=address_line1,
            address_line2=address_line2,
            city=city,
            country_subdivision=country_subdivision,
            postal_code=postal_code,
            country=country,
            latitude=latitude,
            longitude=longitude,
            distance_unit=distance_unit,
            radius=radius,
            offer_merchant_id=offer_merchant_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MerchantsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def merchants_v1_merchant_get_without_preload_content(
        self,
        details: Annotated[StrictStr, Field(description="Type of merchant location. Options are \"acceptance.paypass\" \"topup.repower\" \"products.prepaidtravelcard\" \"offers.easysavings\" and \"features.cashback\". Cash Back is currently only available in the US.")],
        page_offset: Annotated[StrictInt, Field(description="Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests.")],
        page_length: Annotated[StrictInt, Field(description="Maximum number of items to retrieve within the current \"page\" of results.")],
        category: Annotated[Optional[StrictStr], Field(description="Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \"acceptance.paypass\" or \"features.cashback\".")] = None,
        address_line1: Annotated[Optional[StrictStr], Field(description="Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.")] = None,
        address_line2: Annotated[Optional[StrictStr], Field(description="Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        country_subdivision: Annotated[Optional[StrictStr], Field(description="State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.")] = None,
        country: Annotated[Optional[StrictStr], Field(description="Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.")] = None,
        latitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Latitude of a merchant location.  If latitude is provided longitude must also be provided.")] = None,
        longitude: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Longitude of a merchant location.  If longitude is provided latitude must also be provided.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.")] = None,
        radius: Annotated[Optional[StrictInt], Field(description="This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.")] = None,
        offer_merchant_id: Annotated[Optional[StrictStr], Field(description="Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 

        Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 

        :param details: Type of merchant location. Options are \"acceptance.paypass\" \"topup.repower\" \"products.prepaidtravelcard\" \"offers.easysavings\" and \"features.cashback\". Cash Back is currently only available in the US. (required)
        :type details: str
        :param page_offset: Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests. (required)
        :type page_offset: int
        :param page_length: Maximum number of items to retrieve within the current \"page\" of results. (required)
        :type page_length: int
        :param category: Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \"acceptance.paypass\" or \"features.cashback\".
        :type category: str
        :param address_line1: Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.
        :type address_line1: str
        :param address_line2: Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.
        :type address_line2: str
        :param city: Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type city: str
        :param country_subdivision: State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type country_subdivision: str
        :param postal_code: Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.
        :type postal_code: str
        :param country: Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.
        :type country: str
        :param latitude: Latitude of a merchant location.  If latitude is provided longitude must also be provided.
        :type latitude: float
        :param longitude: Longitude of a merchant location.  If longitude is provided latitude must also be provided.
        :type longitude: float
        :param distance_unit: Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.
        :type distance_unit: str
        :param radius: This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.
        :type radius: int
        :param offer_merchant_id: Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.
        :type offer_merchant_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._merchants_v1_merchant_get_serialize(
            details=details,
            page_offset=page_offset,
            page_length=page_length,
            category=category,
            address_line1=address_line1,
            address_line2=address_line2,
            city=city,
            country_subdivision=country_subdivision,
            postal_code=postal_code,
            country=country,
            latitude=latitude,
            longitude=longitude,
            distance_unit=distance_unit,
            radius=radius,
            offer_merchant_id=offer_merchant_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MerchantsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _merchants_v1_merchant_get_serialize(
        self,
        details,
        page_offset,
        page_length,
        category,
        address_line1,
        address_line2,
        city,
        country_subdivision,
        postal_code,
        country,
        latitude,
        longitude,
        distance_unit,
        radius,
        offer_merchant_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if details is not None:
            
            _query_params.append(('Details', details))
            
        if page_offset is not None:
            
            _query_params.append(('PageOffset', page_offset))
            
        if page_length is not None:
            
            _query_params.append(('PageLength', page_length))
            
        if category is not None:
            
            _query_params.append(('Category', category))
            
        if address_line1 is not None:
            
            _query_params.append(('AddressLine1', address_line1))
            
        if address_line2 is not None:
            
            _query_params.append(('AddressLine2', address_line2))
            
        if city is not None:
            
            _query_params.append(('City', city))
            
        if country_subdivision is not None:
            
            _query_params.append(('CountrySubdivision', country_subdivision))
            
        if postal_code is not None:
            
            _query_params.append(('PostalCode', postal_code))
            
        if country is not None:
            
            _query_params.append(('Country', country))
            
        if latitude is not None:
            
            _query_params.append(('Latitude', latitude))
            
        if longitude is not None:
            
            _query_params.append(('Longitude', longitude))
            
        if distance_unit is not None:
            
            _query_params.append(('DistanceUnit', distance_unit))
            
        if radius is not None:
            
            _query_params.append(('Radius', radius))
            
        if offer_merchant_id is not None:
            
            _query_params.append(('OfferMerchantID', offer_merchant_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/merchants/v1/merchant',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



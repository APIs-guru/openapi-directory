# coding: utf-8

"""
    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management

    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.

    The version of the OpenAPI document: 2.1.1
    Contact: cti_support@etsi.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.interface_type import InterfaceType
from openapi_client.models.tunnel_info import TunnelInfo
from typing import Optional, Set
from typing_extensions import Self

class InterfaceDescriptor(BaseModel):
    """
    InterfaceDescriptor
    """ # noqa: E501
    dst_ip_address: Optional[StrictStr] = Field(default=None, description="If the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.", alias="dstIPAddress")
    dst_mac_address: Optional[StrictStr] = Field(default=None, description="If the interface type is MAC, the destination address identifies the MAC address of the destination. Only used for dstInterface.", alias="dstMACAddress")
    interface_type: InterfaceType = Field(alias="interfaceType")
    src_mac_address: Optional[StrictStr] = Field(default=None, description="If the interface type is MAC, the source address identifies the MAC address of the interface.", alias="srcMACAddress")
    tunnel_info: Optional[TunnelInfo] = Field(default=None, alias="tunnelInfo")
    __properties: ClassVar[List[str]] = ["dstIPAddress", "dstMACAddress", "interfaceType", "srcMACAddress", "tunnelInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tunnel_info
        if self.tunnel_info:
            _dict['tunnelInfo'] = self.tunnel_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dstIPAddress": obj.get("dstIPAddress"),
            "dstMACAddress": obj.get("dstMACAddress"),
            "interfaceType": obj.get("interfaceType"),
            "srcMACAddress": obj.get("srcMACAddress"),
            "tunnelInfo": TunnelInfo.from_dict(obj["tunnelInfo"]) if obj.get("tunnelInfo") is not None else None
        })
        return _obj



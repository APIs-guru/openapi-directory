# coding: utf-8

"""
    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management

    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.

    The version of the OpenAPI document: 2.1.1
    Contact: cti_support@etsi.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.transport_dependency import TransportDependency
from typing import Optional, Set
from typing_extensions import Self

class ServiceDependency(BaseModel):
    """
    ServiceDependency
    """ # noqa: E501
    requested_permissions: Optional[Annotated[List[StrictStr], Field(min_length=0)]] = Field(default=None, description="Requested permissions regarding the access of the application to the service. See clause 8.2 of ETSI GS MEC 009 [4]. The format of this attribute is left for the data model design stage.", alias="requestedPermissions")
    ser_category: Optional[Any] = Field(default=None, description="See MEC011", alias="serCategory")
    ser_name: StrictStr = Field(description="The name of the service, for example, RNIS, LocationService, etc.", alias="serName")
    ser_transport_dependencies: Optional[Annotated[List[TransportDependency], Field(min_length=0)]] = Field(default=None, description="Indicates transport and serialization format dependencies of consuming the service. Defaults to REST + JSON if absent. See note.", alias="serTransportDependencies")
    version: StrictStr = Field(description="The version of the service.")
    __properties: ClassVar[List[str]] = ["requestedPermissions", "serCategory", "serName", "serTransportDependencies", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceDependency from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ser_transport_dependencies (list)
        _items = []
        if self.ser_transport_dependencies:
            for _item_ser_transport_dependencies in self.ser_transport_dependencies:
                if _item_ser_transport_dependencies:
                    _items.append(_item_ser_transport_dependencies.to_dict())
            _dict['serTransportDependencies'] = _items
        # set to None if ser_category (nullable) is None
        # and model_fields_set contains the field
        if self.ser_category is None and "ser_category" in self.model_fields_set:
            _dict['serCategory'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceDependency from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestedPermissions": obj.get("requestedPermissions"),
            "serCategory": obj.get("serCategory"),
            "serName": obj.get("serName"),
            "serTransportDependencies": [TransportDependency.from_dict(_item) for _item in obj["serTransportDependencies"]] if obj.get("serTransportDependencies") is not None else None,
            "version": obj.get("version")
        })
        return _obj



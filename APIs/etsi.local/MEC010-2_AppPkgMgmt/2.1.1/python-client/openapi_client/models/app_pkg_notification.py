# coding: utf-8

"""
    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management

    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.

    The version of the OpenAPI document: 2.1.1
    Contact: cti_support@etsi.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from openapi_client.models.app_pkg_notification_links import AppPkgNotificationLinks
from openapi_client.models.app_pkg_notification_type import AppPkgNotificationType
from openapi_client.models.time_stamp import TimeStamp
from typing import Optional, Set
from typing_extensions import Self

class AppPkgNotification(BaseModel):
    """
    'This data type represents an application package management notification for informing the subscribers about onboarding application package resources. The notification is triggered when a new application package is onboarded'
    """ # noqa: E501
    links: AppPkgNotificationLinks = Field(alias="_links")
    app_did: StrictStr = Field(description="Identifier of this MEC application descriptor. This attribute shall be globally unique.", alias="appDId")
    app_pkg_id: StrictStr = Field(description="Identifier of the onboarded application package.", alias="appPkgId")
    id: StrictStr = Field(description="''")
    notification_type: AppPkgNotificationType = Field(alias="notificationType")
    operational_state: StrictStr = Field(alias="operationalState")
    subscription_id: StrictStr = Field(description="Identifier of the subscription related to this notification.", alias="subscriptionId")
    time_stamp: TimeStamp = Field(alias="timeStamp")
    __properties: ClassVar[List[str]] = ["_links", "appDId", "appPkgId", "id", "notificationType", "operationalState", "subscriptionId", "timeStamp"]

    @field_validator('operational_state')
    def operational_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DISABLED', 'ENABLED']):
            raise ValueError("must be one of enum values ('DISABLED', 'ENABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppPkgNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_stamp
        if self.time_stamp:
            _dict['timeStamp'] = self.time_stamp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppPkgNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": AppPkgNotificationLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "appDId": obj.get("appDId"),
            "appPkgId": obj.get("appPkgId"),
            "id": obj.get("id"),
            "notificationType": obj.get("notificationType"),
            "operationalState": obj.get("operationalState"),
            "subscriptionId": obj.get("subscriptionId"),
            "timeStamp": TimeStamp.from_dict(obj["timeStamp"]) if obj.get("timeStamp") is not None else None
        })
        return _obj



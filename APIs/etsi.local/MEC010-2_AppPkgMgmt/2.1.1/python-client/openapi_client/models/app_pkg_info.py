# coding: utf-8

"""
    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management

    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.

    The version of the OpenAPI document: 2.1.1
    Contact: cti_support@etsi.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_pkg_info_links import AppPkgInfoLinks
from openapi_client.models.app_pkg_operational_state import AppPkgOperationalState
from openapi_client.models.checksum import Checksum
from openapi_client.models.onboarding_state import OnboardingState
from openapi_client.models.usage_state import UsageState
from typing import Optional, Set
from typing_extensions import Self

class AppPkgInfo(BaseModel):
    """
    'The data type AppPkgInfo represents the parameters for an application package resource'
    """ # noqa: E501
    links: AppPkgInfoLinks = Field(alias="_links")
    additional_artifacts: Optional[Any] = Field(default=None, description="Additional information of application package artifacts that are not application software images. Type is TBD", alias="additionalArtifacts")
    app_did: StrictStr = Field(description="Identifier of this MEC application descriptor. This attribute shall be globally unique.", alias="appDId")
    app_d_version: StrictStr = Field(description="Identifies the version of the application descriptor.", alias="appDVersion")
    app_name: StrictStr = Field(description="Name to identify the MEC application.", alias="appName")
    app_provider: Optional[StrictStr] = Field(default=None, description="Provider of the application and of the AppD.", alias="appProvider")
    app_software_version: StrictStr = Field(description="Software version of the application. This is updated when there is any change to the software in the onboarded application package.", alias="appSoftwareVersion")
    checksum: Checksum
    id: StrictStr = Field(description="Identifier of the onboarded application package.")
    onboarding_state: OnboardingState = Field(alias="onboardingState")
    operational_state: AppPkgOperationalState = Field(alias="operationalState")
    software_images: Optional[Any] = Field(description="Information of application software image in application package. Type is TBD", alias="softwareImages")
    usage_state: UsageState = Field(alias="usageState")
    user_defined_data: Optional[Dict[str, Any]] = Field(default=None, description="'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'", alias="userDefinedData")
    __properties: ClassVar[List[str]] = ["_links", "additionalArtifacts", "appDId", "appDVersion", "appName", "appProvider", "appSoftwareVersion", "checksum", "id", "onboardingState", "operationalState", "softwareImages", "usageState", "userDefinedData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppPkgInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of checksum
        if self.checksum:
            _dict['checksum'] = self.checksum.to_dict()
        # set to None if additional_artifacts (nullable) is None
        # and model_fields_set contains the field
        if self.additional_artifacts is None and "additional_artifacts" in self.model_fields_set:
            _dict['additionalArtifacts'] = None

        # set to None if software_images (nullable) is None
        # and model_fields_set contains the field
        if self.software_images is None and "software_images" in self.model_fields_set:
            _dict['softwareImages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppPkgInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": AppPkgInfoLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "additionalArtifacts": obj.get("additionalArtifacts"),
            "appDId": obj.get("appDId"),
            "appDVersion": obj.get("appDVersion"),
            "appName": obj.get("appName"),
            "appProvider": obj.get("appProvider"),
            "appSoftwareVersion": obj.get("appSoftwareVersion"),
            "checksum": Checksum.from_dict(obj["checksum"]) if obj.get("checksum") is not None else None,
            "id": obj.get("id"),
            "onboardingState": obj.get("onboardingState"),
            "operationalState": obj.get("operationalState"),
            "softwareImages": obj.get("softwareImages"),
            "usageState": obj.get("usageState"),
            "userDefinedData": obj.get("userDefinedData")
        })
        return _obj



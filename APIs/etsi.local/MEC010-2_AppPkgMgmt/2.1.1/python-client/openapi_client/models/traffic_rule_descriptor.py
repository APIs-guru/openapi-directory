# coding: utf-8

"""
    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management

    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.

    The version of the OpenAPI document: 2.1.1
    Contact: cti_support@etsi.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.action import Action
from openapi_client.models.filter_type import FilterType
from openapi_client.models.interface_descriptor import InterfaceDescriptor
from openapi_client.models.traffic_filter import TrafficFilter
from typing import Optional, Set
from typing_extensions import Self

class TrafficRuleDescriptor(BaseModel):
    """
    TrafficRuleDescriptor
    """ # noqa: E501
    action: Action
    dst_interface: Optional[Annotated[List[InterfaceDescriptor], Field(min_length=0, max_length=2)]] = Field(default=None, alias="dstInterface")
    filter_type: FilterType = Field(alias="filterType")
    priority: StrictInt = Field(description="Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.")
    traffic_filter: Annotated[List[TrafficFilter], Field(min_length=1)] = Field(description="The filter used to identify specific flow/packets that need to be handled by the MEC host.", alias="trafficFilter")
    traffic_rule_id: StrictStr = Field(description="Identifies the traffic rule.", alias="trafficRuleId")
    __properties: ClassVar[List[str]] = ["action", "dstInterface", "filterType", "priority", "trafficFilter", "trafficRuleId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrafficRuleDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dst_interface (list)
        _items = []
        if self.dst_interface:
            for _item_dst_interface in self.dst_interface:
                if _item_dst_interface:
                    _items.append(_item_dst_interface.to_dict())
            _dict['dstInterface'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in traffic_filter (list)
        _items = []
        if self.traffic_filter:
            for _item_traffic_filter in self.traffic_filter:
                if _item_traffic_filter:
                    _items.append(_item_traffic_filter.to_dict())
            _dict['trafficFilter'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrafficRuleDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "dstInterface": [InterfaceDescriptor.from_dict(_item) for _item in obj["dstInterface"]] if obj.get("dstInterface") is not None else None,
            "filterType": obj.get("filterType"),
            "priority": obj.get("priority"),
            "trafficFilter": [TrafficFilter.from_dict(_item) for _item in obj["trafficFilter"]] if obj.get("trafficFilter") is not None else None,
            "trafficRuleId": obj.get("trafficRuleId")
        })
        return _obj



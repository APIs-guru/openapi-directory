# coding: utf-8

"""
    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management

    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.

    The version of the OpenAPI document: 2.1.1
    Contact: cti_support@etsi.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.traffic_rule_descriptor import TrafficRuleDescriptor

class TestTrafficRuleDescriptor(unittest.TestCase):
    """TrafficRuleDescriptor unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TrafficRuleDescriptor:
        """Test TrafficRuleDescriptor
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TrafficRuleDescriptor`
        """
        model = TrafficRuleDescriptor()
        if include_optional:
            return TrafficRuleDescriptor(
                action = 'DROP',
                dst_interface = [
                    openapi_client.models.interface_descriptor.InterfaceDescriptor(
                        dst_ip_address = '', 
                        dst_mac_address = '', 
                        interface_type = 'TUNNEL', 
                        src_mac_address = '', 
                        tunnel_info = openapi_client.models.tunnel_info.TunnelInfo(
                            tunnel_dst_address = '', 
                            tunnel_specific_data = '', 
                            tunnel_src_address = '', 
                            tunnel_type = 'GTP-U', ), )
                    ],
                filter_type = 'FLOW',
                priority = 56,
                traffic_filter = [
                    openapi_client.models.traffic_filter.TrafficFilter(
                        d_scp = 56, 
                        dst_address = [
                            ''
                            ], 
                        dst_port = [
                            ''
                            ], 
                        dst_tunnel_port = [
                            ''
                            ], 
                        protocol = [
                            ''
                            ], 
                        q_ci = 56, 
                        src_address = [
                            ''
                            ], 
                        src_port = [
                            ''
                            ], 
                        src_tunnel_address = [
                            ''
                            ], 
                        src_tunnel_port = [
                            ''
                            ], 
                        t_c = 56, 
                        tag = [
                            ''
                            ], 
                        tgt_tunnel_address = [
                            ''
                            ], )
                    ],
                traffic_rule_id = ''
            )
        else:
            return TrafficRuleDescriptor(
                action = 'DROP',
                filter_type = 'FLOW',
                priority = 56,
                traffic_filter = [
                    openapi_client.models.traffic_filter.TrafficFilter(
                        d_scp = 56, 
                        dst_address = [
                            ''
                            ], 
                        dst_port = [
                            ''
                            ], 
                        dst_tunnel_port = [
                            ''
                            ], 
                        protocol = [
                            ''
                            ], 
                        q_ci = 56, 
                        src_address = [
                            ''
                            ], 
                        src_port = [
                            ''
                            ], 
                        src_tunnel_address = [
                            ''
                            ], 
                        src_tunnel_port = [
                            ''
                            ], 
                        t_c = 56, 
                        tag = [
                            ''
                            ], 
                        tgt_tunnel_address = [
                            ''
                            ], )
                    ],
                traffic_rule_id = '',
        )
        """

    def testTrafficRuleDescriptor(self):
        """Test TrafficRuleDescriptor"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management

    ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.

    The version of the OpenAPI document: 2.1.1
    Contact: cti_support@etsi.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.app_d import AppD

class TestAppD(unittest.TestCase):
    """AppD unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppD:
        """Test AppD
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppD`
        """
        model = AppD()
        if include_optional:
            return AppD(
                app_did = '',
                app_dns_rule = [
                    openapi_client.models.dns_rule_descriptor.DNSRuleDescriptor(
                        dns_rule_id = '', 
                        domain_name = '', 
                        ip_address = '', 
                        ip_address_type = 'IP_V6', 
                        ttl = 56, )
                    ],
                app_d_version = '',
                app_description = '',
                app_ext_cpd = [
                    openapi_client.models.app_external_cpd.AppExternalCpd(
                        inherited_attributes = openapi_client.models.inherited_attributes.inherited_attributes(), 
                        virtual_network_interface_requirements = [
                            ''
                            ], )
                    ],
                app_feature_optional = [
                    openapi_client.models.feature_dependency.FeatureDependency(
                        feature_name = '', 
                        version = '', )
                    ],
                app_feature_required = [
                    openapi_client.models.feature_dependency.FeatureDependency(
                        feature_name = '', 
                        version = '', )
                    ],
                app_info_name = '',
                app_latency = openapi_client.models.latency_descriptor.LatencyDescriptor(
                    max_latency = 56, ),
                app_name = '',
                app_provider = '',
                app_service_optional = [
                    openapi_client.models.service_dependency.ServiceDependency(
                        requested_permissions = [
                            ''
                            ], 
                        ser_category = null, 
                        ser_name = '', 
                        ser_transport_dependencies = [
                            openapi_client.models.transport_dependency.TransportDependency(
                                labels = [
                                    ''
                                    ], 
                                serializers = [
                                    ''
                                    ], 
                                transport = openapi_client.models.transport_descriptor.TransportDescriptor(
                                    protocol = '', 
                                    security = null, 
                                    type = '', 
                                    version = '', ), )
                            ], 
                        version = '', )
                    ],
                app_service_produced = [
                    openapi_client.models.service_descriptor.ServiceDescriptor(
                        ser_category = null, 
                        ser_name = '', 
                        transports_supported = openapi_client.models.transports_supported.TransportsSupported(
                            serializers = [
                                ''
                                ], 
                            transport = openapi_client.models.transport_descriptor.TransportDescriptor(
                                protocol = '', 
                                security = null, 
                                type = '', 
                                version = '', ), ), 
                        version = '', )
                    ],
                app_service_required = [
                    openapi_client.models.service_dependency.ServiceDependency(
                        requested_permissions = [
                            ''
                            ], 
                        ser_category = null, 
                        ser_name = '', 
                        ser_transport_dependencies = [
                            openapi_client.models.transport_dependency.TransportDependency(
                                labels = [
                                    ''
                                    ], 
                                serializers = [
                                    ''
                                    ], 
                                transport = openapi_client.models.transport_descriptor.TransportDescriptor(
                                    protocol = '', 
                                    security = null, 
                                    type = '', 
                                    version = '', ), )
                            ], 
                        version = '', )
                    ],
                app_soft_version = '',
                app_traffic_rule = [
                    openapi_client.models.traffic_rule_descriptor.TrafficRuleDescriptor(
                        action = 'DROP', 
                        dst_interface = [
                            openapi_client.models.interface_descriptor.InterfaceDescriptor(
                                dst_ip_address = '', 
                                dst_mac_address = '', 
                                interface_type = 'TUNNEL', 
                                src_mac_address = '', 
                                tunnel_info = openapi_client.models.tunnel_info.TunnelInfo(
                                    tunnel_dst_address = '', 
                                    tunnel_specific_data = '', 
                                    tunnel_src_address = '', 
                                    tunnel_type = 'GTP-U', ), )
                            ], 
                        filter_type = 'FLOW', 
                        priority = 56, 
                        traffic_filter = [
                            openapi_client.models.traffic_filter.TrafficFilter(
                                d_scp = 56, 
                                dst_address = [
                                    ''
                                    ], 
                                dst_port = [
                                    ''
                                    ], 
                                dst_tunnel_port = [
                                    ''
                                    ], 
                                protocol = [
                                    ''
                                    ], 
                                q_ci = 56, 
                                src_address = [
                                    ''
                                    ], 
                                src_port = [
                                    ''
                                    ], 
                                src_tunnel_address = [
                                    ''
                                    ], 
                                src_tunnel_port = [
                                    ''
                                    ], 
                                t_c = 56, 
                                tag = [
                                    ''
                                    ], 
                                tgt_tunnel_address = [
                                    ''
                                    ], )
                            ], 
                        traffic_rule_id = '', )
                    ],
                change_app_instance_state_op_config = '',
                mec_version = [
                    ''
                    ],
                sw_image_descriptor = '',
                terminate_app_instance_op_config = '',
                transport_dependencies = [
                    openapi_client.models.transport_dependency.TransportDependency(
                        labels = [
                            ''
                            ], 
                        serializers = [
                            ''
                            ], 
                        transport = openapi_client.models.transport_descriptor.TransportDescriptor(
                            protocol = '', 
                            security = null, 
                            type = '', 
                            version = '', ), )
                    ],
                virtual_compute_descriptor = '',
                virtual_storage_descriptor = [
                    ''
                    ]
            )
        else:
            return AppD(
                app_did = '',
                app_d_version = '',
                app_description = '',
                app_name = '',
                app_provider = '',
                app_soft_version = '',
                mec_version = [
                    ''
                    ],
                sw_image_descriptor = '',
                virtual_compute_descriptor = '',
        )
        """

    def testAppD(self):
        """Test AppD"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Apicurio Registry API

    Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers (schema and file descriptor) - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Note**: The Apicurio Registry REST API is available from `http://MY-REGISTRY-URL/api`. You must prefix all API operation paths with `/api`, for example, `api/ids/{globalId}`. 

    The version of the OpenAPI document: 1.3.2.Final
    Contact: apicurio@lists.jboss.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.versions_api import VersionsApi


class TestVersionsApi(unittest.TestCase):
    """VersionsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = VersionsApi()

    def tearDown(self) -> None:
        pass

    def test_create_artifact_version(self) -> None:
        """Test case for create_artifact_version

        Create artifact version
        """
        pass

    def test_get_artifact_version(self) -> None:
        """Test case for get_artifact_version

        Get artifact version
        """
        pass

    def test_list_artifact_versions(self) -> None:
        """Test case for list_artifact_versions

        List artifact versions
        """
        pass

    def test_search_versions_0(self) -> None:
        """Test case for search_versions_0

        Search artifact versions
        """
        pass

    def test_update_artifact_version_state(self) -> None:
        """Test case for update_artifact_version_state

        Update artifact version state
        """
        pass


if __name__ == '__main__':
    unittest.main()
